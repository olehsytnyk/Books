<html class="translated-ltr"><head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="Generator" content="Microsoft Word 12 (filtered)">
<title>C# Language Specification</title>

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 2 5 9 0 0 0 0 0 0;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:2 4 5 3 5 2 3 3 2 2;}
@font-face
	{font-family:Latha;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Raavi;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Shruti;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Tunga;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:3 8 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Goudy;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Carta;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Optima;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Oxford;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Bodoni;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tekton;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Univers 55";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:GillSans;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Marigold;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Joanna MT";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Clarendon;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Eurostile;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Albertus MT";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Times;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cooper Black";
	panose-1:2 8 9 4 4 3 11 2 4 4;}
@font-face
	{font-family:Bookman;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Letter Gothic";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Univers 45 Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:ZapfDingbats;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Bodoni Poster";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Palatino;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"GillSans Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Eurostile Bold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Mona Lisa Recut";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Coronet;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Goudy ExtraBold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Clarendon Light";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:AvantGarde;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Univers Extended";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Albertus MT Lt";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Helvetica-Narrow;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Antique Olive Roman";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:LubalinGraph;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Univers 57 Condensed";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"GillSans Condensed";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"GillSans ExtraBold";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Helvetica Condensed";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Antique Olive Compact";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"StempelGaramond Roman";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Eurostile ExtendedTwo";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:NewCenturySchlbk;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Univers 47 CondensedLight";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Copperplate32bc;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Bodoni PosterCompressed";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Copperplate33bc;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:ZapfChancery;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Marlett;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@Batang";
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:BatangChe;
	panose-1:2 3 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:"\@BatangChe";
	panose-1:2 3 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Gungsuh;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:"\@Gungsuh";
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:GungsuhChe;
	panose-1:2 3 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:"\@GungsuhChe";
	panose-1:2 3 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:DaunPenh;
	panose-1:1 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:DokChampa;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Euphemia;
	panose-1:2 11 5 3 4 1 2 2 1 4;}
@font-face
	{font-family:Vani;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@Gulim";
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:GulimChe;
	panose-1:2 11 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:"\@GulimChe";
	panose-1:2 11 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:"\@Dotum";
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:DotumChe;
	panose-1:2 11 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:"\@DotumChe";
	panose-1:2 11 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"Iskoola Pota";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Kalinga;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Kartika;
	panose-1:2 2 5 3 3 4 4 6 2 3;}
@font-face
	{font-family:"Khmer UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Lao UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;}
@font-face
	{font-family:"Malgun Gothic";
	panose-1:2 11 5 3 2 0 0 2 0 4;}
@font-face
	{font-family:"\@Malgun Gothic";
	panose-1:2 11 5 3 2 0 0 2 0 4;}
@font-face
	{font-family:Meiryo;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Meiryo";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Meiryo UI";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Meiryo UI";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Microsoft Himalaya";
	panose-1:1 1 1 0 1 1 1 1 1 1;}
@font-face
	{font-family:"Microsoft JhengHei";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"\@Microsoft JhengHei";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Microsoft YaHei";
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"\@Microsoft YaHei";
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"\@MingLiU";
	panose-1:2 2 5 9 0 0 0 0 0 0;}
@font-face
	{font-family:"\@PMingLiU";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU_HKSCS;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU_HKSCS";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:PMingLiU-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@PMingLiU-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:MingLiU_HKSCS-ExtB;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MingLiU_HKSCS-ExtB";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Mongolian Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"MS PGothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS PGothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"MS UI Gothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS UI Gothic";
	panose-1:2 11 6 0 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"MS PMincho";
	panose-1:2 2 6 0 4 2 5 8 3 4;}
@font-face
	{font-family:"\@MS PMincho";
	panose-1:2 2 6 0 4 2 5 8 3 4;}
@font-face
	{font-family:"MV Boli";
	panose-1:2 0 5 0 3 2 0 9 0 0;}
@font-face
	{font-family:"Microsoft New Tai Lue";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Nyala;
	panose-1:2 0 5 4 7 3 0 2 0 3;}
@font-face
	{font-family:"Microsoft PhagsPa";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Plantagenet Cherokee";
	panose-1:2 2 6 2 7 1 0 0 0 0;}
@font-face
	{font-family:"Segoe Script";
	panose-1:2 11 5 4 2 0 0 0 0 3;}
@font-face
	{font-family:"Segoe UI";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Semibold";
	panose-1:2 11 7 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Light";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Segoe UI Symbol";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:NSimSun;
	panose-1:2 1 6 9 3 1 1 1 1 1;}
@font-face
	{font-family:"\@NSimSun";
	panose-1:2 1 6 9 3 1 1 1 1 1;}
@font-face
	{font-family:SimSun-ExtB;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@SimSun-ExtB";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Microsoft Tai Le";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Shonar Bangla";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Microsoft Yi Baiti";
	panose-1:3 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Microsoft Sans Serif";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Aparajita;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Ebrima;
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gisha;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Kokila;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Leelawadee;
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Microsoft Uighur";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:MoolBoran;
	panose-1:2 11 1 0 1 1 1 1 1 1;}
@font-face
	{font-family:Utsaah;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Vijaya;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Andalus;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Arabic Typesetting";
	panose-1:3 2 4 2 4 4 6 3 2 3;}
@font-face
	{font-family:"Simplified Arabic";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Simplified Arabic Fixed";
	panose-1:2 7 3 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Sakkal Majalla";
	panose-1:2 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Traditional Arabic";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:Aharoni;
	panose-1:2 1 8 3 2 1 4 3 2 3;}
@font-face
	{font-family:David;
	panose-1:2 14 5 2 6 4 1 1 1 1;}
@font-face
	{font-family:FrankRuehl;
	panose-1:2 14 5 3 6 1 1 1 1 1;}
@font-face
	{font-family:"Levenim MT";
	panose-1:2 1 5 2 6 1 1 1 1 1;}
@font-face
	{font-family:Miriam;
	panose-1:2 11 5 2 5 1 1 1 1 1;}
@font-face
	{font-family:"Miriam Fixed";
	panose-1:2 11 5 9 5 1 1 1 1 1;}
@font-face
	{font-family:Narkisim;
	panose-1:2 14 5 2 5 1 1 1 1 1;}
@font-face
	{font-family:Rod;
	panose-1:2 3 5 9 5 1 1 1 1 1;}
@font-face
	{font-family:FangSong;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@FangSong";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@SimHei";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:KaiTi;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@KaiTi";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:AngsanaUPC;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Browallia New";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:BrowalliaUPC;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:CordiaUPC;
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:DilleniaUPC;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:EucrosiaUPC;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:FreesiaUPC;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:IrisUPC;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:JasmineUPC;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:KodchiangUPC;
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:LilyUPC;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:DFKai-SB;
	panose-1:3 0 5 9 0 0 0 0 0 0;}
@font-face
	{font-family:"\@DFKai-SB";
	panose-1:3 0 5 9 0 0 0 0 0 0;}
@font-face
	{font-family:"Lucida Sans Unicode";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Arial Black";
	panose-1:2 11 10 4 2 1 2 2 2 4;}
@font-face
	{font-family:Candara;
	panose-1:2 14 5 2 3 3 3 2 2 4;}
@font-face
	{font-family:"Comic Sans MS";
	panose-1:3 15 7 2 3 3 2 2 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:Constantia;
	panose-1:2 3 6 2 5 3 6 3 3 3;}
@font-face
	{font-family:Corbel;
	panose-1:2 11 5 3 2 2 4 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Medium";
	panose-1:2 11 6 3 2 1 2 2 2 4;}
@font-face
	{font-family:Gabriola;
	panose-1:4 4 6 5 5 16 2 2 13 2;}
@font-face
	{font-family:Georgia;
	panose-1:2 4 5 2 5 4 5 2 3 3;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;}
@font-face
	{font-family:"Segoe Print";
	panose-1:2 0 6 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
@font-face
	{font-family:Webdings;
	panose-1:5 3 1 2 1 5 9 6 7 3;}
@font-face
	{font-family:Haettenschweiler;
	panose-1:2 11 7 6 4 9 2 6 2 4;}
@font-face
	{font-family:"MS Outlook";
	panose-1:5 1 1 0 1 0 0 0 0 0;}
@font-face
	{font-family:"Book Antiqua";
	panose-1:2 4 6 2 5 3 5 3 3 4;}
@font-face
	{font-family:"Century Gothic";
	panose-1:2 11 5 2 2 2 2 2 2 4;}
@font-face
	{font-family:"Bookshelf Symbol 7";
	panose-1:5 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"MS Reference Sans Serif";
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"MS Reference Specialty";
	panose-1:5 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Bradley Hand ITC";
	panose-1:3 7 4 2 5 3 2 3 2 3;}
@font-face
	{font-family:"Freestyle Script";
	panose-1:3 8 4 2 3 2 5 11 4 4;}
@font-face
	{font-family:"French Script MT";
	panose-1:3 2 4 2 4 6 7 4 6 5;}
@font-face
	{font-family:"Juice ITC";
	panose-1:4 4 4 3 4 10 2 2 2 2;}
@font-face
	{font-family:"Kristen ITC";
	panose-1:3 5 5 2 4 2 2 3 2 2;}
@font-face
	{font-family:"Lucida Handwriting";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:Mistral;
	panose-1:3 9 7 2 3 4 7 2 4 3;}
@font-face
	{font-family:Papyrus;
	panose-1:3 7 5 2 6 5 2 3 2 5;}
@font-face
	{font-family:Pristina;
	panose-1:3 6 4 2 4 4 6 8 2 4;}
@font-face
	{font-family:"Tempus Sans ITC";
	panose-1:4 2 4 4 3 13 7 2 2 2;}
@font-face
	{font-family:Garamond;
	panose-1:2 2 4 4 3 3 1 1 8 3;}
@font-face
	{font-family:"Monotype Corsiva";
	panose-1:3 1 1 1 1 2 1 1 1 1;}
@font-face
	{font-family:"Agency FB";
	panose-1:2 11 5 3 2 2 2 2 2 4;}
@font-face
	{font-family:"Arial Rounded MT Bold";
	panose-1:2 15 7 4 3 5 4 3 2 4;}
@font-face
	{font-family:"Blackadder ITC";
	panose-1:4 2 5 5 5 16 7 2 13 2;}
@font-face
	{font-family:"Bodoni MT";
	panose-1:2 7 6 3 8 6 6 2 2 3;}
@font-face
	{font-family:"Bodoni MT Black";
	panose-1:2 7 10 3 8 6 6 2 2 3;}
@font-face
	{font-family:"Bodoni MT Condensed";
	panose-1:2 7 6 6 8 6 6 2 2 3;}
@font-face
	{font-family:"Bookman Old Style";
	panose-1:2 5 6 4 5 5 5 2 2 4;}
@font-face
	{font-family:"Calisto MT";
	panose-1:2 4 6 3 5 5 5 3 3 4;}
@font-face
	{font-family:Castellar;
	panose-1:2 10 4 2 6 4 6 1 3 1;}
@font-face
	{font-family:"Century Schoolbook";
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Copperplate Gothic Bold";
	panose-1:2 14 7 5 2 2 6 2 4 4;}
@font-face
	{font-family:"Copperplate Gothic Light";
	panose-1:2 14 5 7 2 2 6 2 4 4;}
@font-face
	{font-family:"Curlz MT";
	panose-1:4 4 4 4 5 7 2 2 2 2;}
@font-face
	{font-family:"Edwardian Script ITC";
	panose-1:3 3 3 2 4 7 7 13 8 4;}
@font-face
	{font-family:Elephant;
	panose-1:2 2 9 4 9 5 5 2 3 3;}
@font-face
	{font-family:"Engravers MT";
	panose-1:2 9 7 7 8 5 5 2 3 4;}
@font-face
	{font-family:"Eras Bold ITC";
	panose-1:2 11 9 7 3 5 4 2 2 4;}
@font-face
	{font-family:"Eras Demi ITC";
	panose-1:2 11 8 5 3 5 4 2 8 4;}
@font-face
	{font-family:"Eras Light ITC";
	panose-1:2 11 4 2 3 5 4 2 8 4;}
@font-face
	{font-family:"Eras Medium ITC";
	panose-1:2 11 6 2 3 5 4 2 8 4;}
@font-face
	{font-family:"Felix Titling";
	panose-1:4 6 5 5 6 2 2 2 10 4;}
@font-face
	{font-family:Forte;
	panose-1:3 6 9 2 4 5 2 7 2 3;}
@font-face
	{font-family:"Franklin Gothic Book";
	panose-1:2 11 5 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Demi";
	panose-1:2 11 7 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Demi Cond";
	panose-1:2 11 7 6 3 4 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Heavy";
	panose-1:2 11 9 3 2 1 2 2 2 4;}
@font-face
	{font-family:"Franklin Gothic Medium Cond";
	panose-1:2 11 6 6 3 4 2 2 2 4;}
@font-face
	{font-family:Gigi;
	panose-1:4 4 5 4 6 16 7 2 13 2;}
@font-face
	{font-family:"Gill Sans MT";
	panose-1:2 11 5 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans MT Condensed";
	panose-1:2 11 5 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Ultra Bold";
	panose-1:2 11 10 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans Ultra Bold Condensed";
	panose-1:2 11 10 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Gill Sans MT Ext Condensed Bold";
	panose-1:2 11 9 2 2 1 4 2 2 3;}
@font-face
	{font-family:"Gloucester MT Extra Condensed";
	panose-1:2 3 8 8 2 6 1 1 1 1;}
@font-face
	{font-family:"Goudy Old Style";
	panose-1:2 2 5 2 5 3 5 2 3 3;}
@font-face
	{font-family:"Goudy Stout";
	panose-1:2 2 9 4 7 3 11 2 4 1;}
@font-face
	{font-family:"Imprint MT Shadow";
	panose-1:4 2 6 5 6 3 3 3 2 2;}
@font-face
	{font-family:"Lucida Sans";
	panose-1:2 11 6 2 3 5 4 2 2 4;}
@font-face
	{font-family:"Lucida Sans Typewriter";
	panose-1:2 11 5 9 3 5 4 3 2 4;}
@font-face
	{font-family:"Maiandra GD";
	panose-1:2 14 5 2 3 3 8 2 2 4;}
@font-face
	{font-family:"OCR A Extended";
	panose-1:2 1 5 9 2 1 2 1 3 3;}
@font-face
	{font-family:"Palace Script MT";
	panose-1:3 3 3 2 2 6 7 12 11 5;}
@font-face
	{font-family:Perpetua;
	panose-1:2 2 5 2 6 4 1 2 3 3;}
@font-face
	{font-family:"Perpetua Titling MT";
	panose-1:2 2 5 2 6 5 5 2 8 4;}
@font-face
	{font-family:"Rage Italic";
	panose-1:3 7 5 2 4 5 7 7 3 4;}
@font-face
	{font-family:Rockwell;
	panose-1:2 6 6 3 2 2 5 2 4 3;}
@font-face
	{font-family:"Rockwell Condensed";
	panose-1:2 6 6 3 5 4 5 2 1 4;}
@font-face
	{font-family:"Rockwell Extra Bold";
	panose-1:2 6 9 3 4 5 5 2 4 3;}
@font-face
	{font-family:"Script MT Bold";
	panose-1:3 4 6 2 4 6 7 8 9 4;}
@font-face
	{font-family:"Tw Cen MT";
	panose-1:2 11 6 2 2 1 4 2 6 3;}
@font-face
	{font-family:"Tw Cen MT Condensed";
	panose-1:2 11 6 6 2 1 4 2 2 3;}
@font-face
	{font-family:"Tw Cen MT Condensed Extra Bold";
	panose-1:2 11 8 3 2 2 2 2 2 4;}
@font-face
	{font-family:Algerian;
	panose-1:4 2 7 5 4 10 2 6 7 2;}
@font-face
	{font-family:"Baskerville Old Face";
	panose-1:2 2 6 2 8 5 5 2 3 3;}
@font-face
	{font-family:"Bauhaus 93";
	panose-1:4 3 9 5 2 11 2 2 12 2;}
@font-face
	{font-family:"Bell MT";
	panose-1:2 2 5 3 6 3 5 2 3 3;}
@font-face
	{font-family:"Berlin Sans FB";
	panose-1:2 14 6 2 2 5 2 2 3 6;}
@font-face
	{font-family:"Berlin Sans FB Demi";
	panose-1:2 14 8 2 2 5 2 2 3 6;}
@font-face
	{font-family:"Bernard MT Condensed";
	panose-1:2 5 8 6 6 9 5 2 4 4;}
@font-face
	{font-family:"Bodoni MT Poster Compressed";
	panose-1:2 7 7 6 8 6 1 5 2 4;}
@font-face
	{font-family:"Britannic Bold";
	panose-1:2 11 9 3 6 7 3 2 2 4;}
@font-face
	{font-family:Broadway;
	panose-1:4 4 9 5 8 11 2 2 5 2;}
@font-face
	{font-family:"Brush Script MT";
	panose-1:3 6 8 2 4 4 6 7 3 4;}
@font-face
	{font-family:"Californian FB";
	panose-1:2 7 4 3 6 8 11 3 2 4;}
@font-face
	{font-family:Centaur;
	panose-1:2 3 5 4 5 2 5 2 3 4;}
@font-face
	{font-family:Chiller;
	panose-1:4 2 4 4 3 16 7 2 6 2;}
@font-face
	{font-family:"Colonna MT";
	panose-1:4 2 8 5 6 2 2 3 2 3;}
@font-face
	{font-family:"Footlight MT Light";
	panose-1:2 4 6 2 6 3 10 2 3 4;}
@font-face
	{font-family:"Harlow Solid Italic";
	panose-1:4 3 6 4 2 15 2 2 13 2;}
@font-face
	{font-family:Harrington;
	panose-1:4 4 5 5 5 10 2 2 7 2;}
@font-face
	{font-family:"High Tower Text";
	panose-1:2 4 5 2 5 5 6 3 3 3;}
@font-face
	{font-family:Jokerman;
	panose-1:4 9 6 5 6 13 6 2 7 2;}
@font-face
	{font-family:"Kunstler Script";
	panose-1:3 3 4 2 2 6 7 13 13 6;}
@font-face
	{font-family:"Lucida Bright";
	panose-1:2 4 6 2 5 5 5 2 3 4;}
@font-face
	{font-family:"Lucida Calligraphy";
	panose-1:3 1 1 1 1 1 1 1 1 1;}
@font-face
	{font-family:"Lucida Fax";
	panose-1:2 6 6 2 5 5 5 2 2 4;}
@font-face
	{font-family:Magneto;
	panose-1:4 3 8 5 5 8 2 2 13 2;}
@font-face
	{font-family:"Matura MT Script Capitals";
	panose-1:3 2 8 2 6 6 2 7 2 2;}
@font-face
	{font-family:"Modern No\. 20";
	panose-1:2 7 7 4 7 5 5 2 3 3;}
@font-face
	{font-family:"Niagara Engraved";
	panose-1:4 2 5 2 7 7 3 3 2 2;}
@font-face
	{font-family:"Niagara Solid";
	panose-1:4 2 5 2 7 7 2 2 2 2;}
@font-face
	{font-family:"Old English Text MT";
	panose-1:3 4 9 2 4 5 8 3 8 6;}
@font-face
	{font-family:Onyx;
	panose-1:4 5 6 2 8 7 2 2 2 3;}
@font-face
	{font-family:Parchment;
	panose-1:3 4 6 2 4 7 8 4 8 4;}
@font-face
	{font-family:Playbill;
	panose-1:4 5 6 3 10 6 2 2 2 2;}
@font-face
	{font-family:"Poor Richard";
	panose-1:2 8 5 2 5 5 5 2 7 2;}
@font-face
	{font-family:Ravie;
	panose-1:4 4 8 5 5 8 9 2 6 2;}
@font-face
	{font-family:"Informal Roman";
	panose-1:3 6 4 2 3 4 6 11 2 4;}
@font-face
	{font-family:"Showcard Gothic";
	panose-1:4 2 9 4 2 1 2 2 6 4;}
@font-face
	{font-family:"Snap ITC";
	panose-1:4 4 10 7 6 10 2 2 2 2;}
@font-face
	{font-family:Stencil;
	panose-1:4 4 9 5 13 8 2 2 4 4;}
@font-face
	{font-family:"Viner Hand ITC";
	panose-1:3 7 5 2 3 5 2 2 2 3;}
@font-face
	{font-family:Vivaldi;
	panose-1:3 2 6 2 5 5 6 9 8 4;}
@font-face
	{font-family:"Vladimir Script";
	panose-1:3 5 4 2 4 4 7 7 3 5;}
@font-face
	{font-family:"Wide Latin";
	panose-1:2 10 10 7 5 5 5 2 4 4;}
@font-face
	{font-family:"Wingdings 2";
	panose-1:5 2 1 2 1 5 7 7 7 7;}
@font-face
	{font-family:"Wingdings 3";
	panose-1:5 4 1 2 1 8 7 7 7 7;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Arial Narrow";
	panose-1:2 11 6 6 2 2 2 3 2 4;}
@font-face
	{font-family:"MT Extra";
	panose-1:5 5 1 2 1 2 5 2 2 2;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-name:"Heading 1\,h1\,Level 1 Topic Heading";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:48.0pt;
	margin-left:.3in;
	text-align:right;
	text-indent:-.3in;
	page-break-before:always;
	page-break-after:avoid;
	font-size:24.0pt;
	font-family:"Arial","sans-serif";}
h2
	{mso-style-name:"Heading 2\,h2\,Level 2 Topic Heading\,H2";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.4in;
	text-indent:-.4in;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial","sans-serif";}
h3
	{mso-style-name:"Heading 3\,h3\,Level 3 Topic Heading";
	mso-style-link:"Heading 3 Char\,h3 Char\,Level 3 Topic Heading Char";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
h4
	{mso-style-name:"Heading 4\,h4\,First Subheading";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.6in;
	text-indent:-.6in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-weight:normal;}
h5
	{mso-style-name:"Heading 5\,h5\,Second Subheading";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.7in;
	text-indent:-.7in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-weight:normal;}
h6
	{mso-style-name:"Heading 6\,h6\,Third Subheading";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.8in;
	text-indent:-.8in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-weight:normal;}
p.MsoHeading7, li.MsoHeading7, div.MsoHeading7
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.9in;
	text-indent:-.9in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
p.MsoHeading8, li.MsoHeading8, div.MsoHeading8
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:1.0in;
	text-indent:-1.0in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
p.MsoHeading9, li.MsoHeading9, div.MsoHeading9
	{margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:1.1in;
	text-indent:-1.1in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
p.MsoIndex1, li.MsoIndex1, div.MsoIndex1
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:11.0pt;
	text-indent:-11.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:6.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:10.1pt;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:20.15pt;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:30.25pt;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:40.3pt;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:50.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:60.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:70.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:80.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoCommentText, li.MsoCommentText, div.MsoCommentText
	{mso-style-name:"Comment Text\,ct\,Used by Word for text of author queries";
	mso-style-link:"Comment Text Char\,ct Char\,Used by Word for text of author queries Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"Header Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;
	font-style:italic;}
span.MsoCommentReference
	{mso-style-name:"Comment Reference\,cr\,Used by Word to flag author queries";}
span.MsoLineNumber
	{font-family:"Arial","sans-serif";}
p.MsoListBullet, li.MsoListBullet, div.MsoListBullet
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListNumber, li.MsoListNumber, div.MsoListNumber
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.25in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListBullet2, li.MsoListBullet2, div.MsoListBullet2
	{mso-style-link:"List Bullet 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListBullet3, li.MsoListBullet3, div.MsoListBullet3
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.75in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListBullet4, li.MsoListBullet4, div.MsoListBullet4
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:1.0in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListBullet5, li.MsoListBullet5, div.MsoListBullet5
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:1.25in;
	text-indent:-.25in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListContinue2, li.MsoListContinue2, div.MsoListContinue2
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListContinue2CxSpFirst, li.MsoListContinue2CxSpFirst, div.MsoListContinue2CxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListContinue2CxSpMiddle, li.MsoListContinue2CxSpMiddle, div.MsoListContinue2CxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListContinue2CxSpLast, li.MsoListContinue2CxSpLast, div.MsoListContinue2CxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	background:navy;
	font-size:11.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoCommentSubject, li.MsoCommentSubject, div.MsoCommentSubject
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";
	font-weight:bold;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoRMPane, li.MsoRMPane, div.MsoRMPane
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.Headingbase, li.Headingbase, div.Headingbase
	{mso-style-name:"Heading base";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
p.Code, li.Code, div.Code
	{mso-style-name:"Code\,c";
	mso-style-link:"Code1\,c Char1";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.5in;
	font-size:10.0pt;
	font-family:"Lucida Console";}
span.CodeChar
	{mso-style-name:"Code Char\,c Char";
	font-family:"Lucida Console";}
span.Codefragment
	{mso-style-name:"Code fragment";
	font-family:"Lucida Console";}
p.Issue, li.Issue, div.Issue
	{mso-style-name:Issue;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	border:none;
	padding:0in;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";
	color:red;
	font-style:italic;}
span.Production
	{mso-style-name:Production;
	font-family:"Times New Roman","serif";
	font-style:italic;}
p.Table, li.Table, div.Table
	{mso-style-name:Table;
	margin-top:3.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
span.Term
	{mso-style-name:Term;
	font-weight:bold;
	font-style:italic;}
p.Grammar, li.Grammar, div.Grammar
	{mso-style-name:Grammar;
	mso-style-link:"Grammar Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:.75in;
	text-indent:-.25in;
	line-height:12.5pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";
	font-style:italic;}
span.Terminal
	{mso-style-name:Terminal;
	font-family:"Lucida Console";
	font-style:italic;}
span.IssueCode
	{mso-style-name:"Issue Code";
	font-family:"Lucida Console";
	font-style:italic;}
span.Temporary
	{mso-style-name:Temporary;
	color:red;
	font-style:italic;}
p.TableStart, li.TableStart, div.TableStart
	{mso-style-name:"Table Start";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:6.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.TableEnd, li.TableEnd, div.TableEnd
	{mso-style-name:"Table End";
	margin:0in;
	margin-bottom:.0001pt;
	line-height:12.0pt;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
p.Appendix1, li.Appendix1, div.Appendix1
	{mso-style-name:"Appendix 1";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:48.0pt;
	margin-left:.3in;
	text-align:right;
	text-indent:-.3in;
	page-break-before:always;
	page-break-after:avoid;
	font-size:24.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.Appendix2, li.Appendix2, div.Appendix2
	{mso-style-name:"Appendix 2";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.4in;
	text-indent:-.4in;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.Appendix3, li.Appendix3, div.Appendix3
	{mso-style-name:"Appendix 3";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.5in;
	text-indent:-.5in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";
	font-weight:bold;}
p.Appendix4, li.Appendix4, div.Appendix4
	{mso-style-name:"Appendix 4";
	margin-top:8.0pt;
	margin-right:0in;
	margin-bottom:4.0pt;
	margin-left:.6in;
	text-indent:-.6in;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial","sans-serif";}
p.Special, li.Special, div.Special
	{mso-style-name:Special;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:6.0pt;
	margin-left:0in;
	font-size:11.0pt;
	font-family:"Times New Roman","serif";}
span.GrammarText
	{mso-style-name:"Grammar Text";
	font-style:italic;}
span.Code1
	{mso-style-name:"Code1\,c Char1";
	mso-style-link:"Code\,c";
	font-family:"Lucida Console";}
span.CodeChar2
	{mso-style-name:"Code Char2\,c Char2";
	font-family:"Lucida Console";}
span.GrammarChar
	{mso-style-name:"Grammar Char";
	mso-style-link:Grammar;
	font-style:italic;}
span.Keyboard
	{mso-style-name:Keyboard;}
span.Non-normativeBracket
	{mso-style-name:"Non-normative Bracket";
	font-style:italic;}
span.CodeCharChar
	{mso-style-name:"Code Char Char\,c Char Char";
	font-family:"Lucida Console";}
span.ListBullet2Char
	{mso-style-name:"List Bullet 2 Char";
	mso-style-link:"List Bullet 2";}
span.CommentTextChar
	{mso-style-name:"Comment Text Char\,ct Char\,Used by Word for text of author queries Char";
	mso-style-link:"Comment Text\,ct\,Used by Word for text of author queries";}
span.Codeinline
	{mso-style-name:"Code inline";
	font-family:"Courier New";}
span.HeaderChar
	{mso-style-name:"Header Char";
	mso-style-link:Header;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char\,h3 Char\,Level 3 Topic Heading Char";
	mso-style-link:"Heading 3\,h3\,Level 3 Topic Heading";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:teal;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:red;}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
 @page Section1
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section1
	{page:Section1;}
@page Section2
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section2
	{page:Section2;}
@page Section3
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section3
	{page:Section3;}
@page Section4
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section4
	{page:Section4;}
@page Section5
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section5
	{page:Section5;}
@page Section6
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section6
	{page:Section6;}
@page Section7
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section7
	{page:Section7;}
@page Section8
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section8
	{page:Section8;}
@page Section9
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section9
	{page:Section9;}
@page Section10
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section10
	{page:Section10;}
@page Section11
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section11
	{page:Section11;}
@page Section12
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section12
	{page:Section12;}
@page Section13
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section13
	{page:Section13;}
@page Section14
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section14
	{page:Section14;}
@page Section15
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section15
	{page:Section15;}
@page Section16
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section16
	{page:Section16;}
@page Section17
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section17
	{page:Section17;}
@page Section18
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section18
	{page:Section18;}
@page Section19
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section19
	{page:Section19;}
@page Section20
	{size:8.5in 11.0in;
	margin:1.0in .8in 1.0in .8in;}
div.Section20
	{page:Section20;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

<link type="text/css" rel="stylesheet" charset="UTF-8" href="http://translate.googleapis.com/translate_static/css/translateelement.css"><script type="text/javascript" charset="UTF-8" src="http://translate.googleapis.com/translate_static/js/element/main_ru.js"></script><script type="text/javascript" charset="UTF-8" src="http://translate.googleapis.com/translate_static/js/element/10/element_main.js"></script></head>

<body lang="EN-US" link="blue" vlink="purple">

<div class="Section1">

<p class="MsoNormal"><a name="AllHeadersAndTitle"></a><a name="FeatureTitle"></a><a name="DescriptionPlus"></a><a name="_Toc274909590">&nbsp;</a></p>

<p class="MsoNormal"><a name="_Ref446425405"></a>&nbsp;</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">&nbsp;</p>

<p class="Special" align="center" style="text-align:center"><span style="font-size:
96.0pt"><font><font>C </font></font></span><span style="font-size:72.0pt;position:relative;top:-24.0pt"><font><font>#</font></font></span></p>

<p class="Special" align="center" style="text-align:center"><b><span style="font-size:24.0pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;"><font><font>Спецификация языка</font></font></span></b></p>

<p class="Special" align="center" style="text-align:center"><b><span style="font-size:14.0pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;"><font><font>Версия </font></font></span></b><b><span style="font-size:14.0pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;"><font><font>4,0</font></font></span></b></p>

<i><span style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;;
color:red"><br clear="all" style="page-break-before:always">
</span></i>

<div style="border:solid navy 1.0pt;padding:1.0pt 1.0pt 1.0pt 1.0pt">

<p class="Issue" style="border:none;padding:0in"><b><span style="font-style:normal"><font><font>Замечать</font></font></span></b></p>

<p class="Issue" style="border:none;padding:0in"><font><font>© 1999-2010 Microsoft Corporation. </font><font>Все права защищены.</font></font></p>

<p class="Issue" style="border:none;padding:0in"><font><font>Microsoft, Windows, Visual Basic, Visual C # и Visual C + + являются зарегистрированными товарными знаками или товарными знаками Microsoft Corporation в США и / или других странах / регионах.</font></font></p>

<p class="Issue" style="border:none;padding:0in"><font><font>Другие названия продуктов и компаний, упомянутые здесь, могут быть торговыми марками их соответствующих владельцев.</font></font></p>

</div>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section2">

<p class="Special"><b><span style="font-size:14.0pt;font-family:&quot;Arial&quot;,&quot;sans-serif&quot;"><font><font>Оглавление</font></font></span></b></p>

<p class="MsoToc1"><font><font>1. </font><font>1</font></font></p>

<p class="MsoToc2"><font><font>1,1 Hello </font><font>1</font></font></p>

<p class="MsoToc2"><font><font>1,2 программе </font><font>2</font></font></p>

<p class="MsoToc2"><font><font>1.3 Типы и </font><font>4</font></font></p>

<p class="MsoToc2"><font><font>1,4 </font><font>6</font></font></p>

<p class="MsoToc2"><font><font>1,5 </font><font>8</font></font></p>

<p class="MsoToc2"><font><font>1.6 Классы и </font><font>12</font></font></p>

<p class="MsoToc3"><font><font>1.6.1 </font><font>12</font></font></p>

<p class="MsoToc3"><font><font>1.6.2 </font><font>13</font></font></p>

<p class="MsoToc3"><font><font>1.6.3 Тип </font><font>13</font></font></p>

<p class="MsoToc3"><font><font>1.6.4 Базы </font><font>14</font></font></p>

<p class="MsoToc3"><font><font>1.6.5 </font><font>14</font></font></p>

<p class="MsoToc3"><font><font>1.6.6 </font><font>15</font></font></p>

<p class="MsoToc4"><font><font>1.6.6.1 </font><font>15</font></font></p>

<p class="MsoToc4"><font><font>1.6.6.2 тело метода и местных </font><font>16</font></font></p>

<p class="MsoToc4"><font><font>1.6.6.3 Статические и экземпляр </font><font>17</font></font></p>

<p class="MsoToc4"><font><font>1.6.6.4 Virtual, управление, и абстрактные методы ........................................ ........................................... </font><font>18</font></font></p>

<p class="MsoToc4"><font><font>1.6.6.5 Метод </font><font>20</font></font></p>

<p class="MsoToc3"><font><font>1.6.7 Другие функции </font><font>21</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.1 </font><font>22</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.2 </font><font>23</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.3 </font><font>23</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.4 </font><font>24</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.5 </font><font>24</font></font></p>

<p class="MsoToc4"><font><font>1.6.7.6 </font><font>25</font></font></p>

<p class="MsoToc2"><font><font>1,7 </font><font>25</font></font></p>

<p class="MsoToc2"><font><font>1,8 </font><font>26</font></font></p>

<p class="MsoToc2"><font><font>1,9 </font><font>27</font></font></p>

<p class="MsoToc2"><font><font>1,10 </font><font>29</font></font></p>

<p class="MsoToc2"><font><font>1,11 </font><font>30</font></font></p>

<p class="MsoToc2"><font><font>1,12 </font><font>31</font></font></p>

<p class="MsoToc1"><font><font>2. </font><font>Лексический </font><font>33</font></font></p>

<p class="MsoToc2"><font><font>2,1 </font><font>33</font></font></p>

<p class="MsoToc2"><font><font>2,2 </font><font>33</font></font></p>

<p class="MsoToc3"><font><font>2.2.1 Грамматика </font><font>33</font></font></p>

<p class="MsoToc3"><font><font>2.2.2 Лексические </font><font>34</font></font></p>

<p class="MsoToc3"><font><font>2.2.3 Синтаксическая </font><font>34</font></font></p>

<p class="MsoToc2"><font><font>2,3 Лексические </font><font>34</font></font></p>

<p class="MsoToc3"><font><font>2.3.1 Линия </font><font>35</font></font></p>

<p class="MsoToc3"><font><font>2.3.2 </font><font>35</font></font></p>

<p class="MsoToc3"><font><font>2.3.3 белого </font><font>37</font></font></p>

<p class="MsoToc2"><font><font>2,4 </font><font>37</font></font></p>

<p class="MsoToc3"><font><font>2.4.1 Unicode управляющие последовательности символов ........................................... ................................................ </font><font>37</font></font></p>

<p class="MsoToc3"><font><font>2.4.2 </font><font>38</font></font></p>

<p class="MsoToc3"><font><font>2.4.3 </font><font>39</font></font></p>

<p class="MsoToc3"><font><font>2.4.4 </font><font>40</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.1 булевых </font><font>40</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.2 Integer </font><font>40</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.3 Реальные </font><font>41</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.4 персонажа </font><font>42</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.5 струнных </font><font>43</font></font></p>

<p class="MsoToc4"><font><font>2.4.4.6 нулевой </font><font>45</font></font></p>

<p class="MsoToc3"><font><font>2.4.5 Операторы и </font><font>45</font></font></p>

<p class="MsoToc2"><font><font>2,5 Предварительная обработка </font><font>45</font></font></p>

<p class="MsoToc3"><font><font>2.5.1 Условная компиляция </font><font>47</font></font></p>

<p class="MsoToc3"><font><font>2.5.2 Предварительная обработка </font><font>47</font></font></p>

<p class="MsoToc3"><font><font>2.5.3 декларации </font><font>48</font></font></p>

<p class="MsoToc3"><font><font>2.5.4 Условная компиляция </font><font>49</font></font></p>

<p class="MsoToc3"><font><font>2.5.5 Диагностические </font><font>51</font></font></p>

<p class="MsoToc3"><font><font>2.5.6 региона </font><font>52</font></font></p>

<p class="MsoToc3"><font><font>2.5.7 Линия </font><font>52</font></font></p>

<p class="MsoToc3"><font><font>2.5.8 Pragma </font><font>53</font></font></p>

<p class="MsoToc4"><font><font>2.5.8.1 Pragma </font><font>53</font></font></p>

<p class="MsoToc1"><font><font>3. </font><font>Основной </font><font>55</font></font></p>

<p class="MsoToc2"><font><font>3.1 Применение </font><font>55</font></font></p>

<p class="MsoToc2"><font><font>3.2 Нанесение </font><font>56</font></font></p>

<p class="MsoToc2"><font><font>3,3 </font><font>56</font></font></p>

<p class="MsoToc2"><font><font>3,4 </font><font>58</font></font></p>

<p class="MsoToc3"><font><font>3.4.1 Пространство имен </font><font>58</font></font></p>

<p class="MsoToc3"><font><font>3.4.2 Struct </font><font>59</font></font></p>

<p class="MsoToc3"><font><font>3.4.3 Перечисление </font><font>59</font></font></p>

<p class="MsoToc3"><font><font>3.4.4 класс </font><font>59</font></font></p>

<p class="MsoToc3"><font><font>3.4.5 Интерфейс </font><font>60</font></font></p>

<p class="MsoToc3"><font><font>3.4.6 Массив </font><font>60</font></font></p>

<p class="MsoToc3"><font><font>3.4.7 Делегат </font><font>60</font></font></p>

<p class="MsoToc2"><font><font>Член 3,5 </font><font>60</font></font></p>

<p class="MsoToc3"><font><font>3.5.1 Объявленная </font><font>60</font></font></p>

<p class="MsoToc3"><font><font>3.5.2 Доступность </font><font>61</font></font></p>

<p class="MsoToc3"><font><font>3.5.3 Защищенный доступ для членов экземпляров .......................................... .............................................. </font><font>63</font></font></p>

<p class="MsoToc3"><font><font>3.5.4 Доступность </font><font>64</font></font></p>

<p class="MsoToc2"><font><font>3,6 подписях и </font><font>65</font></font></p>

<p class="MsoToc2"><font><font>3,7 </font><font>66</font></font></p>

<p class="MsoToc3"><font><font>3.7.1 Имя </font><font>69</font></font></p>

<p class="MsoToc4"><font><font>3.7.1.1 Скрытие через </font><font>69</font></font></p>

<p class="MsoToc4"><font><font>3.7.1.2 Скрытие через </font><font>70</font></font></p>

<p class="MsoToc2"><font><font>3,8 Пространство имен и тип </font><font>71</font></font></p>

<p class="MsoToc3"><font><font>3.8.1 Полное </font><font>73</font></font></p>

<p class="MsoToc2"><font><font>3,9 автоматической памяти </font><font>73</font></font></p>

<p class="MsoToc2"><font><font>3,10 Исполнение </font><font>76</font></font></p>

<p class="MsoToc1"><font><font>4. </font><font>77</font></font></p>

<p class="MsoToc2"><font><font>4,1 Value </font><font>77</font></font></p>

<p class="MsoToc3"><font><font>4.1.1 System.ValueType </font><font>78</font></font></p>

<p class="MsoToc3"><font><font>4.1.2 По умолчанию </font><font>78</font></font></p>

<p class="MsoToc3"><font><font>4.1.3 Struct </font><font>79</font></font></p>

<p class="MsoToc3"><font><font>4.1.4 Простой </font><font>79</font></font></p>

<p class="MsoToc3"><font><font>4.1.5 Интегральная </font><font>80</font></font></p>

<p class="MsoToc3"><font><font>4.1.6 плавающей точкой </font><font>81</font></font></p>

<p class="MsoToc3"><font><font>4.1.7 десятичной </font><font>82</font></font></p>

<p class="MsoToc3"><font><font>4.1.8 BOOL </font><font>83</font></font></p>

<p class="MsoToc3"><font><font>4.1.9 Перечисление </font><font>83</font></font></p>

<p class="MsoToc3"><font><font>4.1.10 Nullable </font><font>83</font></font></p>

<p class="MsoToc2"><font><font>4,2 справочники </font><font>83</font></font></p>

<p class="MsoToc3"><font><font>4.2.1 класс </font><font>84</font></font></p>

<p class="MsoToc3"><font><font>4.2.2 объект </font><font>85</font></font></p>

<p class="MsoToc3"><font><font>4.2.3 динамическое </font><font>85</font></font></p>

<p class="MsoToc3"><font><font>4.2.4 строкой </font><font>85</font></font></p>

<p class="MsoToc3"><font><font>4.2.5 Интерфейс </font><font>85</font></font></p>

<p class="MsoToc3"><font><font>4.2.6 Массив </font><font>85</font></font></p>

<p class="MsoToc3"><font><font>4.2.7 Делегат </font><font>85</font></font></p>

<p class="MsoToc2"><font><font>4,3 бокса и </font><font>86</font></font></p>

<p class="MsoToc3"><font><font>4.3.1 бокса </font><font>86</font></font></p>

<p class="MsoToc3"><font><font>4.3.2 Unboxing </font><font>87</font></font></p>

<p class="MsoToc2"><font><font>4,4 Построенный </font><font>88</font></font></p>

<p class="MsoToc3"><font><font>4.4.1 Тип </font><font>89</font></font></p>

<p class="MsoToc3"><font><font>4.4.2 Открытые и закрытые </font><font>89</font></font></p>

<p class="MsoToc3"><font><font>4.4.3 связанного и несвязанного </font><font>89</font></font></p>

<p class="MsoToc3"><font><font>4.4.4 Удовлетворение </font><font>89</font></font></p>

<p class="MsoToc2"><font><font>4,5 Тип </font><font>90</font></font></p>

<p class="MsoToc2"><font><font>4,6 выражений дерево </font><font>91</font></font></p>

<p class="MsoToc2"><font><font>4,7 динамические </font><font>92</font></font></p>

<p class="MsoToc1"><font><font>5. </font><font>93</font></font></p>

<p class="MsoToc2"><font><font>5,1 Переменный </font><font>93</font></font></p>

<p class="MsoToc3"><font><font>5.1.1 Статическое </font><font>93</font></font></p>

<p class="MsoToc3"><font><font>5.1.2 экземпляров </font><font>93</font></font></p>

<p class="MsoToc4"><font><font>5.1.2.1 Переменные экземпляра в </font><font>93</font></font></p>

<p class="MsoToc4"><font><font>5.1.2.2 Переменные экземпляра в </font><font>94</font></font></p>

<p class="MsoToc3"><font><font>5.1.3 Массив </font><font>94</font></font></p>

<p class="MsoToc3"><font><font>5.1.4 Значение </font><font>94</font></font></p>

<p class="MsoToc3"><font><font>5.1.5 Ссылка </font><font>94</font></font></p>

<p class="MsoToc3"><font><font>5.1.6 Выходные </font><font>94</font></font></p>

<p class="MsoToc3"><font><font>5.1.7 Местные </font><font>95</font></font></p>

<p class="MsoToc2"><font><font>5,2 По умолчанию </font><font>96</font></font></p>

<p class="MsoToc2"><font><font>5,3 Определенные </font><font>96</font></font></p>

<p class="MsoToc3"><font><font>5.3.1 Первоначально назначенные </font><font>97</font></font></p>

<p class="MsoToc3"><font><font>5.3.2 Первоначально неназначенных </font><font>97</font></font></p>

<p class="MsoToc3"><font><font>5.3.3 Точные правила для определения определенного присваивания ......................................... .................................. </font><font>97</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.1 Общие правила </font><font>98</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.2 Блок заявления, проверены, и непроверенные заявления ....................................... ..................... </font><font>98</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.3 Выражение </font><font>98</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.4 декларации </font><font>98</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.5 Если </font><font>98</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.6 Переключатель </font><font>99</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.7 В то время как </font><font>99</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.8 У </font><font>99</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.9 Для </font><font>100</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.10 Break, продолжаются, и перейти отчетности ........................................ ........................................... </font><font>100</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.11 Throw </font><font>100</font></font></p>

<p class="MsoToc4"><font><font>Вернуться 5.3.3.12 </font><font>100</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.13 Try-Catch </font><font>100</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.14 Try-, наконец, </font><font>101</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.15 Try-Catch-, наконец, </font><font>101</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.16 Foreach </font><font>102</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.17 Использование </font><font>102</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.18 блокировки </font><font>102</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.19 Выход </font><font>103</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.20 Общие правила для простых выражений .......................................... .......................................... </font><font>103</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.21 Общие правила для выражений со встроенным выражения ........................................ ............. </font><font>103</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.22 Invocation выражения и выражения создания объекта ......................................... ................ </font><font>103</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.23 Простая назначения </font><font>104</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.24 &amp;&amp; </font><font>104</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.25 | | </font><font>105</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.26! </font><font>106</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.27? </font><font>106</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.28?: </font><font>106</font></font></p>

<p class="MsoToc4"><font><font>5.3.3.29 Anonymous </font><font>107</font></font></p>

<p class="MsoToc2"><font><font>5,4 Переменный </font><font>107</font></font></p>

<p class="MsoToc2"><font><font>5,5 Атомарность переменной </font><font>107</font></font></p>

<p class="MsoToc1"><font><font>6. </font><font>109</font></font></p>

<p class="MsoToc2"><font><font>6,1 Неявные </font><font>109</font></font></p>

<p class="MsoToc3"><font><font>6.1.1 Идентичность </font><font>109</font></font></p>

<p class="MsoToc3"><font><font>6.1.2 неявных числовых </font><font>110</font></font></p>

<p class="MsoToc3"><font><font>6.1.3 неявного перебора </font><font>110</font></font></p>

<p class="MsoToc3"><font><font>6.1.4 Неявные обнуляемого </font><font>110</font></font></p>

<p class="MsoToc3"><font><font>6.1.5 Null литерал </font><font>111</font></font></p>

<p class="MsoToc3"><font><font>6.1.6 Неявные ссылки </font><font>111</font></font></p>

<p class="MsoToc3"><font><font>6.1.7 бокса </font><font>111</font></font></p>

<p class="MsoToc3"><font><font>6.1.8 Неявные динамические </font><font>112</font></font></p>

<p class="MsoToc3"><font><font>6.1.9 Неявные преобразования постоянным выражением ........................................... ........................................... </font><font>112</font></font></p>

<p class="MsoToc3"><font><font>6.1.10 Неявные преобразования типов с участием параметров .......................................... ................................. </font><font>112</font></font></p>

<p class="MsoToc3"><font><font>6.1.11 определяемые пользователем неявные </font><font>113</font></font></p>

<p class="MsoToc3"><font><font>6.1.12 Анонимные функции преобразования и преобразования группы методов ........................................ ......... </font><font>113</font></font></p>

<p class="MsoToc2"><font><font>6,2 Явные </font><font>113</font></font></p>

<p class="MsoToc3"><font><font>6.2.1 Явные числовые </font><font>114</font></font></p>

<p class="MsoToc3"><font><font>6.2.2 Явные перечислении </font><font>115</font></font></p>

<p class="MsoToc3"><font><font>6.2.3 Явные обнуляемого </font><font>115</font></font></p>

<p class="MsoToc3"><font><font>6.2.4 прямые ссылки </font><font>116</font></font></p>

<p class="MsoToc3"><font><font>6.2.5 Unboxing </font><font>117</font></font></p>

<p class="MsoToc3"><font><font>6.2.6 Явные динамического </font><font>117</font></font></p>

<p class="MsoToc3"><font><font>6.2.7 Явные преобразования типов с участием параметров .......................................... ................................... </font><font>118</font></font></p>

<p class="MsoToc3"><font><font>6.2.8 Пользовательский явное </font><font>119</font></font></p>

<p class="MsoToc2"><font><font>6.3 Стандартные </font><font>119</font></font></p>

<p class="MsoToc3"><font><font>6.3.1 Стандартный неявной </font><font>119</font></font></p>

<p class="MsoToc3"><font><font>6.3.2 Стандартный явное </font><font>119</font></font></p>

<p class="MsoToc2"><font><font>6,4 определяемые пользователем </font><font>119</font></font></p>

<p class="MsoToc3"><font><font>6.4.1 Допустимые определяемых пользователем </font><font>119</font></font></p>

<p class="MsoToc3"><font><font>6.4.2 отменены преобразования </font><font>120</font></font></p>

<p class="MsoToc3"><font><font>6.4.3 Оценка пользовательские преобразования ......................................... ............................................... </font><font>120</font></font></p>

<p class="MsoToc3"><font><font>6.4.4 Пользовательские неявные </font><font>121</font></font></p>

<p class="MsoToc3"><font><font>6.4.5 Пользовательский явное </font><font>122</font></font></p>

<p class="MsoToc2"><font><font>6,5 Anonymous функции </font><font>123</font></font></p>

<p class="MsoToc3"><font><font>6.5.1 Оценка анонимные функции преобразования типов делегировать ....................................... ............ </font><font>124</font></font></p>

<p class="MsoToc3"><font><font>6.5.2 Оценка анонимные функции преобразования типов дерева выражений ...................................... ... </font><font>124</font></font></p>

<p class="MsoToc3"><font><font>6.5.3 Осуществление </font><font>124</font></font></p>

<p class="MsoToc2"><font><font>6.6 Метод группе </font><font>127</font></font></p>

<p class="MsoToc1"><font><font>7. </font><font>131</font></font></p>

<p class="MsoToc2"><font><font>7,1 выражений </font><font>131</font></font></p>

<p class="MsoToc3"><font><font>7.1.1 Значения </font><font>132</font></font></p>

<p class="MsoToc2"><font><font>7,2 статических и динамических </font><font>132</font></font></p>

<p class="MsoToc3"><font><font>7.2.1 </font><font>133</font></font></p>

<p class="MsoToc3"><font><font>7.2.2 Динамический </font><font>133</font></font></p>

<p class="MsoToc3"><font><font>7.2.3 Виды учредительных </font><font>133</font></font></p>

<p class="MsoToc2"><font><font>7,3 </font><font>134</font></font></p>

<p class="MsoToc3"><font><font>7.3.1 Приоритет операторов и </font><font>134</font></font></p>

<p class="MsoToc3"><font><font>7.3.2 Оператор </font><font>135</font></font></p>

<p class="MsoToc3"><font><font>7.3.3 Унарные перегрузки оператора </font><font>136</font></font></p>

<p class="MsoToc3"><font><font>7.3.4 Бинарный оператор перегрузки </font><font>137</font></font></p>

<p class="MsoToc3"><font><font>7.3.5 Кандидат определяемых пользователем </font><font>137</font></font></p>

<p class="MsoToc3"><font><font>7.3.6 Числовые </font><font>137</font></font></p>

<p class="MsoToc4"><font><font>7.3.6.1 Унарные числовые </font><font>138</font></font></p>

<p class="MsoToc4"><font><font>7.3.6.2 двоичных числовых </font><font>138</font></font></p>

<p class="MsoToc3"><font><font>7.3.7 Отменено </font><font>139</font></font></p>

<p class="MsoToc2"><font><font>Член 7,4 </font><font>139</font></font></p>

<p class="MsoToc3"><font><font>7.4.1 Базы </font><font>141</font></font></p>

<p class="MsoToc2"><font><font>7,5 Функция </font><font>141</font></font></p>

<p class="MsoToc3"><font><font>7.5.1 Аргумент </font><font>143</font></font></p>

<p class="MsoToc4"><font><font>7.5.1.1 корреспондент </font><font>144</font></font></p>

<p class="MsoToc4"><font><font>7.5.1.2 во время выполнения списков аргументов ........................................ ............................................ </font><font>145</font></font></p>

<p class="MsoToc3"><font><font>7.5.2 Тип </font><font>147</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.1 Первый </font><font>147</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.2 Второй </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.3 Входные </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.4 Выходные </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.5 </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.6 Тип выхода </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.7 Явные выводы параметр типа ........................................... ............................................. </font><font>148</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.8 Точная </font><font>149</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.9 Нижний связанного </font><font>149</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.10 верхнюю границу </font><font>150</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.11 </font><font>150</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.12 Предполагаемые возвращение </font><font>150</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.13 Определение типа для преобразования группы методов ........................................ .......................... </font><font>151</font></font></p>

<p class="MsoToc4"><font><font>7.5.2.14 Поиск лучших распространенный тип набора выражений ..................................... ...................... </font><font>152</font></font></p>

<p class="MsoToc3"><font><font>7.5.3 Перегрузка </font><font>152</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.1 Применяемые функции </font><font>153</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.2 Лучше функции </font><font>153</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.3 Лучше преобразования выражений ........................................... ............................................. </font><font>154</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.4 Лучше преобразования </font><font>155</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.5 Лучше преобразования </font><font>155</font></font></p>

<p class="MsoToc4"><font><font>7.5.3.6 Перегрузка в родовом </font><font>155</font></font></p>

<p class="MsoToc3"><font><font>7.5.4 проверки во время компиляции динамического разрешения перегрузки ....................................... .......................... </font><font>155</font></font></p>

<p class="MsoToc3"><font><font>7.5.5 Функция член </font><font>156</font></font></p>

<p class="MsoToc4"><font><font>7.5.5.1 Вызовы на коробке </font><font>157</font></font></p>

<p class="MsoToc2"><font><font>7,6 Первичный </font><font>157</font></font></p>

<p class="MsoToc3"><font><font>7.6.1 </font><font>158</font></font></p>

<p class="MsoToc3"><font><font>7.6.2 Простой </font><font>158</font></font></p>

<p class="MsoToc4"><font><font>7.6.2.1 Инвариантные значения в </font><font>159</font></font></p>

<p class="MsoToc3"><font><font>7.6.3 скобках </font><font>160</font></font></p>

<p class="MsoToc3"><font><font>7.6.4 Член </font><font>161</font></font></p>

<p class="MsoToc4"><font><font>7.6.4.1 одинаковые простые имена и имена типов ......................................... ........................................ </font><font>162</font></font></p>

<p class="MsoToc4"><font><font>7.6.4.2 Грамматика </font><font>163</font></font></p>

<p class="MsoToc3"><font><font>7.6.5 Invocation </font><font>164</font></font></p>

<p class="MsoToc4"><font><font>7.6.5.1 Метод </font><font>164</font></font></p>

<p class="MsoToc4"><font><font>7.6.5.2 Расширение метода </font><font>165</font></font></p>

<p class="MsoToc4"><font><font>7.6.5.3 делегата </font><font>168</font></font></p>

<p class="MsoToc3"><font><font>7.6.6 Элемент </font><font>168</font></font></p>

<p class="MsoToc4"><font><font>7.6.6.1 Массив </font><font>168</font></font></p>

<p class="MsoToc4"><font><font>7.6.6.2 Indexer </font><font>169</font></font></p>

<p class="MsoToc3"><font><font>7.6.7 Это </font><font>170</font></font></p>

<p class="MsoToc3"><font><font>7.6.8 Базы </font><font>170</font></font></p>

<p class="MsoToc3"><font><font>7.6.9 Postfix операторы инкремента и декремента .......................................... ....................................... </font><font>171</font></font></p>

<p class="MsoToc3"><font><font>7.6.10 новые </font><font>172</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.1 Создание объекта </font><font>172</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.2 объектов </font><font>173</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.3 коллекции </font><font>175</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.4 Создание массива </font><font>176</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.5 делегат создания </font><font>178</font></font></p>

<p class="MsoToc4"><font><font>7.6.10.6 Anonymous выражения создания объекта ........................................... .................................... </font><font>180</font></font></p>

<p class="MsoToc3"><font><font>7.6.11 TypeOf </font><font>181</font></font></p>

<p class="MsoToc3"><font><font>7.6.12 проверяемые и непроверяемые операторы .......................................... ............................................ </font><font>183</font></font></p>

<p class="MsoToc3"><font><font>7.6.13 Значение по умолчанию </font><font>185</font></font></p>

<p class="MsoToc3"><font><font>7.6.14 анонимный метод </font><font>185</font></font></p>

<p class="MsoToc2"><font><font>7,7 Унарные </font><font>186</font></font></p>

<p class="MsoToc3"><font><font>7.7.1 Унарные плюс </font><font>186</font></font></p>

<p class="MsoToc3"><font><font>7.7.2 унарный минус </font><font>186</font></font></p>

<p class="MsoToc3"><font><font>7.7.3 Логическое отрицание </font><font>187</font></font></p>

<p class="MsoToc3"><font><font>7.7.4 побитового дополнения </font><font>187</font></font></p>

<p class="MsoToc3"><font><font>7.7.5 прирост префиксов и декремента .......................................... ........................................ </font><font>187</font></font></p>

<p class="MsoToc3"><font><font>7.7.6 В ролях </font><font>188</font></font></p>

<p class="MsoToc2"><font><font>7,8 арифметических </font><font>189</font></font></p>

<p class="MsoToc3"><font><font>7.8.1 Умножение </font><font>189</font></font></p>

<p class="MsoToc3"><font><font>7.8.2 отдел </font><font>190</font></font></p>

<p class="MsoToc3"><font><font>7.8.3 Остаток </font><font>191</font></font></p>

<p class="MsoToc3"><font><font>7.8.4 Добавление </font><font>192</font></font></p>

<p class="MsoToc3"><font><font>7.8.5 Вычитание </font><font>194</font></font></p>

<p class="MsoToc2"><font><font>7,9 Сдвиг </font><font>195</font></font></p>

<p class="MsoToc2"><font><font>7,10 реляционных и типовых испытаний </font><font>197</font></font></p>

<p class="MsoToc3"><font><font>7.10.1 Integer сравнения </font><font>197</font></font></p>

<p class="MsoToc3"><font><font>7.10.2 с плавающей точкой операторов сравнения .......................................... ................................................ </font><font>198</font></font></p>

<p class="MsoToc3"><font><font>7.10.3 десятичной сравнения </font><font>199</font></font></p>

<p class="MsoToc3"><font><font>7.10.4 булева равенства </font><font>199</font></font></p>

<p class="MsoToc3"><font><font>7.10.5 Перечисление сравнения </font><font>199</font></font></p>

<p class="MsoToc3"><font><font>7.10.6 Ссылки типа равенства </font><font>199</font></font></p>

<p class="MsoToc3"><font><font>7.10.7 равенства строк </font><font>201</font></font></p>

<p class="MsoToc3"><font><font>7.10.8 делегат равенство </font><font>201</font></font></p>

<p class="MsoToc3"><font><font>7.10.9 операторов равенства и </font><font>202</font></font></p>

<p class="MsoToc3"><font><font>7.10.10 является </font><font>202</font></font></p>

<p class="MsoToc3"><font><font>7.10.11 как </font><font>202</font></font></p>

<p class="MsoToc2"><font><font>7,11 логических </font><font>203</font></font></p>

<p class="MsoToc3"><font><font>7.11.1 Integer логических </font><font>204</font></font></p>

<p class="MsoToc3"><font><font>7.11.2 перечисление логических </font><font>204</font></font></p>

<p class="MsoToc3"><font><font>7.11.3 логическое </font><font>204</font></font></p>

<p class="MsoToc3"><font><font>7.11.4 Nullable логическое </font><font>204</font></font></p>

<p class="MsoToc2"><font><font>7.12 Условные логические </font><font>205</font></font></p>

<p class="MsoToc3"><font><font>7.12.1 булевых условные логические операторы ........................................... .............................................. </font><font>206</font></font></p>

<p class="MsoToc3"><font><font>7.12.2 определяемые пользователем условные логические операторы ......................................... ......................................... </font><font>206</font></font></p>

<p class="MsoToc2"><font><font>7,13 нулевых объединяющих </font><font>206</font></font></p>

<p class="MsoToc2"><font><font>7,14 Условное </font><font>207</font></font></p>

<p class="MsoToc2"><font><font>7,15 Анонимные функции </font><font>208</font></font></p>

<p class="MsoToc3"><font><font>7.15.1 Анонимные функции </font><font>210</font></font></p>

<p class="MsoToc3"><font><font>7.15.2 Анонимные функции </font><font>210</font></font></p>

<p class="MsoToc3"><font><font>7.15.3 перегрузки </font><font>211</font></font></p>

<p class="MsoToc3"><font><font>7.15.4 Анонимные функции и динамическое связывание .......................................... ...................................... </font><font>211</font></font></p>

<p class="MsoToc3"><font><font>7.15.5 космического </font><font>211</font></font></p>

<p class="MsoToc4"><font><font>7.15.5.1 Захваченные внешней </font><font>212</font></font></p>

<p class="MsoToc4"><font><font>7.15.5.2 экземпляра местных </font><font>212</font></font></p>

<p class="MsoToc3"><font><font>7.15.6 Оценка анонимного выражения функции .......................................... ................................. </font><font>214</font></font></p>

<p class="MsoToc2"><font><font>7,16 Запрос </font><font>215</font></font></p>

<p class="MsoToc3"><font><font>7.16.1 неясности в запросе </font><font>216</font></font></p>

<p class="MsoToc3"><font><font>7.16.2 выражении запроса </font><font>216</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.1 Выбор и GroupBy статей с продолжениями ......................................... ............................. </font><font>217</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.2 явные типы переменных диапазона ........................................... .................................................. .. </font><font>217</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.3 Вырожденные запрос </font><font>218</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.4 С, позвольте, где, присоединяться и OrderBy положения ..................................... ....................................... </font><font>218</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.5 Выбор </font><font>221</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.6 GroupBy </font><font>222</font></font></p>

<p class="MsoToc4"><font><font>7.16.2.7 Прозрачный </font><font>222</font></font></p>

<p class="MsoToc3"><font><font>7.16.3 выражении запроса </font><font>223</font></font></p>

<p class="MsoToc2"><font><font>7,17 Назначение </font><font>224</font></font></p>

<p class="MsoToc3"><font><font>7.17.1 Простой </font><font>225</font></font></p>

<p class="MsoToc3"><font><font>7.17.2 Соединение </font><font>227</font></font></p>

<p class="MsoToc3"><font><font>7.17.3 события </font><font>228</font></font></p>

<p class="MsoToc2"><font><font>7,18 </font><font>228</font></font></p>

<p class="MsoToc2"><font><font>7,19 Постоянная </font><font>228</font></font></p>

<p class="MsoToc2"><font><font>7,20 булевых </font><font>230</font></font></p>

<p class="MsoToc1"><font><font>8. </font><font>231</font></font></p>

<p class="MsoToc2"><font><font>8,1 конечных точек и </font><font>231</font></font></p>

<p class="MsoToc2"><font><font>8,2 </font><font>233</font></font></p>

<p class="MsoToc3"><font><font>8.2.1 Заявление </font><font>233</font></font></p>

<p class="MsoToc2"><font><font>8,3 пустым </font><font>234</font></font></p>

<p class="MsoToc2"><font><font>8,4 Маркированный </font><font>234</font></font></p>

<p class="MsoToc2"><font><font>8,5 декларацию </font><font>235</font></font></p>

<p class="MsoToc3"><font><font>8.5.1 Локальные переменные </font><font>235</font></font></p>

<p class="MsoToc3"><font><font>8.5.2 Местные постоянной </font><font>236</font></font></p>

<p class="MsoToc2"><font><font>8,6 выражений </font><font>237</font></font></p>

<p class="MsoToc2"><font><font>8,7 Selection </font><font>237</font></font></p>

<p class="MsoToc3"><font><font>8.7.1 если </font><font>237</font></font></p>

<p class="MsoToc3"><font><font>8.7.2 Переключатель </font><font>238</font></font></p>

<p class="MsoToc2"><font><font>8,8 Итерация </font><font>241</font></font></p>

<p class="MsoToc3"><font><font>8.8.1 время </font><font>242</font></font></p>

<p class="MsoToc3"><font><font>8.8.2 делать </font><font>242</font></font></p>

<p class="MsoToc3"><font><font>8.8.3 для </font><font>243</font></font></p>

<p class="MsoToc3"><font><font>8.8.4 Еогеасп </font><font>244</font></font></p>

<p class="MsoToc2"><font><font>8,9 Перейти </font><font>246</font></font></p>

<p class="MsoToc3"><font><font>8.9.1 перерыва </font><font>247</font></font></p>

<p class="MsoToc3"><font><font>8.9.2 Продолжить </font><font>248</font></font></p>

<p class="MsoToc3"><font><font>8.9.3 перейти </font><font>248</font></font></p>

<p class="MsoToc3"><font><font>8.9.4 возвращение </font><font>250</font></font></p>

<p class="MsoToc3"><font><font>8.9.5 броска </font><font>250</font></font></p>

<p class="MsoToc2"><font><font>8,10 попытки </font><font>251</font></font></p>

<p class="MsoToc2"><font><font>8,11 проверенные и непроверенные заявления ............................................ .............................................. </font><font>254</font></font></p>

<p class="MsoToc2"><font><font>8,12 замок </font><font>254</font></font></p>

<p class="MsoToc2"><font><font>8,13 использования </font><font>255</font></font></p>

<p class="MsoToc2"><font><font>8,14 выходом </font><font>257</font></font></p>

<p class="MsoToc1"><font><font>9. </font><font>259</font></font></p>

<p class="MsoToc2"><font><font>9,1 компиляция </font><font>259</font></font></p>

<p class="MsoToc2"><font><font>9,2 Пространство имен </font><font>259</font></font></p>

<p class="MsoToc2"><font><font>9,3 Extern </font><font>260</font></font></p>

<p class="MsoToc2"><font><font>9.4 Использование </font><font>261</font></font></p>

<p class="MsoToc3"><font><font>9.4.1 Использование псевдонимов </font><font>262</font></font></p>

<p class="MsoToc3"><font><font>9.4.2 Использование имен </font><font>264</font></font></p>

<p class="MsoToc2"><font><font>9,5 Пространство имен </font><font>266</font></font></p>

<p class="MsoToc2"><font><font>9,6 Тип </font><font>266</font></font></p>

<p class="MsoToc2"><font><font>9,7 псевдоним пространства имен </font><font>267</font></font></p>

<p class="MsoToc3"><font><font>9.7.1 Уникальность </font><font>268</font></font></p>

<p class="MsoToc1"><font><font>10. </font><font>269</font></font></p>

<p class="MsoToc2"><font><font>10,1 Класс </font><font>269</font></font></p>

<p class="MsoToc3"><font><font>10.1.1 Класс </font><font>269</font></font></p>

<p class="MsoToc4"><font><font>10.1.1.1 Аннотация </font><font>270</font></font></p>

<p class="MsoToc4"><font><font>10.1.1.2 Запечатанные </font><font>270</font></font></p>

<p class="MsoToc4"><font><font>10.1.1.3 Статический </font><font>270</font></font></p>

<p class="MsoToc3"><font><font>10.1.2 Частичный </font><font>271</font></font></p>

<p class="MsoToc3"><font><font>10.1.3 Тип </font><font>271</font></font></p>

<p class="MsoToc3"><font><font>10.1.4 базового класса </font><font>272</font></font></p>

<p class="MsoToc4"><font><font>10.1.4.1 базы </font><font>272</font></font></p>

<p class="MsoToc4"><font><font>10.1.4.2 интерфейс </font><font>274</font></font></p>

<p class="MsoToc3"><font><font>10.1.5 Тип параметра </font><font>274</font></font></p>

<p class="MsoToc3"><font><font>10.1.6 Класс </font><font>278</font></font></p>

<p class="MsoToc2"><font><font>10,2 частичном </font><font>278</font></font></p>

<p class="MsoToc3"><font><font>10.2.1 </font><font>278</font></font></p>

<p class="MsoToc3"><font><font>10.2.2 </font><font>279</font></font></p>

<p class="MsoToc3"><font><font>10.2.3 Тип и параметры </font><font>279</font></font></p>

<p class="MsoToc3"><font><font>10.2.4 базы </font><font>280</font></font></p>

<p class="MsoToc3"><font><font>10.2.5 базы </font><font>280</font></font></p>

<p class="MsoToc3"><font><font>10.2.6 </font><font>280</font></font></p>

<p class="MsoToc3"><font><font>10.2.7 Частичный </font><font>281</font></font></p>

<p class="MsoToc3"><font><font>10.2.8 Наименование </font><font>283</font></font></p>

<p class="MsoToc2"><font><font>10,3 Класс </font><font>283</font></font></p>

<p class="MsoToc3"><font><font>10.3.1 экземпляр </font><font>285</font></font></p>

<p class="MsoToc3"><font><font>10.3.2 Члены построен </font><font>285</font></font></p>

<p class="MsoToc3"><font><font>10.3.3 </font><font>286</font></font></p>

<p class="MsoToc3"><font><font>10.3.4 новых </font><font>287</font></font></p>

<p class="MsoToc3"><font><font>10.3.5 Доступ </font><font>287</font></font></p>

<p class="MsoToc3"><font><font>10.3.6 Учредительного </font><font>287</font></font></p>

<p class="MsoToc3"><font><font>10.3.7 Статические и экземпляр </font><font>287</font></font></p>

<p class="MsoToc3"><font><font>10.3.8 Вложенные </font><font>288</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.1 Полное </font><font>289</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.2 Объявленная </font><font>289</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.3 </font><font>289</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.4 этом </font><font>290</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.5 Доступ к закрытым и защищенным членам содержащего типа ..................................... ...... </font><font>290</font></font></p>

<p class="MsoToc4"><font><font>10.3.8.6 Вложенные типы универсальных классов .......................................... ................................................. </font><font>291</font></font></p>

<p class="MsoToc3"><font><font>10.3.9 защищены член </font><font>292</font></font></p>

<p class="MsoToc4"><font><font>10.3.9.1 Имена членов зарезервированы для свойства .......................................... ..................................... </font><font>292</font></font></p>

<p class="MsoToc4"><font><font>10.3.9.2 Имена членов зарезервированы для событий .......................................... .......................................... </font><font>293</font></font></p>

<p class="MsoToc4"><font><font>10.3.9.3 Имена членов зарезервированы для индексаторов .......................................... ....................................... </font><font>293</font></font></p>

<p class="MsoToc4"><font><font>10.3.9.4 Имена членов зарезервированы для деструкторов .......................................... ................................... </font><font>293</font></font></p>

<p class="MsoToc2"><font><font>10,4 </font><font>293</font></font></p>

<p class="MsoToc2"><font><font>10,5 </font><font>295</font></font></p>

<p class="MsoToc3"><font><font>10.5.1 Статические и экземпляр </font><font>296</font></font></p>

<p class="MsoToc3"><font><font>10.5.2 Readonly </font><font>297</font></font></p>

<p class="MsoToc4"><font><font>10.5.2.1 Использование статического поля для чтения констант ......................................... .................................... </font><font>297</font></font></p>

<p class="MsoToc4"><font><font>10.5.2.2 версиями константы и статические поля только для чтения ........................................ ......................... </font><font>298</font></font></p>

<p class="MsoToc3"><font><font>10.5.3 летучих </font><font>298</font></font></p>

<p class="MsoToc3"><font><font>10.5.4 поле </font><font>299</font></font></p>

<p class="MsoToc3"><font><font>10.5.5 Переменные </font><font>300</font></font></p>

<p class="MsoToc4"><font><font>10.5.5.1 статического поля </font><font>301</font></font></p>

<p class="MsoToc4"><font><font>10.5.5.2 Экземпляр поля </font><font>302</font></font></p>

<p class="MsoToc2"><font><font>10,6 </font><font>302</font></font></p>

<p class="MsoToc3"><font><font>10.6.1 Метод </font><font>304</font></font></p>

<p class="MsoToc4"><font><font>10.6.1.1 Значение </font><font>306</font></font></p>

<p class="MsoToc4"><font><font>10.6.1.2 Ссылка </font><font>306</font></font></p>

<p class="MsoToc4"><font><font>10.6.1.3 выходных </font><font>307</font></font></p>

<p class="MsoToc4"><font><font>10.6.1.4 Параметры </font><font>308</font></font></p>

<p class="MsoToc3"><font><font>10.6.2 Статические и экземпляр </font><font>310</font></font></p>

<p class="MsoToc3"><font><font>10.6.3 Виртуальный </font><font>310</font></font></p>

<p class="MsoToc3"><font><font>10.6.4 Override </font><font>312</font></font></p>

<p class="MsoToc3"><font><font>10.6.5 Запечатанные </font><font>314</font></font></p>

<p class="MsoToc3"><font><font>10.6.6 Аннотация </font><font>315</font></font></p>

<p class="MsoToc3"><font><font>10.6.7 Внешнее </font><font>316</font></font></p>

<p class="MsoToc3"><font><font>10.6.8 Частичный </font><font>317</font></font></p>

<p class="MsoToc3"><font><font>10.6.9 Расширение </font><font>317</font></font></p>

<p class="MsoToc3"><font><font>10.6.10 метод </font><font>318</font></font></p>

<p class="MsoToc3"><font><font>10.6.11 метод </font><font>318</font></font></p>

<p class="MsoToc2"><font><font>10,7 </font><font>318</font></font></p>

<p class="MsoToc3"><font><font>10.7.1 Статические и экземпляр </font><font>320</font></font></p>

<p class="MsoToc3"><font><font>10.7.2 </font><font>320</font></font></p>

<p class="MsoToc3"><font><font>10.7.3 автоматически реализуемые свойства ............................................ ........................................... </font><font>325</font></font></p>

<p class="MsoToc3"><font><font>10.7.4 </font><font>325</font></font></p>

<p class="MsoToc3"><font><font>10.7.5 Виртуальные, запечатанные, управление, и абстрактные методы доступа ...................................... ................................... </font><font>327</font></font></p>

<p class="MsoToc2"><font><font>10,8 </font><font>328</font></font></p>

<p class="MsoToc3"><font><font>10.8.1 поле типа </font><font>330</font></font></p>

<p class="MsoToc3"><font><font>10.8.2 события </font><font>332</font></font></p>

<p class="MsoToc3"><font><font>10.8.3 Статические и экземпляр </font><font>333</font></font></p>

<p class="MsoToc3"><font><font>10.8.4 Виртуальные, запечатанные, управление, и абстрактные методы доступа ...................................... ................................... </font><font>333</font></font></p>

<p class="MsoToc2"><font><font>10,9 </font><font>333</font></font></p>

<p class="MsoToc3"><font><font>10.9.1 Indexer </font><font>337</font></font></p>

<p class="MsoToc2"><font><font>10,10 </font><font>337</font></font></p>

<p class="MsoToc3"><font><font>10.10.1 Унарные </font><font>339</font></font></p>

<p class="MsoToc3"><font><font>10.10.2 двоичных </font><font>339</font></font></p>

<p class="MsoToc3"><font><font>10.10.3 преобразования </font><font>340</font></font></p>

<p class="MsoToc2"><font><font>10,11 экземпляра </font><font>342</font></font></p>

<p class="MsoToc3"><font><font>10.11.1 Конструктор </font><font>343</font></font></p>

<p class="MsoToc3"><font><font>10.11.2 переменной экземпляра </font><font>344</font></font></p>

<p class="MsoToc3"><font><font>10.11.3 Конструктор </font><font>344</font></font></p>

<p class="MsoToc3"><font><font>10.11.4 По умолчанию </font><font>346</font></font></p>

<p class="MsoToc3"><font><font>10.11.5 Частное </font><font>346</font></font></p>

<p class="MsoToc3"><font><font>10.11.6 Дополнительные параметры конструктора экземпляра ........................................... ...................................... </font><font>347</font></font></p>

<p class="MsoToc2"><font><font>10,12 статических </font><font>347</font></font></p>

<p class="MsoToc2"><font><font>10,13 </font><font>349</font></font></p>

<p class="MsoToc2"><font><font>10,14 </font><font>351</font></font></p>

<p class="MsoToc3"><font><font>10.14.1 Enumerator </font><font>351</font></font></p>

<p class="MsoToc3"><font><font>10.14.2 Enumerable </font><font>351</font></font></p>

<p class="MsoToc3"><font><font>10.14.3 доходности </font><font>351</font></font></p>

<p class="MsoToc3"><font><font>10.14.4 Enumerator </font><font>351</font></font></p>

<p class="MsoToc4"><font><font>10.14.4.1 MoveNext </font><font>352</font></font></p>

<p class="MsoToc4"><font><font>10.14.4.2 данной </font><font>353</font></font></p>

<p class="MsoToc4"><font><font>10.14.4.3 Dispose </font><font>353</font></font></p>

<p class="MsoToc3"><font><font>10.14.5 Enumerable </font><font>353</font></font></p>

<p class="MsoToc4"><font><font>10.14.5.1 GetEnumerator метод ............................................ .................................................. </font><font>354</font></font></p>

<p class="MsoToc3"><font><font>10.14.6 Осуществление </font><font>354</font></font></p>

<p class="MsoToc1"><font><font>11. </font><font>361</font></font></p>

<p class="MsoToc2"><font><font>11,1 Struct </font><font>361</font></font></p>

<p class="MsoToc3"><font><font>11.1.1 Struct </font><font>361</font></font></p>

<p class="MsoToc3"><font><font>11.1.2 Частичный </font><font>362</font></font></p>

<p class="MsoToc3"><font><font>11.1.3 Struct </font><font>362</font></font></p>

<p class="MsoToc3"><font><font>11.1.4 Struct </font><font>362</font></font></p>

<p class="MsoToc2"><font><font>11,2 Struct </font><font>362</font></font></p>

<p class="MsoToc2"><font><font>11,3 Класс и структура </font><font>362</font></font></p>

<p class="MsoToc3"><font><font>11.3.1 Значение </font><font>363</font></font></p>

<p class="MsoToc3"><font><font>11.3.2 </font><font>364</font></font></p>

<p class="MsoToc3"><font><font>11.3.3 </font><font>364</font></font></p>

<p class="MsoToc3"><font><font>11.3.4 По умолчанию </font><font>364</font></font></p>

<p class="MsoToc3"><font><font>11.3.5 бокса и </font><font>365</font></font></p>

<p class="MsoToc3"><font><font>11.3.6 Значение </font><font>366</font></font></p>

<p class="MsoToc3"><font><font>11.3.7 поле </font><font>366</font></font></p>

<p class="MsoToc3"><font><font>11.3.8 </font><font>367</font></font></p>

<p class="MsoToc3"><font><font>11.3.9 </font><font>368</font></font></p>

<p class="MsoToc3"><font><font>11.3.10 статических </font><font>368</font></font></p>

<p class="MsoToc2"><font><font>11,4 Struct </font><font>368</font></font></p>

<p class="MsoToc3"><font><font>11.4.1 База данных целого </font><font>368</font></font></p>

<p class="MsoToc3"><font><font>11.4.2 База данных логический </font><font>370</font></font></p>

<p class="MsoToc1"><font><font>12. </font><font>373</font></font></p>

<p class="MsoToc2"><font><font>12,1 массива </font><font>373</font></font></p>

<p class="MsoToc3"><font><font>12.1.1 System.Array </font><font>374</font></font></p>

<p class="MsoToc3"><font><font>12.1.2 Массивы и универсальный интерфейс IList ......................................... .............................................. </font><font>374</font></font></p>

<p class="MsoToc2"><font><font>12,2 массива </font><font>374</font></font></p>

<p class="MsoToc2"><font><font>12,3 элемент массива </font><font>375</font></font></p>

<p class="MsoToc2"><font><font>12,4 массива </font><font>375</font></font></p>

<p class="MsoToc2"><font><font>12,5 массива </font><font>375</font></font></p>

<p class="MsoToc2"><font><font>12,6 массива </font><font>375</font></font></p>

<p class="MsoToc1"><font><font>13. </font><font>379</font></font></p>

<p class="MsoToc2"><font><font>13,1 интерфейса </font><font>379</font></font></p>

<p class="MsoToc3"><font><font>13.1.1 Интерфейс </font><font>379</font></font></p>

<p class="MsoToc3"><font><font>13.1.2 Частичный </font><font>379</font></font></p>

<p class="MsoToc3"><font><font>13.1.3 Вариант параметр типа </font><font>380</font></font></p>

<p class="MsoToc4"><font><font>Разница 13.1.3.1 </font><font>380</font></font></p>

<p class="MsoToc4"><font><font>Разница 13.1.3.2 </font><font>381</font></font></p>

<p class="MsoToc3"><font><font>13.1.4 базы </font><font>381</font></font></p>

<p class="MsoToc3"><font><font>13.1.5 Интерфейс </font><font>382</font></font></p>

<p class="MsoToc2"><font><font>13,2 интерфейса </font><font>382</font></font></p>

<p class="MsoToc3"><font><font>13.2.1 Интерфейс </font><font>383</font></font></p>

<p class="MsoToc3"><font><font>13.2.2 Интерфейс </font><font>383</font></font></p>

<p class="MsoToc3"><font><font>13.2.3 Интерфейс </font><font>384</font></font></p>

<p class="MsoToc3"><font><font>13.2.4 Интерфейс </font><font>384</font></font></p>

<p class="MsoToc3"><font><font>13.2.5 Интерфейс член </font><font>384</font></font></p>

<p class="MsoToc2"><font><font>13,3 Полные имена членов интерфейса ............................................ ............................................... </font><font>386</font></font></p>

<p class="MsoToc2"><font><font>13,4 интерфейса </font><font>386</font></font></p>

<p class="MsoToc3"><font><font>13.4.1 Явная реализация члена интерфейса ........................................... ..................................... </font><font>387</font></font></p>

<p class="MsoToc3"><font><font>13.4.2 Уникальность реализованных интерфейсов ........................................... ............................................ </font><font>389</font></font></p>

<p class="MsoToc3"><font><font>13.4.3 Реализация универсальных методов ........................................... ................................................ </font><font>390</font></font></p>

<p class="MsoToc3"><font><font>13.4.4 Интерфейс </font><font>391</font></font></p>

<p class="MsoToc3"><font><font>13.4.5 Интерфейс наследование реализации ............................................ ............................................. </font><font>394</font></font></p>

<p class="MsoToc3"><font><font>13.4.6 Интерфейс </font><font>395</font></font></p>

<p class="MsoToc3"><font><font>13.4.7 Абстрактные классы и </font><font>396</font></font></p>

<p class="MsoToc1"><font><font>14. </font><font>399</font></font></p>

<p class="MsoToc2"><font><font>14,1 Enum </font><font>399</font></font></p>

<p class="MsoToc2"><font><font>14,2 Enum </font><font>399</font></font></p>

<p class="MsoToc2"><font><font>14,3 Enum </font><font>400</font></font></p>

<p class="MsoToc2"><font><font>14,4 System.Enum </font><font>402</font></font></p>

<p class="MsoToc2"><font><font>14,5 Enum ценностей и </font><font>402</font></font></p>

<p class="MsoToc1"><font><font>15. </font><font>403</font></font></p>

<p class="MsoToc2"><font><font>15,1 делегата </font><font>403</font></font></p>

<p class="MsoToc2"><font><font>15,2 делегата </font><font>405</font></font></p>

<p class="MsoToc2"><font><font>15,3 делегата </font><font>405</font></font></p>

<p class="MsoToc2"><font><font>15,4 делегата </font><font>406</font></font></p>

<p class="MsoToc1"><font><font>16. </font><font>409</font></font></p>

<p class="MsoToc2"><font><font>16,1 причины </font><font>409</font></font></p>

<p class="MsoToc2"><font><font>16,2 System.Exception </font><font>409</font></font></p>

<p class="MsoToc2"><font><font>16,3 Каким исключения </font><font>409</font></font></p>

<p class="MsoToc2"><font><font>16,4 Общие исключения </font><font>410</font></font></p>

<p class="MsoToc1"><font><font>17. </font><font>411</font></font></p>

<p class="MsoToc2"><font><font>17,1 атрибутов </font><font>411</font></font></p>

<p class="MsoToc3"><font><font>17.1.1 Атрибут </font><font>411</font></font></p>

<p class="MsoToc3"><font><font>17.1.2 Позиционные и именованные </font><font>412</font></font></p>

<p class="MsoToc3"><font><font>17.1.3 характеристики параметров </font><font>413</font></font></p>

<p class="MsoToc2"><font><font>17,2 атрибутов </font><font>413</font></font></p>

<p class="MsoToc2"><font><font>17,3 атрибутов </font><font>418</font></font></p>

<p class="MsoToc3"><font><font>17.3.1 Компиляция </font><font>418</font></font></p>

<p class="MsoToc3"><font><font>17.3.2 во время выполнения поиска экземпляра атрибута ....................................... ........................................... </font><font>419</font></font></p>

<p class="MsoToc2"><font><font>17,4 зарезервировано </font><font>419</font></font></p>

<p class="MsoToc3"><font><font>17.4.1 AttributeUsage </font><font>419</font></font></p>

<p class="MsoToc3"><font><font>17.4.2 Условные </font><font>420</font></font></p>

<p class="MsoToc4"><font><font>17.4.2.1 Условное </font><font>420</font></font></p>

<p class="MsoToc4"><font><font>17.4.2.2 Условное атрибутом </font><font>422</font></font></p>

<p class="MsoToc3"><font><font>17.4.3 Устаревшая </font><font>423</font></font></p>

<p class="MsoToc2"><font><font>17,5 атрибуты для </font><font>424</font></font></p>

<p class="MsoToc3"><font><font>17.5.1 Взаимодействие с COM и Win32 компонентов ......................................... ............................. </font><font>424</font></font></p>

<p class="MsoToc3"><font><font>17.5.2 Взаимодействие с другими. NET языков ......................................... ......................................... </font><font>425</font></font></p>

<p class="MsoToc4"><font><font>17.5.2.1 IndexerName </font><font>425</font></font></p>

<p class="MsoToc1"><font><font>18. </font><font>Небезопасный </font><font>427</font></font></p>

<p class="MsoToc2"><font><font>18,1 Небезопасная </font><font>427</font></font></p>

<p class="MsoToc2"><font><font>18,2 указатель </font><font>429</font></font></p>

<p class="MsoToc2"><font><font>18,3 фиксированной и подвижной </font><font>432</font></font></p>

<p class="MsoToc2"><font><font>18,4 указатель </font><font>432</font></font></p>

<p class="MsoToc3"><font><font>18.4.1 Указатель </font><font>433</font></font></p>

<p class="MsoToc2"><font><font>18,5 Указатели в </font><font>434</font></font></p>

<p class="MsoToc3"><font><font>18.5.1 Указатель </font><font>435</font></font></p>

<p class="MsoToc3"><font><font>18.5.2 Указатель член </font><font>435</font></font></p>

<p class="MsoToc3"><font><font>18.5.3 Указатель элемента </font><font>436</font></font></p>

<p class="MsoToc3"><font><font>18.5.4 адрес- </font><font>436</font></font></p>

<p class="MsoToc3"><font><font>18.5.5 приращение указателя и </font><font>437</font></font></p>

<p class="MsoToc3"><font><font>18.5.6 Указатель </font><font>437</font></font></p>

<p class="MsoToc3"><font><font>18.5.7 Указатель </font><font>438</font></font></p>

<p class="MsoToc3"><font><font>18.5.8 SizeOf </font><font>439</font></font></p>

<p class="MsoToc2"><font><font>18,6 фиксированной </font><font>439</font></font></p>

<p class="MsoToc2"><font><font>18,7 Фиксированный размер </font><font>443</font></font></p>

<p class="MsoToc3"><font><font>18.7.1 буфер фиксированного размера </font><font>443</font></font></p>

<p class="MsoToc3"><font><font>18.7.2 Фиксированные размеры буферов в </font><font>444</font></font></p>

<p class="MsoToc3"><font><font>18.7.3 Определенное присваивание </font><font>445</font></font></p>

<p class="MsoToc2"><font><font>18,8 стека </font><font>445</font></font></p>

<p class="MsoToc2"><font><font>18,9 Динамическая память </font><font>446</font></font></p>

<p class="MsoToc1"><font><font>А. Документация </font><font>449</font></font></p>

<p class="MsoToc2"><font><font>A.1 </font><font>449</font></font></p>

<p class="MsoToc2"><font><font>А.2 Рекомендуемые </font><font>450</font></font></p>

<p class="MsoToc3"><font><font>A.2.1 </font><font>451</font></font></p>

<p class="MsoToc3"><font><font>A.2.2 </font><font>451</font></font></p>

<p class="MsoToc3"><font><font>A.2.3 </font><font>452</font></font></p>

<p class="MsoToc3"><font><font>A.2.4 </font><font>452</font></font></p>

<p class="MsoToc3"><font><font>A.2.5 </font><font>453</font></font></p>

<p class="MsoToc3"><font><font>A.2.6 </font><font>453</font></font></p>

<p class="MsoToc3"><span lang="DA"><font><font>А.2.7</font></font></span><span lang="DA"><font></font></span></p>

<p class="MsoToc3"><span lang="DA"><font><font>A.2.8</font></font></span><span lang="DA"><font></font></span></p>

<p class="MsoToc3"><span lang="DA"><font><font>A.2.9</font></font></span><span lang="DA"><font></font></span></p>

<p class="MsoToc3"><font><font>A.2.10 </font><font>455</font></font></p>

<p class="MsoToc3"><font><font>A.2.11 </font><font>456</font></font></p>

<p class="MsoToc3"><font><font>A.2.12 </font><font>456</font></font></p>

<p class="MsoToc3"><font><font>A.2.13 </font><font>457</font></font></p>

<p class="MsoToc3"><font><font>A.2.14 </font><font>457</font></font></p>

<p class="MsoToc3"><font><font>A.2.15 </font><font>457</font></font></p>

<p class="MsoToc3"><font><font>A.2.16 </font><font>458</font></font></p>

<p class="MsoToc3"><font><font>A.2.17 </font><font>458</font></font></p>

<p class="MsoToc3"><font><font>A.2.18 </font><font>458</font></font></p>

<p class="MsoToc2"><font><font>А.3 Обработка документации </font><font>459</font></font></p>

<p class="MsoToc3"><font><font>A.3.1 ID строки </font><font>459</font></font></p>

<p class="MsoToc3"><font><font>A.3.2 ID строки </font><font>460</font></font></p>

<p class="MsoToc2"><font><font>A.4 </font><font>464</font></font></p>

<p class="MsoToc3"><font><font>A.4.1 C # источник </font><font>464</font></font></p>

<p class="MsoToc3"><font><font>А.4.2 В результате </font><font>466</font></font></p>

<p class="MsoToc1"><font><font>B. </font><font>470</font></font></p>

<p class="MsoToc2"><font><font>B.1 Лексические </font><font>470</font></font></p>

<p class="MsoToc3"><font><font>B.1.1 линии </font><font>470</font></font></p>

<p class="MsoToc3"><font><font>B.1.2 </font><font>470</font></font></p>

<p class="MsoToc3"><font><font>B.1.3 белый </font><font>471</font></font></p>

<p class="MsoToc3"><font><font>B.1.4 </font><font>471</font></font></p>

<p class="MsoToc3"><font><font>B.1.5 Unicode управляющие последовательности символов ........................................... .............................................. </font><font>471</font></font></p>

<p class="MsoToc3"><font><font>B.1.6 </font><font>471</font></font></p>

<p class="MsoToc3"><font><font>B.1.7 </font><font>472</font></font></p>

<p class="MsoToc3"><font><font>B.1.8 </font><font>473</font></font></p>

<p class="MsoToc3"><font><font>В.1.9 операторов и </font><font>475</font></font></p>

<p class="MsoToc3"><font><font>B.1.10 Предварительная обработка </font><font>475</font></font></p>

<p class="MsoToc2"><font><font>B.2 Синтаксическая </font><font>477</font></font></p>

<p class="MsoToc3"><font><font>B.2.1 Basic </font><font>477</font></font></p>

<p class="MsoToc3"><font><font>B.2.2 </font><font>478</font></font></p>

<p class="MsoToc3"><font><font>B.2.3 </font><font>479</font></font></p>

<p class="MsoToc3"><font><font>B.2.4 </font><font>479</font></font></p>

<p class="MsoToc3"><font><font>B.2.5 </font><font>486</font></font></p>

<p class="MsoToc3"><font><font>B.2.6 </font><font>489</font></font></p>

<p class="MsoToc3"><font><font>B.2.7 </font><font>490</font></font></p>

<p class="MsoToc3"><font><font>B.2.8 </font><font>497</font></font></p>

<p class="MsoToc3"><font><font>B.2.9 </font><font>498</font></font></p>

<p class="MsoToc3"><font><font>B.2.10 </font><font>498</font></font></p>

<p class="MsoToc3"><font><font>B.2.11 </font><font>499</font></font></p>

<p class="MsoToc3"><font><font>B.2.12 </font><font>500</font></font></p>

<p class="MsoToc3"><font><font>B.2.13 </font><font>500</font></font></p>

<p class="MsoToc2"><font><font>B.3 Грамматика расширения для небезопасного кода .......................................... .................................................. .... </font><font>502</font></font></p>

<p class="MsoToc1"><font><font>C. </font><font>505</font></font></p>

<p class="MsoNormal"><a name="_Ref463345912"></a></p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section3">

<h1><a name="_Toc251612863"><font><font>1. </font><font>Введение</font></font></a></h1>

<p class="MsoNormal"><font><font>C # (произносится как "См. Sharp") является простой, современный, объектно-ориентированный, и типизированный язык программирования. </font><font>C # имеет свои корни в семье C языках и будет немедленно знакомые C, C + +, Java и программистов. </font><font>C # стандартизирован как ECMA International </font></font><span class="Term"><font><font>ECMA-334
</font></font></span><font><font> стандартных и ISO / IEC как </font></font><span class="Term"><font><font>ISO / IEC 23270</font></font></span><font><font> стандарта. </font><font>Microsoft C # компилятор для. NET Framework является соответствующее выполнение обоих этих стандартов.</font></font></p>

<p class="MsoNormal"><font><font>C # является объектно-ориентированным языком, но C # дополнительно включает в себя поддержку </font></font><span class="Term"><font><font>компонентно-ориентированного</font></font></span><font><font> программирования. </font><font>Современный дизайн программного обеспечения все больше и больше полагается на компоненты программного обеспечения в форме автономной и самостоятельной описания пакетов функциональности. </font><font>Ключевые таких компонентов является то, что они представляют собой модель программирования с свойства, методы и события, они имеют атрибуты, которые обеспечивают декларативную информацию о компоненте, и они включают свои собственные документы. </font><font>C # предоставляет языковые конструкции для непосредственной поддержки этих понятий, делая C # очень естественный язык, на котором для создания и использования программных компонентов.</font></font></p>

<p class="MsoNormal"><font><font>Несколько C # предлагает помощь в строительстве прочный и долговечный приложений: </font></font><span class="Term"><font><font>Сборка мусора</font></font></span><font><font> автоматически освобождает память, занятую неиспользуемых объектов, </font></font><span class="Term"><font><font>обработка исключений</font></font></span><font><font> 
обеспечивает структурированный и расширяемый подход к обнаружению ошибок и восстановления, а также </font></font><span class="Term"><font><font>типизированные</font></font></span><font><font> конструкции языка делает невозможным считывается из неинициализированных переменных, индексов массивов за их пределы, или для выполнения снят приведения типа.</font></font></p>

<p class="MsoNormal"><font><font>C # имеет </font></font><span class="Term"><font><font>унифицированную систему типов</font></font></span><font><font> . </font><font>Все типы C #, в том числе примитивных типов, таких как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>двойные</font></font></span></span><font><font> , наследуют от одного корня </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> типа. </font><font>Таким образом, все типы разделяют ряд общих операций, и значение любого типа может быть хранятся, транспортируются, и работать, в согласованном порядке. </font><font>Кроме того, C # поддерживает пользовательские ссылочные типы и типы значений, позволяя динамическое выделение объектов, а также в линии хранения легких конструкций.</font></font></p>

<p class="MsoNormal"><font><font>Чтобы убедиться, что C # программ и библиотек могут изменяться с течением времени в совместимом образом, большое внимание было уделено </font></font><span class="Term"><font><font>версий</font></font></span><font><font> 
в дизайне С #. </font><font>Многие языки программирования обращают мало внимания на эту проблему, и, как следствие, программы, написанные на этих языках сломать чаще, чем необходимо, когда новые версии зависимых библиотек вводятся. </font><font>Аспекты дизайна С #, которые напрямую зависят от версий соображения включают отдельную </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>виртуальную</font></font></span></span><font><font> 
и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>переопределения</font></font></span></span><font><font> 
модификаторов, правила для выбора метода перегрузки, а также поддержка явного заявления члена интерфейса.</font></font></p>

<p class="MsoNormal"><font><font>Остальная часть этой главы описывает основные особенности языка C #. </font><font>Хотя в последующих главах описываются правила и исключения деталям, а иногда и математической образом, в этой главе стремится к ясности и краткости за счет полноты. </font><font>Цель состоит в том, чтобы предоставить читателю введение в язык, который будет способствовать написанию программ раннего и чтения последующих глав.</font></font></p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612864"></a><a name="_Toc46039318"><font><font>1,1 Привет, мир</font></font></a></h2>

<p class="MsoNormal"><font><font>"Hello, World" программа традиционно используется, чтобы ввести языка программирования. </font><font>Здесь она находится в C #:</font></font></p>

<p class="Code"><font><font>использования системы;</font></font></p>

<p class="Code"><font><font>Класс Hello </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Hello, World"); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
}</font></font></p>

<p class="MsoNormal"><font><font>C # исходный файлы обычно имеют расширение </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>. CS</font></font></span></span><font><font> . </font><font>Предполагая, что "Hello, World" программа хранится в файле </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>hello.cs</font></font></span></span><font><font> , программа может быть скомпилирована с Microsoft C # компилятора с помощью командной строки</font></font></p>

<p class="Code"><font><font>CSC hello.cs</font></font></p>

<p class="MsoNormal"><font><font>, которая производит сборку с именем исполняемого </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>hello.exe</font></font></span></span><font><font> . </font><font>Продукции, произведенной это приложение при запуске является</font></font></p>

<p class="Code"><font><font>Hello, World</font></font></p>

<p class="MsoNormal"><font><font>"Hello, World" Программа начинается с </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>использованием</font></font></span></span><font><font> директивы, которая ссылается на </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>системе</font></font></span></span><font><font> 
имен. </font><font>Пространства имен предоставляют иерархические средства организации C # программ и библиотек. </font><font>Пространства имен содержат типы и других пространств имен, например, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>система</font></font></span></span><font><font> 
имен содержит ряд типов, такие как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>консоль</font></font></span></span><font><font> класса, указанные в программе, и ряд других имен, таких как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>IO</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>коллекций</font></font></span></span><font><font> . </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Использованием</font></font></span></span><font><font> директивы, которая ссылается на данном пространстве имен позволяет неквалифицированным использованием типов, которые являются членами этого пространства имен. </font><font>В связи с </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>использованием</font></font></span></span><font><font> 
директивы, программа может использовать </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>Console.WriteLine</font></font></span></span><font><font> как сокращение для </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>System.Console.WriteLine</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Здравствуйте</font></font></span></span><font><font> 
класса объявленный "Hello, World" программа имеет один член, метод с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Главного</font></font></span></span><font><font> . </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Главный</font></font></span></span><font><font> 
метод объявляется с помощью </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>статического</font></font></span></span><font><font> модификатора. </font><font>В то время как методы экземпляра может ссылаться на конкретный экземпляр объекта, включающего, используя ключевое слово </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>этого</font></font></span></span><font><font> , статические методы работают без ссылки на конкретный объект. </font><font>По соглашению, статический метод с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Главного</font></font></span></span><font><font> 
служит точкой входа в программу.</font></font></p>

<p class="MsoNormal"><font><font>Выход из программы производится </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>WriteLine</font></font></span></span><font><font> 
метод </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Console</font></font></span></span><font><font> 
класса в </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>системе</font></font></span></span><font><font> 
имен. </font><font>Этот класс обеспечивает. NET Framework библиотеки классов, которые по умолчанию, автоматически, на которые ссылается компилятор Microsoft C #. </font><font>Отметим, что C # сам по себе не есть отдельная библиотека времени выполнения. </font><font>Вместо этого,. NET Framework </font></font><em><font><font>является</font></font></em><font><font> среда библиотеки C #.</font></font></p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612865"></a><a name="_Toc46039319"><font><font>1,2 Структура программы</font></font></a></h2>

<p class="MsoNormal"><font><font>Основных организационных концепций в C # являются </font></font><span class="Term"><font><font>программы</font></font></span><font><font> ,
 </font></font><span class="Term"><font><font>пространства имен</font></font></span><font><font> , </font></font><span class="Term"><font><font>типы</font></font></span><font><font> , </font></font><span class="Term"><font><font>члены</font></font></span><font><font> и </font></font><span class="Term"><font><font>собраний</font></font></span><font><font> . </font><font>C # программы состоят из одного или нескольких исходных файлов. </font><font>Программы объявить типы, которые содержат членов и могут быть организованы в пространствах имен. </font><font>Классы и интерфейсы являются примерами типов. </font><font>Поля, методы, свойства и события являются примерами членов. </font><font>Когда C # программы составляются, они физически упакованы в сборки. </font><font>Ассамблей обычно имеют расширение </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>. EXE</font></font></span></span><font><font> или </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>. DLL</font></font></span></span><font><font> , в зависимости от того, они осуществляют </font></font><span class="Term"><font><font>приложений</font></font></span><font><font> или </font></font><span class="Term"><font><font>библиотек</font></font></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Пример</font></font></p>

<p class="Code"><font><font>использования системы;</font></font></p>

<p class="Code"><font><font>Пространство имен Acme.Collections </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; общественный класс стека </font></font><br><font><font>
&nbsp;&nbsp; { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Вступление сверху;</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Нажмите общественного недействительным (объект данных) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; топ = новая запись (сверху, данные); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Поп общественных объектов () { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если (верхней нулевой ==) бросать новые InvalidOperationException (); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; объект результат = top.data; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; топ = top.next; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; возвращение результата; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Вступление класса </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; общественный пост следующий; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; общественных объектов данных;</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; публичные записи (Entry следующем, данные объекта) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.next = следующий; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.data = данные; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
}</font></font></p>

<p class="MsoNormal"><font><font>объявляет класс с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>стека</font></font></span></span><font><font> в пространстве имен </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Acme.Collections</font></font></span></span><font><font> . </font><font>Полное имя этого класса </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Acme.Collections.Stack</font></font></span></span><font><font> . </font><font>Класс содержит несколько членов: поле с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>верхней</font></font></span></span><font><font> , два метода с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Нажмите</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>поп</font></font></span></span><font><font> , и вложенный класс с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>входа</font></font></span></span><font><font> . </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Вступление</font></font></span></span><font><font> 
класс также содержит три члена: поле с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>следующего</font></font></span></span><font><font> , поле с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>данных</font></font></span></span><font><font> , а конструктор. </font><font>Если предположить, что исходный код примера хранится в файле
 </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>acme.cs</font></font></span></span><font><font> , в командной строке</font></font></p>

<p class="Code"><font><font>CSC / т: библиотека acme.cs</font></font></p>

<p class="MsoNormal"><font><font>составляет, например, как библиотека (код без </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>главную</font></font></span></span><font><font> точку входа) и производит сборку с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>acme.dll</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Ассамблей содержать исполняемый код в виде </font></font><span class="Term"><font><font>Intermediate Language</font></font></span><font><font> (IL) инструкции, и символьной информации в виде </font></font><span class="Term"><font><font>метаданных</font></font></span><font><font> . </font><font>Перед его выполнением, IL кода в сборке автоматически преобразуется в конкретный процессор код Just-In-Time (JIT) компилятор. NET CLR.</font></font></p>

<p class="MsoNormal"><font><font>Потому что сборка является самостоятельной единицей описания функциональности содержащие код и метаданные, нет необходимости </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font># включить</font></font></span></span><font><font> директивы и заголовочных файлов в C #. </font><font>Общественные типы и члены, содержащейся в частности сборки доступны в C # программе просто ссылаться на эту сборку при компиляции программы. </font><font>Например, эта программа использует </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Acme.Collections.Stack</font></font></span></span><font><font> 
класс от </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>acme.dll</font></font></span></span><font><font> 
сборки:</font></font></p>

<p class="Code"><font><font>использования системы; </font></font><br><font><font>
использование Acme.Collections;</font></font></p>

<p class="Code"><font><font>класс тест </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; стек S = новые</font></font><br><font></font><br><font></font><br><font></font><br><font></font><br><font></font><br><font></font><br><font></font><br><font></font></p>

<p class="MsoNormal"><font><font>Если программа хранится в файле </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>test.cs</font></font></span></span><font><font> , когда </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>test.cs</font></font></span></span><font><font> компилируется, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>acme.dll</font></font></span></span><font><font> 
сборки можно ссылаться с помощью компилятора </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>/ г</font></font></span></span><font><font> опции:</font></font></p>

<p class="Code"><font><font>CSC / г: acme.dll test.cs</font></font></p>

<p class="MsoNormal"><font><font>Это создает исполняемые сборки с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>test.exe</font></font></span></span><font><font> , который при запуске выводит:</font></font></p>

<p class="Code"><font><font>100 </font></font><br><font><font>
10 </font></font><br><font><font>
1</font></font></p>

<p class="MsoNormal"><font><font>C # позволяет исходный текст программы, которая будет храниться в нескольких исходных файлов. </font><font>Когда несколько файлов C # компиляции программы, все исходные файлы обрабатываются вместе, и исходные файлы могут свободно ссылаться друг на друга, концептуально, это как если бы все исходные файлы были объединены в один большой файл перед обработкой. </font><font>Нападающий деклараций никогда не нуждался в C #, потому что, за очень редкими исключениями, порядка объявления незначительно. </font><font>C # не ограничивает исходного файла, чтобы объявить только один открытого типа и не требует имя исходного файла, чтобы соответствовать типу, объявленному в исходном файле.</font></font></p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612866"></a><a name="_Toc46039320"><font><font>1.3 Типы и переменные</font></font></a></h2>

<p class="MsoNormal"><font><font>Есть два вида типов в C #: </font></font><span class="Term"><font><font>типы значений</font></font></span><font><font> и </font></font><span class="Term"><font><font>ссылочные типы</font></font></span><font><font> . </font><font>Переменные типов значений непосредственно содержат данные в то время как переменные ссылочных типов магазинов ссылки на их данным, последний из которых известны как объекты. </font><font>Что касается типов, это возможно для двух переменных ссылаться на тот же объект, и, следовательно, возможные для работы от одной переменной влияет на объект, на который ссылается другой переменной. </font><font>С типами значений, переменные имеют свои собственные копии данных, и это не возможно для операции на одном влиять на других (кроме как в случае </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>работы</font></font></span></span><font><font> 
и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>из</font></font></span></span><font><font> 
переменных параметров).</font></font></p>

<p class="MsoNormal"><font><font>C # типа с значения делятся на </font></font><span class="Term"><font><font>простые типы</font></font></span><font><font> , </font></font><span class="Term"><font><font>перечисляемые типы</font></font></span><font><font> , </font></font><span class="Term"><font><font>типы структуры</font></font></span><font><font> и </font></font><span class="Term"><font><font>нулевых типов</font></font></span><font><font> и C # типы с ссылкой делятся на </font></font><span class="Term"><font><font>типы класса</font></font></span><font><font> , </font></font><span class="Term"><font><font>типы интерфейсов</font></font></span><font><font> , </font></font><span class="Term"><font><font>типов массивов</font></font></span><font><font> и </font></font><span class="Term"><font><font>типы делегата</font></font></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>В следующей таблице приведен обзор системы типа С #.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="583" style="width:437.4pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="199" colspan="2" valign="top" style="width:149.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Категория</font></font></b></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Описание</font></font></b></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.95pt">
  <td width="85" rowspan="9" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt;height:3.95pt">
  <p class="Table"><font><font>Соотношение </font></font><br><font><font>
  типов</font></font></p>
  </td>
  <td width="114" rowspan="6" valign="top" style="width:85.5pt;border-top:none;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.95pt">
  <p class="Table"><font><font>Простые типы</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.95pt">
  <p class="Table"><font><font>Подпись интеграл: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>SByte</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>короткие</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>долго</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.85pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.85pt">
  <p class="Table"><font><font>Unsigned интеграл: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Байт</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>USHORT</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>UINT</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>ULONG</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.85pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.85pt">
  <p class="Table"><font><font>Unicode символы: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>символ</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.85pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.85pt">
  <p class="Table"><font><font>IEEE с плавающей точкой: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>поплавок</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>двойной</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.85pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.85pt">
  <p class="Table"><font><font>Высокая точность десятичного: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>десятичные</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:3.85pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:3.85pt">
  <p class="Table"><font><font>Логика: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>BOOL</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Enum типа</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пользовательские типы вида </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>перечислений E {...}</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Структура типов</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пользовательские типы вида </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>структур S {...}</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Nullable типов</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Расширения всех других типов значения с </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>нулевым</font></font></span></span><font><font> значением</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:6.45pt">
  <td width="85" rowspan="6" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt;height:6.45pt">
  <p class="Table"><font><font>Справочник </font></font><br><font><font>
  типов</font></font></p>
  </td>
  <td width="114" rowspan="3" valign="top" style="width:85.5pt;border-top:none;
  border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:6.45pt">
  <p class="Table"><font><font>Типы классов</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:6.45pt">
  <p class="Table"><font><font>Окончательный базовый класс для всех других типов: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объект</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:6.45pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:6.45pt">
  <p class="Table"><font><font>Unicode строки: </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>строка</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid;height:6.45pt">
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt;height:6.45pt">
  <p class="Table"><font><font>Пользовательские типы вида </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>класса </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>C </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>{...}</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Типы интерфейсов</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пользовательские типы вида </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>интерфейса I {...}</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Типы массивов</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Одно-и многомерные, например, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>INT []</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>INT [,]</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Делегат типа</font></font></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пользовательские типы вида, например, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>делегат Int D (...)</font></font></span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal"><font><font>Восемь целых типов обеспечивают поддержку 8-бит, 16-бит, 32-бит, так и 64-битные значения в со знаком или без формы.</font></font></p>

<p class="MsoNormal"><font><font>Два типа с плавающей точкой, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>поплавок</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>двойные</font></font></span></span><font><font> , представлены с помощью 32-битного одинарной точности и 64-битные двойной точности IEEE 754 форматов.</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Десятичного</font></font></span></span><font><font> 
типа представляет собой 128-разрядный тип данных подходит для финансовых и валютных расчетов.</font></font></p>

<p class="MsoNormal"><font><font>С # </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>BOOL</font></font></span></span><font><font> 
тип используется для представления логических значений значений, которые являются либо </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>истинным</font></font></span></span><font><font> или </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>ложным</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Характер и обработки строк в C # использует кодировку Юникод. </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Символ</font></font></span></span><font><font> 
типа представляет собой UTF-16 Код единицы, а </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>строку</font></font></span></span><font><font> типа представляет собой последовательность UTF-16 единиц кода.</font></font></p>

<p class="MsoNormal"><font><font>В следующей таблице приведены С # числовых типов.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="583" style="width:437.4pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Категория</font></font></b></p>
  </td>
  <td width="42" valign="top" style="width:31.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Биты</font></font></b></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Тип</font></font></b></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Диапазон / Точность</font></font></b></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="85" rowspan="4" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Подпись интегральных</font></font></p>
  </td>
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>8</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>SByte</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>-128 ... 127</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>16</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>короткий</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>-32768 ... 32767</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>32</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>-2147483648 ... 2147483647</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>64</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>долго</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>-9.223.372.036.854.775.808 ... 9.223.372.036.854.775.807</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="85" rowspan="4" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Unsigned интегральных</font></font></p>
  </td>
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>8</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>байт</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>0 ... 255</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>16</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>USHORT</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>0 ... 65535</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>32</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>UINT</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>0 ... 4294967295</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>64</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>ULONG</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>0 ... 18,446,744,073,709,551,615</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="85" rowspan="2" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Плавающая запятая</font></font></p>
  </td>
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>32</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>плавать</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>1,5 × 10 </font></font><sup><font><font>-45</font></font></sup><font><font> до 3,4 × 10 </font></font><sup><font><font>38</font></font></sup><font><font> , 7-значной точностью</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>64</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>удвоится</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>5,0 × 10 </font></font><sup><font><font>-324</font></font></sup><font><font> до 1,7 × 10 </font></font><sup><font><font>308</font></font></sup><font><font> , 15-значный точности</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Десятичный</font></font></p>
  </td>
  <td width="42" valign="top" style="width:31.5pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>128</font></font></p>
  </td>
  <td width="72" valign="top" style="width:.75in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>десятичный</font></font></span></span></p>
  </td>
  <td width="384" valign="top" style="width:4.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>1,0 × 10 </font></font><sup><font><font>-28</font></font></sup><font><font> до 7,9 × 10 </font></font><sup><font><font>28</font></font></sup><font><font> , 28-значной точностью</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal"><font><font>C # программы используют </font></font><span class="Term"><font><font>объявлений типа</font></font></span><font><font> для создания новых типов. </font><font>Объявление типа указывает имя и члены нового типа. </font><font>Пять из C # с категориями типов, определяемых пользователем: типы класса, типы структуры, типы интерфейсов, перечисление типов и типов делегатов.</font></font></p>

<p class="MsoNormal"><font><font>Тип класса определяет структуру данных, которая содержит элементы данных (поля) и функции члены (методы, свойства и др.). </font><font>Типы классов поддерживает одиночное наследование и полиморфизм, механизмы, посредством производных классов можно расширить и специализировать базовых классов.</font></font></p>

<p class="MsoNormal"><font><font>Структура тип похож на тип класса в том, что она представляет собой структуру с членов данных и функции членов. </font><font>Однако, в отличие от классов, структуры являются типами значений и не требуют выделения кучи. </font><font>Структуры типа не поддерживают указанный пользователем наследство, и все типы структуры неявно наследуются от типа </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Тип интерфейса определяет договор как именованный набор открытых членов функции. </font><font>Класс или структура, которая реализует интерфейс, должен предоставлять реализации функций интерфейса членов. </font><font>Интерфейс может наследовать от нескольких интерфейсов базы, а класс или структура может реализовать несколько интерфейсов.</font></font></p>

<p class="MsoNormal"><font><font>Тип делегата представляет ссылки на методы с конкретным списком параметров и типом возвращаемого значения. </font><font>Делегаты позволяют лечить методами, как объекты, которые могут быть отнесены к переменным и передавать в качестве параметров. </font><font>Делегаты похожи на концепции указателей на функции в некоторых других языках, но в отличие от указателей на функции, делегаты являются объектно-ориентированными и тип безопасности.</font></font></p>

<p class="MsoNormal"><font><font>Класс, структура, интерфейс и все типы делегата поддержки дженериков, в результате чего они могут быть параметризованы с другими типами.</font></font></p>

<p class="MsoNormal"><font><font>Перечисление различных типов с именем константы. </font><font>Каждое перечисление имеет базовый тип, который должен быть одним из восьми целых типов. </font><font>Множество значений перечисляемого типа так же, как множество значений базового типа.</font></font></p>

<p class="MsoNormal"><font><font>C # поддерживает одно-и многомерные массивы любого типа. </font><font>В отличие от перечисленных выше типов, типов массивов не должны быть объявлены прежде, чем они могут быть использованы. </font><font>Вместо этого массива типов построены по следующим имя типа с квадратными скобками. </font><font>Например, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>INT []</font></font></span></span><font><font> является одномерный массив </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int [,]</font></font></span></span><font><font> это двумерный массив </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> , и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int [] []</font></font></span></span><font><font> 
представляет собой одномерный массив одномерных массивов </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Nullable типы также не должны быть объявлены прежде, чем они могут быть использованы. </font><font>Для каждого ненулевое значение типа </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span><font><font> есть соответствующая обнуляемого типа
 </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T?</font></font></span></span><font><font> , который может провести дополнительное значение </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>NULL</font></font></span></span><font><font> . </font><font>Например, </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>внутр?</font></font></span></span><font><font> это тип, который может содержать любые 32 ​​разрядное целое число или значение </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>NULL</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>С # тип системы объединены так, что значение любого типа может рассматриваться как объект. </font><font>Каждый тип в C # прямо или косвенно вытекает из </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> 
типа класса, и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объект</font></font></span></span><font><font> 
является основным классом всех типов. </font><font>Значения ссылочных типов рассматриваются как объекты просто просмотр значения как тип </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> . </font><font>Значения типов значения рассматриваются как объекты, выполняя </font></font><span class="Term"><font><font>бокс</font></font></span><font><font> и </font></font><span class="Term"><font><font>распаковка</font></font></span><font><font> операций. </font><font>В следующем примере </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Int</font></font></span></span><font><font> значение преобразуется в </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объект</font></font></span></span><font><font> 
и обратно в </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>INT</font></font></span></span><font><font> .</font></font></p>

<p class="Code"><font><font>использования системы;</font></font></p>

<p class="Code"><font><font>класс тест </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Int я = 123; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; объект O = я / / Бокс </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Int J = (INT) о / / Unboxing </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
}</font></font></p>

<p class="MsoNormal"><font><font>Когда значение типа значения к типу </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> , экземпляр объекта, называемого также "окно", выделяется для хранения значения, а значение копируется в окно. </font><font>И наоборот, когда </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объект</font></font></span></span><font><font> ссылки приведен к типу значения, выполняется проверка, что указанный объект находится поле правильный тип значения, и, если проверка прошла успешно, значение в поле копируется.</font></font></p>

<p class="MsoNormal"><font><font>С # единой системы типа фактически означает, что типы значений могут стать объектами "по требованию". Из-за объединения, общего назначения библиотеки, которые используют тип </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объекта</font></font></span></span><font><font> 
может быть использована как ссылочные типы и типы значений.</font></font></p>

<p class="MsoNormal"><font><font>Есть несколько видов </font></font><span class="Term"><font><font>переменных</font></font></span><font><font> 
в C #, включая поля, элементы массива, локальные переменные и параметры. </font><font>Переменные представляют мест хранения, и каждая переменная имеет тип, который определяет, какие значения могут быть сохранены в переменной, как показано в следующей таблице.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="583" style="width:437.4pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Тип переменной</font></font></b></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Возможное содержание</font></font></b></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Ненулевые значения типа</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Значение, что точный тип</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Nullable типа значения</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Нулевое значение или значение, что точный тип</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>объект</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пустая ссылка, ссылка на объект любого типа ссылки, или ссылка на упакованное значение любого типа значения</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Тип класса</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пустая ссылка, ссылка на экземпляр этого класса типа, или ссылку на экземпляр класса, производного от этого класса типа</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Тип интерфейса</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пустая ссылка, ссылка на экземпляр класса, типа, который реализует этот тип интерфейса, или ссылка на упакованное значение типа значения, который реализует этот тип интерфейса</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Массив типа</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пустая ссылка, ссылка на экземпляр этого типа массив или ссылка на экземпляр совместимый тип массива</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Тип делегата</font></font></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пустая ссылка или ссылка на экземпляр этого типа делегата</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612867"></a><a name="_Toc46039321"><font><font>1,4 выражений</font></font></a></h2>

<p class="MsoNormal"><span class="Term"><font><font>Выражения</font></font></span><font><font> строятся из </font></font><span class="Term"><font><font>операндов</font></font></span><font><font> и </font></font><span class="Term"><font><font>операторов</font></font></span><font><font> . </font><font>Операторы выражений указать, какие операции относятся к операндов. </font><font>Примеры операторов включают </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>+</font></font></span></span><font><font> ,
 </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>-</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>*</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>/</font></font></span></span><font><font> , и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>новые</font></font></span></span><font><font> . </font><font>Примеры включают операнды литералы, поля, локальные переменные и выражения.</font></font></p>

<p class="MsoNormal"><font><font>Если выражение содержит несколько операторов, </font></font><span class="Term"><font><font>приоритет</font></font></span><font><font> операторов определяет порядок, в котором отдельные операторы оценивают. </font><font>Например, выражение </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>у </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>* </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>г</font></font></span></span><font><font> оценивается как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>(у </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>* </font></font></span></span> <span class="Codefragment"><span style="font-size:10.0pt"><font><font>г)</font></font></span></span><font><font> , так как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>*</font></font></span></span><font><font> имеет более высокий приоритет, чем </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>+</font></font></span></span><font><font> оператора.</font></font></p>

<p class="MsoNormal"><font><font>Большинство операторов может быть </font></font><span class="Term"><font><font>перегруженным</font></font></span><font><font> . </font><font>Перегрузка операторов разрешений пользовательского оператора реализаций быть определены для операций, в которых один или оба операнда имеют определенный пользователем класс или структура типа.</font></font></p>

<p class="MsoNormal"><font><font>В следующей таблице приведены C # с операторами, с указанием оператора категории в порядке очередности, от самого высокого до самого низкого. </font><font>Операторы в той же категории имеют одинаковый приоритет.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Категория</font></font></b></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Выражение</font></font></b></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Описание</font></font></b></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="14" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Первичный</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>хт</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Член доступа</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х (...)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Метод и вызов делегата</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х [...]</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Массивов и индексатор доступа</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х + +</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пост-инкремент</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х -</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Пост-декремент</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>новые T (...)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Объект и создания делегата</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>новые T (...) {...}</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Создание объектов с инициализаторе</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>новая {...}</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Анонимный инициализатор объекта</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>новые T [...]</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Создание массива</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>TypeOf (T)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Получить </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>System.Type</font></font></span></span><font><font> 
  объект для </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>проверить (х)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вычисление выражения в контексте проверено</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>установлен (х)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вычисление выражения в контексте снят</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>умолчанию (T)</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Получить значения по умолчанию типа </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Делегат {...}</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Анонимная функция (анонимный метод)</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="7" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Унарные</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ X</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Личность</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>-Х</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Отрицание</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>! Х</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Логическое отрицание</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>~ Х</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Побитовое отрицание</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ + X</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Преинкремент</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>- X</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Предварительный декремент</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>(Т) х</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Явное преобразование </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> набрать </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="3" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Мультипликативные</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х * у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Умножение</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х / у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Деление</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х% у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Остаток</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="2" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Добавка</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х + у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Сложение, объединение строк, делегат комбинации</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X - Y</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вычитание, удаление делегата</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr style="page-break-inside:avoid">
  <td width="127" rowspan="2" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Сдвиг</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х &lt;&lt; у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Сдвиг влево</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X &gt;&gt; Y</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Сдвиг вправо</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="6" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Реляционные и испытания типа</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х &lt;у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Менее</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х&gt; у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Больше</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х &lt;= у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Меньше или равно</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х&gt; = у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Больше или равно</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х Т</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вернуться </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>истинной</font></font></span></span><font><font> 
  , если </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>ложное</font></font></span></span><font><font> 
  в противном случае</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х как T</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вернуться </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> 
  к типу </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span><font><font> , либо </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>нулевым</font></font></span></span><font><font> 
  , если </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> не является </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>T</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="2" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Равенство</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х == у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Равный</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х! = у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Не равно</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Логическое И</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X &amp; Y</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Целое побитовое И, логическое И</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Логический XOR</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х ^ у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Целое побитовое XOR, логическое XOR</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Логическое ИЛИ</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X | Y</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Целое побитовое ИЛИ, логическое ИЛИ</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Условный И</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х &amp;&amp; у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Оценивает </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>у</font></font></span></span><font><font> только тогда, когда </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>истинным</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Условный оператор OR</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X | | Y</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Оценивает </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>у</font></font></span></span><font><font> только тогда, когда </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>ложным</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Нулевых объединяющих</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>X? </font><font>год</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вычисляет </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>у</font></font></span></span><font><font> , если </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>х</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>нулевым</font></font></span></span><font><font> , для </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><font><font> в противном случае</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="127" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Условный</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х? </font><font>Y: Z</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Оценивает </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>у</font></font></span></span><font><font> , если </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>х</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>истинным</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>г</font></font></span></span><font><font> , если </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>х</font></font></span></span><font><font> является </font></font><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>ложным</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="127" rowspan="3" valign="top" style="width:95.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Назначение или анонимной функции</font></font></p>
  </td>
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х = у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Назначение</font></font></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>х</font></font></span></span><span class="Production"><font><font> ор </font></font></span><span class="Codefragment"><span style="font-size:
  10.0pt"><font><font>= у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Соединение назначения; поддерживаемых операторов</font></font></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>* = </font></font></span></span>&nbsp;&nbsp;
  <span class="Codefragment"><span style="font-size:10.0pt"><font><font>/ = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>% = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>- = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>&lt;&lt; = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>&gt;&gt; = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>&amp; = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>^ = </font></font></span></span>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt"><font><font>| =</font></font></span></span></p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="138" valign="top" style="width:103.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>(Т х) =&gt; у</font></font></span></span></p>
  </td>
  <td width="330" valign="top" style="width:247.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Анонимные функции (лямбда-выражения)</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612868"></a><a name="_Toc46039322"><font><font>1,5 заявлениями</font></font></a></h2>

<p class="MsoNormal"><font><font>Действия программы выражаются с помощью </font></font><span class="Term"><font><font>заявления</font></font></span><font><font> . </font><font>C # поддерживает несколько различных видов отчетности, количество которых определяется в терминах встроенных отчетности.</font></font></p>

<p class="MsoNormal"><font></font><span class="Term"><font><font>Блок</font></font></span><font><font> позволяет несколько заявлений, которые будут написаны в условиях, когда один оператор не допускается. </font><font>Блок состоит из списка операторов, записанных между разделителями </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>{</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>}</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><span class="Term"><font><font>Декларация отчетность</font></font></span><font><font> используется для объявления локальных переменных и констант.</font></font></p>

<p class="MsoNormal"><span class="Term"><font><font>Выражение отчетности</font></font></span><font><font> используются для оценки выражений. </font><font>Выражения, которые могут быть использованы в качестве отчетность включает в себя вызовы методов, объект ассигнований помощью </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>нового</font></font></span></span><font><font> оператора, заданий с использованием </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>=</font></font></span></span><font><font> и операторы присваивания и операции увеличения и уменьшения использования
 </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>+ +</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>-</font></font></span></span><font><font> операторы.</font></font></p>

<p class="MsoNormal"><span class="Term"><font><font>Выбор отчетность</font></font></span><font><font> используется для выбора одного из нескольких возможных заявлений для исполнения в зависимости от значения некоторого выражения. </font><font>В этой группе </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>, если</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>переключатель</font></font></span></span><font><font> отчетности.</font></font></p>

<p class="MsoNormal"><span class="Term"><font><font>Итерация заявления</font></font></span><font><font> используются повторно выполнить вложенный оператор. </font><font>В этой группе </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>в то время как</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>делать</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>для</font></font></span></span><font><font> , и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>по каждому элементу</font></font></span></span><font><font> 
отчетности.</font></font></p>

<p class="MsoNormal"><span class="Term"><font><font>Перейти отчетности</font></font></span><font><font> используются для передачи управления. </font><font>В этой группе </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>перерыв</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:
10.0pt"><font><font>продолжать</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>перейти</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>бросить</font></font></span></span><font><font> , </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>вернуться</font></font></span></span><font><font> , и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>выход</font></font></span></span><font><font> отчетности.</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Попробовать</font></font></span></span><font><font> ... </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>поймать</font></font></span></span><font><font> оператор используется для перехвата исключений, которые происходят во время выполнения блока, и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>попробовать</font></font></span></span><font><font> ... </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>наконец,</font></font></span></span><font><font> 
заявление используется для указания завершения кода, который выполняется всегда, произошло ли исключение или нет.</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Проверкой</font></font></span></span><font><font> 
и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>беспрепятственно</font></font></span></span><font><font> 
отчетности используются для управления контекста проверки переполнения для интегрального типа арифметических операций и переходов.</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Блокировка</font></font></span></span><font><font> 
оператор используется для получения взаимного исключения блокировки для данного объекта, выполнение инструкции, а затем снять блокировку.</font></font></p>

<p class="MsoNormal"><font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Использованием</font></font></span></span><font><font> 
оператор используется для получения ресурсов, выполнение инструкции, а затем распоряжаться этим ресурсом.</font></font></p>

<p class="MsoNormal"><font><font>В следующей таблице перечислены С # заявлений и служит примером для каждого.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Заявление</font></font></b></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Пример</font></font></b></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Местные объявления переменных</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; Int, </font></font><br><font><font>
&nbsp;&nbsp; Int B = 2, C = 3; </font></font><br><font><font>
&nbsp;&nbsp; = 1; </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (A + B + C); </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Местные постоянные декларации</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; конструкции поплавка р = 3.1415927f; </font></font><br><font><font>
&nbsp;&nbsp; конструкции INT R = 25; </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (пи * R * R); </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Выражение заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; Int я, </font></font><br><font><font>
&nbsp;&nbsp; я = 123; / / Выражение заявление </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (Я) / / Выражение заявлении </font></font><br><font><font>
&nbsp;&nbsp; я + +; / / Выражение заявление </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (Я) / / Выражение заявление </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>если</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; если (args.length == 0) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Нет аргументов"); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; еще { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Один или несколько аргументов"); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>переключения</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; Int N = args.length; </font></font><br><font><font>
&nbsp;&nbsp; переключатель (п) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; случай 0: </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Нет аргументов"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; перерыва; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; случае 1: </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("Один из аргументов"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; перерыва; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; по умолчанию: </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("{0} аргументов", п); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; перерыва; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>в то время как</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; Int = 0; </font></font><br><font><font>
&nbsp;&nbsp; время (я &lt;args.length) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (агдз [я]), </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; я + +; </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>сделать</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; строка с; </font></font><br><font><font>
&nbsp;&nbsp; делать { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; S = Console.ReadLine (); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Если (S = NULL!) Console.WriteLine (ы); </font></font><br><font><font>
&nbsp;&nbsp; } а (S = NULL!); </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>для</font></font></span></span><font><font> 
  заявления</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; для (INT = 0; I &lt;args.length, я + +) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (аргументы [I]); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Еогеасп</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; Еогеасп (строка с в агдз) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (ы); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>сломать</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; а (TRUE) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; строка S = Console.ReadLine (); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если (а == NULL) перерыва; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (ы); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>продолжают</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; для (INT = 0; I &lt;args.length, я + +) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если (аргументы [I] StartsWith ("/").) продолжается; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (аргументы [I] ); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>На</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; Int = 0; </font></font><br><font><font>
&nbsp;&nbsp; перейти проверки; </font></font><br><font><font>
&nbsp;&nbsp; цикл: </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (агдз [я + +]); </font></font><br><font><font>
&nbsp;&nbsp; проверка: </font></font><br><font><font>
&nbsp;&nbsp; если (я &lt;args.length) перейти цикла; </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>вернуться</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статического Int Add (INT A, INT B) { </font></font><br><font><font>
&nbsp;&nbsp; возвращение A + B; </font></font><br><font><font>
  }</font></font></span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; Console.WriteLine (Add (1, 2)); </font></font><br><font><font>
&nbsp;&nbsp; возвращение; </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>дать</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статического IEnumerable Range &lt;int&gt; (INT от, внутр к) { </font></font><br><font><font>
&nbsp;&nbsp; для (INT я = с, г &lt;к, я + +) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; выход вернуться я; </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; доходность перерыва; </font></font><br><font><font>
  }</font></font></span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; Еогеасп (INT х в диапазоне (-10,10)) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (х); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>бросить</font></font></span></span><font><font> 
  и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>попробовать</font></font></span></span><br><font><font> 
  отчетности</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической двойной Divide (Double X, дважды у) { </font></font><br><font><font>
&nbsp;&nbsp; если (у == 0) бросать новые DivideByZeroException (); </font></font><br><font><font>
&nbsp;&nbsp; возвращение X / Y; </font></font><br><font><font>
  }</font></font></span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы основных (String [] агдз) { </font></font><br><font><font>
&nbsp;&nbsp; попробуйте { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если (args.length = 2) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пролить новый Exception ("Два числа необходимых"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Double X = Double.Parse (аргументы [0]); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; двойное у = Double.Parse (аргументы [1]); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (Divide (х, у)); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; улова (Исключение е) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (e.Message); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; наконец { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine ("До свидания!" ); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>проверены</font></font></span></span><font><font> 
  и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>беспрепятственно</font></font></span></span><font><font> 
  заявления</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; Int я = int.MaxValue; </font></font><br><font><font>
&nbsp;&nbsp; проверили { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (я + 1) / / исключение </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; {снят </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine (я + 1) / / переполнение </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Блокировка</font></font></span></span><font><font> 
  заявление</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>Счета класса </font></font><br><font><font>
  { </font></font><br><font><font>
&nbsp;&nbsp; десятичной баланса;</font></font></span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>&nbsp;&nbsp; Вывод общественного недействительными (в десятичной суммы) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; замок (это) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; если (сумма&gt; баланса) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; пролить новый Exception ("Недостаточно средств"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; баланса - = сумма; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
 <tr>
  <td width="145" valign="top" style="width:108.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>использование</font></font></span></span><font><font> 
  заявлением</font></font></p>
  </td>
  <td width="462" valign="top" style="width:346.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>статической силы Main () { </font></font><br><font><font>
&nbsp;&nbsp; используя (TextWriter W = File.CreateText ("test.txt")) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w.WriteLine ("Первая строка"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w.WriteLine ("Вторая строка"); </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w.WriteLine ("Третья строка "); </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
  }</font></font></span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612869"></a><a name="_Toc46039323"><font><font>1.6 Классы и объекты</font></font></a></h2>

<p class="MsoNormal"><span class="Term"><font><font>Классы</font></font></span><font><font> являются наиболее фундаментальной из С # типов. </font><font>Класс представляет собой структуру данных, которая объединяет государства (полей) и действия (методы и другие члены функции) в единое целое. </font><font>Класс содержит определение для динамически создаваемых </font></font><span class="Term"><font><font>экземпляров</font></font></span><font><font> класса, также известный как </font></font><span class="Term"><font><font>объекты</font></font></span><font><font> . </font><font>Классы поддержки </font></font><span class="Term"><font><font>наследования</font></font></span><font><font> и </font></font><span class="Term"><font><font>полиморфизма</font></font></span><font><font> , механизмы, посредством которых </font></font><span class="Term"><font><font>производные классы</font></font></span><font><font> могут расширить и специализировать </font></font><span class="Term"><font><font>базовых классов</font></font></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Новые классы создаются с помощью объявлений класса. </font><font>Объявление класса начинается с заголовка, который определяет атрибуты и модификаторы класса, имя класса, базовый класс (если есть), и интерфейсов, реализуемых классом. </font><font>За заголовком следуют по классу органа, который состоит из списка членов заявлений написаны между разделителями </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>{</font></font></span></span><font><font> и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>}</font></font></span></span><font><font> .</font></font></p>

<p class="MsoNormal"><font><font>Ниже приводится заявление о простой класс с именем </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>точки</font></font></span></span><font><font> :</font></font></p>

<p class="Code"><font><font>Точка общественного класса </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; общественности Int х, у;</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp; общественных Point (Int х, Int у) { </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = х; </font></font><br><font><font>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = у; </font></font><br><font><font>
&nbsp;&nbsp; } </font></font><br><font><font>
}</font></font></p>

<p class="MsoNormal"><font><font>Экземпляры классов создаются с помощью </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>нового</font></font></span></span><font><font> оператора, который выделяет память для нового экземпляра, вызывает конструктор для инициализации экземпляра и возвращает ссылку на экземпляр. </font><font>Следующие утверждения создать две </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>точки</font></font></span></span><font><font> 
объекта и хранить ссылки на эти объекты в двух переменных:</font></font></p>

<p class="Code"><font><font>Точка p1 = новая точка (0, 0); </font></font><br><font><font>
Точка Р2 = новая точка (10, 20);</font></font></p>

<p class="MsoNormal"><font><font>Памяти, занимаемый объект автоматически отозваны, когда объект больше не используется. </font><font>Она не является ни необходимым, ни возможным явно освобождать объекты в C #.</font></font></p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612870"></a><a name="_Toc46039324"><font><font>1.6.1 Пользователи</font></font></a></h3>

<p class="MsoNormal"><font><font>Члены класса или </font></font><span class="Term"><font><font>статические члены</font></font></span><font><font> или </font></font><span class="Term"><font><font>члены экземпляра</font></font></span><font><font> . </font><font>Статические члены принадлежат к классам, и члены экземпляра принадлежат объекты (экземпляры классов).</font></font></p>

<p class="MsoNormal"><font><font>В следующей таблице приведен обзор видов членам класса может содержать.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Член</font></font></b></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Описание</font></font></b></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Константы</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Постоянные значения, связанные с классом</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Поля</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Переменные класса</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Методика</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вычисления и действия, которые могут быть выполнены по классу</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Свойства</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Действия, связанные с чтением и записью имени свойства класса</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Индексаторы</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Действия, связанные с индексацией экземпляров класса как массив</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>События</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Уведомления, которые могут быть сгенерированы класс</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Операторы</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Преобразования и выражения операторов, поддерживаемых классом</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Конструкторы</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Действия, необходимые для инициализации экземпляров класса или сам класс</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Деструкторы</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Действия выступать перед экземпляров класса постоянно отбрасываются</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="103" valign="top" style="width:77.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Виды</font></font></p>
  </td>
  <td width="504" valign="top" style="width:5.25in;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Вложенные типы, объявленные в классе</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612871"></a><a name="_Toc46039325"><font><font>1.6.2 Доступность</font></font></a></h3>

<p class="MsoNormal"><font><font>Каждый член класса имеет соответствующий доступ, который контролирует регионы текст программы, которые могут получить доступ к члену. </font><font>Существуют пять возможных форм доступности. </font><font>Они приведены в следующей таблице.</font></font></p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Доступность</font></font></b></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b><font><font>Смысл</font></font></b></p>
  </td>
 </tr>
 <tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>общественность</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Доступ не ограничен</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>защищенный</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Доступ ограничивается этим классом или классами, производными от этого класса</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>внутренний</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Доступ ограничен этой программы</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>защита внутреннего</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Доступ ограничен этой программы или классы, производные от этого класса</font></font></p>
  </td>
 </tr>
 <tr>
  <td width="163" valign="top" style="width:1.7in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt"><font><font>частный</font></font></span></span></p>
  </td>
  <td width="444" valign="top" style="width:333.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><font><font>Доступ ограничивается этим классом</font></font></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc46039326"></a><a name="_Toc251612872"><font><font>1.6.3 Параметры типа</font></font></a></h3>

<p class="MsoNormal"><font><font>Определение класса может задать набор параметров типа, следуя имя класса в угловых скобках прилагаю список имен параметров типа. </font><font>Типа параметров могут быть использованы в теле объявления класса для определения членов класса. </font><font>В следующем примере, параметры типа </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>пары</font></font></span></span><font><font> 
являются </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>TFirst</font></font></span></span><font><font> 
и </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>TSecond</font></font></span></span><font><font> :</font></font></p>

<p class="Code"><font><font>общественных &lt;TFirst,TSecond&gt; Пара класса </font></font><br><font><font>
{ </font></font><br><font><font>
&nbsp;&nbsp; общественности TFirst Первый;</font></font></p>

<p class="Code"><font><font>&nbsp;&nbsp; общественных TSecond второй; </font></font><br><font><font>
}</font></font></p>

<p class="MsoNormal"><font><font>Тип класса, который объявлен принять параметры типа называют универсальным типом класса. </font><font>Struct, интерфейсов и типов делегатов также может быть универсальным.</font></font></p>

<p class="MsoNormal"><font><font>Когда универсального класса используется, аргументы типа должна быть обеспечена для каждого типа параметров:</font></font></p>

<p class="Code"><font><font>Пара Пара &lt;int,string&gt; = новый &lt;int,string&gt; пара {First = 1, вторая = "два"}; </font></font><br><font><font>
Int я = pair.First / / TFirst является Int </font></font><br><font><font>
строку S = pair.Second / / TSecond является строка</font></font></p>

<p class="MsoNormal"><font><font>Универсальный тип с типом аргументами, как </font></font><span class="Codefragment"><span style="font-size:10.0pt"><font><font>пара &lt;int,string&gt;</font></font></span></span><font><font> 
выше, называется составной тип.</font></font></p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612873"><font><font>1.6.4 Базовые классы</font></font></a></h3>

<p class="MsoNormal">A class declaration may specify a base class by following
the class name and type parameters with a colon and the name of the base class.
Omitting a base class specification is the same as deriving from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. In the
following example, the base class of <span class="Codefragment"><span style="font-size:10.0pt">Point3D</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>, and the base class of <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>:</p>

<p class="Code">public class Point<br>
{<br>
&nbsp;&nbsp; public int x, y;</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class Point3D: Point<br>
{<br>
&nbsp;&nbsp; public int z;</p>

<p class="Code">&nbsp;&nbsp; public Point3D(int x, int y, int z): base(x, y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.z = z;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">A class inherits the members of its base class. Inheritance
means that a class implicitly contains all members of its base class, except
for the instance and static constructors, and the destructors of the base
class. A derived class can add new members to those it inherits, but it cannot
remove the definition of an inherited member. In the previous example, <span class="Codefragment"><span style="font-size:10.0pt">Point3D</span></span>
inherits the <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
fields from <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>,
and every <span class="Codefragment"><span style="font-size:10.0pt">Point3D</span></span>
instance contains three fields, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>.</p>

<p class="MsoNormal">An implicit conversion exists from a class type to any of
its base class types. Therefore, a variable of a class type can reference an
instance of that class or an instance of any derived class. For example, given
the previous class declarations, a variable of type <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> can reference either a <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> or a <span class="Codefragment"><span style="font-size:10.0pt">Point3D</span></span>:</p>

<p class="Code">Point a = new Point(10, 20);<br>
Point b = new Point3D(10, 20, 30);</p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612874"></a><a name="_Toc46039327">1.6.5 Fields</a></h3>

<p class="MsoNormal">A field is a variable that is associated with a class or
with an instance of a class.</p>

<p class="MsoNormal">A field declared with the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier defines a <span class="Term">static field</span>. A static field identifies exactly one storage
location. No matter how many instances of a class are created, there is only
ever one copy of a static field.</p>

<p class="MsoNormal">A field declared without the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier defines an <span class="Term">instance field</span>. Every instance of a class contains a separate
copy of all the instance fields of that class.</p>

<p class="MsoNormal">In the following example, each instance of the <span class="Codefragment"><span style="font-size:10.0pt">Color</span></span> class has
a separate copy of the <span class="Codefragment"><span style="font-size:10.0pt">r</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">g</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> instance
fields, but there is only one copy of the <span class="Codefragment"><span style="font-size:10.0pt">Black</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">White</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Red</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Green</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span> static fields:</p>

<p class="Code">public class Color<br>
{<br>
&nbsp;&nbsp; public static readonly Color Black = new Color(0, 0, 0);<br>
&nbsp;&nbsp; public static readonly Color White = new Color(255, 255, 255);<br>
&nbsp;&nbsp; public static readonly Color Red = new Color(255, 0, 0);<br>
&nbsp;&nbsp; public static readonly Color Green = new Color(0, 255, 0);<br>
&nbsp;&nbsp; public static readonly Color Blue = new Color(0, 0, 255);</p>

<p class="Code">&nbsp;&nbsp; <span lang="DA">private byte r, g, b;</span></p>

<p class="Code"><span lang="DA">&nbsp;&nbsp; </span>public Color(byte r, byte g, byte b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.r = r;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.g = g;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.b = b;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">As shown in the previous example, <span class="Term">read-only
fields</span> may be declared with a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> modifier. Assignment to a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> field
can only occur as part of the field’s declaration or in a constructor in the
same class.</p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612875"></a><a name="_Toc46039328">1.6.6 Methods</a></h3>

<p class="MsoNormal">A <span class="Term">method</span> is a member that implements
a computation or action that can be performed by an object or class. <span class="Term">Static methods</span> are accessed through the class. <span class="Term">Instance methods</span> are accessed through instances of the class.</p>

<p class="MsoNormal">Methods have a (possibly empty) list of <span class="Term">parameters</span>,
which represent values or variable references passed to the method, and a <span class="Term">return type</span>, which specifies the type of the value computed
and returned by the method. A method’s return type is <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> if it does not return a value.</p>

<p class="MsoNormal">Like types, methods may also have a set of type parameters,
for which type arguments must be specified when the method is called. Unlike
types, the type arguments can often be inferred from the arguments of a method
call and need not be explicitly given.</p>

<p class="MsoNormal">The <span class="Term">signature</span> of a method must be
unique in the class in which the method is declared. The signature of a method
consists of the name of the method, the number of type parameters and the number,
modifiers, and types of its parameters. The signature of a method does not
include the return type.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612876"></a><a name="_Toc46039329">1.6.6.1 Parameters</a></h4>

<p class="MsoNormal">Parameters are used to pass values or variable references to
methods. The parameters of a method get their actual values from the <span class="Term">arguments</span> that are specified when the method is invoked.
There are four kinds of parameters: value parameters, reference parameters,
output parameters, and parameter arrays.</p>

<p class="MsoNormal">A <span class="Term">value parameter</span> is used for input
parameter passing. A value parameter corresponds to a local variable that gets
its initial value from the argument that was passed for the parameter.
Modifications to a value parameter do not affect the argument that was passed
for the parameter.</p>

<p class="MsoNormal">Value parameters can be optional, by specifying a default
value so that corresponding arguments can be omitted.</p>

<p class="MsoNormal">A <span class="Term">reference parameter</span> is used for
both input and output parameter passing. The argument passed for a reference
parameter must be a variable, and during execution of the method, the reference
parameter represents the same storage location as the argument variable. A
reference parameter is declared with the <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> modifier. The following example
shows the use of <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
parameters.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Swap(ref int x, ref int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = temp;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1, j = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Swap(ref i, ref j);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1}", i, j);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Outputs "2
1"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An <span class="Term">output parameter</span> is used for
output parameter passing. An output parameter is similar to a reference parameter
except that the initial value of the caller-provided argument is unimportant.
An output parameter is declared with the <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier. The following example
shows the use of <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameters.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Divide(int x, int y, out int result, out int remainder) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = x / y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remainder = x % y;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int res, rem;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Divide(10, 3, out res, out rem);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1}", res, rem);&nbsp;&nbsp; // Outputs "3
1"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">A <span class="Term">parameter array</span> permits a variable
number of arguments to be passed to a method. A parameter array is declared
with the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
modifier. Only the last parameter of a method can be a parameter array, and the
type of a parameter array must be a single-dimensional array type. The <span class="Codefragment"><span style="font-size:10.0pt">Write</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">WriteLine</span></span>
methods of the <span class="Codefragment"><span style="font-size:10.0pt">System.Console</span></span>
class are good examples of parameter array usage. They are declared as follows.</p>

<p class="Code">public class Console<br>
{<br>
&nbsp;&nbsp; public static void Write(string fmt, params object[] args) {...}</p>

<p class="Code">&nbsp;&nbsp; public static void WriteLine(string fmt, params object[] args)
{...}</p>

<p class="Code">&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">Within a method that uses a parameter array, the parameter
array behaves exactly like a regular parameter of an array type. However, in an
invocation of a method with a parameter array, it is possible to pass either a
single argument of the parameter array type or any number of arguments of the
element type of the parameter array. In the latter case, an array instance is
automatically created and initialized with the given arguments. This example</p>

<p class="Code">Console.WriteLine("x={0} y={1} z={2}", x, y, z);</p>

<p class="MsoNormal">is equivalent to writing the following.</p>

<p class="Code">string s = "x={0} y={1} z={2}";<br>
object[] args = new object[3];<br>
args[0] = x;<br>
args[1] = y;<br>
args[2] = z;<br>
Console.WriteLine(s, args);</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612877"></a><a name="_Toc46039330">1.6.6.2 Method body</a> and local variables</h4>

<p class="MsoNormal">A method’s body specifies the statements to execute when the
method is invoked.</p>

<p class="MsoNormal">A method body can declare variables that are specific to the
invocation of the method. Such variables are called <span class="Term">local
variables</span>. A local variable declaration specifies a type name, a
variable name, and possibly an initial value. The following example declares a
local variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
with an initial value of zero and a local variable <span class="Codefragment"><span style="font-size:10.0pt">j</span></span> with no initial value.</p>

<p class="Code">using System;</p>

<p class="Code">class Squares<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (i &lt; 10) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j = i * i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} x {0} = {1}", i, j);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = i + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">C# requires a local variable to be <span class="Term">definitely
assigned</span> before its value can be obtained. For example, if the
declaration of the previous <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> did not include an initial value, the compiler would
report an error for the subsequent usages of <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> because <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> would not be definitely assigned at
those points in the program.</p>

<p class="MsoNormal">A method can use <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statements to return control to
its caller. In a method returning <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statements cannot specify an
expression. In a method returning non-<span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statements must include an
expression that computes the return value.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612878"></a><a name="_Toc46039331">1.6.6.3 Static and instance methods</a></h4>

<p class="MsoNormal">A method declared with a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier is a <span class="Term">static
method</span>. A static method does not operate on a specific instance and can
only directly access static members.</p>

<p class="MsoNormal">A method declared without a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier is an <span class="Term">instance
method</span>. An instance method operates on a specific instance and can
access both static and instance members. The instance on which an instance
method was invoked can be explicitly accessed as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>. It is an error to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> in a
static method.</p>

<p class="MsoNormal">The following <span class="Codefragment"><span style="font-size:10.0pt">Entity</span></span> class has both static and
instance members.</p>

<p class="Code">class Entity<br>
{<br>
&nbsp;&nbsp; static int nextSerialNo;</p>

<p class="Code">&nbsp;&nbsp; int serialNo;</p>

<p class="Code">&nbsp;&nbsp; public Entity() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; serialNo = nextSerialNo++;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int GetSerialNo() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return serialNo;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static int GetNextSerialNo() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return nextSerialNo;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static void SetNextSerialNo(int value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nextSerialNo = value;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Each <span class="Codefragment"><span style="font-size:10.0pt">Entity</span></span>
instance contains a serial number (and presumably some other information that
is not shown here). The <span class="Codefragment"><span style="font-size:10.0pt">Entity</span></span>
constructor (which is like an instance method) initializes the new instance
with the next available serial number. Because the constructor is an instance
member, it is permitted to access both the <span class="Codefragment"><span style="font-size:10.0pt">serialNo</span></span> instance field and the <span class="Codefragment"><span style="font-size:10.0pt">nextSerialNo</span></span>
static field.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">GetNextSerialNo</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">SetNextSerialNo</span></span>
static methods can access the <span class="Codefragment"><span style="font-size:
10.0pt">nextSerialNo</span></span> static field, but it would be an error for
them to directly access the <span class="Codefragment"><span style="font-size:
10.0pt">serialNo</span></span> instance field.</p>

<p class="MsoNormal">The following example shows the use of the <span class="Codefragment"><span style="font-size:10.0pt">Entity</span></span> class.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity.SetNextSerialNo(1000);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity e1 = new Entity();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entity e2 = new Entity();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(e1.GetSerialNo());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Outputs
"1000"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(e2.GetSerialNo());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Outputs
"1001"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(Entity.GetNextSerialNo());&nbsp;&nbsp;&nbsp; // Outputs
"1002"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Note that the <span class="Codefragment"><span style="font-size:10.0pt">SetNextSerialNo</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">GetNextSerialNo</span></span>
static methods are invoked on the class whereas the <span class="Codefragment"><span style="font-size:10.0pt">GetSerialNo</span></span> instance method is invoked
on instances of the class.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612879"></a><a name="_Toc46039332">1.6.6.4 Virtual, override, and abstract methods</a></h4>

<p class="MsoNormal">When an instance method declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier, the method is said to be a <span class="Term">virtual method</span>.
When no <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier is present, the method is said to be a <span class="Term">non-virtual
method</span>.</p>

<p class="MsoNormal">When a virtual method is invoked, the <span class="Term">run-time
type</span> of the instance for which that invocation takes place determines
the actual method implementation to invoke. In a nonvirtual method invocation,
the <span class="Term">compile-time type</span> of the instance is the
determining factor.</p>

<p class="MsoNormal">A virtual method can be <span class="Term">overridden</span>
in a derived class. When an instance method declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier, the method overrides an inherited virtual method with the same
signature. Whereas a virtual method declaration <em>introduces</em> a new
method, an override method declaration <em>specializes</em> an existing
inherited virtual method by providing a new implementation of that method.</p>

<p class="MsoNormal">An <span class="Term">abstract</span> method is a virtual
method with no implementation. An abstract method is declared with the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
modifier and is permitted only in a class that is also declared <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>. An
abstract method must be overridden in every non-abstract derived class.</p>

<p class="MsoNormal">The following example declares an abstract class, <span class="Codefragment"><span style="font-size:10.0pt">Expression</span></span>,
which represents an expression tree node, and three derived classes, <span class="Codefragment"><span style="font-size:10.0pt">Constant</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">VariableReference</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">Operation</span></span>,
which implement expression tree nodes for constants, variable references, and
arithmetic operations. (This is similar to, but not to be confused with the expression
tree types introduced in section §4.6).</p>

<p class="Code">using System;<br>
using System.Collections;</p>

<p class="Code">public abstract class Expression<br>
{<br>
&nbsp;&nbsp; public abstract double Evaluate(Hashtable vars);<br>
}</p>

<p class="Code">public class Constant: Expression<br>
{<br>
&nbsp;&nbsp; double value;</p>

<p class="Code">&nbsp;&nbsp; public Constant(double value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override double Evaluate(Hashtable vars) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class VariableReference: Expression<br>
{<br>
&nbsp;&nbsp; string name;</p>

<p class="Code">&nbsp;&nbsp; public VariableReference(string name) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override double Evaluate(Hashtable vars) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object value = vars[name];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception("Unknown variable: " + name);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Convert.ToDouble(value);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class Operation: Expression<br>
{<br>
&nbsp;&nbsp; Expression left;<br>
&nbsp;&nbsp; char op;<br>
&nbsp;&nbsp; Expression right;</p>

<p class="Code">&nbsp;&nbsp; public Operation(Expression left, char op, Expression right) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.left = left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.op = op;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.right = right;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override double Evaluate(Hashtable vars) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double x = left.Evaluate(vars);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double y = right.Evaluate(vars);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (op) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '+': return x + y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '-': return x - y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '*': return x * y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '/': return x / y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception("Unknown operator");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The previous four classes can be used to model arithmetic
expressions. For example, using instances of these classes, the expression <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">3</span></span> can be
represented as follows.</p>

<p class="Code">Expression e = new Operation(<br>
&nbsp;&nbsp; new VariableReference("x"),<br>
&nbsp;&nbsp; '+',<br>
&nbsp;&nbsp; new Constant(3));</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Evaluate</span></span>
method of an <span class="Codefragment"><span style="font-size:10.0pt">Expression</span></span>
instance is invoked to evaluate the given expression and produce a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> value.
The method takes as an argument a <span class="Codefragment"><span style="font-size:10.0pt">Hashtable</span></span> that contains variable names
(as keys of the entries) and values (as values of the entries). The <span class="Codefragment"><span style="font-size:10.0pt">Evaluate</span></span> method
is a virtual abstract method, meaning that non-abstract derived classes must
override it to provide an actual implementation.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">Constant</span></span>’s
implementation of <span class="Codefragment"><span style="font-size:10.0pt">Evaluate</span></span>
simply returns the stored constant. A <span class="Codefragment"><span style="font-size:10.0pt">VariableReference</span></span>’s implementation looks
up the variable name in the hashtable and returns the resulting value. An <span class="Codefragment"><span style="font-size:10.0pt">Operation</span></span>’s
implementation first evaluates the left and right operands (by recursively
invoking their <span class="Codefragment"><span style="font-size:10.0pt">Evaluate</span></span>
methods) and then performs the given arithmetic operation.</p>

<p class="MsoNormal">The following program uses the <span class="Codefragment"><span style="font-size:10.0pt">Expression</span></span> classes to evaluate the
expression <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">2)</span></span> for
different values of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="Code">using System;<br>
using System.Collections;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Expression e = new Operation(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new VariableReference("x"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '*',<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Operation(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new VariableReference("y"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '+',<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Constant(2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtable vars = new Hashtable();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vars["x"] = 3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vars["y"] = 5;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(e.Evaluate(vars));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Outputs "21"</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vars["x"] = 1.5;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vars["y"] = 9;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(e.Evaluate(vars));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Outputs <span lang="SV">"16.5"</span><br>
&nbsp;&nbsp; }<br>
}</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612880"></a><a name="_Toc46039333">1.6.6.5 Method overloading</a></h4>

<p class="MsoNormal">Method <span class="Term">overloading</span> permits multiple
methods in the same class to have the same name as long as they have unique
signatures. When compiling an invocation of an overloaded method, the compiler
uses <span class="Term">overload resolution</span> to determine the specific
method to invoke. Overload resolution finds the one method that best matches
the arguments or reports an error if no single best match can be found. The
following example shows overload resolution in effect. The comment for each invocation
in the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>
method shows which method is actually invoked.</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F()");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(object x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(object)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(int x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(int)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(double x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(double)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F&lt;T&gt;(T x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F&lt;T&gt;(T)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(double x, double y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(double, double)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(int)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1.0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(double)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F("abc");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(object)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F((double)1);&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(double)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F((object)1);&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(object)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F&lt;int&gt;(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F&lt;T&gt;(T)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1, 1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes F(double, double)&nbsp; }<br>
}</p>

<p class="MsoNormal">As shown by the example, a particular method can always be
selected by explicitly casting the arguments to the exact parameter types
and/or explicitly supplying type arguments.</p>

<h3 style="margin-left:0in;text-indent:0in"><a name="_Toc251612881"></a><a name="_Toc46039334">1.6.7 Other function members</a></h3>

<p class="MsoNormal">Members that contain executable code are collectively known
as the <span class="Term">function members</span> of a class. The preceding
section describes methods, which are the primary kind of function members. This
section describes the other kinds of function members supported by C#:
constructors, properties, indexers, events, operators, and destructors.</p>

<p class="MsoNormal">The following table shows a generic class called <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>,
which implements a growable list of objects. The class contains several
examples of the most common kinds of function members.</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="607" style="width:455.4pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="607" colspan="2" valign="top" style="width:455.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">public
  class List&lt;T&gt;<br>
  {</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; const
  int defaultCapacity = 4;</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Constant</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; T[]
  items;<br>
&nbsp;&nbsp; int count;</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Fields</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  List(int capacity = defaultCapacity) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items = new T[capacity];<br>
&nbsp;&nbsp; }</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Constructors</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  int Count {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return count; }<br>
&nbsp;&nbsp; }</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  int Capacity {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return items.Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; count) value = count;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value != items.Length) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T[] newItems = new T[value];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Array.Copy(items, 0, newItems, 0, count);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items = newItems;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Properties</p>
  </td>
 </tr>
</tbody></table>

<p class="MsoNormal">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="607" style="width:455.4pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  T this[int index] {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return items[index];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items[index] = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnChanged();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Indexer</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  void Add(T item) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (count == Capacity) Capacity = count * 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items[count] = item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnChanged();<br>
&nbsp;&nbsp; }</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; protected
  virtual void OnChanged() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Changed != null) Changed(this, EventArgs.Empty);<br>
&nbsp;&nbsp; }</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  override bool Equals(object other) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Equals(this, other as List&lt;T&gt;);<br>
&nbsp;&nbsp; }</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; static
  bool Equals(List&lt;T&gt; a, List&lt;T&gt; b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a == null) return b == null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b == null || a.count != b.count) return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.count; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!object.Equals(a.items[i], b.items[i])) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>
&nbsp;&nbsp; }</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Methods</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  event EventHandler Changed;</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Event</p>
  </td>
 </tr>
 <tr>
  <td width="493" valign="top" style="width:369.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  static bool operator ==(List&lt;T&gt; a, List&lt;T&gt; b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Equals(a, b);<br>
&nbsp;&nbsp; }</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;&nbsp; public
  static bool operator !=(List&lt;T&gt; a, List&lt;T&gt; b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !Equals(a, b);<br>
&nbsp;&nbsp; }</span></span></p>
  </td>
  <td width="114" valign="top" style="width:85.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Operators</p>
  </td>
 </tr>
 <tr>
  <td width="607" colspan="2" valign="top" style="width:455.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">}</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612882"></a><a name="_Toc46039335">1.6.7.1 Constructors</a></h4>

<p class="MsoNormal">C# supports both instance and static constructors. An <span class="Term">instance constructor</span> is a member that implements the actions
required to initialize an instance of a class. A <span class="Term">static
constructor</span> is a member that implements the actions required to
initialize a class itself when it is first loaded.</p>

<p class="MsoNormal">A constructor is declared like a method with no return type
and the same name as the containing class. If a constructor declaration
includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier, it declares a static constructor. Otherwise, it declares an instance
constructor.</p>

<p class="MsoNormal">Instance constructors can be overloaded. For example, the <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
class declares two instance constructors, one with no parameters and one that
takes an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
parameter. Instance constructors are invoked using the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> operator.
The following statements allocate two <span class="Codefragment"><span style="font-size:10.0pt">List&lt;string&gt;</span></span> instances using each
of the constructors of the <span class="Codefragment"><span style="font-size:
10.0pt">List</span></span> class.</p>

<p class="Code">List&lt;string&gt; list1 = new List&lt;string&gt;();<br>
List&lt;string&gt; list2 = new List&lt;string&gt;(10);</p>

<p class="MsoNormal">Unlike other members, instance constructors are not
inherited, and a class has no instance constructors other than those actually
declared in the class. If no instance constructor is supplied for a class, then
an empty one with no parameters is automatically provided.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612883"></a><a name="_Toc46039336">1.6.7.2 Properties</a></h4>

<p class="MsoNormal"><span class="Term">Properties</span> are a natural extension
of fields. Both are named members with associated types, and the syntax for
accessing fields and properties is the same. However, unlike fields, properties
do not denote storage locations. Instead, properties have <span class="Term">accessors</span>
that specify the statements to be executed when their values are read or
written.</p>

<p class="MsoNormal">A property is declared like a field, except that the
declaration ends with a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor and/or a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor written between the delimiters <span class="Codefragment"><span style="font-size:10.0pt">{</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">}</span></span> instead of ending in a semicolon. A
property that has both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor and a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor is a <span class="Term">read-write property</span>, a property that has
only a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor is a <span class="Term">read-only property</span>, and a property that
has only a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor is a <span class="Term">write-only property</span>.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor corresponds to a parameterless method with a return value of the
property type. Except as the target of an assignment, when a property is
referenced in an expression, the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of the property is invoked
to compute the value of the property.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor corresponds to a method with a single parameter named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> and no
return type. When a property is referenced as the target of an assignment or as
the operand of <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>,
the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor is invoked with an argument that provides the new value.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
class declares two properties, <span class="Codefragment"><span style="font-size:
10.0pt">Count</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Capacity</span></span>, which are read-only and
read-write, respectively. The following is an example of use of these
properties.</p>

<p class="Code">List&lt;string&gt; names = new List&lt;string&gt;();<br>
names.Capacity = 100;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes set accessor<br>
int i = names.Count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes get accessor<br>
int j = names.Capacity;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes get accessor</p>

<p class="MsoNormal">Similar to fields and methods, C# supports both instance
properties and static properties. Static properties are declared with the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier, and instance properties are declared without it.</p>

<p class="MsoNormal">The accessor(s) of a property can be virtual. When a
property declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> modifier, it applies to the
accessor(s) of the property.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612884"></a><a name="_Toc46039337">1.6.7.3 Indexers</a></h4>

<p class="MsoNormal">An <span class="Term">indexer</span> is a member that enables
objects to be indexed in the same way as an array. An indexer is declared like
a property except that the name of the member is <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> followed by a parameter list
written between the delimiters <span class="Codefragment"><span style="font-size:
10.0pt">[</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">]</span></span>. The parameters are available in the accessor(s) of the
indexer. Similar to properties, indexers can be read-write, read-only, and
write-only, and the accessor(s) of an indexer can be virtual.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">List</span></span>
class declares a single read-write indexer that takes an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> parameter.
The indexer makes it possible to index <span class="Codefragment"><span style="font-size:10.0pt">List</span></span> instances with <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> values. For
example</p>

<p class="Code">List&lt;string&gt; names = new List&lt;string&gt;();<br>
names.Add("Liz");<br>
names.Add("Martha");<br>
names.Add("Beth");<br>
for (int i = 0; i &lt; names.Count; i++) {<br>
&nbsp;&nbsp; string s = names[i];<br>
&nbsp;&nbsp; names[i] = s.ToUpper();<br>
}</p>

<p class="MsoNormal">Indexers can be overloaded, meaning that a class can declare
multiple indexers as long as the number or types of their parameters differ.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612885"></a><a name="_Toc46039338">1.6.7.4 Events</a></h4>

<p class="MsoNormal">An <span class="Term">event</span> is a member that enables a
class or object to provide notifications. An event is declared like a field
except that the declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">event</span></span> keyword and the type must be a
delegate type.</p>

<p class="MsoNormal">Within a class that declares an event member, the event behaves
just like a field of a delegate type (provided the event is not abstract and
does not declare accessors). The field stores a reference to a delegate that
represents the event handlers that have been added to the event. If no event
handles are present, the field is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
class declares a single event member called <span class="Codefragment"><span style="font-size:10.0pt">Changed</span></span>, which indicates that a new item
has been added to the list. The <span class="Codefragment"><span style="font-size:10.0pt">Changed</span></span> event is raised by the <span class="Codefragment"><span style="font-size:10.0pt">OnChanged</span></span>
virtual method, which first checks whether the event is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> (meaning
that no handlers are present). The notion of raising an event is precisely
equivalent to invoking the delegate represented by the event—thus, there are no
special language constructs for raising events.</p>

<p class="MsoNormal">Clients react to events through <span class="Term">event
handlers</span>. Event handlers are attached using the <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> operator and
removed using the <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>
operator. The following example attaches an event handler to the <span class="Codefragment"><span style="font-size:10.0pt">Changed</span></span> event
of a <span class="Codefragment"><span style="font-size:10.0pt">List&lt;string&gt;</span></span>.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static int changeCount;</p>

<p class="Code">&nbsp;&nbsp; static void ListChanged(object sender, EventArgs e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changeCount++;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;string&gt; names = new List&lt;string&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; names.Changed += new EventHandler(ListChanged);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; names.Add("Liz");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; names.Add("Martha");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; names.Add("Beth");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(changeCount);&nbsp;&nbsp;&nbsp;&nbsp; // Outputs "3"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">For advanced scenarios where control of the underlying
storage of an event is desired, an event declaration can explicitly provide <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span>
accessors, which are somewhat similar to the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of a property.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612886"></a><a name="_Toc46039339">1.6.7.5 Operators</a></h4>

<p class="MsoNormal">An <span class="Term">operator</span> is a member that defines
the meaning of applying a particular expression operator to instances of a
class. Three kinds of operators can be defined: unary operators, binary
operators, and conversion operators. All operators must be declared as <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
class declares two operators, <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">==</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">!=</span></span>, and thus gives new meaning to expressions that apply
those operators to <span class="Codefragment"><span style="font-size:10.0pt">List</span></span>
instances. Specifically, the operators define equality of two <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
instances as comparing each of the contained objects using their <span class="Codefragment"><span style="font-size:10.0pt">Equals</span></span> methods.
The following example uses the <span class="Codefragment"><span style="font-size:
10.0pt">==</span></span> operator to compare two <span class="Codefragment"><span style="font-size:10.0pt">List&lt;int&gt;</span></span> instances.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;int&gt; a = new List&lt;int&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.Add(1);<br>
&nbsp;&nbsp; &nbsp;&nbsp; a.Add(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List&lt;int&gt; b = new List<span class="Codefragment">&lt;int&gt;</span>();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Add(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Add(2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(a == b);&nbsp;&nbsp;&nbsp; // Outputs "True" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Add(3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(a == b);&nbsp;&nbsp;&nbsp; // Outputs "False"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The first <span class="Codefragment"><span style="font-size:
10.0pt">Console.WriteLine</span></span> outputs <span class="Codefragment"><span style="font-size:10.0pt">True</span></span> because the two lists contain the
same number of objects with the same values in the same order. Had <span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>
not defined <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, the
first <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
would have output <span class="Codefragment"><span style="font-size:10.0pt">False</span></span>
because <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
reference different <span class="Codefragment"><span style="font-size:10.0pt">List&lt;int&gt;</span></span>
instances.</p>

<h4 style="margin-left:0in;text-indent:0in"><a name="_Toc251612887"></a><a name="_Toc46039340">1.6.7.6 Destructors</a></h4>

<p class="MsoNormal">A <span class="Term">destructor</span> is a member that implements
the actions required to destruct an instance of a class. Destructors cannot
have parameters, they cannot have accessibility modifiers, and they cannot be
invoked explicitly. The destructor for an instance is invoked automatically
during garbage collection.</p>

<p class="MsoNormal">The garbage collector is allowed wide latitude in deciding
when to collect objects and run destructors. Specifically, the timing of
destructor invocations is not deterministic, and destructors may be executed on
any thread. For these and other reasons, classes should implement destructors
only when no other solutions are feasible.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement provides a better approach to object destruction.</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612888"></a><a name="_Toc46039341">1.7 Structs</a></h2>

<p class="MsoNormal">Like classes, <span class="Term">structs</span> are data
structures that can contain data members and function members, but unlike
classes, structs are value types and do not require heap allocation. A variable
of a struct type directly stores the data of the struct, whereas a variable of
a class type stores a reference to a dynamically allocated object. Struct types
do not support user-specified inheritance, and all struct types implicitly
inherit from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoNormal">Structs are particularly useful for small data structures
that have value semantics. Complex numbers, points in a coordinate system, or
key-value pairs in a dictionary are all good examples of structs. The use of
structs rather than classes for small data structures can make a large
difference in the number of memory allocations an application performs. For
example, the following program creates and initializes an array of 100 points.
With <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>
implemented as a class, 101 separate objects are instantiated—one for the array
and one each for the 100 elements.</p>

<p class="Code">class Point<br>
{<br>
&nbsp;&nbsp; public int x, y;</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point[] points = new Point[100];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 100; i++) points[i] = new Point(i, i);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An alternative is to make <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> a struct.</p>

<p class="Code"><span lang="FR">struct Point<br>
{<br>
&nbsp;&nbsp; public int x, y;</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; </span>public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Now, only one object is instantiated—the one for the
array—and the <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>
instances are stored in-line in the array.</p>

<p class="MsoNormal">Struct constructors are invoked with the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> operator,
but that does not imply that memory is being allocated. Instead of dynamically
allocating an object and returning a reference to it, a struct constructor
simply returns the struct value itself (typically in a temporary location on
the stack), and this value is then copied as necessary.</p>

<p class="MsoNormal">With classes, it is possible for two variables to reference
the same object and thus possible for operations on one variable to affect the
object referenced by the other variable. With structs, the variables each have
their own copy of the data, and it is not possible for operations on one to
affect the other. For example, the output produced by the following code
fragment depends on whether <span class="Codefragment"><span style="font-size:
10.0pt">Point</span></span> is a class or a struct.</p>

<p class="Code">Point a = new Point(10, 10);<br>
Point b = a;<br>
a.x = 20;<br>
Console.WriteLine(b.x);</p>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>
is a class, the output is <span class="Codefragment"><span style="font-size:10.0pt">20</span></span>
because <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
reference the same object. If <span class="Codefragment"><span style="font-size:
10.0pt">Point</span></span> is a struct, the output is <span class="Codefragment"><span style="font-size:10.0pt">10</span></span> because the
assignment of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
creates a copy of the value, and this copy is unaffected by the subsequent
assignment to <span class="Codefragment"><span style="font-size:10.0pt">a.x</span></span>.</p>

<p class="MsoNormal">The previous example highlights two of the limitations of
structs. First, copying an entire struct is typically less efficient than
copying an object reference, so assignment and value parameter passing can be
more expensive with structs than with reference types. Second, except for <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters,
it is not possible to create references to structs, which rules out their usage
in a number of situations.</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612889"></a><a name="_Toc46039342">1.8 Arrays</a></h2>

<p class="MsoNormal">An <span class="Term">array</span> is a data structure that
contains a number of variables that are accessed through computed indices. The
variables contained in an array, also called the <span class="Term">elements</span>
of the array, are all of the same type, and this type is called the <span class="Term">element type</span> of the array.</p>

<p class="MsoNormal">Array types are reference types, and the declaration of an
array variable simply sets aside space for a reference to an array instance.
Actual array instances are created dynamically at run-time using the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> operator.
The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operation specifies the <span class="Term">length</span> of the new array
instance, which is then fixed for the lifetime of the instance. The indices of
the elements of an array range from <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">Length</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span>. The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> operator automatically initializes
the elements of an array to their default value, which, for example, is zero
for all numeric types and <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
for all reference types.</p>

<p class="MsoNormal">The following example creates an array of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> elements,
initializes the array, and prints out the contents of the array.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] a = new int[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.Length; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[i] = i * i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.Length; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("a[{0}] = {1}", i, a[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">This example creates and operates on a <span class="Term">single-dimensional
array</span>. C# also supports <span class="Term">multi-dimensional arrays</span>.
The number of dimensions of an array type, also known as the <span class="Term">rank</span>
of the array type, is one plus the number of commas written between the square
brackets of the array type. The following example allocates a one-dimensional,
a two-dimensional, and a three-dimensional array.</p>

<p class="Code">int[] a1 = new int[10];<br>
int[,] a2 = new int[10, 5];<br>
int[,,] a3 = new int[10, 5, 2];</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">a1</span></span>
array contains 10 elements, the <span class="Codefragment"><span style="font-size:10.0pt">a2</span></span> array contains 50 (10 × 5) elements,
and the <span class="Codefragment"><span style="font-size:10.0pt">a3</span></span>
array contains 100 (10 × 5 × 2) elements.</p>

<p class="MsoNormal">The element type of an array can be any type, including an
array type. An array with elements of an array type is sometimes called a <span class="Term">jagged array</span> because the lengths of the element arrays do not
all have to be the same. The following example allocates an array of arrays of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>:</p>

<p class="Code">int[][] a = new int[3][];<br>
a[0] = new int[10];<br>
a[1] = new int[5];<br>
a[2] = new int[20];</p>

<p class="MsoNormal">The first line creates an array with three elements, each of
type <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span>
and each with an initial value of <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. The subsequent lines then
initialize the three elements with references to individual array instances of
varying lengths.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator permits the initial values of the array elements to be specified using
an <span class="Term">array initializer</span>, which is a list of expressions
written between the delimiters <span class="Codefragment"><span style="font-size:
10.0pt">{</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">}</span></span>. The following example allocates and initializes an <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span> with
three elements.</p>

<p class="Code">int[] a = new int[] {1, 2, 3};</p>

<p class="MsoNormal">Note that the length of the array is inferred from the
number of expressions between <span class="Codefragment"><span style="font-size:
10.0pt">{</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">}</span></span>. Local variable and field declarations can be shortened
further such that the array type does not have to be restated.</p>

<p class="Code">int[] a = {1, 2, 3};</p>

<p class="MsoNormal">Both of the previous examples are equivalent to the
following:</p>

<p class="Code">int[] t = new int[3];<br>
t[0] = 1;<br>
t[1] = 2;<br>
t[2] = 3;<br>
int[] a = t;</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612890"></a><a name="_Toc46039343">1.9 Interfaces</a></h2>

<p class="MsoNormal">An <span class="Term">interface</span> defines a contract that
can be implemented by classes and structs. An interface can contain methods,
properties, events, and indexers. An interface does not provide implementations
of the members it defines—it merely specifies the members that must be supplied
by classes or structs that implement the interface.</p>

<p class="MsoNormal">Interfaces may employ <span class="Term">multiple inheritance</span>.
In the following example, the interface <span class="Codefragment"><span style="font-size:10.0pt">IComboBox</span></span> inherits from both <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IListBox</span></span>.</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="Code">interface IListBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetItems(string[] items);<br>
}</p>

<p class="Code">interface IComboBox: ITextBox, IListBox {}</p>

<p class="MsoNormal">Classes and structs can implement multiple interfaces. In
the following example, the class <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span> implements both <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IDataBound</span></span>.</p>

<p class="Code">interface IDataBound<br>
{<br>
&nbsp;&nbsp; void Bind(Binder b);<br>
}</p>

<p class="Code">public class EditBox: IControl, IDataBound<br>
{<br>
&nbsp;&nbsp; public void Paint() {...}</p>

<p class="Code">&nbsp;&nbsp; <span lang="DE">public void Bind(Binder b) {...}<br>
</span>} </p>

<p class="MsoNormal">When a class or struct implements a particular interface,
instances of that class or struct can be implicitly converted to that interface
type. For example</p>

<p class="Code">EditBox editBox = new EditBox();<br>
IControl control = editBox;<br>
IDataBound dataBound = editBox;</p>

<p class="MsoNormal">In cases where an instance is not statically known to
implement a particular interface, dynamic type casts can be used. For example,
the following statements use dynamic type casts to obtain an object’s <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IDataBound</span></span>
interface implementations. Because the actual type of the object is <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span>, the
casts succeed.</p>

<p class="Code">object obj = new EditBox();<br>
IControl control = (IControl)obj;<br>
IDataBound dataBound = (IDataBound)obj;</p>

<p class="MsoNormal">In the previous <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span> class, the <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span> method
from the <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span>
interface and the <span class="Codefragment"><span style="font-size:10.0pt">Bind</span></span>
method from the <span class="Codefragment"><span style="font-size:10.0pt">IDataBound</span></span>
interface are implemented using <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> members. C# also supports <span class="Term">explicit interface member implementations</span>, using which the
class or struct can avoid making the members <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>. An explicit interface member
implementation is written using the fully qualified interface member name. For
example, the <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span>
class could implement the <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">IDataBound.Bind</span></span>
methods using explicit interface member implementations as follows.</p>

<p class="Code">public class EditBox: IControl, IDataBound<br>
{<br>
&nbsp;&nbsp; void IControl.Paint() {...}</p>

<p class="Code">&nbsp;&nbsp; <span lang="NO-BOK">void IDataBound.Bind(Binder b) {...}<br>
</span>}</p>

<p class="MsoNormal">Explicit interface members can only be accessed via the
interface type. For example, the implementation of <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span> provided by the previous <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span> class
can only be invoked by first converting the <span class="Codefragment"><span style="font-size:10.0pt">EditBox</span></span> reference to the <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span>
interface type.</p>

<p class="Code">EditBox editBox = new EditBox();<br>
editBox.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, no such method<br>
IControl control = editBox;<br>
control.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612891"></a><a name="_Toc46039344">1.10 Enums</a></h2>

<p class="MsoNormal">An <span class="Term">enum type</span> is a distinct value
type with a set of named constants. The following example declares and uses an
enum type named <span class="Codefragment"><span style="font-size:10.0pt">Color</span></span>
with three constant values, <span class="Codefragment"><span style="font-size:
10.0pt">Red</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">Green</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span>.</p>

<p class="Code">using System;</p>

<p class="Code">enum Color<br>
{<br>
&nbsp;&nbsp; Red,<br>
&nbsp;&nbsp; Green,<br>
&nbsp;&nbsp; Blue<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void PrintColor(Color color) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (color) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Red:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Red");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Green:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Green");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Blue:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Blue");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Unknown color");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color c = Color.Red;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintColor(c);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintColor(Color.Blue);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Each enum type has a corresponding integral type called the <span class="Term">underlying type</span> of the enum type. An enum type that does not
explicitly declare an underlying type has an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>. An enum
type’s storage format and range of possible values are determined by its
underlying type. The set of values that an enum type can take on is not limited
by its enum members. In particular, any value of the underlying type of an enum
can be cast to the enum type and is a distinct valid value of that enum type.</p>

<p class="MsoNormal">The following example declares an enum type named <span class="Codefragment"><span style="font-size:10.0pt">Alignment</span></span> with
an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>.</p>

<p class="Code">enum Alignment: sbyte<br>
{<br>
&nbsp;&nbsp; Left = -1,<br>
&nbsp;&nbsp; Center = 0,<br>
&nbsp;&nbsp; Right = 1<br>
}</p>

<p class="MsoNormal">As shown by the previous example, an enum member declaration
can include a constant expression that specifies the value of the member. The
constant value for each enum member must be in the range of the underlying type
of the enum. When an enum member declaration does not explicitly specify a
value, the member is given the value zero (if it is the first member in the
enum type) or the value of the textually preceding enum member plus one.</p>

<p class="MsoNormal">Enum values can be converted to integral values and vice
versa using type casts. For example</p>

<p class="Code">int i = (int)Color.Blue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // int i = 2;<br>
Color c = (Color)2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Color c = Color.Blue;</p>

<p class="MsoNormal">The default value of any enum type is the integral value
zero converted to the enum type. In cases where variables are automatically
initialized to a default value, this is the value given to variables of enum
types. In order for the default value of an enum type to be easily available,
the literal <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>
implicitly converts to any enum type. Thus, the following is permitted.</p>

<p class="Code">Color c = 0;</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612892"></a><a name="_Toc46039345">1.11 Delegates</a></h2>

<p class="MsoNormal">A <span class="Term">delegate type</span> represents
references to methods with a particular parameter list and return type.
Delegates make it possible to treat methods as entities that can be assigned to
variables and passed as parameters. Delegates are similar to the concept of
function pointers found in some other languages, but unlike function pointers,
delegates are object-oriented and type-safe.</p>

<p class="MsoNormal">The following example declares and uses a delegate type
named <span class="Codefragment"><span style="font-size:10.0pt">Function</span></span>.</p>

<p class="Code">using System;</p>

<p class="Code">delegate double Function(double x);</p>

<p class="Code">class Multiplier<br>
{<br>
&nbsp;&nbsp; double factor;</p>

<p class="Code">&nbsp;&nbsp; public Multiplier(double factor) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.factor = factor;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public double Multiply(double x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * factor;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static double Square(double x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * x;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static double[] Apply(double[] a, Function f) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] result = new double[a.Length];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.Length; i++) result[i] = f(a[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] a = {0.0, 0.5, 1.0};</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] squares = Apply(a, Square);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] sines = Apply(a, Math.Sin);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Multiplier m = new Multiplier(2.0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] doubles =&nbsp; Apply(a, m.Multiply);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An instance of the <span class="Codefragment"><span style="font-size:10.0pt">Function</span></span> delegate type can reference any
method that takes a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
argument and returns a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
value. The <span class="Codefragment"><span style="font-size:10.0pt">Apply</span></span>
method applies a given <span class="Codefragment"><span style="font-size:10.0pt">Function</span></span>
to the elements of a <span class="Codefragment"><span style="font-size:10.0pt">double[]</span></span>,
returning a <span class="Codefragment"><span style="font-size:10.0pt">double[]</span></span>
with the results. In the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>
method, <span class="Codefragment"><span style="font-size:10.0pt">Apply</span></span>
is used to apply three different functions to a <span class="Codefragment"><span style="font-size:10.0pt">double[]</span></span>.</p>

<p class="MsoNormal">A delegate can reference either a static method (such as <span class="Codefragment"><span style="font-size:10.0pt">Square</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">Math.Sin</span></span> in the
previous example) or an instance method (such as <span class="Codefragment"><span style="font-size:10.0pt">m.Multiply</span></span> in the previous example). A
delegate that references an instance method also references a particular
object, and when the instance method is invoked through the delegate, that
object becomes <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in the invocation.</p>

<p class="MsoNormal">Delegates can also be created using anonymous functions,
which are “inline methods” that are created on the fly. Anonymous functions can
see the local variables of the sourrounding methods. Thus, the multiplier
example above can be written more easily without using a <span class="Codefragment"><span style="font-size:10.0pt">Multiplier</span></span>
class:</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] doubles =&nbsp; Apply(a, (double x) =&gt; x * 2.0);</p>

<p class="MsoNormal">An interesting and useful property of a delegate is that it
does not know or care about the class of the method it references; all that
matters is that the referenced method has the same parameters and return type
as the delegate.</p>

<h2 style="margin-left:0in;text-indent:0in"><a name="_Toc251612893"></a><a name="_Toc46039346">1.12 Attributes</a></h2>

<p class="MsoNormal">Types, members, and other entities in a C# program support
modifiers that control certain aspects of their behavior. For example, the
accessibility of a method is controlled using the <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> modifiers. C# generalizes this
capability such that user-defined types of declarative information can be
attached to program entities and retrieved at run-time. Programs specify this
additional declarative information by defining and using <span class="Term">attributes</span>.</p>

<p class="MsoNormal">The following example declares a <span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span> attribute that can be
placed on program entities to provide links to their associated documentation.</p>

<p class="Code">using System;</p>

<p class="Code">public class HelpAttribute: Attribute<br>
{<br>
&nbsp;&nbsp; string url;<br>
&nbsp;&nbsp; string topic;</p>

<p class="Code">&nbsp;&nbsp; public HelpAttribute(string url) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.url = url;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Url { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return url; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Topic {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return topic; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { topic = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">All attribute classes derive from the <span class="Codefragment"><span style="font-size:10.0pt">System.Attribute</span></span>
base class provided by the .NET Framework. Attributes can be applied by giving
their name, along with any arguments, inside square brackets just before the
associated declaration. If an attribute’s name ends in <span class="Codefragment"><span style="font-size:10.0pt">Attribute</span></span>, that
part of the name can be omitted when the attribute is referenced. For example,
the <span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span>
attribute can be used as follows.</p>

<p class="Code">[Help("http://msdn.microsoft.com/.../MyClass.htm")]<br>
public class Widget<br>
{<br>
&nbsp;&nbsp; [Help("http://msdn.microsoft.com/.../MyClass.htm", Topic =
"Display")]<br>
&nbsp;&nbsp; public void Display(string text) {}<br>
}</p>

<p class="MsoNormal">This example attaches a <span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span> to the <span class="Codefragment"><span style="font-size:10.0pt">Widget</span></span> class
and another <span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span>
to the <span class="Codefragment"><span style="font-size:10.0pt">Display</span></span>
method in the class. The public constructors of an attribute class control the
information that must be provided when the attribute is attached to a program
entity. Additional information can be provided by referencing public read-write
properties of the attribute class (such as the reference to the <span class="Codefragment"><span style="font-size:10.0pt">Topic</span></span> property
previously).</p>

<p class="MsoNormal">The following example shows how attribute information for a
given program entity can be retrieved at run-time using reflection.</p>

<p class="Code">using System;<br>
using System.Reflection;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void ShowHelp(MemberInfo member) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelpAttribute a = Attribute.GetCustomAttribute(member,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(HelpAttribute)) as HelpAttribute;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (a == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("No help for {0}", member);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Help for {0}:", member);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("&nbsp; Url={0}, Topic={1}", a.Url, a.Topic);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowHelp(typeof(Widget));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ShowHelp(typeof(Widget).GetMethod("Display"));<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">When a particular attribute is requested through reflection,
the constructor for the attribute class is invoked with the information
provided in the program source, and the resulting attribute instance is
returned. If additional information was provided through properties, those
properties are set to the given values before the attribute instance is
returned.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section4">

<h1><a name="_Toc445782965"></a><a name="_Toc251612894"></a><a name="_Toc495484341">2. Lexical structure</a></h1>

<h2><a name="_Toc251612895">2.1 Programs</a></h2>

<p class="MsoNormal">A C# <span class="Term">program</span> consists of one or more
<span class="Term">source files</span>, known formally as <span class="Term">compilation
units</span> (§<span class="Term"><span style="font-weight:normal;font-style:normal">9.1</span></span>).
A source file is an ordered sequence of Unicode characters. Source files
typically have a one-to-one correspondence with files in a file system, but
this correspondence is not required. For maximal portability, it is recommended
that files in a file system be encoded with the UTF-8 encoding.</p>

<p class="MsoNormal">Conceptually speaking, a program is compiled using three
steps:</p>

<p class="MsoListNumber">1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Transformation, which converts a file from a particular character
repertoire and encoding scheme into a sequence of Unicode characters.</p>

<p class="MsoListNumber">2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Lexical analysis, which translates a stream of Unicode input characters
into a stream of tokens. </p>

<p class="MsoListNumber">3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Syntactic analysis, which translates the stream of tokens into
executable code.</p>

<h2><a name="_Toc251612896">2.2 Grammars</a></h2>

<p class="MsoNormal">This specification presents the syntax of the C# programming
language using two grammars. The <span class="Term">lexical grammar</span> (§2.2.2) defines how Unicode characters are combined to form line terminators, white
space, comments, tokens, and pre-processing directives. The <span class="Term">syntactic
grammar</span> (§2.2.3) defines how the tokens resulting from the lexical
grammar are combined to form C# programs.</p>

<h3><a name="_Toc251612897">2.2.1 Grammar notation</a></h3>

<p class="MsoNormal">The lexical and syntactic grammars are presented using <span class="Term">grammar productions</span>. Each grammar production defines a
non-terminal symbol and the possible expansions of that non-terminal symbol
into sequences of non-terminal or terminal symbols. In grammar productions, <span class="Production">non-terminal</span> symbols are shown in italic type, and <span class="Codefragment"><span style="font-size:10.0pt">terminal</span></span>
symbols are shown in a fixed-width font. </p>

<p class="MsoNormal">The first line of a grammar production is the name of the
non-terminal symbol being defined, followed by a colon. Each successive
indented line contains a possible expansion of the non-terminal given as a
sequence of non-terminal or terminal symbols. For example, the production:</p>

<p class="Grammar">while-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">while</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement </p>

<p class="MsoNormal">defines a <span class="Production">while-statement</span> to
consist of the token <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>,
followed by the token “<span class="Codefragment"><span style="font-size:10.0pt">(</span></span>”,
followed by a <span class="Production">boolean-expression</span>, followed by the
token “<span class="Codefragment"><span style="font-size:10.0pt">)</span></span>”,
followed by an <span class="Production">embedded-statement</span>.</p>

<p class="MsoNormal">When there is more than one possible expansion of a
non-terminal symbol, the alternatives are listed on separate lines. For
example, the production:</p>

<p class="Grammar">statement-list:<br>
statement<br>
statement-list&nbsp;&nbsp; statement</p>

<p class="MsoNormal">defines a <span class="Production">statement-list</span> to
either consist of a <span class="Production">statement</span> or consist of a <span class="Production">statement-list</span> followed by a <span class="Production">statement</span>.
In other words, the definition is recursive and specifies that a statement list
consists of one or more statements.</p>

<p class="MsoNormal">A subscripted suffix “<span class="Production"><sub>opt</sub></span>”
is used to indicate an optional symbol. The production:</p>

<p class="Grammar">block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
statement-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">}</span></span></p>

<p class="MsoNormal">is shorthand for:</p>

<p class="Grammar">block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
statement-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">}</span></span></p>

<p class="MsoNormal">and defines a <span class="Production">block</span> to consist
of an optional <span class="Production">statement-list</span> enclosed in “<span class="Codefragment"><span style="font-size:10.0pt">{</span></span>” and “<span class="Codefragment"><span style="font-size:10.0pt">}</span></span>” tokens.</p>

<p class="MsoNormal">Alternatives are normally listed on separate lines, though
in cases where there are many alternatives, the phrase “one of” may precede a
list of expansions given on a single line. This is simply shorthand for listing
each of the alternatives on a separate line. For example, the production:</p>

<p class="Grammar">real-type-suffix:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">F&nbsp; f&nbsp; D&nbsp;
d&nbsp; M&nbsp; m</span></span></p>

<p class="MsoNormal">is shorthand for:</p>

<p class="Grammar">real-type-suffix:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">F<br>
f<br>
D<br>
d<br>
M<br>
m</span></span></p>

<h3><a name="_Toc251612898"></a><a name="_Ref503069266">2.2.2 Lexical grammar</a></h3>

<p class="MsoNormal">The lexical grammar of C# is presented in §2.3, §2.4, and §2.5. The terminal symbols of the lexical grammar are the characters
of the Unicode character set, and the lexical grammar specifies how characters
are combined to form tokens (§2.4), white space (§2.3.3), comments (§2.3.2), and pre-processing directives (§2.5).</p>

<p class="MsoNormal">Every source file in a C# program must conform to the <span class="Production">input</span> production of the lexical grammar (§2.3).</p>

<h3><a name="_Toc251612899"></a><a name="_Ref503069282">2.2.3 Syntactic grammar</a></h3>

<p class="MsoNormal">The syntactic grammar of C# is presented in the chapters and
appendices that follow this chapter. The terminal symbols of the syntactic
grammar are the tokens defined by the lexical grammar, and the syntactic grammar
specifies how tokens are combined to form C# programs.</p>

<p class="MsoNormal">Every source file in a C# program must conform to the <span class="Production">compilation-unit</span> production of the syntactic grammar (§9.1).</p>

<h2><a name="_Toc251612900"></a><a name="_Ref503147908">2.3 Lexical </a>analysis</h2>

<p class="MsoNormal">The <span class="Production">input</span> production defines
the lexical structure of a C# source file. Each source file in a C# program
must conform to this lexical grammar production.</p>

<p class="Grammar">input:<br>
input-section<sub>opt</sub></p>

<p class="Grammar">input-section:<br>
input-section-part<br>
input-section &nbsp;&nbsp;input-section-part</p>

<p class="Grammar">input-section-part:<br>
input-elements<sub>opt</sub>&nbsp;&nbsp; new-line<br>
pp-directive</p>

<p class="Grammar">input-elements:<br>
input-element<br>
input-elements&nbsp;&nbsp; input-element</p>

<p class="Grammar">input-element:<br>
whitespace<br>
comment<br>
token</p>

<p class="MsoNormal">Five basic elements make up the lexical structure of a C#
source file: Line terminators (§2.3.1), white space (§2.3.3), comments (§2.3.2), tokens (§2.4), and pre-processing directives (§2.5). Of these basic elements,
only tokens are significant in the syntactic grammar of a C# program (§2.2.3).</p>

<p class="MsoNormal">The lexical processing of a C# source file consists of
reducing the file into a sequence of tokens which becomes the input to the
syntactic analysis. Line terminators, white space, and comments can serve to
separate tokens, and pre-processing directives can cause sections of the source
file to be skipped, but otherwise these lexical elements have no impact on the
syntactic structure of a C# program.</p>

<p class="MsoNormal">When several lexical grammar productions match a sequence of
characters in a source file, the lexical processing always forms the longest
possible lexical element. For example, the character sequence <span class="Codefragment"><span style="font-size:10.0pt">//</span></span> is processed
as the beginning of a single-line comment because that lexical element is
longer than a single <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>
token.</p>

<h3><a name="_Toc251612901"></a><a name="_Ref503086478">2.3.1 Line terminators</a></h3>

<p class="MsoNormal">Line terminators divide the characters of a C# source file
into lines.</p>

<p class="Grammar">new-line:<br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">) followed by line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Next line character</span></span><span style="font-style:normal"><span class="GrammarText"><span style="font-style:
normal">&nbsp;(</span></span></span><span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">U+0085</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2028</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Paragraph separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2029</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="MsoNormal">For compatibility with source code editing tools that add
end-of-file markers, and to enable a source file to be viewed as a sequence of
properly terminated lines, the following transformations are applied, in order,
to every source file in a C# program:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the last character of the source file is a Control-Z character
(<span class="Codefragment"><span style="font-size:10.0pt">U+001A</span></span>),
this character is deleted.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A carriage-return character (<span class="Codefragment"><span style="font-size:10.0pt">U+000D</span></span>) is added to the end of the
source file if that source file is non-empty and if the last character of the
source file is not a carriage return (<span class="Codefragment"><span style="font-size:10.0pt">U+000D</span></span>), a line feed (<span class="Codefragment"><span style="font-size:10.0pt">U+000A</span></span>), a line
separator (<span class="Codefragment"><span style="font-size:10.0pt">U+2028</span></span>),
or a paragraph separator (<span class="Codefragment"><span style="font-size:10.0pt">U+2029</span></span>).</p>

<h3><a name="_Toc251612902"></a><a name="_Ref503086494">2.3.2 Comments</a></h3>

<p class="MsoNormal">Two forms of comments are supported: single-line comments
and delimited comments. <span class="Term">Single-line comments</span> start with
the characters <span class="Codefragment"><span style="font-size:10.0pt">//</span></span>
and extend to the end of the source line. <span class="Term">Delimited comments</span>
start with the characters <span class="Codefragment"><span style="font-size:10.0pt">/*</span></span>
and end with the characters <span class="Codefragment"><span style="font-size:
10.0pt">*/</span></span>. Delimited comments may span multiple lines.</p>

<p class="Grammar">comment:<br>
single-line-comment<br>
delimited-comment</p>

<p class="Grammar">single-line-comment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">//</span></span>&nbsp;&nbsp;
input-characters<sub>opt</sub></p>

<p class="Grammar">input-characters:<br>
input-character<br>
input-characters&nbsp;&nbsp; input-character</p>

<p class="Grammar">input-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any Unicode character
except a </span></span>new-line-character</p>

<p class="Grammar">new-line-character:<br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Next line character</span></span><span style="font-style:normal"><span class="GrammarText"><span style="font-style:
normal">&nbsp;(</span></span></span><span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">U+0085</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2028</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Paragraph separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2029</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Grammar">delimited-comment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">/*</span></span>&nbsp;&nbsp;
delimited-comment-text<sub>opt</sub>&nbsp;&nbsp; asterisks&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">/</span></span></p>

<p class="Grammar">delimited-comment-text:<br>
delimited-comment-section<br>
delimited-comment-text&nbsp;&nbsp; delimited-comment-section</p>

<p class="Grammar">delimited-comment-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">/</span></span><br>
asterisks<sub>opt</sub>&nbsp;&nbsp; not-slash-or-asterisk</p>

<p class="Grammar">asterisks:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span><br>
asterisks&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="Grammar">not-slash-or-asterisk:<br>
<span class="GrammarText"><span style="font-style:normal">Any Unicode character
except </span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">/</span></span><span class="GrammarText"><span style="font-style:normal"> or </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="MsoNormal">Comments do not nest. The character sequences <span class="Codefragment"><span style="font-size:10.0pt">/*</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">*/</span></span> have no
special meaning within a <span class="Codefragment"><span style="font-size:10.0pt">//</span></span>
comment, and the character sequences <span class="Codefragment"><span style="font-size:10.0pt">//</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">/*</span></span> have no special meaning within a
delimited comment.</p>

<p class="MsoNormal">Comments are not processed within character and string
literals.</p>

<p class="MsoNormal">The example</p>

<p class="Code">/* Hello, world program<br>
&nbsp;&nbsp; This program writes “hello, world” to the console<br>
*/<br>
class Hello<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine("hello, world");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">includes a delimited comment.</p>

<p class="MsoNormal">The example</p>

<p class="Code">// Hello, world program<br>
// This program writes “hello, world” to the console<br>
//<br>
class Hello // any name will do for this class<br>
{<br>
&nbsp;&nbsp; static void Main() { // this method must be named "Main"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine("hello, world");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">shows several single-line comments.</p>

<h3><a name="_Toc495484358"></a><a name="_Ref462576650"></a><a name="_Toc251612903"></a><a name="_Ref54349111"></a><a name="_Ref54348988">2.3.3
White space</a></h3>

<p class="MsoNormal">White space is defined as any character with Unicode class
Zs (which includes the space character) as well as the horizontal tab
character, the vertical tab character, and the form feed character.</p>

<p class="Grammar">whitespace:<br>
<span class="GrammarText"><span style="font-style:normal">Any character with
Unicode class Zs</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Horizontal tab
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+0009</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Vertical tab character
(</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">U+000B</span></span><span class="GrammarText"><span style="font-style:
normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Form feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000C</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<h2><a name="_Toc251612904"></a><a name="_Ref54349256"></a><a name="_Ref54349244"></a><a name="_Ref54349215"></a><a name="_Ref54349094"></a><a name="_Ref54349034"></a><a name="_Ref54349021">2.4 Tokens</a></h2>

<p class="MsoNormal">There are several kinds of tokens: identifiers, keywords,
literals, operators, and punctuators. White space and comments are not tokens,
though they act as separators for tokens.</p>

<p class="Grammar">token:<br>
identifier<br>
keyword<br>
integer-literal<br>
real-literal<br>
character-literal<br>
string-literal<br>
operator-or-punctuator</p>

<h3><a name="_Toc495484360"></a><a name="_Ref462576198"></a><a name="_Toc251612905"></a><a name="_Ref503694099">2.4.1 Unicode character escape
sequences</a></h3>

<p class="MsoNormal">A Unicode character escape sequence represents a Unicode
character. Unicode character escape sequences are processed in identifiers (§2.4.2), character literals (§2.4.4.4), and regular string literals (§2.4.4.5). A Unicode character escape is not processed in any other location (for
example, to form an operator, punctuator, or keyword).</p>

<p class="Grammar">unicode-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\u</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\U</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit</p>

<p class="MsoNormal">A Unicode escape sequence represents the single Unicode
character formed by the hexadecimal number following the “<span class="Codefragment"><span style="font-size:10.0pt">\u</span></span>” or “<span class="Codefragment"><span style="font-size:10.0pt">\U</span></span>” characters.
Since C# uses a 16-bit encoding of Unicode code points in characters and string
values, a Unicode character in the range U+10000 to U+10FFFF is not permitted
in a character literal and is represented using a Unicode surrogate pair in a
string literal. Unicode characters with code points above 0x10FFFF are not
supported.</p>

<p class="MsoNormal">Multiple translations are not performed. For instance, the
string literal “<span class="Codefragment"><span style="font-size:10.0pt">\u005Cu005C</span></span>”
is equivalent to “<span class="Codefragment"><span style="font-size:10.0pt">\u005C</span></span>”
rather than “<span class="Codefragment"><span style="font-size:10.0pt">\</span></span>”.
The Unicode value <span class="Codefragment"><span style="font-size:10.0pt">\u005C</span></span>
is the character “<span class="Codefragment"><span style="font-size:10.0pt">\</span></span>”.</p>

<p class="MsoNormal">The example</p>

<p class="Code">class Class1<br>
{<br>
&nbsp;&nbsp; static void Test(bool \u0066) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char c = '\u0066';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (\u0066)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine(c.ToString());<br>
&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; <br>
}</p>

<p class="MsoNormal">shows several uses of <span class="Codefragment"><span style="font-size:10.0pt">\u0066</span></span>, which is the escape sequence for
the letter “<span class="Codefragment"><span style="font-size:10.0pt">f</span></span>”.
The program is equivalent to</p>

<p class="Code">class Class1<br>
{<br>
&nbsp;&nbsp; static void Test(bool f) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char c = 'f';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (f)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine(c.ToString());<br>
&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; <br>
}</p>

<h3><a name="_Toc251612906"></a><a name="_Ref503695357">2.4.2 Identifiers</a></h3>

<p class="MsoNormal">The rules for identifiers given in this section correspond
exactly to those recommended by the Unicode Standard Annex 31, except that
underscore is allowed as an initial character (as is traditional in the C
programming language), Unicode escape sequences are permitted in identifiers,
and the “<span class="Codefragment"><span style="font-size:10.0pt">@</span></span>”
character is allowed as a prefix to enable keywords to be used as identifiers. </p>

<p class="Grammar">identifier:<br>
available-identifier<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">@</span></span>&nbsp;&nbsp;
identifier-or-keyword</p>

<p class="Grammar">available-identifier:<br>
<span class="GrammarText"><span style="font-style:normal">An </span></span>identifier-or-keyword<span class="GrammarText"><span style="font-style:normal"> that is not a </span></span>keyword</p>

<p class="Grammar">identifier-or-keyword:<br>
identifier-start-character&nbsp;&nbsp; identifier-part-characters<sub>opt</sub></p>

<p class="Grammar">identifier-start-character:<br>
letter-character<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">_</span></span>
<span class="GrammarText"><span style="font-style:normal">(the underscore
character </span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+005F</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Grammar">identifier-part-characters:<br>
identifier-part-character<br>
identifier-part-characters&nbsp;&nbsp; identifier-part-character</p>

<p class="Grammar">identifier-part-character:<br>
letter-character<br>
decimal-digit-character<br>
connecting-character<br>
combining-character<br>
formatting-character</p>

<p class="Grammar">letter-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
classes Lu, Ll, Lt, Lm, Lo, or Nl</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
classes Lu, Ll, Lt, Lm, Lo, or Nl</span></span></p>

<p class="Grammar">combining-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
classes Mn or Mc</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
classes Mn or Mc</span></span></p>

<p class="Grammar">decimal-digit-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Nd</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Nd</span></span></p>

<p class="Grammar">connecting-character:&nbsp; <br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Pc</span></span><br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Pc</span></span></p>

<p class="Grammar">formatting-character:&nbsp; <br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Cf</span></span><br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Cf</span></span></p>

<p class="MsoNormal">For information on the Unicode character classes mentioned
above, see <em>The Unicode Standard</em>, <em>Version 3.0</em>, section 4.5.</p>

<p class="MsoNormal">Examples of valid identifiers include “<span class="Codefragment"><span style="font-size:10.0pt">identifier1</span></span>”, “<span class="Codefragment"><span style="font-size:10.0pt">_identifier2</span></span>”,
and “<span class="Codefragment"><span style="font-size:10.0pt">@if</span></span>”.</p>

<p class="MsoNormal">An identifier in a conforming program must be in the
canonical format defined by Unicode Normalization Form C, as defined by Unicode
Standard Annex 15. The behavior when encountering an identifier not in
Normalization Form C is implementation-defined; however, a diagnostic is not
required.</p>

<p class="MsoNormal">The prefix “<span class="Codefragment"><span style="font-size:
10.0pt">@</span></span>” enables the use of keywords as identifiers, which is
useful when interfacing with other programming languages. The character <span class="Codefragment"><span style="font-size:10.0pt">@</span></span> is not
actually part of the identifier, so the identifier might be seen in other
languages as a normal identifier, without the prefix. An identifier with an <span class="Codefragment"><span style="font-size:10.0pt">@</span></span> prefix is
called a <span class="Term">verbatim identifier</span>. Use of the <span class="Codefragment"><span style="font-size:10.0pt">@</span></span> prefix for
identifiers that are not keywords is permitted, but strongly discouraged as a
matter of style.</p>

<p class="MsoNormal">The example:</p>

<p class="Code">class @class<br>
{<br>
&nbsp;&nbsp; public static void @static(bool @bool) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (@bool)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine("true");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine("false");<br>
&nbsp;&nbsp; }&nbsp; <br>
}</p>

<p class="Code">class Class1<br>
{<br>
&nbsp;&nbsp; static void M() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cl\u0061ss.st\u0061tic(true);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">defines a class named “<span class="Codefragment"><span style="font-size:10.0pt">class</span></span>” with a static method named “<span class="Codefragment"><span style="font-size:10.0pt">static</span></span>” that
takes a parameter named “<span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>”.
Note that since Unicode escapes are not permitted in keywords, the token “<span class="Codefragment"><span style="font-size:10.0pt">cl\u0061ss</span></span>” is
an identifier, and is the same identifier as “<span class="Codefragment"><span style="font-size:10.0pt">@class</span></span>”.</p>

<p class="MsoNormal">Two identifiers are considered the same if they are
identical after the following transformations are applied, in order:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The prefix “<span class="Codefragment"><span style="font-size:10.0pt">@</span></span>”,
if used, is removed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each <span class="Production">unicode-escape-sequence</span> is
transformed into its corresponding Unicode character.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any <span class="Production">formatting-character</span>s are
removed.</p>

<p class="MsoNormal">Identifiers containing two consecutive underscore characters
(<span class="Codefragment"><span style="font-size:10.0pt">U+005F</span></span>)
are reserved for use by the implementation. For example, an implementation
might provide extended keywords that begin with two underscores.</p>

<h3><a name="_Toc251612907"></a><a name="_Ref229376100"></a><a name="_Toc495484361"></a><a name="_Ref462576223"></a><a name="_Toc445782957">2.4.3
Keywords</a></h3>

<p class="MsoNormal">A <span class="Term">keyword</span> is an identifier-like
sequence of characters that is reserved, and cannot be used as an identifier
except when prefaced by the <span class="Codefragment"><span style="font-size:
10.0pt">@</span></span> character.</p>

<p class="Grammar">keyword:&nbsp; <span class="GrammarText"><span style="font-style:
normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">abstract&nbsp;&nbsp;&nbsp; as&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break<br>
byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; checked<br>
class&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue&nbsp;&nbsp;&nbsp; decimal&nbsp;&nbsp;&nbsp;&nbsp; default<br>
delegate&nbsp;&nbsp;&nbsp; do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enum<br>
event&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; explicit&nbsp;&nbsp;&nbsp; extern&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally<br>
fixed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach&nbsp;&nbsp;&nbsp;&nbsp; goto<br>
if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implicit&nbsp;&nbsp;&nbsp; in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interface<br>
internal&nbsp;&nbsp;&nbsp; is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; namespace<br>
new&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; operator&nbsp;&nbsp;&nbsp; out<br>
override&nbsp;&nbsp;&nbsp; params&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private&nbsp;&nbsp;&nbsp;&nbsp; protected&nbsp;&nbsp; public<br>
readonly&nbsp;&nbsp;&nbsp; ref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sbyte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sealed<br>
short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stackalloc&nbsp; static&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string<br>
struct&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; true<br>
try&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ulong&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unchecked<br>
unsafe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ushort&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual&nbsp;&nbsp;&nbsp;&nbsp; void<br>
volatile&nbsp;&nbsp;&nbsp; while</span></span></p>

<p class="MsoNormal"><a name="_Ref462576210"></a><a name="_Ref450668500"></a><a name="_Ref449414818"></a><a name="_Ref449414802"></a><a name="_Toc445782958">In
some places in the grammar, specific identifiers have special meaning, but are
not keywords. Such identifiers are sometimes referred to as “contextual
keywords”. For example, within a property declaration, the “</a><span class="Codefragment"><span style="font-size:10.0pt">get</span></span>” and “<span class="Codefragment"><span style="font-size:10.0pt">set</span></span>”
identifiers have special meaning (§10.7.2). An identifier other than <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> is never
permitted in these locations, so this use does not conflict with a use of these
words as identifiers. In other cases, such as with the identifier “<span class="Codefragment"><span style="font-size:10.0pt">var</span></span>” in
implicitly typed local variable declarations (§8.5.1), a contectual keyword can
conflict with declared names. In such cases, the declared name takes precedence
over the use of the identifier as a contextual keyword.</p>

<h3><a name="_Toc251612908"></a><a name="_Toc495484362"></a><a name="_Ref493141195">2.4.4 Literals</a></h3>

<p class="MsoNormal">A <span class="Term">literal</span> is a source code
representation of a value.</p>

<p class="Grammar">literal:<br>
boolean-literal<br>
integer-literal<br>
real-literal<br>
character-literal<br>
string-literal<br>
null-literal</p>

<h4><a name="_Toc251612909"></a><a name="_Toc495484363"></a><a name="_Toc445782959">2.4.4.1 Boolean literals</a></h4>

<p class="MsoNormal">There are two boolean literal values: <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="Grammar">boolean-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true<br>
false<a name="_Ref462414137"></a><a name="_Ref462413171"></a><a name="_Ref462394190"></a><a name="_Toc445782960"></a></span></span></p>

<p class="MsoNormal">The type of a <span class="Production">boolean-literal</span>
is <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.</p>

<h4><a name="_Toc251612910"></a><a name="_Toc495484364"></a><a name="_Ref493143520">2.4.4.2 Integer literals</a></h4>

<p class="MsoNormal">Integer literals are used to write values of types <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>. Integer
literals have two possible forms: decimal and hexadecimal. </p>

<p class="Grammar">integer-literal:<br>
decimal-integer-literal<br>
hexadecimal-integer-literal</p>

<p class="Grammar"><span lang="DE">decimal-integer-literal:<br>
decimal-digits&nbsp;&nbsp; integer-type-suffix<sub>opt</sub></span></p>

<p class="Grammar"><span lang="DE">decimal-digits:<br>
decimal-digit<br>
decimal-digits&nbsp;&nbsp; decimal-digit</span></p>

<p class="Grammar"><span lang="DE">decimal-digit:&nbsp; </span><span class="GrammarText"><span lang="DE" style="font-style:normal">one of</span></span><span lang="DE"><br>
</span><span class="Terminal"><span lang="DE" style="font-size:10.0pt;font-style:
normal">0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9</span></span></p>

<p class="Grammar"><span lang="DE">integer-type-suffix:&nbsp; </span><span class="GrammarText"><span lang="DE" style="font-style:normal">one of</span></span><span lang="DE"><br>
</span><span class="Terminal"><span lang="DE" style="font-size:10.0pt;font-style:
normal">U&nbsp; u&nbsp; L&nbsp; l&nbsp; UL&nbsp; Ul&nbsp; uL&nbsp; ul&nbsp; LU&nbsp; Lu&nbsp; lU&nbsp; lu</span></span></p>

<p class="Grammar"><span lang="DE">hexadecimal-integer-literal:<br>
</span><span class="Terminal"><span lang="DE" style="font-size:10.0pt;font-style:
normal">0x</span></span><span lang="DE">&nbsp;&nbsp; hex-digits&nbsp;&nbsp; integer-type-suffix<sub>opt</sub><br>
</span><span class="Terminal"><span lang="DE" style="font-size:10.0pt;font-style:
normal">0X</span></span><span lang="DE">&nbsp;&nbsp; hex-digits&nbsp;&nbsp; integer-type-suffix<sub>opt</sub></span></p>

<p class="Grammar"><span lang="DE">hex-digits:<br>
hex-digit<br>
hex-digits&nbsp;&nbsp; hex-digit</span></p>

<p class="Grammar">hex-digit:&nbsp; <span class="GrammarText"><span style="font-style:
normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">0&nbsp; 1&nbsp; 2&nbsp;
3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9&nbsp; A&nbsp; B&nbsp; C&nbsp; D&nbsp; E&nbsp; F&nbsp; a&nbsp; b&nbsp; c&nbsp; d&nbsp; e&nbsp; f</span></span></p>

<p class="MsoNormal"><a name="_Toc445782961">The type of an integer literal is
determined as follows:</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the literal has no suffix, it has the first of these types in
which its value can be represented: <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the literal is suffixed by <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">u</span></span>, it has the first of these types in
which its value can be represented: <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the literal is suffixed by <span class="Codefragment"><span style="font-size:10.0pt">L</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">l</span></span>, it has the first of these types in
which its value can be represented: <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the literal is suffixed by <span class="Codefragment"><span style="font-size:10.0pt">UL</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Ul</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uL</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ul</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">LU</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Lu</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">lU</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">lu</span></span>, it is of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoNormal">If the value represented by an integer literal is outside
the range of the <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
type, a compile-time error occurs.</p>

<p class="MsoNormal">As a matter of style, it is suggested that “<span class="Codefragment"><span style="font-size:10.0pt">L</span></span>” be used
instead of “<span class="Codefragment"><span style="font-size:10.0pt">l</span></span>”
when writing literals of type <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>, since it is easy to confuse the letter “<span class="Codefragment"><span style="font-size:10.0pt">l</span></span>” with the
digit “<span class="Codefragment"><span style="font-size:10.0pt">1</span></span>”.</p>

<p class="MsoNormal">To permit the smallest possible <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> values to be written as decimal
integer literals, the following two rules exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a <span class="Production">decimal-integer-literal</span> with
the value 2147483648 (2<sup>31</sup>) and no <span class="Production">integer-type-suffix</span>
appears as the token immediately following a unary minus operator token (§7.7.2), the result is a constant of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> with the value −2147483648
(−2<sup>31</sup>). In all other situations, such a <span class="Production">decimal-integer-literal</span> is of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a <span class="Production">decimal-integer-literal</span> with
the value 9223372036854775808 (2<sup>63</sup>) and no <span class="Production">integer-type-suffix</span>
or the <span class="Production">integer-type-suffix</span> <span class="Codefragment"><span style="font-size:10.0pt">L</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">l</span></span> appears as
the token immediately following a unary minus operator token (§7.7.2), the result is a constant of type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> with the value
−9223372036854775808 (−2<sup>63</sup>). In all other situations,
such a <span class="Production">decimal-integer-literal</span> is of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<h4><a name="_Toc251612911"></a><a name="_Toc495484365"></a><a name="_Ref462394246">2.4.4.3 Real literals</a></h4>

<p class="MsoNormal">Real literals are used to write values of types <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="Grammar">real-literal:<br>
decimal-digits&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; decimal-digits&nbsp;&nbsp; exponent-part<sub>opt</sub>&nbsp;&nbsp;
real-type-suffix<sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">.</span></span>&nbsp;&nbsp;
decimal-digits&nbsp;&nbsp; exponent-part<sub>opt</sub>&nbsp;&nbsp; real-type-suffix<sub>opt</sub><br>
decimal-digits&nbsp;&nbsp; exponent-part&nbsp;&nbsp; real-type-suffix<sub>opt</sub><br>
decimal-digits&nbsp;&nbsp; real-type-suffix</p>

<p class="Grammar"><span lang="FR">exponent-part:<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">e</span></span><span lang="FR">&nbsp;&nbsp; sign<sub>opt</sub>&nbsp;&nbsp; decimal-digits<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">E</span></span><span lang="FR">&nbsp;&nbsp; sign<sub>opt</sub>&nbsp;&nbsp; decimal-digits</span></p>

<p class="Grammar">sign:&nbsp; <span class="GrammarText"><span style="font-style:normal">one
of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+&nbsp; -</span></span></p>

<p class="Grammar">real-type-suffix:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">F&nbsp; f&nbsp; D&nbsp;
d&nbsp; M&nbsp; m</span></span></p>

<p class="MsoNormal"><a name="_Toc445782962">If no </a><span class="Production">real-type-suffix</span>
is specified, the type of the real literal is <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>. Otherwise, the real type suffix
determines the type of the real literal, as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A real literal suffixed by <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">f</span></span> is of type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>. For example, the literals <span class="Codefragment"><span style="font-size:10.0pt">1f</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1.5f</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1e10f</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">123.456F</span></span> are
all of type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A real literal suffixed by <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> is of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>. For example, the literals <span class="Codefragment"><span style="font-size:10.0pt">1d</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1.5d</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1e10d</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">123.456D</span></span> are
all of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A real literal suffixed by <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">m</span></span> is of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>. For example, the literals <span class="Codefragment"><span style="font-size:10.0pt">1m</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1.5m</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">1e10m</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">123.456M</span></span> are
all of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.
This literal is converted to a <span class="Codefragment"><span style="font-size:
10.0pt">decimal</span></span> value by taking the exact value, and, if
necessary, rounding to the nearest representable value using banker's rounding
(§4.1.7). Any scale apparent in the literal is preserved unless the value is
rounded or the value is zero (in which latter case the sign and scale will be
0). Hence, the literal <span class="Codefragment"><span style="font-size:10.0pt">2.900m</span></span>
will be parsed to form the decimal with sign <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>, coefficient <span class="Codefragment"><span style="font-size:10.0pt">2900</span></span>, and scale <span class="Codefragment"><span style="font-size:10.0pt">3</span></span>.</p>

<p class="MsoNormal">If the specified literal cannot be represented in the
indicated type, a compile-time error occurs.</p>

<p class="MsoNormal">The value of a real literal of type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> is
determined by using the IEEE “round to nearest” mode.</p>

<p class="MsoNormal">Note that in a real literal, decimal digits are always
required after the decimal point. For example, <span class="Codefragment"><span style="font-size:10.0pt">1.3F</span></span> is a real literal but <span class="Codefragment"><span style="font-size:10.0pt">1.F</span></span> is not.</p>

<h4><a name="_Toc251612912"></a><a name="_Ref503695423"></a><a name="_Toc495484366">2.4.4.4 Character literals</a></h4>

<p class="MsoNormal">A character literal represents a single character, and
usually consists of a character in quotes, as in <span class="Codefragment"><span style="font-size:10.0pt">'a'</span></span>.</p>

<p class="Grammar">character-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span>&nbsp;&nbsp;
character&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span></p>

<p class="Grammar">character:<br>
single-character<br>
simple-escape-sequence<br>
hexadecimal-escape-sequence<br>
unicode-escape-sequence</p>

<p class="Grammar">single-character:<br>
<span class="GrammarText"><span style="font-style:normal">&nbsp;Any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0027</span></span><span class="GrammarText"><span style="font-style:normal">), </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+005C</span></span><span class="GrammarText"><span style="font-style:normal">), and </span></span>new-line-character</p>

<p class="Grammar">simple-escape-sequence:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\'&nbsp;
\"&nbsp; \\&nbsp; \0&nbsp; \a&nbsp; \b&nbsp; \f&nbsp; \n&nbsp; \r&nbsp; \t&nbsp; \v</span></span></p>

<p class="Grammar">hexadecimal-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\x</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit<sub>opt</sub>&nbsp;&nbsp; hex-digit<sub>opt</sub>&nbsp;&nbsp; hex-digit<sub>opt</sub></p>

<p class="MsoNormal"><a name="_Toc445782963">A character that follows a backslash
character (</a><span class="Codefragment"><span style="font-size:10.0pt">\</span></span>)
in a <span class="Production">character </span>must be one of the following
characters: <span class="Codefragment"><span style="font-size:10.0pt">'</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">"</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">\</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">f</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">n</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">r</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">t</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">u</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">v</span></span>. Otherwise, a
compile-time error occurs.</p>

<p class="MsoNormal">A hexadecimal escape sequence represents a single Unicode
character, with the value formed by the hexadecimal number following “<span class="Codefragment"><span style="font-size:10.0pt">\x</span></span>”.</p>

<p class="MsoNormal">If the value represented by a character literal is greater
than <span class="Codefragment"><span style="font-size:10.0pt">U+FFFF</span></span>,
a compile-time error occurs.</p>

<p class="MsoNormal">A Unicode character escape sequence (§2.4.1) in a character literal must be in the range <span class="Codefragment"><span style="font-size:
10.0pt">U+0000</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">U+FFFF</span></span>. </p>

<p class="MsoNormal">A simple escape sequence represents a Unicode character
encoding, as described in the table below.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Escape sequence</b></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Character name</b></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Unicode encoding</b></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\'</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Single quote</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0027</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\"</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Double quote</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0022</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\\</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Backslash</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x005C</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\0</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Null</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0000</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\a</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Alert</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0007</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\b</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Backspace</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0008</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\f</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Form feed</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x000C</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\n</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">New line</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x000A</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\r</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Carriage return</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x000D</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\t</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Horizontal tab</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x0009</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="116" valign="top" style="width:86.65pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">\v</span></span></p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Vertical tab</p>
  </td>
  <td width="116" valign="top" style="width:86.65pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">0x000B</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd"><a name="_Ref467581683">&nbsp;</a></p>

<p class="MsoNormal">The type of a <span class="Production">character-literal</span>
is <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<h4><a name="_Toc251612913"></a><a name="_Ref174221705"></a><a name="_Ref503695412"></a><a name="_Ref496248424"></a><a name="_Toc495484367">2.4.4.5
String literals</a></h4>

<p class="MsoNormal"><a name="_Toc445782964">C# supports two forms of string
literals: <span class="Term">regular string literals</span> and <span class="Term">verbatim
string literals</span>.</a></p>

<p class="MsoNormal">A regular string literal consists of zero or more characters
enclosed in double quotes, as in <span class="Codefragment"><span style="font-size:10.0pt">"hello"</span></span>, and may include both
simple escape sequences (such as <span class="Codefragment"><span style="font-size:10.0pt">\t</span></span> for the tab character), and
hexadecimal and Unicode escape sequences.</p>

<p class="MsoNormal">A verbatim string literal consists of an <span class="Codefragment"><span style="font-size:10.0pt">@</span></span> character
followed by a double-quote character, zero or more characters, and a closing
double-quote character. A simple example is <span class="Codefragment"><span style="font-size:10.0pt">@"hello"</span></span>. In a verbatim string
literal, the characters between the delimiters are interpreted verbatim, the
only exception being a <span class="Production">quote-escape-sequence</span>. In
particular, simple escape sequences, and hexadecimal and Unicode escape
sequences are not processed in verbatim string literals. A verbatim string
literal may span multiple lines.</p>

<p class="Grammar">string-literal:<br>
regular-string-literal<br>
verbatim-string-literal</p>

<p class="Grammar">regular-string-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span>&nbsp;&nbsp;
regular-string-literal-characters<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">regular-string-literal-characters:<br>
regular-string-literal-character<br>
regular-string-literal-characters&nbsp;&nbsp; regular-string-literal-character</p>

<p class="Grammar">regular-string-literal-character:<br>
single-regular-string-literal-character<br>
simple-escape-sequence<br>
hexadecimal-escape-sequence<br>
unicode-escape-sequence</p>

<p class="Grammar">single-regular-string-literal-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0022</span></span><span class="GrammarText"><span style="font-style:normal">), </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+005C</span></span><span class="GrammarText"><span style="font-style:normal">), and </span></span>new-line-character</p>

<p class="Grammar">verbatim-string-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">@"</span></span>&nbsp;&nbsp;
verbatim-string-literal-characters<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">verbatim-string-literal-characters:<br>
verbatim-string-literal-character<br>
verbatim-string-literal-characters&nbsp;&nbsp; verbatim-string-literal-character</p>

<p class="Grammar">verbatim-string-literal-character:<br>
single-verbatim-string-literal-character<br>
quote-escape-sequence</p>

<p class="Grammar">single-verbatim-string-literal-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">quote-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">""</span></span></p>

<p class="MsoNormal">A character that follows a backslash character (<span class="Codefragment"><span style="font-size:10.0pt">\</span></span>) in a <span class="Production">regular-string-literal-character</span> must be one of the
following characters: <span class="Codefragment"><span style="font-size:10.0pt">'</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">"</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">\</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">f</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">n</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">r</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">t</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">u</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">v</span></span>. Otherwise, a
compile-time error occurs.</p>

<p class="MsoNormal">The example</p>

<p class="Code">string a = "hello, world";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hello,
world<br>
string b = @"hello, world";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hello, world</p>

<p class="Code">string c = "hello \t world";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hello &nbsp;&nbsp; &nbsp;world<br>
string d = @"hello \t world";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // hello \t world</p>

<p class="Code">string e = "Joe said \"Hello\" to me";&nbsp;&nbsp;&nbsp; //
Joe said "Hello" to me<br>
string f = @"Joe said ""Hello"" to me";&nbsp;&nbsp; // Joe
said "Hello" to me</p>

<p class="Code">string g = "\\\\server\\share\\file.txt"; //
\\server\share\file.txt<br>
string h = @"\\server\share\file.txt";&nbsp;&nbsp;&nbsp; // \\server\share\file.txt</p>

<p class="Code">string i = "one\r\ntwo\r\nthree";<br>
string j = @"one<br>
two<br>
three";</p>

<p class="MsoNormal">shows a variety of string literals. The last string literal,
<span class="Codefragment"><span style="font-size:10.0pt">j</span></span>, is a
verbatim string literal that spans multiple lines. The characters between the
quotation marks, including white space such as new line characters, are preserved
verbatim.</p>

<p class="MsoNormal">Since a hexadecimal escape sequence can have a variable
number of hex digits, the string literal <span class="Codefragment"><span style="font-size:10.0pt">"\x123"</span></span> contains a single
character with hex value 123. To create a string containing the character with
hex value 12 followed by the character 3, one could write <span class="Codefragment"><span style="font-size:10.0pt">"\x00123"</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">"\x12"</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">"3"</span></span>
instead.</p>

<p class="MsoNormal">The type of a <span class="Production">string-literal</span>
is <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>.</p>

<p class="MsoNormal">Each string literal does not necessarily result in a new
string instance. When two or more string literals that are equivalent according
to the string equality operator (§7.10.7) appear in the same program, these
string literals refer to the same string instance. For instance, the output
produced by</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object a = "hello";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object b = "hello";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine(a == b);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">is <span class="Codefragment"><span style="font-size:10.0pt">True</span></span>
because the two literals refer to the same string instance.</p>

<h4><a name="_Toc251612914"></a><a name="_Toc495484368">2.4.4.6 The null
literal</a></h4>

<p class="Grammar">null-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">null</span></span></p>

<p class="MsoNormal">The&nbsp; <span class="Production">null-literal</span> can be
implicitly converted to a reference type or nullable type.</p>

<h3><a name="_Toc251612915"></a><a name="_Toc495484369">2.4.5 Operators and
punctuators</a></h3>

<p class="MsoNormal">There are several kinds of operators and punctuators.
Operators are used in expressions to describe operations involving one or more
operands. For example, the expression <span class="Codefragment"><span style="font-size:10.0pt">a + b</span></span> uses the <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> operator to add the two operands <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>. Punctuators
are for grouping and separating.</p>

<p class="Grammar">operator-or-punctuator:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp; .&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp;&nbsp; ;<br>
+&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; %&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; ^&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp;&nbsp; ~<br>
=&nbsp;&nbsp;&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&nbsp;&nbsp;&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp; ??&nbsp;&nbsp;&nbsp; ::&nbsp;&nbsp;&nbsp; ++&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp; &amp;&amp;&nbsp;&nbsp;&nbsp; ||<br>
-&gt;&nbsp;&nbsp;&nbsp; ==&nbsp;&nbsp;&nbsp; !=&nbsp;&nbsp;&nbsp; &lt;=&nbsp;&nbsp;&nbsp; &gt;=&nbsp;&nbsp;&nbsp; +=&nbsp;&nbsp;&nbsp; -=&nbsp;&nbsp;&nbsp; *=&nbsp;&nbsp;&nbsp; /=&nbsp;&nbsp;&nbsp; %=<br>
&amp;=&nbsp;&nbsp;&nbsp; |=&nbsp;&nbsp;&nbsp; ^=&nbsp;&nbsp;&nbsp; &lt;&lt;&nbsp;&nbsp;&nbsp; &lt;&lt;=&nbsp;&nbsp; =&gt;</span></span></p>

<p class="Grammar">right-shift:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span>|<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span></p>

<p class="Grammar">right-shift-assignment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span>|<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;=</span></span></p>

<p class="MsoNormal">The vertical bar in the <span class="Production">right-shift</span>
and <span class="Production">right-shift-assignment</span> productions are used
to indicate that, unlike other productions in the syntactic grammar, no
characters of any kind (not even whitespace) are allowed between the tokens.
These productions are treated specially in order to enable the correct&nbsp;
handling of <span class="Production">type-parameter-list</span>s (§10.1.3).</p>

<h2><a name="_Toc251612916"></a><a name="_Ref503080079">2.5 Pre-processing
directives</a></h2>

<p class="MsoNormal">The pre-processing directives provide the ability to
conditionally skip sections of source files, to report error and warning
conditions, and to delineate distinct regions of source code. The term
“pre-processing directives” is used only for consistency with the C and C++
programming languages. In C#, there is no separate pre-processing step;
pre-processing directives are processed as part of the lexical analysis phase.</p>

<p class="Grammar">pp-directive:<br>
pp-declaration<br>
pp-conditional<br>
pp-line<br>
pp-diagnostic<br>
pp-region <br>
pp-pragma</p>

<p class="MsoNormal">The following pre-processing directives are available:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>,
which are used to define and undefine, respectively, conditional compilation
symbols (§2.5.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#if</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span>, which
are used to conditionally skip sections of source code (§2.5.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#line</span></span>,
which is used to control line numbers emitted for errors and warnings (§2.5.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#error</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">#warning</span></span>,
which are used to issue errors and warnings, respectively (§2.5.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#region</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">#endregion</span></span>,
which are used to explicitly mark sections of source code (§2.5.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>,
which is used to specify optional contextual information to the compiler (§2.5.8).</p>

<p class="MsoNormal">A pre-processing directive always occupies a separate line
of source code and always begins with a <span class="Codefragment"><span style="font-size:10.0pt">#</span></span> character and a pre-processing
directive name. White space may occur before the <span class="Codefragment"><span style="font-size:10.0pt">#</span></span> character and between the <span class="Codefragment"><span style="font-size:10.0pt">#</span></span> character and
the directive name.</p>

<p class="MsoNormal">A source line containing a <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">#line</span></span> directive may end with a
single-line comment. Delimited comments (the <span class="Codefragment"><span style="font-size:10.0pt">/*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*/</span></span> style of comments) are not permitted
on source lines containing pre-processing directives.</p>

<p class="MsoNormal">Pre-processing directives are not tokens and are not part of
the syntactic grammar of C#. However, pre-processing directives can be used to
include or exclude sequences of tokens and can in that way affect the meaning
of a C# program. For example, when compiled, the program:</p>

<p class="Code">#define A<br>
#undef B</p>

<p class="Code">class C<br>
{<br>
#if A<br>
&nbsp;&nbsp; void F() {}<br>
#else<br>
&nbsp;&nbsp; void G() {}<br>
#endif</p>

<p class="Code">#if B<br>
&nbsp;&nbsp; void H() {}<br>
#else<br>
&nbsp;&nbsp; void I() {}<br>
#endif<br>
}</p>

<p class="MsoNormal">results in the exact same sequence of tokens as the program:</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; void F() {}<br>
&nbsp;&nbsp; void I() {}<br>
}</p>

<p class="MsoNormal">Thus, whereas lexically, the two programs are quite
different, syntactically, they are identical.</p>

<h3><a name="_Toc251612917"></a><a name="_Ref520376673">2.5.1 Conditional
compilation symbols</a></h3>

<p class="MsoNormal">The conditional compilation functionality provided by the <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span> directives
is controlled through pre-processing expressions (§2.5.2) and conditional
compilation symbols.</p>

<p class="Grammar">conditional-symbol:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>identifier-or-keyword<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true</span></span><span class="GrammarText"><span style="font-style:normal"> or </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">false</span></span></p>

<p class="MsoNormal">A conditional compilation symbol has two possible states: <span class="Term">defined</span> or <span class="Term">undefined</span>. At the
beginning of the lexical processing of a source file, a conditional compilation
symbol is undefined unless it has been explicitly defined by an external
mechanism (such as a command-line compiler option). When a <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
directive is processed, the conditional compilation symbol named in that
directive becomes defined in that source file. The symbol remains defined until
an <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
directive for that same symbol is processed, or until the end of the source
file is reached. An implication of this is that <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span> directives in one source file
have no effect on other source files in the same program.</p>

<p class="MsoNormal">When referenced in a pre-processing expression, a defined
conditional compilation symbol has the boolean value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, and an undefined conditional
compilation symbol has the boolean value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>. There is no requirement that
conditional compilation symbols be explicitly declared before they are
referenced in pre-processing expressions. Instead, undeclared symbols are
simply undefined and thus have the value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The name space for conditional compilation symbols is
distinct and separate from all other named entities in a C# program.
Conditional compilation symbols can only be referenced in <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
directives and in pre-processing expressions.</p>

<h3><a name="_Toc251612918"></a><a name="_Ref12424370">2.5.2 Pre-processing
expressions</a></h3>

<p class="MsoNormal">Pre-processing expressions can occur in <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>
directives. The operators <span class="Codefragment"><span style="font-size:10.0pt">!</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> are
permitted in pre-processing expressions, and parentheses may be used for
grouping.</p>

<p class="Grammar">pp-expression:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-or-expression&nbsp;&nbsp; whitespace<sub>opt</sub></p>

<p class="Grammar">pp-or-expression:<br>
pp-and-expression<br>
pp-or-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">||</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-and-expression</p>

<p class="Grammar">pp-and-expression:<br>
pp-equality-expression<br>
pp-and-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;&amp;</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-equality-expression</p>

<p class="Grammar">pp-equality-expression:<br>
pp-unary-expression<br>
pp-equality-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">==</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-unary-expression<br>
pp-equality-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!=</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-unary-expression</p>

<p class="Grammar">pp-unary-expression:<br>
pp-primary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-unary-expression</p>

<p class="Grammar">pp-primary-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">false</span></span><br>
conditional-symbol<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="MsoNormal">When referenced in a pre-processing expression, a defined
conditional compilation symbol has the boolean value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, and an undefined conditional
compilation symbol has the boolean value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">Evaluation of a pre-processing expression always yields a
boolean value. The rules of evaluation for a pre-processing expression are the
same as those for a constant expression (§7.19), except that the only
user-defined entities that can be referenced are conditional compilation
symbols.</p>

<h3><a name="_Toc251612919"></a><a name="_Ref503236455">2.5.3 Declaration
directives</a></h3>

<p class="MsoNormal">The declaration directives are used to define or undefine
conditional compilation symbols.</p>

<p class="Grammar">pp-declaration:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">define</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; conditional-symbol&nbsp;&nbsp; pp-new-line<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">undef</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; conditional-symbol&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">pp-new-line:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; single-line-comment<sub>opt</sub>&nbsp;&nbsp; new-line</p>

<p class="MsoNormal">The processing of a <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span> directive causes the given
conditional compilation symbol to become defined, starting with the source line
that follows the directive. Likewise, the processing of an <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
directive causes the given conditional compilation symbol to become undefined,
starting with the source line that follows the directive.</p>

<p class="MsoNormal">Any <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
directives in a source file must occur before the first <span class="Production">token</span>
(§2.4) in the source file; otherwise a compile-time error occurs. In intuitive
terms, <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
directives must precede any “real code” in the source file.</p>

<p class="MsoNormal">The example:</p>

<p class="Code">#define Enterprise</p>

<p class="Code">#if Professional || Enterprise<br>
&nbsp;&nbsp; #define Advanced<br>
#endif</p>

<p class="Code">namespace Megacorp.Data<br>
{<br>
&nbsp;&nbsp; #if Advanced<br>
&nbsp;&nbsp; class PivotTable {...}<br>
&nbsp;&nbsp; #endif<br>
}</p>

<p class="MsoNormal">is valid because the <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span> directives precede the first
token (the <span class="Codefragment"><span style="font-size:10.0pt">namespace</span></span>
keyword) in the source file.</p>

<p class="MsoNormal">The following example results in a compile-time error
because a <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
follows real code:</p>

<p class="Code">#define A<br>
namespace N<br>
{<br>
&nbsp;&nbsp; #define B<br>
&nbsp;&nbsp; #if B<br>
&nbsp;&nbsp; class Class1 {}<br>
&nbsp;&nbsp; #endif<br>
}</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#define</span></span>
may define a conditional compilation symbol that is already defined, without
there being any intervening <span class="Codefragment"><span style="font-size:
10.0pt">#undef</span></span> for that symbol. The example below defines a
conditional compilation symbol <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> and then defines it again.</p>

<p class="Code">#define A<br>
#define A</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span>
may “undefine” a conditional compilation symbol that is not defined. The
example below defines a conditional compilation symbol <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and then
undefines it twice; although the second <span class="Codefragment"><span style="font-size:10.0pt">#undef</span></span> has no effect, it is still valid.</p>

<p class="Code">#define A<br>
#undef A<br>
#undef A</p>

<h3><a name="_Toc251612920"></a><a name="_Ref503236525">2.5.4 Conditional
compilation directives</a></h3>

<p class="MsoNormal">The conditional compilation directives are used to
conditionally include or exclude portions of a source file.</p>

<p class="Grammar">pp-conditional:<br>
pp-if-section&nbsp;&nbsp; pp-elif-sections<sub>opt</sub>&nbsp;&nbsp; pp-else-section<sub>opt</sub>&nbsp;&nbsp;
pp-endif</p>

<p class="Grammar">pp-if-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pp-expression&nbsp;&nbsp; pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-elif-sections:<br>
pp-elif-section<br>
pp-elif-sections&nbsp;&nbsp; pp-elif-section</p>

<p class="Grammar">pp-elif-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">elif</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pp-expression&nbsp;&nbsp; pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-else-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">else</span></span>&nbsp;&nbsp;
pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-endif:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">endif</span></span>&nbsp;&nbsp;
pp-new-line</p>

<p class="Grammar">conditional-section:<br>
input-section<br>
skipped-section</p>

<p class="Grammar">skipped-section:<br>
skipped-section-part<br>
skipped-section&nbsp;&nbsp; skipped-section-part</p>

<p class="Grammar">skipped-section-part:<br>
skipped-characters<sub>opt</sub>&nbsp;&nbsp; new-line<br>
pp-directive</p>

<p class="Grammar">skipped-characters:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; not-number-sign&nbsp;&nbsp; input-characters<sub>opt</sub></p>

<p class="Grammar">not-number-sign:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>input-character<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">#</span></span></p>

<p class="MsoNormal">As indicated by the syntax, conditional compilation
directives must be written as sets consisting of, in order, an <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span> directive,
zero or more <span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>
directives, zero or one <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>
directive, and an <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span>
directive. Between the directives are conditional sections of source code. Each
section is controlled by the immediately preceding directive. A conditional
section may itself contain nested conditional compilation directives provided
these directives form complete sets.</p>

<p class="MsoNormal">A <span class="Production">pp-conditional</span> selects at
most one of the contained <span class="Production">conditional-section</span>s
for normal lexical processing:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">pp-expression</span>s of the <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#elif</span></span>
directives are evaluated in order until one yields <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. If an expression yields <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, the <span class="Production">conditional-section</span> of the corresponding directive is
selected.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If all <span class="Production">pp-expression</span>s yield <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, and if
an <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>
directive is present, the <span class="Production">conditional-section</span> of
the <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>
directive is selected.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, no <span class="Production">conditional-section</span>
is selected.</p>

<p class="MsoNormal">The selected <span class="Production">conditional-section</span>,
if any, is processed as a normal <span class="Production">input-section</span>:
the source code contained in the section must adhere to the lexical grammar;
tokens are generated from the source code in the section; and pre-processing
directives in the section have the prescribed effects.</p>

<p class="MsoNormal">The remaining <span class="Production">conditional-section</span>s,
if any, are processed as <span class="Production">skipped-section</span>s: except
for pre-processing directives, the source code in the section need not adhere
to the lexical grammar; no tokens are generated from the source code in the
section; and pre-processing directives in the section must be lexically correct
but are not otherwise processed. Within a <span class="Production">conditional-section</span>
that is being processed as a <span class="Production">skipped-section</span>, any
nested <span class="Production">conditional-section</span>s (contained in nested <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span>...<span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#region</span></span>...<span class="Codefragment"><span style="font-size:10.0pt">#endregion</span></span>
constructs) are also processed as <span class="Production">skipped-section</span>s.</p>

<p class="MsoNormal">The following example illustrates how conditional
compilation directives can nest:</p>

<p class="Code">#define Debug&nbsp;&nbsp;&nbsp;&nbsp; // Debugging on<br>
#undef Trace&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Tracing off</p>

<p class="Code">class PurchaseTransaction<br>
{<br>
&nbsp;&nbsp; void Commit() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #if Debug<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckConsistency();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #if Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WriteToLog(this.ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CommitHelper();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Except for pre-processing directives, skipped source code is
not subject to lexical analysis. For example, the following is valid despite
the unterminated comment in the <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span> section:</p>

<p class="Code">#define Debug&nbsp;&nbsp;&nbsp;&nbsp; // Debugging on</p>

<p class="Code">class PurchaseTransaction<br>
{<br>
&nbsp;&nbsp; void Commit() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #if Debug<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CheckConsistency();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Do something else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #endif<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Note, however, that pre-processing directives are required
to be lexically correct even in skipped sections of source code.</p>

<p class="MsoNormal">Pre-processing directives are not processed when they appear
inside multi-line input elements. For example, the program:</p>

<p class="Code">class Hello<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine(@"hello, <br>
#if Debug<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; world<br>
#else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nebraska<br>
#endif<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">results in the output:</p>

<p class="Code">hello,<br>
#if Debug<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; world<br>
#else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nebraska<br>
#endif</p>

<p class="MsoNormal">In peculiar cases, the set of pre-processing directives that
is processed might depend on the evaluation of the <span class="Production">pp-expression</span>.
The example:</p>

<p class="Code">#if X<br>
&nbsp;&nbsp; /*<br>
#else<br>
&nbsp;&nbsp; /* */ class Q { }<br>
#endif </p>

<p class="MsoNormal">always produces the same token stream (<span class="Codefragment"><span style="font-size:10.0pt">class</span></span> <span class="Codefragment"><span style="font-size:10.0pt">Q</span></span> <span class="Codefragment"><span style="font-size:10.0pt">{</span></span> <span class="Codefragment"><span style="font-size:10.0pt">}</span></span>), regardless
of whether or not <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is defined. If <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is defined, the only processed directives are <span class="Codefragment"><span style="font-size:10.0pt">#if</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span>, due to the multi-line comment.
If <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> is
undefined, then three directives (<span class="Codefragment"><span style="font-size:10.0pt">#if</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#else</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">#endif</span></span>) are part of the directive set.</p>

<h3><a name="_Toc251612921"></a><a name="_Ref503236595">2.5.5 Diagnostic
directives</a></h3>

<p class="MsoNormal">The diagnostic directives are used to explicitly generate
error and warning messages that are reported in the same way as other
compile-time errors and warnings.</p>

<p class="Grammar">pp-diagnostic:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">error</span></span>&nbsp;&nbsp;
pp-message<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="Grammar">pp-message:<br>
new-line<br>
whitespace&nbsp;&nbsp; input-characters<sub>opt</sub>&nbsp;&nbsp; new-line</p>

<p class="MsoNormal">The example:</p>

<p class="Code">#warning Code review needed before check-in</p>

<p class="Code">#if Debug &amp;&amp; Retail<br>
&nbsp;&nbsp; #error A build can't be both debug and retail<br>
#endif</p>

<p class="Code">class Test {...}</p>

<p class="MsoNormal">always produces a warning (“Code review needed before
check-in”), and produces a compile-time error (“A build can’t be both debug and
retail”) if the conditional symbols <span class="Codefragment"><span style="font-size:10.0pt">Debug</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Retail</span></span> are both defined. Note that a <span class="Production">pp-message</span> can contain arbitrary text; specifically, it
need not contain well-formed tokens, as shown by the single quote in the word <span class="Codefragment"><span style="font-size:10.0pt">can’t</span></span>.</p>

<h3><a name="_Toc251612922"></a><a name="_Ref503236614">2.5.6 Region directives</a></h3>

<p class="MsoNormal">The region directives are used to explicitly mark regions of
source code.</p>

<p class="Grammar">pp-region:<br>
pp-start-region&nbsp;&nbsp; conditional-section<sub>opt</sub>&nbsp;&nbsp; pp-end-region</p>

<p class="Grammar">pp-start-region:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">region</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="Grammar">pp-end-region:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub> &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">endregion</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="MsoNormal">No semantic meaning is attached to a region; regions are
intended for use by the programmer or by automated tools to mark a section of
source code. The message specified in a <span class="Codefragment"><span style="font-size:10.0pt">#region</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">#endregion</span></span> directive likewise has no
semantic meaning; it merely serves to identify the region. Matching <span class="Codefragment"><span style="font-size:10.0pt">#region</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">#endregion</span></span>
directives may have different <span class="Production">pp-message</span>s.</p>

<p class="MsoNormal">The lexical processing of a region:</p>

<p class="Code">#region<br>
...<br>
#endregion</p>

<p class="MsoNormal">corresponds exactly to the lexical processing of a
conditional compilation directive of the form:</p>

<p class="Code">#if true<br>
...<br>
#endif</p>

<h3><a name="_Toc251612923"></a><a name="_Ref503236543">2.5.7 Line directives</a></h3>

<p class="MsoNormal">Line directives may be used to alter the line numbers and
source file names that are reported by the compiler in output such as warnings
and errors.</p>

<p class="MsoNormal">Line directives are most commonly used in meta-programming
tools that generate C# source code from some other text input.</p>

<p class="Grammar">pp-line:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">line</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; line-indicator&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">line-indicator:<br>
decimal-digits&nbsp;&nbsp; whitespace&nbsp;&nbsp; file-name <br>
decimal-digits<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default<br>
hidden</span></span></p>

<p class="Grammar">file-name:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span>&nbsp;&nbsp;
file-name-characters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">"</span></span></p>

<p class="Grammar">file-name-characters:<br>
file-name-character<br>
file-name-characters&nbsp;&nbsp; file-name-character</p>

<p class="Grammar">file-name-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>input-character<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="MsoNormal">When no <span class="Codefragment"><span style="font-size:
10.0pt">#line</span></span> directives are present, the compiler reports true
line numbers and source file names in its output. When processing a <span class="Codefragment"><span style="font-size:10.0pt">#line</span></span> directive
that includes a <span class="Production">line-indicator</span> that is not <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>, the
compiler treats the line <em>after</em> the directive as having the given line
number (and file name, if specified).</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#line
default</span></span> directive reverses the effect of all preceding #line
directives. The compiler reports true line information for subsequent lines,
precisely as if no <span class="Codefragment"><span style="font-size:10.0pt">#line</span></span>
directives had been processed.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#line
hidden</span></span> directive has no effect on the file and line numbers reported
in error messages, but does affect source level debugging. When debugging, all
lines between a <span class="Codefragment"><span style="font-size:10.0pt">#line
hidden</span></span> directive and the subsequent <span class="Codefragment"><span style="font-size:10.0pt">#line</span></span> directive (that is not <span class="Codefragment"><span style="font-size:10.0pt">#line hidden</span></span>)
have no line number information. When stepping through code in the debugger,
these lines will be skipped entirely.</p>

<p class="MsoNormal">Note that a <span class="Production">file-name</span> differs
from a regular string literal in that escape characters are not processed; the
‘<span class="Codefragment"><span style="font-size:10.0pt">\</span></span>’
character simply designates an ordinary backslash character within a <span class="Production">file-name</span>.</p>

<h3><a name="_Toc251612924"></a><a name="_Ref174219246">2.5.8 Pragma directives</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>
preprocessing directive is used to specify optional contextual information to
the compiler. The information supplied in a <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> directive will never change
program semantics.</p>

<p class="Grammar">pp-pragma:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">pragma</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pragma-body&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">pragma-body:<br>
pragma-warning-body</p>

<p class="MsoNormal">C# provides <span class="Codefragment"><span style="font-size:
10.0pt">#pragma</span></span> directives to control compiler warnings. Future
versions of the language may include additional <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> directives. To ensure
interoperability with other C# compilers, the Microsoft C# compiler does not
issue compilation errors for unknown <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> directives; such directives do
however generate warnings.</p>

<h4><a name="_Toc251612925"></a><a name="_Toc111395417">2.5.8.1 Pragma warning</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">warning</span></span>
directive is used to disable or restore all or a particular set of warning
messages during compilation of the subsequent program text.</p>

<p class="Grammar">pragma-warning-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; warning-action<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; warning-action&nbsp;&nbsp; whitespace&nbsp;&nbsp; warning-list</p>

<p class="Grammar">warning-action:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">disable</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">restore</span></span></p>

<p class="Grammar">warning-list:<br>
decimal-digits<br>
warning-list&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">,</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
decimal-digits</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">warning</span></span>
directive that omits the warning list affects all warnings. A <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> <span class="Codefragment"><span style="font-size:10.0pt">warning</span></span>
directive the includes a warning list affects only those warnings that are
specified in the list.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">warning</span></span> <span class="Codefragment"><span style="font-size:10.0pt">disable</span></span>
directive disables all or the given set of warnings.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">warning</span></span> <span class="Codefragment"><span style="font-size:10.0pt">restore</span></span>
directive restores all or the given set of warnings to the state that was in
effect at the beginning of the compilation unit. Note that if a particular
warning was disabled externally, a <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> <span class="Codefragment"><span style="font-size:10.0pt">warning</span></span> <span class="Codefragment"><span style="font-size:10.0pt">restore</span></span> (whether for all or the specific
warning) will not re-enable that warning.</p>

<p class="MsoNormal">The following example shows use of <span class="Codefragment"><span style="font-size:10.0pt">#pragma</span></span> <span class="Codefragment"><span style="font-size:10.0pt">warning</span></span> to temporarily disable the
warning reported when obsoleted members are referenced, using the warning
number from the Microsoft C# compiler.</p>

<p class="Code">using System;</p>

<p class="Code">class Program<br>
{<br>
&nbsp;&nbsp; [Obsolete]<br>
&nbsp;&nbsp; static void Foo() {}</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
#pragma warning disable 612<br>
&nbsp;&nbsp; Foo();<br>
#pragma warning restore 612<br>
&nbsp;&nbsp; }<br>
}</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section5">

<h1><a name="_Toc251612926"></a><a name="_Ref503080287">3. Basic concepts</a></h1>

<h2><a name="_Toc251612927"></a><a name="_Ref529259251">3.1 Application Startup</a></h2>

<p class="MsoNormal">An assembly that has an <span class="Term">entry point</span>
is called an <span class="Term">application</span>. When an application is run, a
new <span class="Term">application domain</span> is created. Several different
instantiations of an application may exist on the same machine at the same
time, and each has its own application domain.</p>

<p class="MsoNormal">An application domain enables application isolation by
acting as a container for application state. An application domain acts as a
container and boundary for the types defined in the application and the class
libraries it uses. Types loaded into one application domain are distinct from
the same type loaded into another application domain, and instances of objects
are not directly shared between application domains. For instance, each
application domain has its own copy of static variables for these types, and a
static constructor for a type is run at most once per application domain.
Implementations are free to provide implementation-specific policy or
mechanisms for the creation and destruction of application domains.</p>

<p class="MsoNormal"><span class="Term">Application startup</span> occurs when the
execution environment calls a designated method, which is referred to as the
application's entry point. This entry point method is always named <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>, and can have
one of the following signatures:</p>

<p class="Code">static void Main() {...}</p>

<p class="Code">static void Main(string[] args) {...}</p>

<p class="Code">static int Main() {...}</p>

<p class="Code">static int Main(string[] args) {...}</p>

<p class="MsoNormal">As shown, the entry point may optionally return an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> value. This
return value is used in application termination (§3.2).</p>

<p class="MsoNormal">The entry point may optionally have one formal parameter.
The parameter may have any name, but the type of the parameter must be <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>. If
the formal parameter is present, the execution environment creates and passes a
<span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>
argument containing the command-line arguments that were specified when the
application was started. The <span class="Codefragment"><span style="font-size:
10.0pt">string[]</span></span> argument is never null, but it may have a length
of zero if no command-line arguments were specified.</p>

<p class="MsoNormal">Since C# supports method overloading, a class or struct may
contain multiple definitions of some method, provided each has a different
signature. However, within a single program, no class or struct may contain
more than one method called <span class="Codefragment"><span style="font-size:
 10.0pt">Main</span></span> whose definition qualifies it to be used as an
application entry point. Other overloaded versions of <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> are permitted, however, provided
they have more than one parameter, or their only parameter is other than type <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>.</p>

<p class="MsoNormal">An application can be made up of multiple classes or
structs. It is possible for more than one of these classes or structs to
contain a method called <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>
whose definition qualifies it to be used as an application entry point. In such
cases, an external mechanism (such as a command-line compiler option) must be
used to select one of these <span class="Codefragment"><span style="font-size:
10.0pt">Main</span></span> methods as the entry point.</p>

<p class="MsoNormal">In C#, every method must be defined as a member of a class
or struct. Ordinarily, the declared accessibility (§3.5.1) of a method is
determined by the access modifiers (§10.3.5) specified in its declaration, and
similarly the declared accessibility of a type is determined by the access
modifiers specified in its declaration. In order for a given method of a given
type to be callable, both the type and the member must be accessible. However,
the application entry point is a special case. Specifically, the execution
environment can access the application's entry point regardless of its declared
accessibility and regardless of the declared accessibility of its enclosing
type declarations.</p>

<p class="MsoNormal">The application entry point method may not be in a generic class
declaration.</p>

<p class="MsoNormal">In all other respects, entry point methods behave like those
that are not entry points.</p>

<h2><a name="_Toc251612928"></a><a name="_Ref513725207">3.2 Application
termination</a></h2>

<p class="MsoNormal"><span class="Term">Application termination</span> returns
control to the execution environment.</p>

<p class="MsoNormal">If the return type of the application’s <span class="Term">entry
point</span> method is <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
the value returned serves as the application's <span class="Term">termination
status code</span>. The purpose of this code is to allow communication of
success or failure to the execution environment.</p>

<p class="MsoNormal">If the return type of the entry point method is <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, reaching
the right brace (<span class="Codefragment"><span style="font-size:10.0pt">}</span></span>)
which terminates that method, or executing a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement that has no expression,
results in a termination status code of <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>.</p>

<p class="MsoNormal">Prior to an application’s termination, destructors for all
of its objects that have not yet been garbage collected are called, unless such
cleanup has been suppressed (by a call to the library method <span class="Codefragment"><span style="font-size:10.0pt">GC.SuppressFinalize</span></span>,
for example).</p>

<h2><a name="_Toc251612929"></a><a name="_Ref461622138">3.3 Declarations</a></h2>

<p class="MsoNormal">Declarations in a C# program define the constituent elements
of the program. C# programs are organized using namespaces (§9), which can contain type declarations and nested namespace declarations. Type declarations (§9.6) are used to define classes (§10), structs (§10.14), interfaces (§13), enums (§14), and delegates (§15). The kinds of members permitted in a type
declaration depend on the form of the type declaration. For instance, class
declarations can contain declarations for constants (§10.4), fields (§10.5), methods (§10.6), properties (§10.7), events (§10.8), indexers (§10.9), operators (§10.10), instance constructors (§10.11), static constructors (§10.12), destructors (§10.13), and nested types(§10.3.8).</p>

<p class="MsoNormal">A declaration defines a name in the <span class="Term">declaration
space</span> to which the declaration belongs. Except for overloaded members (§3.6), it is a compile-time error to have two or more declarations that introduce
members with the same name in a declaration space. It is never possible for a
declaration space to contain different kinds of members with the same name. For
example, a declaration space can never contain a field and a method by the same
name.</p>

<p class="MsoNormal">There are several different types of declaration spaces, as
described in the following.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Within all source files of a program, <span class="Production">namespace-member-declaration</span>s
with no enclosing <span class="Production">namespace-declaration</span> are
members of a single combined declaration space called the <span class="Term">global
declaration space</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Within all source files of a program, <span class="Production">namespace-member-declaration</span>s
within <span class="Production">namespace-declaration</span>s that have the same
fully qualified namespace name are members of a single combined declaration
space.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each class, struct, or interface declaration creates a new
declaration space. Names are introduced into this declaration space through <span class="Production">class-member-declaration</span>s, <span class="Production">struct-member-declaration</span>s,
<span class="Production">interface-member-declaration</span>s, or <span class="Production">type-parameter</span>s. Except for overloaded instance
constructor declarations and static constructor declarations, a class or struct
cannot contain a member declaration with the same name as the class or struct.
A class, struct, or interface permits the declaration of overloaded methods and
indexers. Furthermore, a class or struct permits the declaration of overloaded
instance constructors and operators. For example, a class, struct, or interface
may contain multiple method declarations with the same name, provided these
method declarations differ in their signature (§<a name="_Hlt456702499"></a>3.6). Note that base classes do not contribute to the declaration space of a
class, and base interfaces do not contribute to the declaration space of an
interface. Thus, a derived class or interface is allowed to declare a member
with the same name as an inherited member. Such a member is said to <span class="Term">hide</span> the inherited member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each delegate declaration creates a new declaration space. Names
are introduced into this declaration space through formal parameters (<span class="Production">fixed-parameter</span>s and <span class="Production">parameter-array</span>s)
and <span class="Production">type-parameter</span>s.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each enumeration declaration creates a new declaration space.
Names are introduced into this declaration space through <span class="Production">enum-member-declarations</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each method declaration, indexer declaration, operator
declaration, instance constructor declaration and anonymous function creates a
new declaration space called a <span class="Term">local variable declaration
space</span>. Names are introduced into this declaration space through formal
parameters (<span class="Production">fixed-parameter</span>s and <span class="Production">parameter-array</span>s) and <span class="Production">type-parameter</span>s.
The body of the function member or anonymous function, if any, is considered to
be nested within the local variable declaration space. It is an error for a
local variable declaration space and a nested local variable declaration space
to contain elements with the same name. Thus, within a nested declaration space
it is not possible to declare a local variable or constant with the same name
as a local variable or constant in an enclosing declaration space. It is
possible for two declaration spaces to contain elements with the same name as
long as neither declaration space contains the other.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each <span class="Production">block</span>&nbsp;or <span class="Production">switch-block</span>&nbsp;, as well as a <i>for</i>, <i>foreach</i> and <i>using</i> statement, creates a local variable declaration space for
local variables and local constants . Names are introduced into this declaration space through <span class="Production">local-variable-declaration</span>s<span class="Production"> </span>and<span class="Production"> local-constant-declaration</span>s.
Note that blocks that occur as or within the body of a function member or
anonymous function are nested within the local variable declaration space
declared by those functions for their parameters. Thus it is an error to have
e.g. a method with a local variable and a parameter of the same name. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each <span class="Production">block</span> or <span class="Production">switch-block</span> creates a separate declaration space for
labels. Names are introduced into this declaration space through <span class="Production">labeled-statement</span>s, and the names are referenced
through <span class="Production">goto-statement</span>s. The <span class="Term">label
declaration space</span> of a block includes any nested blocks. Thus, within a
nested block it is not possible to declare a label with the same name as a
label in an enclosing block.</p>

<p class="MsoNormal">The textual order in which names are declared is generally
of no significance. In particular, textual order is not significant for the
declaration and use of namespaces, constants, methods, properties, events, indexers,
operators, instance constructors, destructors, static constructors, and types.
Declaration order is significant in the following ways:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Declaration order for field declarations and local variable
declarations determines the order in which their initializers (if any) are
executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Local variables must be defined before they are used (§3.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Declaration order for enum member declarations (§14.3) is significant when <span class="Production">constant-expression</span> values
are omitted.</p>

<p class="MsoNormal">The declaration space of a namespace is “open ended”, and
two namespace declarations with the same fully qualified name contribute to the
same declaration space. For example</p>

<p class="Code">namespace Megacorp.Data<br>
{<br>
&nbsp;&nbsp; class Customer<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace Megacorp.Data<br>
{<br>
&nbsp;&nbsp; class Order<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The two namespace declarations above contribute to the same
declaration space, in this case declaring two classes with the fully qualified
names <span class="Codefragment"><span style="font-size:10.0pt">Megacorp.Data.Customer</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Megacorp.Data.Order</span></span>.
Because the two declarations contribute to the same declaration space, it would
have caused a compile-time error if each contained a declaration of a class with
the same name.</p>

<p class="MsoNormal">As specified above, the declaration space of a block
includes any nested blocks. Thus, in the following example, the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> methods
result in a compile-time error because the name <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is declared in the outer block and
cannot be redeclared in the inner block. However, the <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> methods are valid since the two <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>’s are
declared in separate non-nested blocks.</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (true) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (true) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void H() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (true) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (true) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; <span lang="NO-BOK">void I() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H();<br>
&nbsp;&nbsp; }<br>
}</span></p>

<h2><a name="_Toc251612930"></a><a name="_Ref465341699"></a><a name="_Toc445782967">3.4 Members</a></h2>

<p class="MsoNormal">Namespaces and types have <span class="Term">members</span>.
The members of an entity are generally available through the use of a qualified
name that starts with a reference to the entity, followed by a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>” token,
followed by the name of the member.</p>

<p class="MsoNormal">Members of a type are either declared in the type declaration
or <span class="Term">inherited</span> from the base class of the type. When a
type inherits from a base class, all members of the base class, except instance
constructors, destructors and static constructors, become members of the
derived type. The declared accessibility of a base class member does not
control whether the member is inherited—inheritance extends to any member that
isn’t an instance constructor, static constructor, or destructor. However, an
inherited member may not be accessible in a derived type, either because of its
declared accessibility (§3.5.1) or because it is hidden by a declaration in the
type itself (§3.7.1.2).</p>

<h3><a name="_Toc251612931"></a><a name="_Toc445782968">3.4.1 Namespace members</a></h3>

<p class="MsoNormal">Namespaces and types that have no enclosing namespace are
members of the <span class="Term">global namespace</span>. This corresponds
directly to the names declared in the global declaration space.</p>

<p class="MsoNormal">Namespaces and types declared within a namespace are members
of that namespace. This corresponds directly to the names declared in the
declaration space of the namespace.</p>

<p class="MsoNormal">Namespaces have no access restrictions. It is not possible
to declare private, protected, or internal namespaces, and namespace names are
always publicly accessible.</p>

<h3><a name="_Toc445782969"></a><a name="_Toc251612932"></a><a name="_Toc445782970">3.4.2 Struct members</a></h3>

<p class="MsoNormal">The members of a struct are the members declared in the
struct and the members inherited from the struct’s direct base class <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
and the indirect base class <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span>.</p>

<p class="MsoNormal">The members of a simple type correspond directly to the
members of the struct type aliased by the simple type:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">sbyte</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.SByte</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">byte</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Byte</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">short</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Int16</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">ushort</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.UInt16</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Int32</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">uint</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.UInt32</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Int64</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">ulong</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.UInt64</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">char</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Char</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">float</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Single</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Double</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">decimal</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span> struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Boolean</span></span> struct.</p>

<h3><a name="_Toc251612933"></a><a name="_Toc445782972">3.4.3 Enumeration
members</a></h3>

<p class="MsoNormal">The members of an enumeration are the constants declared in
the enumeration and the members inherited from the enumeration’s direct base
class <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>
and the indirect base classes <span class="Codefragment"><span style="font-size:
10.0pt">System.ValueType</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<h3><a name="_Toc251612934">3.4.4 Class members</a></h3>

<p class="MsoNormal">The members of a class are the members declared in the class
and the members inherited from the base class (except for class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> which
has no base class). The members inherited from the base class include the
constants, fields, methods, properties, events, indexers, operators, and types
of the base class, but not the instance constructors, destructors and static constructors
of the base class. Base class members are inherited without regard to their
accessibility.</p>

<p class="MsoNormal">A class declaration may contain declarations of constants,
fields, methods, properties, events, indexers, operators, instance
constructors, destructors, static constructors and types.</p>

<p class="MsoNormal">The members of <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> correspond directly to the
members of the class types they alias:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span> class.</p>

<p class="MsoListBullet"><a name="_Toc445782971"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The members of </a><span class="Codefragment"><span style="font-size:10.0pt">string</span></span> are the members of the <span class="Codefragment"><span style="font-size:10.0pt">System.String</span></span>
class.</p>

<h3><a name="_Toc251612935">3.4.5 Interface members</a></h3>

<p class="MsoNormal">The members of an interface are the members declared in the
interface and in all base interfaces of the interface. The members in class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> are not,
strictly speaking, members of any interface (§13.2). However, the members in
class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
are available via member lookup in any interface type (§7.4).</p>

<h3><a name="_Toc251612936"></a><a name="_Toc445782973">3.4.6 Array members</a></h3>

<p class="MsoNormal">The members of an array are the members inherited from class
<span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>.</p>

<h3><a name="_Toc251612937"></a><a name="_Toc445782974">3.4.7 Delegate members</a></h3>

<p class="MsoNormal">The members of a delegate are the members inherited from
class <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>.</p>

<h2><a name="_Toc251612938"></a><a name="_Ref461620407">3.5 Member access</a></h2>

<p class="MsoNormal">Declarations of members allow control over member access.
The accessibility of a member is established by the declared accessibility (§3.5.1) of the member combined with the accessibility of the immediately
containing type, if any.</p>

<p class="MsoNormal">When access to a particular member is allowed, the member is
said to be <span class="Term">accessible</span>. Conversely, when access to a
particular member is disallowed, the member is said to be <span class="Term">inaccessible</span>.
Access to a member is permitted when the textual location in which the access
takes place is included in the accessibility domain (§3.5.2) of the member.</p>

<h3><a name="_Toc251612939"></a><a name="_Ref465248875">3.5.1 Declared
accessibility</a></h3>

<p class="MsoNormal">The <span class="Term">declared accessibility</span> of a
member can be one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Public, which is selected by including a <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> modifier
in the member declaration. The intuitive meaning of <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> is “access not limited”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Protected, which is selected by including a <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
modifier in the member declaration. The intuitive meaning of <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> is
“access limited to the containing class or types derived from the containing
class”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Internal, which is selected by including an <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
modifier in the member declaration. The intuitive meaning of <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> is
“access limited to this program”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Protected internal (meaning protected or internal), which is
selected by including both a <span class="Codefragment"><span style="font-size:
10.0pt">protected</span></span> and an <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> modifier in the member declaration.
The intuitive meaning of <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
is “access limited to this program or types derived from the containing class”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Private, which is selected by including a <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
modifier in the member declaration. The intuitive meaning of <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> is
“access limited to the containing type”.</p>

<p class="MsoNormal">Depending on the context in which a member declaration takes
place, only certain types of declared accessibility are permitted. Furthermore,
when a member declaration does not include any access modifiers, the context in
which the declaration takes place determines the default declared
accessibility.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Namespaces implicitly have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> declared accessibility. No access
modifiers are allowed on namespace declarations.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types declared in compilation units or namespaces can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
declared accessibility and default to <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> declared accessibility.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Class members can have any of the five kinds of declared
accessibility and default to <span class="Codefragment"><span style="font-size:
10.0pt">private</span></span> declared accessibility. (Note that a type
declared as a member of a class can have any of the five kinds of declared
accessibility, whereas a type declared as a member of a namespace can have only
<span class="Codefragment"><span style="font-size:10.0pt">public</span></span> or
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
declared accessibility.)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Struct members can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> declared accessibility and
default to <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
declared accessibility because structs are implicitly sealed. Struct members
introduced in a struct (that is, not inherited by that struct) cannot have <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
declared accessibility. (Note that a type declared as a member of a struct can
have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
declared accessibility, whereas a type declared as a member of a namespace can
have only <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
declared accessibility.)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Interface members implicitly have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> declared accessibility. No access
modifiers are allowed on interface member declarations.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Enumeration members implicitly have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> declared accessibility. No access
modifiers are allowed on enumeration member declarations.</p>

<h3><a name="_Toc251612940"></a><a name="_Ref465248925">3.5.2 Accessibility
domains</a></h3>

<p class="MsoNormal">The <span class="Term">accessibility domain</span> of a member
consists of the (possibly disjoint) sections of program text in which access to
the member is permitted. For purposes of defining the accessibility domain of a
member, a member is said to be <span class="Term">top-level</span> if it is not
declared within a type, and a member is said to be <span class="Term">nested</span>
if it is declared within another type. Furthermore, the <span class="Term">program
text</span> of a program is defined as all program text contained in all source
files of the program, and the program text of a type is defined as all program
text contained in the <span class="Production">type-declaration</span>s of that
type (including, possibly, types that are nested within the type).</p>

<p class="MsoNormal">The accessibility domain of a predefined type (such as <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>) is
unlimited.</p>

<p class="MsoNormal">The accessibility domain of a top-level unbound type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (§4.4.3) that is declared in a program <span class="Codefragment"><span style="font-size:
10.0pt">P</span></span> is defined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the program
text of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
and any program that references <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the
program text of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.</p>

<p class="MsoNormal">From these definitions it follows that the accessibility
domain of a top-level unbound type is always at least the program text of the
program in which that type is declared.</p>

<p class="MsoNormal">The accessibility domain for a constructed type <span class="Codefragment"><span style="font-size:10.0pt">T&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,A<sub>N</sub>&gt; </span></span>is
the intersection of the accessibility domain of the unbound generic type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and the
accessibility domains of the type arguments <span class="Codefragment"><span style="font-size:10.0pt">A<sub>1</sub>,</span></span> ...<span class="Codefragment"><span style="font-size:10.0pt">,A<sub>N</sub></span></span>.</p>

<p class="MsoNormal">The accessibility domain of a nested member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> declared in a
type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
within a program <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
is defined as follows (noting that <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> itself may possibly be a type):</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is the
accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, let <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> be the union of the program text of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and the
program text of any type derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, which is declared outside <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>. The
accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is the intersection of the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, let <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> be the union of the program text of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and the
program text of any type derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is the
intersection of the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is the
intersection of the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with the program text of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>, the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is the
program text of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoNormal">From these definitions it follows that the accessibility
domain of a nested member is always at least the program text of the type in
which the member is declared. Furthermore, it follows that the accessibility
domain of a member is never more inclusive than the accessibility domain of the
type in which the member is declared.</p>

<p class="MsoNormal">In intuitive terms, when a type or member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is accessed,
the following steps are evaluated to ensure that the access is permitted:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First, if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is declared within a type (as opposed to a compilation unit or a namespace), a
compile-time error occurs if that type is not accessible.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Then, if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
the access is permitted.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, the access is permitted if it
occurs within the program in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is declared, or if it occurs within a
class derived from the class in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is declared and takes place through
the derived class type (§3.5.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">protected</span></span>, the access is permitted if it occurs within
the class in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is declared, or if it occurs within a class derived from the class in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is declared
and takes place through the derived class type (§3.5.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">internal</span></span>, the access is permitted if it occurs within the
program in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is declared.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">private</span></span>, the access is permitted if it occurs within the
type in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is declared.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the type or member is inaccessible, and a compile-time
error occurs.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">public class A<br>
{<br>
&nbsp;&nbsp; public static int X;<br>
&nbsp;&nbsp; internal static int Y;<br>
&nbsp;&nbsp; private static int Z;<br>
}</p>

<p class="Code">internal class B<br>
{<br>
&nbsp;&nbsp; public static int X;<br>
&nbsp;&nbsp; internal static int Y;<br>
&nbsp;&nbsp; private static int Z;</p>

<p class="Code">&nbsp;&nbsp; public class C<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static int X;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; internal static int Y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static int Z;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; private class D<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static int X;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; internal static int Y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static int Z;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the classes and members have the following accessibility
domains:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span> is unlimited.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">A.Y</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B.X</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B.Y</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B.C</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B.C.X</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">B.C.Y</span></span> is the program text of the
containing program.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">A.Z</span></span> is the program text of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">B.Z</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B.D</span></span> is the program text of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, including
the program text of <span class="Codefragment"><span style="font-size:10.0pt">B.C</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B.D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">B.C.Z</span></span> is the program text of <span class="Codefragment"><span style="font-size:10.0pt">B.C</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">B.D.X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B.D.Y</span></span> is the program text of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, including
the program text of <span class="Codefragment"><span style="font-size:10.0pt">B.C</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B.D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">B.D.Z</span></span> is the program text of <span class="Codefragment"><span style="font-size:10.0pt">B.D</span></span>.</p>

<p class="MsoNormal">As the example illustrates, the accessibility domain of a member
is never larger than that of a containing type. For example, even though all <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> members have
public declared accessibility, all but <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span> have accessibility domains that are
constrained by a containing type.</p>

<p class="MsoNormal"><a name="_Ref465337704">As described in §</a>3.4, all members of a base class, except for instance constructors, destructors and
static constructors, are inherited by derived types. This includes even private
members of a base class. However, the accessibility domain of a private member
includes only the program text of the type in which the member is declared. In
the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int x;</p>

<p class="Code">&nbsp;&nbsp; static void F(B b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.x = 1;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; static void F(B b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.x = 1;&nbsp;&nbsp;&nbsp; // Error, x not accessible<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
class inherits the private member <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> from the <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> class. Because the member is private,
it is only accessible within the <span class="Production">class-body</span> of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. Thus, the
access to <span class="Codefragment"><span style="font-size:10.0pt">b.x</span></span>
succeeds in the <span class="Codefragment"><span style="font-size:10.0pt">A.F</span></span>
method, but fails in the <span class="Codefragment"><span style="font-size:10.0pt">B.F</span></span>
method.</p>

<h3><a name="_Toc251612941"></a><a name="_Ref465761330">3.5.3 Protected access</a>
for instance members</h3>

<p class="MsoNormal">When a <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
instance member is accessed outside the program text of the class in which it
is declared, and when a <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
instance member is accessed outside the program text of the program in which it
is declared, the access must take place within a class declaration that derives
from the class in which it is declared. Furthermore, the access is required to
take place <em>through</em> an instance of that derived class type or a class
type constructed from it. This restriction prevents one derived class from
accessing protected members of other derived classes, even when the members are
inherited from the same base class.</p>

<p class="MsoNormal">Let <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
be a base class that declares a protected instance member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>, and let <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> be a class
that derives from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.
Within the <span class="Production">class-body</span> of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, access to <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> can take one
of the following forms:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An unqualified <span class="Production">type-name</span> or <span class="Production">primary-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">primary-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>, provided
the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or a
class derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is the class type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>,
or a class type constructed from <span class="Codefragment"><span style="font-size:10.0pt">D</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">primary-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">base.M</span></span>.</p>

<p class="MsoNormal">In addition to these forms of access, a derived class can
access a protected instance constructor of a base class in a <span class="Production">constructor-initializer</span> (§10.11.1).</p>

<p class="MsoNormal">In the example</p>

<p class="Code">public class A<br>
{<br>
&nbsp;&nbsp; protected int x;</p>

<p class="Code">&nbsp;&nbsp; static void F(A a, B b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.x = 1;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.x = 1;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class B: A<br>
{<br>
&nbsp;&nbsp; static void F(A a, B b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.x = 1;&nbsp;&nbsp;&nbsp; // Error, must access through instance of B<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.x = 1;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">within <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
it is possible to access <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
through instances of both <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
since in either case the access takes place <em>through</em> an instance of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> or a class
derived from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
However, within <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
it is not possible to access <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> through an instance of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, since <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> does not derive from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.</p>

<p class="MsoNormal"><a name="_Ref465401447">In the example</a></p>

<p class="Code">class C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; protected T x;<br>
}</p>

<p class="Code">class D&lt;T&gt;: C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D&lt;T&gt; dt = new D&lt;T&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D&lt;int&gt; di = new D&lt;int&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D&lt;string&gt; ds = new D&lt;string&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dt.x = default(T);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; di.x = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ds.x = "test";<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the three assignments to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are permitted because they all take
place through instances of class types constructed from the generic type.</p>

<h3><a name="_Toc251612942"></a><a name="_Ref174234440"></a><a name="_Ref174231215"></a><a name="_Ref174231149"></a><a name="_Ref174231097"></a><a name="_Ref174231012"></a><a name="_Ref174230840"></a><a name="_Ref174230636"></a><a name="_Ref174230469"></a><a name="_Ref174230399"></a><a name="_Ref174230204">3.5.4
Accessibility constraints</a></h3>

<p class="MsoNormal">Several constructs in the C# language require a type to be <span class="Term">at least as accessible as</span> a member or another type. A type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is said to be
at least as accessible as a member or type <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> if the accessibility domain of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a superset
of the accessibility domain of <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>. In other words, <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is at least as accessible as <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is accessible
in all contexts in which <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is accessible.</p>

<p class="MsoNormal">The following accessibility constraints exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The direct base class of a class type must be at least as
accessible as the class type itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The explicit base interfaces of an interface type must be at
least as accessible as the interface type itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The return type and parameter types of a delegate type must be at
least as accessible as the delegate type itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of a constant must be at least as accessible as the
constant itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of a field must be at least as accessible as the field
itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The return type and parameter types of a method must be at least
as accessible as the method itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of a property must be at least as accessible as the
property itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of an event must be at least as accessible as the event
itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type and parameter types of an indexer must be at least as
accessible as the indexer itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The return type and parameter types of an operator must be at
least as accessible as the operator itself.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The parameter types of an instance constructor must be at least
as accessible as the instance constructor itself.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A {...}</p>

<p class="Code">public class B: A {...}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
class results in a compile-time error because <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not at least as accessible as <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.</p>

<p class="MsoNormal">Likewise, in the example</p>

<p class="Code">class A {...}</p>

<p class="Code">public class B<br>
{<br>
&nbsp;&nbsp; A F() {...}</p>

<p class="Code">&nbsp;&nbsp; internal A G() {...}</p>

<p class="Code">&nbsp;&nbsp; public A H() {...}<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">H</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
results in a compile-time error because the return type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not at
least as accessible as the method.</p>

<h2><a name="_Toc251612943"></a><a name="_Ref513809970"></a><a name="_Ref458995074"></a><a name="_Ref458930271"></a><a name="_Ref458501331"></a><a name="_Ref457117867"></a><a name="_Ref454274720"></a><a name="_Toc445782980">3.6
Signatures and overloading</a></h2>

<p class="MsoNormal">Methods, instance constructors, indexers, and operators are
characterized by their <span class="Term">signatures</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of a method consists of the name of the method, the
number of type parameters and the type and kind (value, reference, or output)
of each of its formal parameters, considered in the order left to right. For
these purposes, any type parameter of the method that occurs in the type of a
formal parameter is identified not by its name, but by its ordinal position in
the type argument list of the method. The signature of a method specifically
does not include the return type, the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> modifier that may be specified
for the right-most parameter, nor the optional type parameter constraints.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an instance constructor consists of the type and
kind (value, reference, or output) of each of its formal parameters, considered
in the order left to right. The signature of an instance constructor
specifically does not include the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> modifier that may be specified
for the right-most parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an indexer consists of the type of each of its
formal parameters, considered in the order left to right. The signature of an
indexer specifically does not include the element type, nor does it include the
<span class="Codefragment"><span style="font-size:10.0pt">params</span></span>&nbsp;modifier that may be specified for the right-most parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an operator consists of the name of the operator
and the type of each of its formal parameters, considered in the order left to
right. The signature of an operator specifically does not include the result
type.</p>

<p class="MsoNormal">Signatures are the enabling mechanism for <span class="Term">overloading</span>
of members in classes, structs, and interfaces:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloading of methods permits a class, struct, or interface to
declare multiple methods with the same name, provided their signatures are
unique within that class, struct, or interface.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloading of instance constructors permits a class or struct to
declare multiple instance constructors, provided their signatures are unique
within that class or struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloading of indexers permits a class, struct, or interface to
declare multiple indexers, provided their signatures are unique within that
class, struct, or interface.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloading of operators permits a class or struct to declare
multiple operators with the same name, provided their signatures are unique
within that class or struct.</p>

<p class="MsoNormal">Although <span class="Codefragment"><span style="font-size:
10.0pt">out</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">ref</span></span> parameter modifiers are considered part of a
signature, members declared in a single type cannot differ in signature solely
by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.
A compile-time error occurs if two members are declared in the same type with
signatures that would be the same if all parameters in both methods with <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifiers
were changed to <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
modifiers. For other purposes of signature matching (e.g., hiding or
overriding), <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
are considered part of the signature and do not match each other. (This
restriction is to allow C#&nbsp; programs to be easily translated to run on the
Common Language Infrastructure (CLI), which does not provide a way to define
methods that differ solely in <span class="Codefragment"><span style="font-size:
10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">out</span></span>.)</p>

<p class="MsoNormal">For the purposes of singatures, the types <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> are
considered the same. Members declared in a single type can therefore not differ
in signature solely by <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">The following example shows a set of overloaded method
declarations along with their signatures.</p>

<p class="Code">interface ITest<br>
{<br>
&nbsp;&nbsp; void F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F()</p>

<p class="Code">&nbsp;&nbsp; void F(int x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F(int)</p>

<p class="Code">&nbsp;&nbsp; void F(ref int x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F(ref int)</p>

<p class="Code">&nbsp;&nbsp; void F(out int x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // F(out int) &nbsp;&nbsp;&nbsp; error</p>

<p class="Code">&nbsp;&nbsp; <span lang="FR">void F(int x, int y);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F(int, int)</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; </span>int F(string s);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
F(string)</p>

<p class="Code">&nbsp;&nbsp; int F(int x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F(int)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error</p>

<p class="Code">&nbsp;&nbsp; void F(string[] a);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F(string[])</p>

<p class="Code">&nbsp;&nbsp; void F(params string[] a);&nbsp;&nbsp;&nbsp; // F(string[])&nbsp;&nbsp;&nbsp; error<br>
}</p>

<p class="MsoNormal">Note that any <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter modifiers (§10.6.1) are part of a signature. Thus, <span class="Codefragment"><span style="font-size:10.0pt">F(int)</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">F(ref</span></span> <span class="Codefragment"><span style="font-size:10.0pt">int)</span></span> are unique signatures. However, <span class="Codefragment"><span style="font-size:10.0pt">F(ref</span></span> <span class="Codefragment"><span style="font-size:10.0pt">int)</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">F(out</span></span> <span class="Codefragment"><span style="font-size:10.0pt">int)</span></span> cannot be
declared within the same interface because their signatures differ solely by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>. Also, note
that the return type and the <span class="Codefragment"><span style="font-size:
10.0pt">params</span></span> modifier are not part of a signature, so it is not
possible to overload solely based on return type or on the inclusion or
exclusion of the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
modifier. As such, the declarations of the methods <span class="Codefragment"><span style="font-size:10.0pt">F(int)</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">F(params</span></span> <span class="Codefragment"><span style="font-size:10.0pt">string[])</span></span> identified above result in a
compile-time error.</p>

<h2><a name="_Toc251612944"></a><a name="_Ref170806206"></a><a name="_Ref461620319"></a><a name="_Toc445782981">3.7 Scopes</a></h2>

<p class="MsoNormal">The <span class="Term">scope</span> of a name is the region of
program text within which it is possible to refer to the entity declared by the
name without qualification of the name. Scopes can be <span class="Term">nested</span>,
and an inner scope may redeclare the meaning of a name from an outer scope
(this does not, however, remove the restriction imposed by §3.3 that within a nested block it is not possible to declare a local variable with the same name as
a local variable in an enclosing block). The name from the outer scope is then
said to be <span class="Term">hidden</span> in the region of program text covered
by the inner scope, and access to the outer name is only possible by qualifying
the name.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a namespace member declared by a <span class="Production">namespace-member-declaration</span> (§9.5) with no enclosing <span class="Production">namespace-declaration</span> is the entire program text.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a namespace member declared by a <span class="Production">namespace-member-declaration</span> within a <span class="Production">namespace-declaration</span> whose fully qualified name is <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is the <span class="Production">namespace-body</span> of every <span class="Production">namespace-declaration</span>
whose fully qualified name is <span class="Codefragment"><span style="font-size:
10.0pt">N</span></span> or starts with <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, followed by a period.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of name defined by an <span class="Production">extern-alias-directive</span>
extends over the <span class="Production">using-directives</span>, <span class="Production">global-attributes</span> and <span class="Production">namespace-member-declarations</span>
of its immediately containing compilation unit or namespace body. An <span class="Production">extern-alias-directive</span> does not contribute any new
members to the underlying declaration space. In other words, an <span class="Production">extern-alias-directive</span> is not transitive, but, rather,
affects only the compilation unit or namespace body in which it occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a name defined or imported by a <span class="Production">using-directive</span> (§9.4) extends over the <span class="Production">namespace-member-declarations</span> of the <span class="Production">compilation-unit</span> or <span class="Production">namespace-body</span>
in which the <span class="Production">using-directive</span> occurs. A <span class="Production">using-directive</span> may make zero or more namespace or type
names available within a particular <span class="Production">compilation-unit</span>
or <span class="Production">namespace-body</span>, but does not contribute any
new members to the underlying declaration space. In other words, a <span class="Production">using-directive</span> is not transitive but rather affects
only the <span class="Production">compilation-unit</span> or <span class="Production">namespace-body</span> in which it occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a type parameter declared by a <span class="Production">type-parameter-list</span> on a<span class="Production"> class-declaration</span>
(§10.1) is the<span class="Term"> </span><span class="Production">class-base</span>,
<span class="Production">type-parameter-constraints-clauses</span>, and <span class="Production">class-body</span> of that<span class="Production"> class-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a type parameter declared by a <span class="Production">type-parameter-list</span> on a<span class="Production"> struct-declaration</span>
(§11.1) is the<span class="Term"> </span><span class="Production">struct-interfaces</span>,
<span class="Production">type-parameter-constraints-clauses</span>, and <span class="Production">struct-body</span> of that<span class="Production"> struct-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a type parameter declared by a <span class="Production">type-parameter-list</span> on an<span class="Production"> interface-declaration</span>
(§13.1) is the<span class="Term"> </span><span class="Production">interface-base</span>,
<span class="Production">type-parameter-constraints-clauses</span>, and <span class="Production">interface-body</span> of that<span class="Production"> interface-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a type parameter declared by a <span class="Production">type-parameter-list</span> on a<span class="Production"> delegate-declaration</span>
(§15.1) is the<span class="Term"> </span><span class="Production">return-type</span>,
<span class="Production">formal-parameter-list</span>, and <span class="Production">type-parameter-constraints-clauses</span> of that<span class="Production"> delegate-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a member declared by a <span class="Production">class-member-declaration</span>
(§10.1.6) is the <span class="Production">class-body</span> in which the
declaration occurs. In addition, the scope of a class member extends to the <span class="Production">class-body</span> of those derived classes that are included
in the accessibility domain (§3.5.2) of the member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a member declared by a <span class="Production">struct-member-declaration</span>
(§11.2) is the <span class="Production">struct-body</span> in which the
declaration occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a member declared by an <span class="Production">enum-member-declaration</span>&nbsp;
(§14.3) is the <span class="Production">enum-body</span> in which the declaration
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in a <span class="Production">method-declaration</span>
(§10.6) is the <span class="Production">method-body</span> of that <span class="Production">method-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in an <span class="Production">indexer-declaration</span>
(§10.9) is the <span class="Production">accessor-declarations</span> of that <span class="Production">indexer-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in an <span class="Production">operator-declaration</span>
(§10.10) is the <span class="Production">block</span> of that <span class="Production">operator-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in a <span class="Production">constructor-declaration</span>
(§10.11) is the <span class="Production">constructor-initializer</span> and <span class="Production">block</span> of that <span class="Production">constructor-declaration</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in a <span class="Production">lambda-expression</span>
(§) is the <span class="Production">lambda-expression-body</span> of that <span class="Production">lambda-expression</span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a parameter declared in an <span class="Production">anonymous-method-expression</span>
(§) is the <span class="Production">block</span> of that <span class="Production">anonymous-method-expression</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a label declared in a <span class="Production">labeled-statement</span>
(§8.4) is the <span class="Production">block</span> in which the declaration
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a local variable declared in a <span class="Production">local-variable-declaration</span> (§8.5.1) is the block in
which the declaration occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a local variable declared in a <span class="Production">switch-block</span> of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement (§8.7.2) is the <span class="Production">switch-block</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a local variable declared in a <span class="Production">for-initializer</span> of a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement (§8.8.3) is the <span class="Production">for-initializer</span>, the <span class="Production">for-condition</span>,
the <span class="Production">for-iterator</span>, and the contained <span class="Production">statement</span> of the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a local constant declared in a <span class="Production">local-constant-declaration</span> (§8.5.2) is the block in
which the declaration occurs. It is a compile-time error to refer to a local
constant in a textual position that precedes its <span class="Production">constant-declarator</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The scope of a variable declared as part of a <span class="Production">foreach-statement</span>, <span class="Production">using-statement</span>,
<span class="Production">lock-statement</span> or <span class="Production">query-expression</span>
is determined by the expansion of the given construct.</p>

<p class="MsoNormal">Within the scope of a namespace, class, struct, or
enumeration member it is possible to refer to the member in a textual position
that precedes the declaration of the member. For example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 1;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; int i = 0;<br>
}</p>

<p class="MsoNormal">Here, it is valid for <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> to refer to <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> before it is declared.</p>

<p class="MsoNormal">Within the scope of a local variable, it is a compile-time
error to refer to the local variable in a textual position that precedes the <span class="Production">local-variable-declarator</span> of the local variable. For
example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int i = 0;</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, use precedes declaration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 2;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j = (j = 1);&nbsp;&nbsp;&nbsp;&nbsp; // Valid<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void H() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int a = 1, b = ++a;&nbsp; // Valid<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method above, the first assignment to <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> specifically does not refer to the
field declared in the outer scope. Rather, it refers to the local variable and
it results in a compile-time error because it textually precedes the
declaration of the variable. In the <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> method, the use of <span class="Codefragment"><span style="font-size:10.0pt">j</span></span> in the
initializer for the declaration of <span class="Codefragment"><span style="font-size:10.0pt">j</span></span> is valid because the use does not
precede the <span class="Production">local-variable-declarator</span>. In the <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> method, a
subsequent <span class="Production">local-variable-declarator</span> correctly
refers to a local variable declared in an earlier <span class="Production">local-variable-declarator</span>
within the same <span class="Production">local-variable-declaration</span>.</p>

<p class="MsoNormal">The scoping rules for local variables are designed to
guarantee that the meaning of a name used in an expression context is always
the same within a block. If the scope of a local variable were to extend only
from its declaration to the end of the block, then in the example above, the
first assignment would assign to the instance variable and the second
assignment would assign to the local variable, possibly leading to compile-time
errors if the statements of the block were later to be rearranged.</p>

<p class="MsoNormal">The meaning of a name within a block may differ based on the
context in which the name is used. In the example</p>

<p class="Code">using System;</p>

<p class="Code">class A {}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string A = "hello, world";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s = A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // expression context</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type t = typeof(A);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // type context</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // writes "hello,
world"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(t);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // writes "A"<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the name <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> is used in an expression context to refer to the local
variable <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and in a type context to refer to the class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<h3><a name="_Toc251612945"></a><a name="_Ref512340422"></a><a name="_Toc445782982">3.7.1 Name hiding</a></h3>

<p class="MsoNormal">The scope of an entity typically encompasses more program
text than the declaration space of the entity. In particular, the scope of an
entity may include declarations that introduce new declaration spaces
containing entities of the same name. Such declarations cause the original
entity to become <span class="Term">hidden</span>. Conversely, an entity is said
to be <span class="Term">visible</span> when it is not hidden.</p>

<p class="MsoNormal">Name hiding occurs when scopes overlap through nesting and
when scopes overlap through inheritance. The characteristics of the two types
of hiding are described in the following sections.</p>

<h4><a name="_Toc251612946"></a><a name="_Toc445782983">3.7.1.1 Hiding through
nesting</a></h4>

<p class="MsoNormal">Name hiding through nesting can occur as a result of nesting
namespaces or types within namespaces, as a result of nesting types within
classes or structs, and as a result of parameter and local variable
declarations.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int i = 0;</p>

<p class="Code">&nbsp;&nbsp; <span lang="NO-BOK">void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;<br>
&nbsp;&nbsp; }</span></p>

<p class="Code"><span lang="NO-BOK">&nbsp;&nbsp; void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 1;<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">within the <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> method, the instance variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is hidden by the local variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>, but within
the <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
method, <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
still refers to the instance variable.</p>

<p class="MsoNormal">When a name in an inner scope hides a name in an outer
scope, it hides all overloaded occurrences of that name. In the example</p>

<p class="Code">class Outer<br>
{<br>
&nbsp;&nbsp; static void F(int i) {}</p>

<p class="Code">&nbsp;&nbsp; static void F(string s) {}</p>

<p class="Code">&nbsp;&nbsp; class Inner<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes Outer.Inner.F<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F("Hello");&nbsp;&nbsp;&nbsp; // Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void F(long l) {}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the call <span class="Codefragment"><span style="font-size:
10.0pt">F(1)</span></span> invokes the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> declared in <span class="Codefragment"><span style="font-size:10.0pt">Inner</span></span> because all outer occurrences of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> are hidden by
the inner declaration. For the same reason, the call <span class="Codefragment"><span style="font-size:10.0pt">F("Hello")</span></span> results in a
compile-time error.</p>

<h4><a name="_Toc251612947"></a><a name="_Ref461622533"></a><a name="_Ref461620432"></a><a name="_Ref457359254"></a><a name="_Ref457284942"></a><a name="_Ref456945408"></a><a name="_Ref449366300"></a><a name="_Toc445782984"></a><a name="_Hlt454274624"></a>3.7.1.2 Hiding through inheritance</h4>

<p class="MsoNormal">Name hiding through inheritance occurs when classes or
structs redeclare names that were inherited from base classes. This type of
name hiding takes one of the following forms:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A constant, field, property, event, or type introduced in a class
or struct hides all base class members with the same name.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A method introduced in a class or struct hides all non-method
base class members with the same name, and all base class methods with the same
signature (method name and parameter count, modifiers, and types).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An indexer introduced in a class or struct hides all base class
indexers with the same signature (parameter count and types).</p>

<p class="MsoNormal">The rules governing operator declarations (§10.10) make it impossible for a derived class to declare an operator with the same
signature as an operator in a base class. Thus, operators never hide one
another.</p>

<p class="MsoNormal">Contrary to hiding a name from an outer scope, hiding an
accessible name from an inherited scope causes a warning to be reported. In the
example</p>

<p class="Code">class Base<br>
{<br>
&nbsp;&nbsp; public void F() {}<br>
}</p>

<p class="Code">class Derived: Base<br>
{<br>
&nbsp;&nbsp; public void F() {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Warning, hiding an inherited name<br>
}</p>

<p class="MsoNormal">the declaration of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span> causes a warning to be reported.
Hiding an inherited name is specifically not an error, since that would
preclude separate evolution of base classes. For example, the above situation
might have come about because a later version of <span class="Codefragment"><span style="font-size:10.0pt">Base</span></span> introduced an <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method that
wasn’t present in an earlier version of the class. Had the above situation been
an error, then <em>any</em> change made to a base class in a separately
versioned class library could potentially cause derived classes to become
invalid.</p>

<p class="MsoNormal">The warning caused by hiding an inherited name can be
eliminated through use of the <span class="Codefragment"><span style="font-size:
10.0pt">new</span></span> modifier:</p>

<p class="Code">class Base<br>
{<br>
&nbsp;&nbsp; public void F() {}<br>
}</p>

<p class="Code">class Derived: Base<br>
{<br>
&nbsp;&nbsp; new public void F() {}<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier indicates that the <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">Derived</span></span> is “new”, and that it is indeed intended to hide
the inherited member.</p>

<p class="MsoNormal">A declaration of a new member hides an inherited member only
within the scope of the new member.</p>

<p class="Code">class Base<br>
{<br>
&nbsp;&nbsp; public static void F() {}<br>
}</p>

<p class="Code">class Derived: Base<br>
{<br>
&nbsp;&nbsp; new private static void F() {}&nbsp;&nbsp; // Hides Base.F in Derived only<br>
}</p>

<p class="Code">class MoreDerived: Derived<br>
{<br>
&nbsp;&nbsp; static void G() { F(); }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes Base.F<br>
}</p>

<p class="MsoNormal">In the example above, the declaration of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span> hides
the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
that was inherited from <span class="Codefragment"><span style="font-size:10.0pt">Base</span></span>,
but since the new <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span>
has private access, its scope does not extend to <span class="Codefragment"><span style="font-size:10.0pt">MoreDerived</span></span>. Thus, the call <span class="Codefragment"><span style="font-size:10.0pt">F()</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">MoreDerived.G</span></span>
is valid and will invoke <span class="Codefragment"><span style="font-size:10.0pt">Base.F</span></span>.</p>

<h2><a name="_Toc251612948"></a><a name="_Ref186516114"></a><a name="_Ref174229251"></a><a name="_Ref174229037"></a><a name="_Ref168463978"></a><a name="_Ref168414011"></a><a name="_Ref463754556"></a><a name="_Ref452708093"></a><a name="_Ref452705219"></a><a name="_Ref451236317"></a><a name="_Toc445782985">3.8
Namespace and type names</a></h2>

<p class="MsoNormal">Several contexts in a C#&nbsp;program require a <span class="Production">namespace-name </span>or a <span class="Production">type-name</span>
to be specified.</p>

<p class="Grammar">namespace-name:<br>
namespace-or-type-name</p>

<p class="Grammar">type-name:<br>
namespace-or-type-name</p>

<p class="Grammar">namespace-or-type-name:<br>
identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub><br>
namespace-or-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; type-argument-list<sub>opt<br>
</sub>qualified-alias-member</p>

<p class="MsoNormal">A <span class="Production">namespace-name</span> is a <span class="Production">namespace-or-type-name</span> that refers to a namespace. Following
resolution as described below, the <span class="Production">namespace-or-type-name</span>
of a <span class="Production">namespace-name</span> must refer to a namespace, or
otherwise a compile-time error occurs. No type arguments (§4.4.1) can be present in a <span class="Production">namespace-name</span> (only types can have type
arguments).</p>

<p class="MsoNormal">A <span class="Production">type-name</span> is a <span class="Production">namespace-or-type-name</span> that refers to a type. Following
resolution as described below, the <span class="Production">namespace-or-type-name</span>
of a <span class="Production">type-name</span> must refer to a type, or otherwise
a compile-time error occurs.</p>

<p class="MsoNormal">If the <span class="Production">namespace-or-type-name</span> is
a qualified-alias-member its meaning is as described in §9.7. Otherwise, a <span class="Production">namespace-or-type-name</span> has one of four forms:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">I</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">N.I</span></span></p>

<p class="MsoListBullet"><span class="Codefragment"><span style="font-size:10.0pt;
font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">N.I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span></p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
is a single identifier, <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is a <span class="Production">namespace-or-type-name</span> and <span class="Codefragment"><span style="font-size:10.0pt">&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>
is an optional <span class="Production">type-argument-list</span>. When no <span class="Production">type-argument-list</span> is specified, consider <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> to be zero.</p>

<p class="MsoNormal">The meaning of a <span class="Production">namespace-or-type-name</span>
is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Production">namespace-or-type-name</span> is of
the form <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
or of the form <span class="Codefragment"><span style="font-size:10.0pt">I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and
the <span class="Production">namespace-or-type-name</span> appears within a
generic method declaration (§10.6) and if that declaration includes a type
parameter (§10.1.3) with name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>, then the <span class="Production">namespace-or-type-name</span>
refers to that type parameter.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the <span class="Production">namespace-or-type-name</span> appears within a type
declaration, then for each instance type&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (§10.3.1), starting with the instance
type of that type declaration and continuing with the instance type of each
enclosing class or struct declaration (if any):</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and the declaration of <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> includes a type parameter with name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>, then the <span class="Production">namespace-or-type-name</span> refers to that type parameter.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the <span class="Production">namespace-or-type-name</span>
appears within the body of the type declaration, and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or any of its base types contain a
nested accessible type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">namespace-or-type-name</span> refers to that type constructed
with the given type arguments. If there is more than one such type, the type
declared within the more derived type is selected. Note that non-type members (constants,
fields, methods, properties, indexers, operators, instance constructors,
destructors, and static constructors) and type members with a different number
of type parameters are ignored when determining the meaning of the <span class="Production">namespace-or-type-name</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the previous
steps were unsuccessful then, for each namespace&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, starting with the namespace in which
the <span class="Production">namespace-or-type-name</span> occurs, continuing
with each enclosing namespace (if any), and ending with the global namespace,
the following steps are evaluated until an entity is located:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
is the name of a namespace in&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, then:</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the location
where the <span class="Production">namespace-or-type-name</span> occurs is
enclosed by a namespace declaration for <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> and the namespace declaration contains
an <span class="Production">extern-alias-directive</span> or <span class="Production">using-alias-directive</span> that associates the name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> with a
namespace or type, then the <span class="Production">namespace-or-type-name</span>
is ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the <span class="Production">namespace-or-type-name</span> refers to the namespace named <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">N</span></span> contains an accessible type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters, then:</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and
the location where the <span class="Production">namespace-or-type-name</span>
occurs is enclosed by a namespace declaration for <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> and the namespace declaration contains
an <span class="Production">extern-alias-directive</span> or <span class="Production">using-alias-directive</span> that associates the name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> with a
namespace or type, then the <span class="Production">namespace-or-type-name</span>
is ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the <span class="Production">namespace-or-type-name</span> refers to the type constructed
with the given type arguments.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the location where the <span class="Production">namespace-or-type-name</span>
occurs is enclosed by a namespace declaration for <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>:</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and
the namespace declaration contains an <span class="Production">extern-alias-directive</span>
or <span class="Production">using-alias-directive</span> that associates the
name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
with an imported namespace or type, then the <span class="Production">namespace-or-type-name</span>
refers to that namespace or type.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the namespaces imported by the <span class="Production">using-namespace-directive</span>s
of the namespace declaration contain exactly one type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters, then the <span class="Production">namespace-or-type-name</span>
refers to that type constructed with the given type arguments.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the namespaces imported by the <span class="Production">using-namespace-directive</span>s
of the namespace declaration contain more than one type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters, then the <span class="Production">namespace-or-type-name</span> is
ambiguous and an error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the <span class="Production">namespace-or-type-name</span> is undefined and a compile-time
error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">namespace-or-type-name</span>
is of the form <span class="Codefragment"><span style="font-size:10.0pt">N.I</span></span>
or of the form <span class="Codefragment"><span style="font-size:10.0pt">N.I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>.
<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is
first resolved as a <span class="Production">namespace-or-type-name</span>. If
the resolution of <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is not successful, a compile-time error occurs. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">N.I</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">N.I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>
is resolved as follows:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> refers to a
namespace and <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
contains a nested namespace with name <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>, then the <span class="Production">namespace-or-type-name</span>
refers to that nested namespace.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> refers to a
namespace and <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
contains an accessible type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">namespace-or-type-name</span> refers to that type constructed
with the given type arguments.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> refers to a
(possibly constructed) class or struct type and <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> or any of its base classes contain a
nested accessible type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">namespace-or-type-name</span> refers to that type constructed
with the given type arguments. If there is more than one such type, the type
declared within the more derived type is selected. Note that if the meaning of <span class="Codefragment"><span style="font-size:10.0pt">N.I</span></span> is being
determined as part of resolving the base class specification of <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> then the
direct base class of <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is considered to be object (§10.1.4.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">N.I</span></span> is an
invalid<span class="Production"> namespace-or-type-name</span>, and a
compile-time error occurs.</p>

<p class="MsoNormal">A <span class="Production">namespace-or-type-name</span> is
permitted to reference a static class (§10.1.1.3) only if</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">namespace-or-type-name</span> is the <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> in a <span class="Production">namespace-or-type-name</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">T.I</span></span>, or</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">namespace-or-type-name</span> is the <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> in a <span class="Production">typeof-expression</span> (§7.5.11) of the form <span class="Codefragment"><span style="font-size:10.0pt">typeof(T)</span></span>.</p>

<h3><a name="_Toc445782989"></a><a name="_Ref450882555"></a><a name="_Toc251612949"></a><a name="_Ref512339446"></a><a name="_Toc156718120"></a><a name="_Toc156718121"></a>3.8.1 Fully qualified names</h3>

<p class="MsoNormal">Every namespace and type has a <span class="Term">fully
qualified name</span>, which uniquely identifies the namespace or type amongst
all others. The fully qualified name of a namespace or type <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is determined
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is a member of the global namespace, its fully qualified name is <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, its fully qualified name is <span class="Codefragment"><span style="font-size:10.0pt">S.N</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is the fully qualified name of the
namespace or type in which <span class="Codefragment"><span style="font-size:
10.0pt">N</span></span> is declared.</p>

<p class="MsoNormal">In other words, the fully qualified name of <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is the
complete hierarchical path of identifiers that lead to <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, starting
from the global namespace. Because every member of a namespace or type must
have a unique name, it follows that the fully qualified name of a namespace or
type is always unique.</p>

<p class="MsoNormal">The example below shows several namespace and type
declarations along with their associated fully qualified names.</p>

<p class="Code">class A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // A</p>

<p class="Code">namespace X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // X<br>
{<br>
&nbsp;&nbsp; class B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // X.B<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class C {}&nbsp;&nbsp;&nbsp;&nbsp; // X.B.C<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; namespace Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // X.Y<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class D {}&nbsp;&nbsp;&nbsp;&nbsp; // X.Y.D<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace X.Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // X.Y<br>
{<br>
&nbsp;&nbsp; class E {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // X.Y.E<br>
}</p>

<h2><a name="_Toc251612950"></a><a name="_Ref529681345">3.9 Automatic memory
management</a></h2>

<p class="MsoNormal">C# employs automatic memory management, which frees
developers from manually allocating and freeing the memory occupied by objects.
Automatic memory management policies are implemented by a <span class="Term">garbage
collector</span>. The memory management life cycle of an object is as follows:</p>

<p class="MsoListNumber">1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>When the object is created, memory is allocated for it, the constructor
is run, and the object is considered live.</p>

<p class="MsoListNumber">2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>If the object, or any part of it, cannot be accessed by any possible
continuation of execution, other than the running of destructors, the object is
considered no longer in use, and it becomes eligible for destruction. The C#
compiler and the garbage collector may choose to analyze code to determine
which references to an object may be used in the future. For instance, if a
local variable that is in scope is the only existing reference to an object,
but that local variable is never referred to in any possible continuation of
execution from the current execution point in the procedure, the garbage
collector may (but is not required to) treat the object as no longer in use.</p>

<p class="MsoListNumber">3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Once the object is eligible for destruction, at some unspecified later
time the destructor (§10.13) (if any) for the object is run. Unless overridden
by explicit calls, the destructor for the object is run once only.</p>

<p class="MsoListNumber">4.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Once the destructor for an object is run, if that object, or any part of
it, cannot be accessed by any possible continuation of execution, including the
running of destructors, the object is considered inaccessible and the object
becomes eligible for collection.</p>

<p class="MsoListNumber">5.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Finally, at some time after the object becomes eligible for collection,
the garbage collector frees the memory associated with that object.</p>

<p class="MsoNormal">The garbage collector maintains information about object
usage, and uses this information to make memory management decisions, such as
where in memory to locate a newly created object, when to relocate an object,
and when an object is no longer in use or inaccessible.</p>

<p class="MsoNormal">Like other languages that assume the existence of a garbage
collector, C# is designed so that the garbage collector may implement a wide
range of memory management policies. For instance, C# does not require that
destructors be run or that objects be collected as soon as they are eligible,
or that destructors be run in any particular order, or on any particular
thread.</p>

<p class="MsoNormal">The behavior of the garbage collector can be controlled, to
some degree, via static methods on the class <span class="Codefragment"><span style="font-size:10.0pt">System.GC</span></span>. This class can be used to
request a collection to occur, destructors to be run (or not run), and so
forth. </p>

<p class="MsoNormal">Since the garbage collector is allowed wide latitude in
deciding when to collect objects and run destructors, a conforming
implementation may produce output that differs from that shown by the following
code. The program</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; ~A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Destruct instance of A");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; object Ref;</p>

<p class="Code">&nbsp;&nbsp; public B(object o) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ref = o;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; ~B() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Destruct instance of B");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = new B(new A());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.Collect();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.WaitForPendingFinalizers();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">creates an instance of class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and an instance of class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>. These
objects become eligible for garbage collection when the variable <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is assigned
the value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
since after this time it is impossible for any user-written code to access
them. The output could be either</p>

<p class="Code">Destruct instance of A<br>
Destruct instance of B</p>

<p class="MsoNormal">or</p>

<p class="Code">Destruct instance of B<br>
Destruct instance of A</p>

<p class="MsoNormal">because the language imposes no constraints on the order in
which objects are garbage collected.</p>

<p class="MsoNormal">In subtle cases, the distinction between “eligible for
destruction” and “eligible for collection” can be important. For example, </p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; ~A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Destruct instance of A");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.F");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test.RefA = this;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public A Ref;</p>

<p class="Code">&nbsp;&nbsp; ~B() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Destruct instance of B");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ref.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; public static A RefA;<br>
&nbsp;&nbsp; public static B RefB;</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefB = new B();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefA = new A();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefB.Ref = RefA;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefB = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RefA = null;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // A and B now eligible for destruction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.Collect();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.WaitForPendingFinalizers();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // B now eligible for collection, but A is not<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (RefA != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("RefA is not null");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the above program, if the garbage collector chooses to
run the destructor of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
before the destructor of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
then the output of this program might be:</p>

<p class="Code">Destruct instance of A<br>
Destruct instance of B<br>
A.F<br>
RefA is not null</p>

<p class="MsoNormal">Note that although the instance of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> was not in use and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>’s destructor
was run, it is still possible for methods of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> (in this case, <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>) to be called
from another destructor. Also, note that running of a destructor may cause an
object to become usable from the mainline program again. In this case, the
running of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s
destructor caused an instance of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> that was previously not in use to
become accessible from the live reference <span class="Codefragment"><span style="font-size:10.0pt">Test.RefA</span></span>. After the call to <span class="Codefragment"><span style="font-size:10.0pt">WaitForPendingFinalizers</span></span>,
the instance of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is eligible for collection, but the instance of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not, because of the reference <span class="Codefragment"><span style="font-size:10.0pt">Test.RefA</span></span>.</p>

<p class="MsoNormal">To avoid confusion and unexpected behavior, it is generally
a good idea for destructors to only perform cleanup on data stored in their
object's own fields, and not to perform any actions on referenced objects or
static fields.</p>

<p class="MsoNormal">An alternative to using destructors is to let a class
implement the <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span>
interface. This allows the client of the object to determine when to release
the resources of the object, typically by accessing the object as a resource in
a <span class="Codefragment"><span style="font-size:10.0pt">using</span></span> statement
(§8.13).</p>

<h2><a name="_Toc251612951"></a><a name="_Toc525095569">3.10 Execution order</a></h2>

<p class="MsoNormal">Execution of a C# program proceeds such that the side
effects of each executing thread are preserved at critical execution points. A <span class="Term">side effect</span>&nbsp;is defined as a read or write of a volatile
field, a write to a non-volatile variable, a write to an external resource, and
the throwing of an exception. The critical execution points at which the order
of these side effects must be preserved are references to volatile fields (§10.5.3), <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span>
statements (§8.12), and thread creation and termination. The execution
environment is free to change the order of execution of a C# program, subject
to the following constraints:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Data dependence is preserved within a thread of execution. That
is, the value of each variable is computed as if all statements in the thread
were executed in original program order.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Initialization ordering rules are preserved (§10.5.4 and §10.5.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The ordering of side effects is preserved with respect to
volatile reads and writes (§10.5.3). Additionally, the execution environment
need not evaluate part of an expression if it can deduce that that expression’s
value is not used and that no needed side effects are produced (including any
caused by calling a method or accessing a volatile field). When program
execution is interrupted by an asynchronous event (such as an exception thrown
by another thread), it is not guaranteed that the observable side effects are
visible in the original program order. </p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section6">

<h1><a name="_Ref450882013"></a><a name="_Toc251612952"></a><a name="_Ref492783637">4. Types</a></h1>

<p class="MsoNormal">The types of the C# language are divided into two main
categories: <span class="Term">Value types</span> and <span class="Term">reference
types</span>. Both value types and reference types may be <span class="Term">generic
types</span>, which take one or more <span class="Term">type parameters</span>. Type
parameters can designate both value types and reference types.</p>

<p class="Grammar">type:<br>
value-type<br>
reference-type <br>
type-parameter</p>

<p class="MsoNormal">A third category of types, pointers, is available only in
unsafe code. This is discussed further in §18.2.</p>

<p class="MsoNormal">Value types differ from reference types in that variables of
the value types directly contain their data, whereas variables of the reference
types store <span class="Term">references</span> to their data, the latter being
known as <span class="Term">objects</span>. With reference types, it is possible
for two variables to reference the same object, and thus possible for
operations on one variable to affect the object referenced by the other
variable. With value types, the variables each have their own copy of the data,
and it is not possible for operations on one to affect the other.</p>

<p class="MsoNormal">C#’s type system is unified such that <em>a value of any
type can be treated as an object</em>. Every type in C# directly or indirectly
derives from the <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
class type, and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
is the ultimate base class of all types. Values of reference types are treated
as objects simply by viewing the values as type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. Values of value types are
treated as objects by performing boxing and unboxing operations (§4.3).</p>

<h2><a name="_Toc251612953"></a><a name="_Ref450883570">4.1 Value types</a></h2>

<p class="MsoNormal">A value type is either a struct type or an enumeration type.
C# provides a set of predefined struct types called the <span class="Term">simple
types</span>. The simple types are identified through reserved words.</p>

<p class="Grammar">value-type:<br>
struct-type<br>
enum-type</p>

<p class="Grammar">struct-type:<br>
type-name<br>
simple-type <span lang="FR"><br>
nullable-type</span></p>

<p class="Grammar">simple-type:<br>
numeric-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">bool</span></span></p>

<p class="Grammar">numeric-type:<br>
integral-type<br>
floating-point-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">decimal</span></span></p>

<p class="Grammar">integral-type:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sbyte<br>
byte<br>
short<br>
ushort<br>
int<br>
uint<br>
long<br>
ulong<br>
char</span></span></p>

<p class="Grammar">floating-point-type:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">float<br>
double</span></span></p>

<p class="Grammar"><span lang="FR">nullable-type:<br>
non-nullable-value-type&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">?</span></span></p>

<p class="Grammar"><span lang="FR">non-nullable-value-type:<br>
type</span></p>

<p class="Grammar">enum-type:<br>
type-name</p>

<p class="MsoNormal">Unlike a variable of a reference type, a variable of a value
type can contain the value <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span> only if the value type is a nullable type.&nbsp; For
every non-nullable value type there is a corresponding nullable value type
denoting the same set of values plus the value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">Assignment to a variable of a value type creates a <em>copy</em>
of the value being assigned. This differs from assignment to a variable of a
reference type, which copies the reference but not the object identified by the
reference.</p>

<h3><a name="_Toc251612954"></a><a name="_Ref8386026">4.1.1 The
System.ValueType type</a></h3>

<p class="MsoNormal"><a name="_Ref449816039">All value types implicitly inherit
from the class </a><span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>,
which, in turn, inherits from class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. It is not possible for any type
to derive from a value type, and value types are thus implicitly sealed (§10.1.1.2).</p>

<p class="MsoNormal">Note that <span class="Codefragment"><span style="font-size:
10.0pt">System.ValueType</span></span> is not itself a <span class="Production">value-type</span>.
Rather, it is a <span class="Production">class-type</span> from which all <span class="Production">value-type</span>s are automatically derived.</p>

<h3><a name="_Toc251612955"></a><a name="_Ref12431505"></a><a name="_Ref12431475">4.1.2 Default constructors</a></h3>

<p class="MsoNormal">All value types implicitly declare a public parameterless
instance constructor called the <span class="Term">default constructor</span>.
The default constructor returns a zero-initialized instance known as the <span class="Term">default value</span> for the value type:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For all <span class="Production">simple-types</span>, the default
value is the value produced by a bit pattern of all zeros:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">'\x0000'</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">0.0f</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">0.0d</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">0.0m</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, the
default value is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For an <span class="Production">enum-type</span> <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>, the default
value is <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>,
converted to the type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a <span class="Production">struct-type</span>, the default
value is the value produced by setting all value type fields to their default
value and all reference type fields to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a <span class="Production">nullable-type</span> the default
value is an instance for which the <span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span> property is false and the <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> property is
undefined. The default value is also known as the <span class="Term">null value</span>
of the nullable type. </p>

<p class="MsoNormal">Like any other instance constructor, the default constructor
of a value type is invoked using the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> operator. For efficiency reasons,
this requirement is not intended to actually have the implementation generate a
constructor call. In the example below, variables <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">j</span></span> are both initialized to zero.</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j = new int();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Because every value type implicitly has a public
parameterless instance constructor, it is not possible for a struct type to
contain an explicit declaration of a parameterless constructor. A struct type
is however permitted to declare parameterized instance constructors (§11.3.8).</p>

<h3><a name="_Toc251612956">4.1.3 Struct types</a></h3>

<p class="MsoNormal">A struct type is a value type that can declare constants,
fields, methods, properties, indexers, operators, instance constructors, static
constructors, and nested types. The declaration of struct types is described in
§11.1.</p>

<h3><a name="_Toc251612957"></a><a name="_Ref462545969">4.1.4 Simple types</a></h3>

<p class="MsoNormal">C# provides a set of predefined struct types called the <span class="Term">simple types</span>. The simple types are identified through
reserved words, but these reserved words are simply aliases for predefined
struct types in the <span class="Codefragment"><span style="font-size:10.0pt">System</span></span>
namespace, as described in the table below.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Reserved word</b></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Aliased type</b></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.SByte</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">byte</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Byte</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">short</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Int16</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.UInt16</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">int</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Int32</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">uint</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.UInt32</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">long</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Int64</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.UInt64</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">char</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Char</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">float</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Single</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">double</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Double</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">bool</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Boolean</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal">Because a simple type aliases a struct type, every simple
type has members. For example, <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> has the members declared in <span class="Codefragment"><span style="font-size:10.0pt">System.Int32</span></span> and the members inherited
from <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>,
and the following statements are permitted:</p>

<p class="Code">int i = int.MaxValue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // System.Int32.MaxValue constant<br>
string s = i.ToString();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // System.Int32.ToString() instance method<br>
string t = 123.ToString();&nbsp;&nbsp;&nbsp; // System.Int32.ToString() instance method</p>

<p class="MsoNormal">The simple types differ from other struct types in that they
permit certain additional operations:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Most simple types permit values to be created by writing <span class="Production">literals</span> (§2.4.4). For example, <span class="Codefragment"><span style="font-size:10.0pt">123</span></span> is a
literal of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">'a'</span></span>
is a literal of type <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.
C# makes no provision for literals of struct types in general, and non-default
values of other struct types are ultimately always created through instance
constructors of those struct types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the operands of an expression are all simple type constants,
it is possible for the compiler to evaluate the expression at compile-time.
Such an expression is known as a <span class="Production">constant-expression</span>
(§7.19). Expressions involving operators defined by other struct types are not
considered to be constant expressions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Through <span class="Codefragment"><span style="font-size:10.0pt">const</span></span>
declarations it is possible to declare constants of the simple types (§10.4). It is not possible to have constants of other struct types, but a similar
effect is provided by <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
fields.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Conversions involving simple types can participate in evaluation
of conversion operators defined by other struct types, but a user-defined
conversion operator can never participate in evaluation of another user-defined
operator (§6.4.3).</p>

<h3><a name="_Toc251612958"></a><a name="_Ref470249725">4.1.5 Integral types</a></h3>

<p class="MsoNormal">C# supports nine integral types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>. The integral types have the
following sizes and ranges of values:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>
type represents signed 8-bit integers with values between –128 and 127.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>
type represents unsigned 8-bit integers with values between 0 and 255.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>
type represents signed 16-bit integers with values between –32768 and 32767.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>
type represents unsigned 16-bit integers with values between 0 and 65535.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
type represents signed 32-bit integers with values between –2147483648 and
2147483647.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>
type represents unsigned 32-bit integers with values between 0 and 4294967295.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
type represents signed 64-bit integers with values between –9223372036854775808
and 9223372036854775807.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
type represents unsigned 64-bit integers with values between 0 and
18446744073709551615.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
type represents unsigned 16-bit integers with values between 0 and 65535. The
set of possible values for the <span class="Codefragment"><span style="font-size:
10.0pt">char</span></span> type corresponds to the Unicode character set.
Although <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
has the same representation as <span class="Codefragment"><span style="font-size:
10.0pt">ushort</span></span>, not all operations permitted on one type are
permitted on the other.</p>

<p class="MsoNormal">The integral-type unary and binary operators always operate
with signed 32-bit precision, unsigned 32-bit precision, signed 64-bit
precision, or unsigned 64-bit precision:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the unary <span class="Codefragment"><span style="font-size:
10.0pt">+</span></span> and ~ operators, the operand is converted to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the first
of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> that can
fully represent all possible values of the operand. The operation is then
performed using the precision of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the unary <span class="Codefragment"><span style="font-size:
10.0pt">–</span></span> operator, the operand is converted to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the first
of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
that can fully represent all possible values of the operand. The operation is
then performed using the precision of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. The unary <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> operator
cannot be applied to operands of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the binary <span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">–</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>
operators, the operands are converted to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the first of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> that can
fully represent all possible values of both operands. The operation is then
performed using the precision of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (or <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> for the
relational operators). It is not permitted for one operand to be of type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> and the
other to be of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
with the binary operators.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the binary <span class="Codefragment"><span style="font-size:
10.0pt">&lt;&lt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span> operators, the left operand is
converted to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is the first of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> that can
fully represent all possible values of the operand. The operation is then
performed using the precision of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
type is classified as an integral type, but it differs from the other integral
types in two ways:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>There are no implicit conversions from other types to the <span class="Codefragment"><span style="font-size:10.0pt">char</span></span> type. In
particular, even though the <span class="Codefragment"><span style="font-size:
10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">byte</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span> types have ranges of values that
are fully representable using the <span class="Codefragment"><span style="font-size:10.0pt">char</span></span> type, implicit conversions from <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">char</span></span> do not
exist.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constants of the <span class="Codefragment"><span style="font-size:
10.0pt">char</span></span> type must be written as <span class="Production">character-literal</span>s
or as <span class="Production">integer-literal</span>s in combination with a cast
to type <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.
For example, <span class="Codefragment"><span style="font-size:10.0pt">(char)10</span></span>
is the same as <span class="Codefragment"><span style="font-size:10.0pt">'\x000A'</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operators and statements are used to control overflow checking for
integral-type arithmetic operations and conversions (§7.6.12). In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, an overflow produces a compile-time error or causes a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
to be thrown. In an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, overflows are ignored and any high-order bits that do not fit in the
destination type are discarded.</p>

<h3><a name="_Toc251612959">4.1.6 Floating point types</a></h3>

<p class="MsoNormal">C# supports two floating point types: <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>. The <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> types
are represented using the 32-bit single-precision and 64-bit double-precision
IEEE 754 formats, which provide the following sets of values:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Positive zero and negative zero. In most situations, positive
zero and negative zero behave identically as the simple value zero, but certain
operations distinguish between the two (§7.8.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Positive infinity and negative infinity. Infinities are produced
by such operations as dividing a non-zero number by zero. For example, <span class="Codefragment"><span style="font-size:10.0pt">1.0</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0.0</span></span> yields
positive infinity, and <span class="Codefragment"><span style="font-size:10.0pt">–1.0</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0.0</span></span> yields
negative infinity.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Term">Not-a-Number</span> value, often abbreviated
 NaN. NaNs are produced by invalid floating-point operations, such as dividing
zero by zero.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The finite set of non-zero values of the form <span class="Production">s</span>&nbsp;×&nbsp;<span class="Production">m</span>&nbsp;×&nbsp;2<span class="Production"><sup>e</sup></span>, where <span class="Production">s</span> is
1 or −1, and <span class="Production">m</span> and <span class="Production">e</span>
are determined by the particular floating-point type: For <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, 0 &lt; <span class="Production">m</span> &lt; 2<sup>24</sup> and −149 ≤ <span class="Production">e</span> ≤ 104, and for <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, 0 &lt; <span class="Production">m</span>
&lt; 2<sup>53</sup> and −1075 ≤ <span class="Production">e</span>
≤ 970. Denormalized floating-point numbers are considered valid non-zero
values.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
type can represent values ranging from approximately 1.5&nbsp;×&nbsp;10<sup>−45</sup>
to 3.4&nbsp;×&nbsp;10<sup>38</sup> with a precision of 7 digits.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
type can represent values ranging from approximately 5.0&nbsp;×&nbsp;10<sup>−324</sup>
to 1.7&nbsp;×&nbsp;10<sup>308</sup> with a precision of 15-16 digits.</p>

<p class="MsoNormal">If one of the operands of a binary operator is of a
floating-point type, then the other operand must be of an integral type or a
floating-point type, and the operation is evaluated as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If one of the operands is of an integral type, then that operand
is converted to the floating-point type of the other operand.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Then, if either of the operands is of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, the
other operand is converted to <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span>, the operation is performed using at least <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> range
and precision, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> (or <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> for the relational operators).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the operation is performed using at least <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> range and
precision, and the type of the result is <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> (or <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> for the relational operators).</p>

<p class="MsoNormal">The floating-point operators, including the assignment
operators, never produce exceptions. Instead, in exceptional situations,
floating-point operations produce zero, infinity, or NaN, as described below:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the result of a floating-point operation is too small for the
destination format, the result of the operation becomes positive zero or
negative zero.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the result of a floating-point operation is too large for the
destination format, the result of the operation becomes positive infinity or
negative infinity.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a floating-point operation is invalid, the result of the
operation becomes NaN.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If one or both operands of a floating-point operation is NaN, the
result of the operation becomes NaN.</p>

<p class="MsoNormal">Floating-point operations may be performed with higher
precision than the result type of the operation. For example, some hardware
architectures support an “extended” or “long double” floating-point type with
greater range and precision than the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> type, and implicitly perform all
floating-point operations using this higher precision type. Only at excessive
cost in performance can such hardware architectures be made to perform
floating-point operations with <em>less</em> precision, and rather than require
an implementation to forfeit both performance and precision, C# allows a higher
precision type to be used for all floating-point operations. Other than
delivering more precise results, this rarely has any measurable effects.
However, in expressions of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>, where the multiplication produces a
result that is outside the <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span> range, but the subsequent division brings the
temporary result back into the <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span> range, the fact that the expression is evaluated
in a higher range format may cause a finite result to be produced instead of an
infinity.</p>

<h3><a name="_Toc251612960"></a><a name="_Ref448226989">4.1.7 The decimal type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
type is a 128-bit data type suitable for financial and monetary calculations.
The <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
type can represent values ranging from 1.0&nbsp;×&nbsp;10<sup>−28</sup>
to approximately 7.9&nbsp;×&nbsp;10<sup>28</sup> with 28-29 significant digits.</p>

<p class="MsoNormal">The finite set of values of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> are of the form (–1)<sup>s&nbsp;</sup>×&nbsp;<span class="Production">c</span>&nbsp;×&nbsp;10<sup>-e</sup>, where the sign <span class="Production">s</span> is 0 or 1, the coefficient <span class="Production">c</span>
is given by 0&nbsp;≤&nbsp;<span class="Production">c</span>&nbsp;&lt;&nbsp;2<sup>96</sup>,
and the scale <span class="Production">e</span> is such that 0&nbsp;≤&nbsp;<span class="Production">e</span>&nbsp;≤&nbsp;28.The <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> type does not support signed
zeros, infinities, or NaN's. A <span class="Codefragment"><span style="font-size:
10.0pt">decimal</span></span> is represented as a 96-bit integer scaled by a
power of ten. For <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>s
with an absolute value less than <span class="Codefragment"><span style="font-size:10.0pt">1.0m</span></span>, the value is exact to the 28<sup>th</sup>
decimal place, but no further. For <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>s with an absolute value greater
than or equal to <span class="Codefragment"><span style="font-size:10.0pt">1.0m</span></span>,
the value is exact to 28 or 29 digits. Contrary to the <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> data
types, decimal fractional numbers such as 0.1 can be represented exactly in the
<span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
representation. In the <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
representations, such numbers are often infinite fractions, making those
representations more prone to round-off errors.</p>

<p class="MsoNormal">If one of the operands of a binary operator is of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, then
the other operand must be of an integral type or of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>. If an
integral type operand is present, it is converted to <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> before the operation is
performed.</p>

<p class="MsoNormal">The result of an operation on values of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> is that
which would result from calculating an exact result (preserving scale, as
defined for each operator) and then rounding to fit the representation. Results
are rounded to the nearest representable value, and, when a result is equally
close to two representable values, to the value that has an even number in the
least significant digit position (this is known as “banker’s rounding”). A zero
result always has a sign of 0 and a scale of 0.</p>

<p class="MsoNormal">If a decimal arithmetic operation produces a value less than
or equal to 5&nbsp;×&nbsp;10<sup>-29</sup> in absolute value, the result of the
operation becomes zero. If a <span class="Codefragment"><span style="font-size:
10.0pt">decimal</span></span> arithmetic operation produces a result that is
too large for the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
format, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
type has greater precision but smaller range than the floating-point types.
Thus, conversions from the floating-point types to <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> might produce overflow
exceptions, and conversions from <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> to the floating-point types
might cause loss of precision. For these reasons, no implicit conversions exist
between the floating-point types and <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, and without explicit casts, it
is not possible to mix floating-point and <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> operands in the same expression.</p>

<h3><a name="_Toc251612961">4.1.8 The bool type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
type represents boolean logical quantities. The possible values of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">No standard conversions exist between <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> and other
types. In particular, the <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
type is distinct and separate from the integral types, and a <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> value
cannot be used in place of an integral value, and vice versa.</p>

<p class="MsoNormal">In the C and C++ languages, a zero integral or
floating-point value, or a null pointer can be converted to the boolean value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, and a
non-zero integral or floating-point value, or a non-null pointer can be
converted to the boolean value <span class="Codefragment"><span style="font-size:
10.0pt">true</span></span>. In C#, such conversions are accomplished by
explicitly comparing an integral or floating-point value to zero, or by
explicitly comparing an object reference to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<h3><a name="_Ref169607001"></a><a name="_Toc251612962">4.1.9 Enumeration types</a></h3>

<p class="MsoNormal">An enumeration type is a distinct type with named constants.
Every enumeration type has an underlying type, which must be <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>. The set
of values of the enumeration type is the same as the set of values of the
underlying type. Values of the enumeration type are not restricted to the
values of the named constants. Enumeration types are defined through
enumeration declarations (§14.1).</p>

<h3><a name="_Toc251612963"></a><a name="_Ref174229467"></a><a name="_Ref174223244"></a><a name="_Ref174223234"></a><a name="_Ref174223218">4.1.10
Nullable types</a></h3>

<p class="MsoNormal">A nullable type can represent all values of its <span class="Term">underlying type</span> plus an additional null value. A nullable
type is written <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
the underlying type. This syntax is shorthand for <span class="Codefragment"><span style="font-size:10.0pt">System.Nullable&lt;T&gt;</span></span>, and the two
forms can be used interchangeably. </p>

<p class="MsoNormal">A <span class="Term">non-nullable value type</span> conversely
is any value type other than <span class="Codefragment"><span style="font-size:
10.0pt">System.Nullable&lt;T&gt;</span></span> and its shorthand <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> (for any <span class="Codefragment"><span style="font-size:10.0pt">T)</span></span>, plus any
type parameter that is constrained to be a non-nullable value type (that is,
any type parameter with a <span class="Codefragment"><span style="font-size:10.0pt">struct</span></span>
constraint). The <span class="Codefragment"><span style="font-size:10.0pt">System.Nullable&lt;T&gt;</span></span>
type specifies the value type constraint for <span class="Codefragment"><span style="font-size:10.0pt">T (</span></span>§10.1.5<span class="Codefragment"><span style="font-size:10.0pt">)</span></span>, which means that the underlying type
of a nullable type can be any non-nullable value type. The underlying type of a
nullable type cannot be a nullable type or a reference type. For example, <span class="Codefragment"><span style="font-size:10.0pt">int??</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">string?</span></span> are
invalid types.</p>

<p class="MsoNormal">An instance of a nullable type <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> has two public read-only properties:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span>
property of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span>
property of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span></p>

<p class="MsoNormal">An instance for which <span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span> is true is said to be non-null.
A non-null instance contains a known value and <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> returns that value.</p>

<p class="MsoNormal">An instance for which <span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span> is false is said to be null. A
null instance has an undefined value. Attempting to read the <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> of a null
instance causes a <span class="Codefragment"><span style="font-size:10.0pt">System.InvalidOperationException</span></span>
to be thrown. The process of accessing the <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> property of a nullable instance is
referred to as <span class="Term">unwrapping</span>.</p>

<p class="MsoNormal">In addition to the default constructor, every nullable type <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> has a public
constructor that takes a single argument of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. Given a value <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, a
constructor invocation of the form</p>

<p class="Code">new T?(x)</p>

<p class="MsoNormal">creates a non-null instance of <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> for which the <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> property
is <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. The
process of creating a non-null instance of a nullable type for a given value is
referred to as <span class="Term">wrapping</span>.</p>

<p class="MsoNormal">Implicit conversions are available from the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> literal to
<span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> (§6.1.5) and from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> (§6.1.4).</p>

<h2><a name="_Toc251612964"></a><a name="_Ref496324790">4.2 Reference types</a></h2>

<p class="MsoNormal">A reference type is a class type, an interface type, an
array type, or a delegate type.</p>

<p class="Grammar">reference-type:<br>
class-type<br>
interface-type<br>
array-type<br>
delegate-type</p>

<p class="Grammar">class-type:<br>
type-name<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">object<br>
dynamic</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">string</span></span></p>

<p class="Grammar">interface-type:<br>
type-name</p>

<p class="Grammar">array-type:<br>
non-array-type&nbsp;&nbsp; rank-specifiers</p>

<p class="Grammar">non-array-type:<br>
type</p>

<p class="Grammar">rank-specifiers:<br>
rank-specifier<br>
rank-specifiers&nbsp;&nbsp; rank-specifier</p>

<p class="Grammar">rank-specifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
dim-separators<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">&nbsp;dim-separators:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
dim-separators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span></p>

<p class="Grammar">delegate-type:<br>
type-name</p>

<p class="MsoNormal">A reference type value is a reference to an <span class="Term">instance</span> of the type, the latter known as an <span class="Term">object</span>. The special value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> is compatible with all reference
types and indicates the absence of an instance.</p>

<h3><a name="_Toc251612965">4.2.1 Class types</a></h3>

<p class="MsoNormal">A class type defines a data structure that contains data
members (constants and fields), function members (methods, properties, events,
indexers, operators, instance constructors, destructors and static
constructors), and nested types. Class types support inheritance, a mechanism
whereby derived classes can extend and specialize base classes. Instances of
class types are created using <span class="Production">object-creation-expressions</span>
(§7.6.10.1).</p>

<p class="MsoNormal">Class types are described in §10.</p>

<p class="MsoNormal">Certain predefined class types have special meaning in the
C# language, as described in the table below.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Class type</b></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Description</b></p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The ultimate base class of all other types. See §4.2.2.  </p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.String</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The string type of the C# language. See §4.2.4.</p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The base class of all value types. See §4.1.1.</p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The base class of all enum types. See §14.</p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The base class of all array types. See §12.</p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The base class of all delegate types. See §15.</p>
  </td>
 </tr>
 <tr>
  <td width="151" valign="top" style="width:113.4pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span></p>
  </td>
  <td width="366" valign="top" style="width:274.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">The base class of all exception types. See §16.</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h3><a name="_Toc251612966"></a><a name="_Ref8195897">4.2.2 The object type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
class type is the ultimate base class of all other types. Every type in C#
directly or indirectly derives from the <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> class type.</p>

<p class="MsoNormal">The keyword <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> is simply an alias for the predefined class <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>.</p>

<h3><a name="_Toc251612967">4.2.3 The dynamic type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
type, like <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
can reference any object. When operators are applied to expressions of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, their
resolution is deferred until the program is run. Thus, if the operator cannot
legally be applied to the referenced object, no error is given during
compilation. Instead an exception will be thrown when resolution of the
operator fails at run-time.</p>

<p class="MsoNormal">The dynamic type is further described in §4.7, and dynamic binding in §7.2.2.</p>

<h3><a name="_Toc251612968"></a><a name="_Ref470249751">4.2.4 The string type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
type is a sealed class type that inherits directly from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.
Instances of the <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
class represent Unicode character strings.</p>

<p class="MsoNormal">Values of the <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> type can be written as string
literals (§2.4.4.5).</p>

<p class="MsoNormal">The keyword <span class="Codefragment"><span style="font-size:
10.0pt">string</span></span> is simply an alias for the predefined class <span class="Codefragment"><span style="font-size:10.0pt">System.String</span></span>.</p>

<h3><a name="_Toc251612969">4.2.5 Interface types</a></h3>

<p class="MsoNormal">An interface defines a contract. A class or struct that
implements an interface must adhere to its contract. An interface may inherit
from multiple base interfaces, and a class or struct may implement multiple
interfaces.</p>

<p class="MsoNormal">Interface types are described in §13.</p>

<h3><a name="_Toc251612970">4.2.6 Array types</a></h3>

<p class="MsoNormal">An array is a data structure that contains zero or more
variables which are accessed through computed indices. The variables contained
in an array, also called the elements of the array, are all of the same type,
and this type is called the element type of the array.</p>

<p class="MsoNormal">Array types are described in §12.</p>

<h3><a name="_Toc251612971">4.2.7 Delegate types</a></h3>

<p class="MsoNormal">A delegate is a data structure that refers to one or more
methods. For instance methods, it also refers to their corresponding object
instances.</p>

<p class="MsoNormal">The closest equivalent of a delegate in C or C++ is a
function pointer, but whereas a function pointer can only reference static
functions, a delegate can reference both static and instance methods. In the
latter case, the delegate stores not only a reference to the method’s entry point,
but also a reference to the object instance on which to invoke the method.</p>

<p class="MsoNormal">Delegate types are described in §15.</p>

<h2><a name="_Toc251612972"></a><a name="_Ref449152117">4.3 Boxing and unboxing</a></h2>

<p class="MsoNormal">The concept of boxing and unboxing is central to C#’s type
system. It provides a bridge between <span class="Production">value-type</span>s
and <span class="Production">reference-type</span>s by permitting any value of a <span class="Production">value-type</span> to be converted to and from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. Boxing
and unboxing enables a unified view of the type system wherein a value of any
type can ultimately be treated as an object.</p>

<h3><a name="_Toc251612973"></a><a name="_Ref448885981">4.3.1 Boxing
conversions</a></h3>

<p class="MsoNormal">A boxing conversion permits a <span class="Production">value-type</span>
to be implicitly converted to a <span class="Production">reference-type</span>.
The following boxing conversions exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">value-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">value-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">non-nullable-value-type</span> to
any <span class="Production">interface-type</span> implemented by the <span class="Production">value-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">nullable-type</span> to any <span class="Production">interface-type</span> implemented by the underlying type of
the <span class="Production">nullable-type.</span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">enum-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">nullable-type</span> with an
underlying <span class="Production">enum-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Note that an
implicit conversion from a type parameter will be executed as a boxing
conversion if at run-time it ends up converting from a value type to a
reference type (§6.1.10).</p>

<p class="MsoNormal">Boxing a value of a <span class="Production">non-nullable-value-type</span>
consists of allocating an object instance and copying the <span class="Production">non-nullable-value-type</span> value into that instance.</p>

<p class="MsoNormal">Boxing a value of a <span class="Production">nullable-type</span>
produces a null reference if it is the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> value (<span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>), or the result of unwrapping and
boxing the underlying value otherwise.</p>

<p class="MsoNormal">The actual process of boxing a value of a <span class="Production">non-nullable-value-type</span> is best explained by imagining
the existence of a generic <span class="Term">boxing class</span>, which behaves
as if it were declared as follows:</p>

<p class="Code">sealed class Box&lt;T&gt;: System.ValueType<br>
{<br>
&nbsp;&nbsp; T value;</p>

<p class="Code">&nbsp;&nbsp; <span lang="FR">public Box(T t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = t;<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">Boxing of a value <span class="Codefragment"><span style="font-size:10.0pt">v</span></span> of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> now consists of executing the
expression <span class="Codefragment"><span style="font-size:10.0pt">new Box&lt;T&gt;(v)</span></span>,
and returning the resulting instance as a value of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. Thus,
the statements</p>

<p class="Code">int i = 123;<br>
object box = i;</p>

<p class="MsoNormal">conceptually correspond to</p>

<p class="Code">int i = 123;<br>
object box = new Box&lt;int&gt;(i);</p>

<p class="MsoNormal">A boxing class like <span class="Codefragment"><span style="font-size:10.0pt">Box&lt;T&gt;</span></span> above doesn’t actually
exist and the dynamic type of a boxed value isn’t actually a class type.
Instead, a boxed value of type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> has the dynamic type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and a dynamic type check using the <span class="Codefragment"><span style="font-size:10.0pt">is</span></span> operator can
simply reference type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
For example,</p>

<p class="Code">int i = 123;<br>
object box = i;<br>
if (box is int) {<br>
&nbsp;&nbsp; Console.Write("Box contains an int");<br>
}</p>

<p class="MsoNormal">will output the string “<span class="Codefragment"><span style="font-size:10.0pt">Box contains an int</span></span>” on the console.</p>

<p class="MsoNormal">A boxing conversion implies <em>making a copy</em> of the
value being boxed. This is different from a conversion of a <span class="Production">reference-type</span> to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, in which the value continues to
reference the same instance and simply is regarded as the less derived type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. For
example, given the declaration</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; public int x, y;</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the following statements</p>

<p class="Code">Point p = new Point(10, 10);<br>
object box = p;<br>
p.x = 20;<br>
Console.Write(((Point)box).x);</p>

<p class="MsoNormal">will output the value 10 on the console because the implicit
boxing operation that occurs in the assignment of <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">box</span></span> causes the value of <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to be copied.
Had <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>
been declared a <span class="Codefragment"><span style="font-size:10.0pt">class</span></span>
instead, the value 20 would be output because <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">box</span></span> would reference the same instance.</p>

<h3><a name="_Toc251612974"></a><a name="_Ref448886573">4.3.2 Unboxing
conversions</a></h3>

<p class="MsoNormal">An unboxing conversion permits a <span class="Production">reference-type</span>
to be explicitly converted to a <span class="Production">value-type</span>. The
following unboxing conversions exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the type <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> to any <span class="Production">value-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the type <span class="Codefragment"><span style="font-size:
10.0pt">System.ValueType</span></span> to any <span class="Production">value-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">interface-type</span> to any <span class="Production">non-nullable-value-type</span> that implements the <span class="Production">interface-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">interface-type</span> to any <span class="Production">nullable-type</span> whose underlying type implements the <span class="Production">interface-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the type <span class="Codefragment"><span style="font-size:
10.0pt">System.Enum</span></span> to any <span class="Production">enum-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the type <span class="Codefragment"><span style="font-size:
10.0pt">System.Enum</span></span> to any <span class="Production">nullable-type</span>
with an underlying <span class="Production">enum-type</span>.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Note that an
explicit conversion to a type parameter will be executed as an unboxing
conversion if at run-time it ends up converting from a reference type to a
value type (§6.2.6).</p>

<p class="MsoNormal">An unboxing operation to a <span class="Production">non-nullable-value-type</span>
consists of first checking that the object instance is a boxed value of the
given <span class="Production">non-nullable-value-type</span>, and then copying
the value out of the instance.</p>

<p class="MsoNormal">Unboxing to a <span class="Production">nullable-type</span> produces
the null value of the <span class="Production">nullable-type</span> if the source
operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
or the wrapped result of unboxing the object instance to the underlying type of
the <span class="Production">nullable-type</span> otherwise.</p>

<p class="MsoNormal">Referring to the imaginary boxing class described in the
previous section, an unboxing conversion of an object <span class="Codefragment"><span style="font-size:10.0pt">box</span></span> to a <span class="Production">value-type</span>
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
consists of executing the expression <span class="Codefragment"><span style="font-size:10.0pt">((Box&lt;T&gt;)box).value</span></span>. Thus, the
statements</p>

<p class="Code">object box = 123;<br>
int i = (int)box;</p>

<p class="MsoNormal">conceptually correspond to</p>

<p class="Code">object box = new Box&lt;int&gt;(123);<br>
int i = ((Box&lt;int&gt;)box).value;</p>

<p class="MsoNormal">For an unboxing conversion to a given <span class="Production">non-nullable-value-type</span> to succeed at run-time, the
value of the source operand must be a reference to a boxed value of that <span class="Production">non-nullable-value-type</span>. If the source operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown. If the source operand is a reference to an incompatible object, a <span class="Codefragment"><span style="font-size:10.0pt">System.InvalidCastException</span></span>
is thrown.</p>

<p class="MsoNormal"><a name="_Ref168301734">For an unboxing conversion to a
given </a><span class="Production">nullable-type</span> to succeed at run-time,
the value of the source operand must be either <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> or a reference to a boxed value of
the underlying <span class="Production">non-nullable-value-type</span> of the <span class="Production">nullable-type</span>. If the source operand is a reference to
an incompatible object, a <span class="Codefragment"><span style="font-size:10.0pt">System.InvalidCastException</span></span>
is thrown.</p>

<h2><a name="_Toc251612975"></a><a name="_Ref174235606"></a><a name="_Ref174230028"></a><a name="_Ref174229358">4.4 Constructed types</a></h2>

<p class="MsoNormal">A generic type declaration, by itself, denotes an <span class="Term">unbound generic type</span> that is used as a “blueprint” to form
many different types, by way of applying <span class="Term">type arguments</span>.
The type arguments are written within angle brackets (<span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>) immediately following the name of
the generic type. A type that includes at least one type argument is called a <span class="Term">constructed type</span>. A constructed type can be used in most
places in the language in which a type name can appear. An unbound generic type
can only be used within a <span class="Production">typeof-expression</span> (§7.6.11).</p>

<p class="MsoNormal">Constructed types can also be used in expressions as simple
names (§7.6.2) or when accessing a member (§7.6.4).</p>

<p class="MsoNormal">When a <span class="Production">namespace-or-type-name</span>
is evaluated, only generic types with the correct number of type parameters are
considered. Thus, it is possible to use the same identifier to identify
different types, as long as the types have different numbers of type
parameters. This is useful when mixing generic and non-generic classes in the
same program:</p>

<p class="Code">namespace Widgets<br>
{<br>
&nbsp;&nbsp; class Queue {...}<br>
&nbsp;&nbsp; class Queue&lt;TElement&gt; {...}<br>
}</p>

<p class="Code">namespace MyApplication<br>
{<br>
&nbsp;&nbsp; using Widgets;</p>

<p class="Code">&nbsp;&nbsp; class X<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Queue q1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Non-generic Widgets.Queue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Queue&lt;int&gt; q2;&nbsp;&nbsp;&nbsp; // Generic Widgets.Queue<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">A <span class="Production">type-name</span> might identify a
constructed type even though it doesn’t specify type parameters directly. This
can occur where a type is nested within a generic class declaration, and the
instance type of the containing declaration is implicitly used for name lookup
(§10.3.8.6):</p>

<p class="Code">class Outer&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public class Inner {...}</p>

<p class="Code">&nbsp;&nbsp; public Inner i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Type of i is
Outer&lt;T&gt;.Inner<br>
}</p>

<p class="MsoNormal">In unsafe code, a constructed type cannot be used as an <span class="Production">unmanaged-type</span> (§18.2).</p>

<h3><a name="_Toc251612976"></a><a name="_Ref168410273">4.4.1 Type arguments</a></h3>

<p class="MsoNormal">Each argument in a type argument list is simply a <span class="Production">type</span>.</p>

<p class="Grammar">type-argument-list:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
type-arguments&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">&gt;</span></span></p>

<p class="Grammar">type-arguments:<br>
type-argument<br>
type-arguments&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; type-argument</p>

<p class="Grammar">type-argument:<br>
type</p>

<p class="MsoNormal">In unsafe code (§18), a <span class="Production">type-argument</span>
may not be a pointer type. Each type argument must satisfy any constraints on
the corresponding type parameter (§10.1.5).</p>

<h3><a name="_Toc251612977"></a><a name="_Ref168414196">4.4.2 Open and closed
types</a></h3>

<p class="MsoNormal">All types can be classified as either <span class="Term">open
types</span> or <span class="Term">closed types</span>. An open type is a type
that involves type parameters. More specifically:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type parameter defines an open type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An array type is an open type if and only if its element type is
an open type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A constructed type is an open type if and only if one or more of
its type arguments is an open type. A constructed nested type is an open type
if and only if one or more of its type arguments or the type arguments of its
containing type(s) is an open type.</p>

<p class="MsoNormal">A closed type is a type that is not an open type.</p>

<p class="MsoNormal">At run-time, all of the code within a generic type
declaration is executed in the context of a closed constructed type that was
created by applying type arguments to the generic declaration. Each type
parameter within the generic type is bound to a particular run-time type. The
run-time processing of all statements and expressions always occurs with closed
types, and open types occur only during compile-time processing.</p>

<p class="MsoNormal">Each closed constructed type has its own set of static variables,
which are not shared with any other closed constructed types. Since an open type
does not exist at run-time, there are no static variables associated with an open
type. Two closed constructed types are the same type if they are constructed
from the same unbound generic type, and their corresponding type arguments are
the same type.</p>

<h3><a name="_Toc251612978"></a><a name="_Ref174174794">4.4.3 Bound and unbound
types</a></h3>

<p class="MsoNormal">The term <span class="Term">unbound type</span> refers to a
non-generic type or an unbound generic type. The term <span class="Term">bound
type</span> refers to a non-generic type or a constructed type.</p>

<p class="MsoNormal">An unbound type refers to the entity declared by a type
declaration. An unbound generic type is not itself a type, and cannot be used
as the type of a variable, argument or return value, or as a base type. The
only construct in which an unbound generic type can be referenced is the <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>
expression (§7.6.11).</p>

<h3><a name="_Toc251612979"></a><a name="_Ref168464114">4.4.4 Satisfying constraints</a></h3>

<p class="MsoNormal">Whenever a constructed type or generic method is referenced,
the supplied type arguments are checked against the type parameter constraints
declared on the generic type or method (§10.1.5). For each <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause,
the type argument <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
that corresponds to the named type parameter is checked against each constraint
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the constraint is a class type, an interface type, or a type
parameter, let <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
represent that constraint with the supplied type arguments substituted for any
type parameters that appear in the constraint. To satisfy the constraint, it
must be the case that type <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> is convertible to type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> by one of the following:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An identity
conversion (§6.1.1)</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An implicit
reference conversion (§6.1.6)</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A boxing
conversion (§6.1.7), provided that type A is a non-nullable value type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An implicit reference,
boxing or type parameter conversion from a type parameter <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the constraint is the reference type constraint (<span class="Codefragment"><span style="font-size:10.0pt">class</span></span>), the
type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
must satisfy one of the following:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an
interface type, class type, delegate type or array type. Note that <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>
are reference types that satisfy this constraint.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a type
parameter that is known to be a reference type (§10.1.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the constraint is the value type constraint (<span class="Codefragment"><span style="font-size:10.0pt">struct</span></span>), the
type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
must satisfy one of the following:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a struct
type or enum type, but not a nullable type. Note that <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span> are
reference types that do not satisfy this constraint.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a type
parameter having the value type constraint (§10.1.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the constraint is the constructor constraint <span class="Codefragment"><span style="font-size:10.0pt">new()</span></span>, the type
<span class="Codefragment"><span style="font-size:10.0pt">A</span></span> must not
be <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
and must have a public parameterless constructor. This is satisfied if one of
the following is true:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a value
type, since all value types have a public default constructor (§4.1.2).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a type
parameter having the constructor constraint (§10.1.5).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a type
parameter having the value type constraint (§10.1.5).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a class that
is not <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
and contains an explicitly declared <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> constructor with no parameters.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> and has
a default constructor (§10.11.4).</p>

<p class="MsoNormal">A compile-time error occurs if one or more of a type
parameter’s constraints are not satisfied by the given type arguments.</p>

<p class="MsoNormal">Since type parameters are not inherited, constraints are
never inherited either. In the example below, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> needs to specify the constraint on its
type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
so that <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
satisfies the constraint imposed by the base class <span class="Codefragment"><span style="font-size:10.0pt">B&lt;T&gt;</span></span>. In contrast, class <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> need not
specify a constraint, because <span class="Codefragment"><span style="font-size:
10.0pt">List&lt;T&gt;</span></span> implements <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span> for any <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="Code">class B&lt;T&gt; where T: IEnumerable {...}</p>

<p class="Code">class D&lt;T&gt;: B&lt;T&gt; where T: IEnumerable {...}</p>

<p class="Code">class E&lt;T&gt;: B&lt;List&lt;T&gt;&gt; {...}</p>

<h2><a name="_Toc251612980">4.5 Type parameters</a></h2>

<p class="MsoNormal">A type parameter is an identifier designating a value type
or reference type that the parameter is bound to at run-time.</p>

<p class="Grammar">type-parameter:<br>
identifier</p>

<p class="MsoNormal">Since a type parameter can be instantiated with many
different actual type arguments, type parameters have slightly different operations
and restrictions than other types. These include:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type parameter cannot be used directly to declare a base class (§10.2.4) or interface (§13.1.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The rules for member lookup on type parameters depend on the
constraints, if any, applied to the type parameter. They are detailed in §7.4.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The available conversions for a type parameter depend on the
constraints, if any, applied to the type parameter. They are detailed in §6.1.10 and §6.2.6.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The literal <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
cannot be converted to a type given by a type parameter, except if the type
parameter is known to be a reference type (§6.1.10). However, a <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
expression (§7.6.13) can be used instead. In addition, a value with a type
given by a type parameter <em>can</em> be compared with <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> using <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> (§7.10.6) unless the type parameter has the value type constraint.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
expression (§7.6.10.1) can only be used with a type parameter if the type
parameter is constrained by a <span class="Production">constructor-constraint</span>
or the value type constraint (§10.1.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type parameter cannot be used anywhere within an attribute. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type parameter cannot be used in a member access (§7.6.4) or type name (§3.8) to identify a static member or a nested type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In unsafe code, a type parameter cannot be used as an <span class="Production">unmanaged-type</span> (§18.2).</p>

<p class="MsoNormal">As a type, type parameters are purely a compile-time
construct. At run-time, each type parameter is bound to a run-time type that
was specified by supplying a type argument to the generic type declaration.
Thus, the type of a variable declared with a type parameter will, at run-time,
be a closed constructed type (§4.4.2). The run-time execution of all statements
and expressions involving type parameters uses the actual type that was
supplied as the type argument for that parameter.</p>

<h2><a name="_Toc251612981"></a><a name="_Ref170802892">4.6 Expression tree
types</a></h2>

<p class="MsoNormal"><span class="Term">Expression trees</span> permit anonymous
functions to be represented as data structures instead of executable code.
Expression trees are values of <span class="Term">expression tree types</span> of
the form <span class="Codefragment"><span style="font-size:10.0pt">System.Linq.Expressions.Expression&lt;D&gt;</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is any delegate type. For the remainder of this specification we will refer to
these types using the shorthand <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span>. </p>

<p class="MsoNormal">If a conversion exists from an anonymous function to a
delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>,
a conversion also exists to the expression tree type <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span>. Whereas the
conversion of an anonymous function to a delegate type generates a delegate
that references executable code for the anonymous function, conversion to an
expression tree type creates an expression tree representation of the anonymous
function. </p>

<p class="MsoNormal">Expression trees are efficient in-memory data representations
of anonymous functions and make the structure of the anonymous function
transparent and explicit.</p>

<p class="MsoNormal">Just like a delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span> is said to have
parameter and return types, which are the same as those of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoNormal">The following example represents an anonymous function both
as executable code and as an expression tree. Because a conversion exists to <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;int,int&gt;</span></span>,
a conversion also exists to <span class="Codefragment"><span style="font-size:
10.0pt">Expression&lt;Func&lt;int,int&gt;&gt;</span></span>:</p>

<p class="Code">Func&lt;int,int&gt; del = x =&gt; x + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Code</p>

<p class="Code">Expression&lt;Func&lt;int,int&gt;&gt; exp = x =&gt; x + 1;&nbsp;&nbsp;&nbsp;&nbsp; //
Data</p>

<p class="MsoNormal">Following these assignments, the delegate <span class="Codefragment"><span style="font-size:10.0pt">del</span></span> references
a method that returns <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span>, and the
expression tree <span class="Codefragment"><span style="font-size:10.0pt">exp</span></span>
references a data structure that describes the expression <span class="Codefragment"><span style="font-size:10.0pt">x =&gt; x + 1</span></span>.</p>

<p class="MsoNormal">The exact definition of the generic type <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span>
as well as the precise rules for constructing an expression tree when an
anonymous function is converted to an expression tree type, are both outside
the scope of this specification, and are described elsewhere.</p>

<p class="MsoNormal">Two things are important to make explicit:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">Not all anonymous functions can be represented as
     expression trees. For instance, anonymous functions with statement bodies,
     and anonymous functions containing assignment expressions cannot be
     represented. In these cases, a conversion still exists, but will fail at compile-time.</li>
 <li class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span>
     offers an instance method <span class="Codefragment"><span style="font-size:
     10.0pt">Compile</span></span> which produces a delegate of type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>: </li>
</ul>

<p class="Code">Func&lt;int,int&gt; del2 = exp.Compile();</p>

<p class="MsoNormal" style="margin-left:.5in">Invoking this delegate causes the
code represented by the expression tree to be executed. Thus, given the
definitions above, del and del2 are equivalent, and the following two
statements will have the same effect:</p>

<p class="Code"><span lang="DA">int i1 = del(1);</span></p>

<p class="Code"><span lang="DA">int i2 = del2(1);</span></p>

<p class="MsoNormal"><span lang="DA">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>After executing this code,&nbsp;
<span class="Codefragment"><span style="font-size:10.0pt">i1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">i2</span></span> will both
have the value <span class="Codefragment"><span style="font-size:10.0pt">2</span></span>.</p>

<h2><a name="_Toc251612982"></a><a name="_Ref248144300">4.7 The dynamic type</a></h2>

<p class="MsoNormal">The type <span class="Codefragment"><span style="font-size:
10.0pt">dynamic</span></span> has special meaning in C#. Its purpose is to
allow dynamic binding, which is described in detail in §7.2.2.</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
is considered identical to <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> except in the following respects:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Operations on expressions of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> can be dynamically bound (§7.2.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Type inference (§7.5.2) will prefer <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> over <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> if both are candidates.</p>

<p class="MsoNormal">Because of this equivalence, the following holds:</p>

<p class="MsoListBullet"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span>There is an implicit identity conversion between <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and
between constructed types that are the same when replacing <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">object</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit and explicit conversions to and from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> also
apply to and from <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Method signatures that are the same when replacing <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> are
considered the same signature</p>

<p class="MsoListBullet">The type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> is indistinguishable from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> at run-time.
</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">An expression of
the type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
is referred to as a <span class="Term">dynamic expression</span>.</p>

<h1><a name="_Toc251612983"></a><a name="_Ref463497488"></a><a name="_Ref457719509">5. Variables</a></h1>

<p class="MsoNormal">Variables represent storage locations. Every variable has a
type that determines what values can be stored in the variable. C# is a
type-safe language, and the C# compiler guarantees that values stored in
variables are always of the appropriate type. The value of a variable can be
changed through assignment or through use of the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span> operators.</p>

<p class="MsoNormal">A variable must be <span class="Term">definitely assigned</span>
(§5.3) before its value can be obtained.</p>

<p class="MsoNormal">As described in the following sections, variables are either
<span class="Term">initially assigned</span> or <span class="Term">initially
unassigned</span>. An initially assigned variable has a well-defined initial
value and is always considered definitely assigned. An initially unassigned
variable has no initial value. For an initially unassigned variable to be
considered definitely assigned at a certain location, an assignment to the
variable must occur in every possible execution path leading to that location.</p>

<h2><a name="_Toc251612984"></a><a name="_Ref449815822">5.1 Variable categories</a></h2>

<p class="MsoNormal">C# defines seven categories of variables: static variables,
instance variables, array elements, value parameters, reference parameters,
output parameters, and local variables. The sections that follow describe each
of these categories.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int x;<br>
&nbsp;&nbsp; int y;</p>

<p class="Code">&nbsp;&nbsp; void F(int[] v, int a, ref int b, out int c) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = a + b++;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is a static variable, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
is an instance variable, <span class="Codefragment"><span style="font-size:10.0pt">v[0]</span></span>
is an array element, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is a value parameter, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is a reference parameter, <span class="Codefragment"><span style="font-size:10.0pt">c</span></span>
is an output parameter, and <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> is a local variable.</p>

<h3><a name="_Toc251612985"></a><a name="_Ref469058122">5.1.1 Static variables</a></h3>

<p class="MsoNormal">A field declared with the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier is called a <span class="Term">static variable</span>. A static variable comes into existence
before execution of the static constructor (§10.12) for its containing type,
and ceases to exist when the associated application domain ceases to exist.</p>

<p class="MsoNormal">The initial value of a static variable is the default value
(§5.2) of the variable’s type.</p>

<p class="MsoNormal">For purposes of definite assignment checking, a static
variable is considered initially assigned.</p>

<h3><a name="_Toc251612986">5.1.2 Instance variables</a></h3>

<p class="MsoNormal">A field declared without the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier is called an <span class="Term">instance variable</span>.</p>

<h4><a name="_Toc251612987"></a><a name="_Ref469058137">5.1.2.1 Instance
variables in classes</a></h4>

<p class="MsoNormal">An instance variable of a class comes into existence when a
new instance of that class is created, and ceases to exist when there are no
references to that instance and the instance’s destructor (if any) has
executed.</p>

<p class="MsoNormal">The initial value of an instance variable of a class is the
default value (§5.2) of the variable’s type.</p>

<p class="MsoNormal">For the purpose of definite assignment checking, an instance
variable of a class is considered initially assigned.</p>

<h4><a name="_Toc251612988"></a><a name="_Ref469058476">5.1.2.2 Instance
variables in structs</a></h4>

<p class="MsoNormal">An instance variable of a struct has exactly the same
lifetime as the struct variable to which it belongs. In other words, when a
variable of a struct type comes into existence or ceases to exist, so too do
the instance variables of the struct.</p>

<p class="MsoNormal">The initial assignment state of an instance variable of a
struct is the same as that of the containing struct variable. In other words,
when a struct variable is considered initially assigned, so too are its
instance variables, and when a struct variable is considered initially
unassigned, its instance variables are likewise unassigned.</p>

<h3><a name="_Toc251612989"></a><a name="_Ref469058223">5.1.3 Array elements</a></h3>

<p class="MsoNormal">The elements of an array come into existence when an array
instance is created, and cease to exist when there are no references to that
array instance.</p>

<p class="MsoNormal">The initial value of each of the elements of an array is the
default value (§5.2) of the type of the array elements.</p>

<p class="MsoNormal">For the purpose of definite assignment checking, an array
element is considered initially assigned.</p>

<h3><a name="_Toc251612990"></a><a name="_Ref469481357">5.1.4 Value parameters</a></h3>

<p class="MsoNormal">A parameter declared without a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier is a <span class="Term">value
parameter</span>.</p>

<p class="MsoNormal">A value parameter comes into existence upon invocation of
the function member (method, instance constructor, accessor, or operator) or
anonymous function to which the parameter belongs, and is initialized with the
value of the argument given in the invocation. A value parameter normally ceases
to exist upon return of the function member or anonymous function. However, if
the value parameter is captured by an anonymous function (§7.15), its life time extends at least until the delegate or expression tree created from that
anonymous function is eligible for garbage collection.</p>

<p class="MsoNormal">For the purpose of definite assignment checking, a value
parameter is considered initially assigned.</p>

<h3><a name="_Toc251612991"></a><a name="_Ref469197343">5.1.5 Reference
parameters</a></h3>

<p class="MsoNormal">A parameter declared with a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> modifier is a <span class="Term">reference
parameter</span>.</p>

<p class="MsoNormal">A reference parameter does not create a new storage
location. Instead, a reference parameter represents the same storage location
as the variable given as the argument in the function member or anonymous function
invocation. Thus, the value of a reference parameter is always the same as the
underlying variable.</p>

<p class="MsoNormal">The following definite assignment rules apply to reference
parameters. Note the different rules for output parameters described in §5.1.6.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable must be definitely assigned (§5.3) before it can be passed as a reference parameter in a function member or delegate invocation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Within a function member or anonymous function, a reference parameter
is considered initially assigned.</p>

<p class="MsoNormal">Within an instance method or instance accessor of a struct
type, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
keyword behaves exactly as a reference parameter of the struct type (§7.6.7).</p>

<h3><a name="_Toc251612992"></a><a name="_Ref469197330">5.1.6 Output parameters</a></h3>

<p class="MsoNormal">A parameter declared with an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier is an <span class="Term">output
parameter</span>.</p>

<p class="MsoNormal">An output parameter does not create a new storage location.
Instead, an output parameter represents the same storage location as the variable
given as the argument in the function member or delegate invocation. Thus, the
value of an output parameter is always the same as the underlying variable.</p>

<p class="MsoNormal">The following definite assignment rules apply to output
parameters. Note the different rules for reference parameters described in §5.1.5.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable need not be definitely assigned before it can be
passed as an output parameter in a function member or delegate invocation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Following the normal completion of a function member or delegate
invocation, each variable that was passed as an output parameter is considered
assigned in that execution path.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Within a function member or anonymous function, an output
parameter is considered initially unassigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Every output parameter of a function member or anonymous function
must be definitely assigned (§5.3) before the function member or anonymous
function returns normally.</p>

<p class="MsoNormal">Within an instance constructor of a struct type, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> keyword
behaves exactly as an output parameter of the struct type (§7.6.7).</p>

<h3><a name="_Toc251612993">5.1.7 Local variables</a></h3>

<p class="MsoNormal">A <span class="Term">local variable</span> is declared by a <span class="Production">local-variable-declaration</span>, which may occur in a <span class="Production">block</span>, a <span class="Production">for-statement</span>, a
<span class="Production">switch-statement</span> or a <span class="Production">using-statement</span>;
or by a <span class="Production">foreach-statement</span> or a<span class="Production"> specific-catch-clause</span> for a <span class="Production">try-statement</span>.</p>

<p class="MsoNormal">The lifetime of a local variable is the portion of program
execution during which storage is guaranteed to be reserved for it. This
lifetime extends at least from entry into the <span class="Production">block</span>,
<span class="Production">for-statement</span>, <span class="Production">switch-statement</span>,
<span class="Production">using-statement</span>, <span class="Production">foreach-statement</span>,
or <span class="Production">specific-catch-clause</span> with which it is
associated, until execution of that <span class="Production">block</span>, <span class="Production">for-statement</span>, <span class="Production">switch-statement</span>,
<span class="Production">using-statement</span>, <span class="Production">foreach-statement</span>,
or <span class="Production">specific-catch-clause</span> ends in any way.
(Entering an enclosed <span class="Production">block</span> or calling a method
suspends, but does not end, execution of the current <span class="Production">block</span>,
<span class="Production">for-statement</span>, <span class="Production">switch-statement</span>,
<span class="Production">using-statement</span>, <span class="Production">foreach-statement</span>,
or <span class="Production">specific-catch-clause</span>.) If the local variable
is captured by an anonymous function (§7.15.5.1), its lifetime extends at least
until the delegate or expression tree created from the anonymous function,
along with any other objects that come to reference the captured variable, are
eligible for garbage collection.</p>

<p class="MsoNormal">If the parent <span class="Production">block</span>, <span class="Production">for-statement</span>, <span class="Production">switch-statement</span>,
<span class="Production">using-statement</span>, <span class="Production">foreach-statement</span>,
or <span class="Production">specific-catch-clause</span> is entered recursively,
a new instance of the local variable is created each time, and its <span class="Production">local-variable-initializer</span>, if any, is evaluated each
time.</p>

<p class="MsoNormal">A local variable introduced by a <span class="Production">local-variable-declaration</span>
is not automatically initialized and thus has no default value. For the purpose
of definite assignment checking, a local variable introduced by a <span class="Production">local-variable-declaration</span> is considered initially
unassigned. A <span class="Production">local-variable-declaration</span> may
include a <span class="Production">local-variable-initializer</span>, in which
case the variable is considered definitely assigned only after the initializing
expression (§5.3.3.4).</p>

<p class="MsoNormal">Within the scope of a local variableintroduced by a <span class="Production">local-variable-declaration</span>, it is a compile-time error
to refer to that local variable in a textual position that precedes its <span class="Production">local-variable-declarator</span>. If the local variable
declaration is implicit (§8.5.1), it is also an error to refer to the variable
within its <span class="Production">local-variable-declarator</span>.</p>

<p class="MsoNormal"><a name="_Ref449433536">A local variable introduced by a </a><span class="Production">foreach-statement</span> or a<span class="Production"> specific-catch-clause</span>
is considered definitely assigned in its entire scope.</p>

<p class="MsoNormal">The actual lifetime of a local variable is
implementation-dependent. For example, a compiler might statically determine
that a local variable in a block is only used for a small portion of that
block. Using this analysis, the compiler could generate code that results in
the variable’s storage having a shorter lifetime than its containing block.</p>

<p class="MsoNormal">The storage referred to by a local reference variable is
reclaimed independently of the lifetime of that local reference variable (§3.9).</p>

<h2><a name="_Toc251612994"></a><a name="_Ref519498265"></a><a name="_Ref519498239"></a><a name="_Ref519498056"></a><a name="_Ref519497778"></a><a name="_Ref519497746"></a><a name="_Ref519497291">5.2 Default values</a></h2>

<p class="MsoNormal">The following categories of variables are automatically initialized
to their default values:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static variables.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance variables of class instances.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Array elements.</p>

<p class="MsoNormal">The default value of a variable depends on the type of the
variable and is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a variable of a <span class="Production">value-type</span>, the
default value is the same as the value computed by the <span class="Production">value-type</span>’s
default constructor (§4.1.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a variable of a <span class="Production">reference-type</span>,
the default value is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">Initialization to default values is typically done by having
the memory manager or garbage collector initialize memory to all-bits-zero
before it is allocated for use. For this reason, it is convenient to use
all-bits-zero to represent the null reference.</p>

<h2><a name="_Toc251612995"></a><a name="_Ref469056981">5.3 Definite assignment</a></h2>

<p class="MsoNormal">At a given location in the executable code of a function
member, a variable is said to be <span class="Term">definitely assigned</span> if
the compiler can prove, by a particular static flow analysis (§5.3.3), that the variable has been automatically initialized or has been the target
of at least one assignment. Informally stated, the rules of definite assignment
are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An initially assigned variable (§5.3.1) is always considered
definitely assigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An initially unassigned variable (§5.3.2) is considered
definitely assigned at a given location if all possible execution paths leading
to that location contain at least one of the following:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A simple
assignment (§7.17.1) in which the variable is the left operand.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An invocation
expression (§7.6.5) or object creation expression (§7.6.10.1) that passes the
variable as an output parameter.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For a local
variable, a local variable declaration (§8.5.1) that includes a variable
initializer.</p>

<p class="MsoNormal">The formal specification underlying the above informal rules
is described in §5.3.1, §5.3.2, and §5.3.3.</p>

<p class="MsoNormal">The definite assignment states of instance variables of a <span class="Production">struct-type</span> variable are tracked individually as well
as collectively. In additional to the rules above, the following rules apply to
<span class="Production">struct-type</span> variables and their instance
variables:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance variable is considered definitely assigned if its
containing <span class="Production">struct-type</span> variable is considered
definitely assigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">struct-type</span> variable is
considered definitely assigned if each of its instance variables is considered
definitely assigned.</p>

<p class="MsoNormal">Definite assignment is a requirement in the following
contexts:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable must be definitely assigned at each location where its
value is obtained. This ensures that undefined values never occur. The
occurrence of a variable in an expression is considered to obtain the value of
the variable, except when</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>the variable is
the left operand of a simple assignment,</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>the variable is
passed as an output parameter, or</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>the variable is
a <span class="Production">struct-type</span> variable and occurs as the left
operand of a member access.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable must be definitely assigned at each location where it
is passed as a reference parameter. This ensures that the function member being
invoked can consider the reference parameter initially assigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>All output parameters of a function member must be definitely
assigned at each location where the function member returns (through a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement or through execution reaching the end of the function member body).
This ensures that function members do not return undefined values in output
parameters, thus enabling the compiler to consider a function member invocation
that takes a variable as an output parameter equivalent to an assignment to the
variable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
variable of a <span class="Production">struct-type</span> instance constructor
must be definitely assigned at each location where that instance constructor
returns.</p>

<h3><a name="_Toc251612996"></a><a name="_Ref469203006">5.3.1 Initially
assigned variables</a></h3>

<p class="MsoNormal">The following categories of variables are classified as
initially assigned:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static variables.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance variables of class instances.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance variables of initially assigned struct variables.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Array elements.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Value parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Reference parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Variables declared in a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause or a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement.</p>

<h3><a name="_Toc251612997"></a><a name="_Ref469203019">5.3.2 Initially
unassigned variables</a></h3>

<p class="MsoNormal">The following categories of variables are classified as
initially unassigned:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance variables of initially unassigned struct variables.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Output parameters, including the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> variable of struct instance
constructors.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Local variables, except those declared in a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause or
a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement.</p>

<h3><a name="_Ref450634158"></a><a name="_Toc251612998"></a><a name="_Toc525095603"></a><a name="_Ref518965264">5.3.3 Precise rules for
determining definite assignment</a></h3>

<p class="MsoNormal">In order to determine that each used variable is definitely
assigned, the compiler must use a process that is equivalent to the one
described in this section.</p>

<p class="MsoNormal">The compiler processes the body of each function member that
has one or more initially unassigned variables. For each initially unassigned
variable <span class="Production">v</span>, the compiler determines a <span class="Term">definite assignment state</span> for <span class="Production">v</span>
at each of the following points in the function member:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At the beginning of each statement</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At the end point (§8.1) of each statement</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>On each arc which transfers control to another statement or to
the end point of a statement</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At the beginning of each expression</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At the end of each expression</p>

<p class="MsoNormal">The definite assignment state of <span class="Production">v</span>
can be either:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Definitely assigned. This indicates that on all possible control
flows to this point, <span class="Production">v</span> has been assigned a value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Not definitely assigned. For the state of a variable at the end
of an expression of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>,
the state of a variable that isn’t definitely assigned may (but doesn’t
necessarily) fall into one of the following sub-states:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Definitely
assigned after true expression. This state indicates that <span class="Production">v</span> is definitely assigned if the boolean expression
evaluated as true, but is not necessarily assigned if the boolean expression
evaluated as false.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Definitely
assigned after false expression. This state indicates that <span class="Production">v</span> is definitely assigned if the boolean expression
evaluated as false, but is not necessarily assigned if the boolean expression
evaluated as true.</p>

<p class="MsoNormal">The following rules govern how the state of a variable <span class="Production">v</span> is determined at each location.</p>

<h4><a name="_Toc251612999">5.3.3.1 General rules for statements</a></h4>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v </span>is not definitely assigned at the
beginning of a function member body.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> is definitely assigned at the
beginning of any unreachable statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of any other statement is determined by checking the definite
assignment state of <span class="Production">v</span> on all control flow
transfers that target the beginning of that statement. If (and only if) <span class="Production">v</span> is definitely assigned on all such control flow
transfers, then <span class="Production">v</span> is definitely assigned at the
beginning of the statement. The set of possible control flow transfers is
determined in the same way as for checking statement reachability (§8.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end point of a block, <span class="Codefragment"><span style="font-size:
10.0pt">checked</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">unchecked</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement is determined by
checking the definite assignment state of <span class="Production">v</span> on
all control flow transfers that target the end point of that statement. If <span class="Production">v</span> is definitely assigned on all such control flow
transfers, then <span class="Production">v</span> is definitely assigned at the
end point of the statement. Otherwise; <span class="Production">v</span> is not
definitely assigned at the end point of the statement. The set of possible
control flow transfers is determined in the same way as for checking statement
reachability (§8.1).</p>

<h4><a name="_Toc251613000">5.3.3.2 Block statements, checked, and unchecked
statements</a></h4>

<p class="MsoNormal">The definite assignment state of <span class="Production">v</span>
on the control transfer to the first statement of the statement list in the
block (or to the end point of the block, if the statement list is empty) is the
same as the definite assignment statement of <span class="Production">v</span>
before the block, <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
statement.</p>

<h4><a name="_Toc251613001">5.3.3.3 Expression statements</a></h4>

<p class="MsoNormal">For an expression statement <span class="Production">stmt</span>
that consists of the expression <span class="Production">expr</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> has the same definite assignment
state at the beginning of <span class="Production">expr</span> as at the
beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> if definitely assigned at the
end of <span class="Production">expr</span>, it is definitely assigned at the end
point of <span class="Production">stmt</span>; otherwise; it is not definitely
assigned at the end point of <span class="Production">stmt</span>.</p>

<h4><a name="_Toc251613002"></a><a name="_Ref251254113">5.3.3.4 Declaration
statements</a></h4>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">stmt</span> is a declaration statement
without initializers, then <span class="Production">v</span> has the same
definite assignment state at the end point of <span class="Production">stmt</span>
as at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">stmt</span> is a declaration statement
with initializers, then the definite assignment state for <span class="Production">v</span> is determined as if <span class="Production">stmt</span>
were a statement list, with one assignment statement for each declaration with
an initializer (in the order of declaration).</p>

<h4><a name="_Toc251613003">5.3.3.5 If statements</a></h4>

<p class="MsoNormal">For an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">if ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
) <span class="Production"><span style="font-size:11.0pt">then-stmt</span></span>
else <span class="Production"><span style="font-size:11.0pt">else-stmt</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> has the same definite assignment
state at the beginning of <span class="Production">expr</span> as at the
beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> is definitely assigned at the
end of <span class="Production">expr</span>, then it is definitely assigned on
the control flow transfer to <span class="Production">then-stmt</span> and to
either <span class="Production">else-stmt</span> or to the end-point of <span class="Production">stmt</span> if there is no else clause.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> has the state “definitely
assigned after true expression” at the end of <span class="Production">expr</span>,
then it is definitely assigned on the control flow transfer to <span class="Production">then-stmt</span>, and not definitely assigned on the control
flow transfer to either <span class="Production">else-stmt</span> or to the
end-point of <span class="Production">stmt</span> if there is no else clause.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> has the state “definitely
assigned after false expression” at the end of <span class="Production">expr</span>,
then it is definitely assigned on the control flow transfer to <span class="Production">else-stmt</span>, and not definitely assigned on the control
flow transfer to <span class="Production">then-stmt</span>. It is definitely
assigned at the end-point of <span class="Production">stmt</span> if and only if
it is definitely assigned at the end-point of <span class="Production">then-stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Production">v</span> is considered not
definitely assigned on the control flow transfer to either the <span class="Production">then-stmt</span> or <span class="Production">else-stmt</span>,
or to the end-point of <span class="Production">stmt</span> if there is no else
clause.</p>

<h4><a name="_Toc251613004">5.3.3.6 Switch statements</a></h4>

<p class="MsoNormal">In a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement <span class="Production">stmt</span> with a controlling expression <span class="Production">expr</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the state
of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
on the control flow transfer to a reachable switch block statement list is the
same as the definite assignment state of <span class="Production">v</span> at the
end of <span class="Production">expr</span>.</p>

<h4><a name="_Toc251613005">5.3.3.7 While statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">while ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
) <span class="Production"><span style="font-size:11.0pt">while-body</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> has the same definite assignment
state at the beginning of <span class="Production">expr </span>as at the
beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> is definitely assigned at the
end of <span class="Production">expr</span>, then it is definitely assigned on
the control flow transfer to <span class="Production">while-body</span> and to
the end point of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> has the state “definitely
assigned after true expression” at the end of <span class="Production">expr</span>,
then it is definitely assigned on the control flow transfer to <span class="Production">while-body</span>, but not definitely assigned at the
end-point of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> has the state “definitely
assigned after false expression” at the end of <span class="Production">expr</span>,
then it is definitely assigned on the control flow transfer to the end point of
<span class="Production">stmt</span>, but not definitely assigned on the control
flow transfer to <span class="Production">while-body</span>.</p>

<h4><a name="_Toc251613006">5.3.3.8 Do statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">do <span class="Production"><span style="font-size:11.0pt">do-body</span></span>
while ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
) ;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> has the same definite assignment
state on the control flow transfer from the beginning of <span class="Production">stmt</span> to <span class="Production">do-body</span> as at the
beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">v</span> has the same definite assignment
state at the beginning of <span class="Production">expr</span> as at the end
point of <span class="Production">do-body</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> is definitely assigned at the
end of <span class="Production">expr</span>, then it is definitely assigned on
the control flow transfer to the end point of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> has the state “definitely
assigned after false expression” at the end of <span class="Production">expr</span>,
then it is definitely assigned on the control flow transfer to the end point of
<span class="Production">stmt</span>.</p>

<h4><a name="_Toc251613007">5.3.3.9 For statements</a></h4>

<p class="MsoNormal">Definite assignment checking for a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement of the form:</p>

<p class="Code">for ( <span class="Production"><span style="font-size:11.0pt">for-initializer</span></span>
; <span class="Production"><span style="font-size:11.0pt">for-condition</span></span>
; <span class="Production"><span style="font-size:11.0pt">for-iterator</span></span>
) <span class="Production"><span style="font-size:11.0pt">embedded-statement</span></span></p>

<p class="MsoNormal">is done as if the statement were written:</p>

<p class="Code">{<br>
&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">for-initializer</span></span>
;<br>
&nbsp;&nbsp; while ( <span class="Production"><span style="font-size:11.0pt">for-condition</span></span>
) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">embedded-statement</span></span>
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">for-iterator</span></span>
;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">If the <span class="Production">for-condition</span> is
omitted from the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement, then evaluation of definite assignment proceeds as if <span class="Production">for-condition</span> were replaced with <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> in the
above expansion.</p>

<h4><a name="_Toc251613008">5.3.3.10 Break, continue, and goto statements</a></h4>

<p class="MsoNormal">The definite assignment state of <span class="Production">v</span>
on the control flow transfer caused by a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement is the same as the
definite assignment state of <span class="Production">v</span> at the beginning
of the statement.</p>

<h4><a name="_Toc251613009">5.3.3.11 Throw statements</a></h4>

<p class="MsoNormal">For a statement <span class="Production">stmt</span> of the
form</p>

<p class="Code">throw <span class="Production"><span style="font-size:11.0pt">expr</span></span>
;</p>

<p class="MsoNormal">The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the
definite assignment state of <span class="Production">v</span> at the beginning
of <span class="Production">stmt</span>. </p>

<h4><a name="_Toc251613010">5.3.3.12 Return statements</a></h4>

<p class="MsoNormal">For a statement <span class="Production">stmt</span> of the
form</p>

<p class="Code">return <span class="Production"><span style="font-size:11.0pt">expr</span></span>
;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the
definite assignment state of <span class="Production">v</span> at the beginning
of <span class="Production">stmt</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> is an output parameter, then
it must be definitely assigned either:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>after <span class="Production">expr</span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>or at the end
of the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> that
encloses the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement.</p>

<p class="MsoNormal" style="text-autospace:none">For a statement stmt of the
form:</p>

<p class="Code">return ;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">v</span> is an output parameter, then
it must be definitely assigned either:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>before <span class="Production">stmt</span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>or at the end
of the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> that
encloses the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement.</p>

<h4><a name="_Toc251613011">5.3.3.13 Try-catch statements</a></h4>

<p class="MsoNormal">For a statement <span class="Production">stmt</span> of the
form:</p>

<p class="Code">try <span class="Production"><span style="font-size:11.0pt">try-block</span></span><br>
catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-1</span></span><br>
...<br>
catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-n</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">try-block</span> is the same as the
definite assignment state of <span class="Production">v</span> at the beginning
of <span class="Production">stmt</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">catch-block-i</span> (for any <span class="Production">i</span>) is the same as the definite assignment state of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.
</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end-point of <span class="Production">stmt</span> is definitely assigned
if (and only if) <span class="Production">v</span> is definitely assigned at the
end-point of <span class="Production">try-block</span> and every <span class="Production">catch-block-i</span> (for every <span class="Production">i</span>
from 1 to <span class="Production">n</span>).</p>

<h4><a name="_Toc251613012">5.3.3.14 Try-finally statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">try <span class="Production"><span style="font-size:11.0pt">try-block</span></span>
finally <span class="Production"><span style="font-size:11.0pt">finally-block</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">try-block</span> is the same as the
definite assignment state of <span class="Production">v</span> at the beginning
of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">finally-block</span> is the same as
the definite assignment state of <span class="Production">v</span> at the
beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end-point of <span class="Production">stmt</span> is definitely assigned
if (and only if) at least one of the following is true:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Production">v</span> is definitely assigned at the end-point of <span class="Production">try-block</span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Production">v</span> is definitely assigned at the end-point of <span class="Production">finally-block</span></p>

<p class="MsoNormal">If a control flow transfer (for example, a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement)
is made that begins within <span class="Production">try-block</span>, and ends
outside of <span class="Production">try-block</span>, then <span class="Production">v</span> is also considered definitely assigned on that
control flow transfer if <span class="Production">v</span> is definitely assigned
at the end-point of <span class="Production">finally-block</span>. (This is not
an only if—if <span class="Production">v</span> is definitely assigned for
another reason on this control flow transfer, then it is still considered
definitely assigned.) </p>

<h4><a name="_Toc251613013">5.3.3.15 Try-catch-finally statements</a></h4>

<p class="MsoNormal">Definite assignment analysis for a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> statement of the form:</p>

<p class="Code">try <span class="Production"><span style="font-size:11.0pt">try-block
</span></span><br>
catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-1</span></span><br>
...<br>
catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-n</span></span><br>
finally <span class="Production"><span style="font-size:11.0pt">finally-block</span></span></p>

<p class="MsoNormal">is done as if the statement were a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> statement enclosing a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>-<span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
statement:</p>

<p class="Code">try {<br>
&nbsp;&nbsp; try <span class="Production"><span style="font-size:11.0pt">try-block</span></span>
<br>
&nbsp;&nbsp; catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-1</span></span><br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; catch(...) <span class="Production"><span style="font-size:11.0pt">catch-block-n</span></span><br>
}<br>
finally <span class="Production"><span style="font-size:11.0pt">finally-block</span></span></p>

<p class="MsoNormal">The following example demonstrates how the different blocks
of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement (§8.10) affect definite assignment. </p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, j;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto LABEL;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // neither i nor j definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // neither i nor j definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = 3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // neither i nor j definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j = 5;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // j definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i and j definitely assigned<br>
&nbsp;&nbsp; &nbsp; LABEL:;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // j definitely assigned<br>
<br>
&nbsp;&nbsp; }<br>
}</p>

<h4><a name="_Toc251613014">5.3.3.16 Foreach statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">foreach ( <span class="Production"><span style="font-size:11.0pt">type</span></span>
<span class="Production"><span style="font-size:11.0pt">identifier</span></span>
in <span class="Production"><span style="font-size:11.0pt">expr</span></span> ) <span class="Production"><span style="font-size:11.0pt">embedded-statement</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the state
of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
on the control flow transfer to <span class="Production">embedded-statement</span>
or to the end point of <span class="Production">stmt</span> is the same as the
state of <span class="Production">v</span> at the end of <span class="Production">expr</span>.</p>

<h4><a name="_Toc251613015">5.3.3.17 Using statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement <span class="Production">stmt </span>of the form:</p>

<p class="Code">using ( <span class="Production"><span style="font-size:11.0pt">resource-acquisition</span></span>
) <span class="Production"><span style="font-size:11.0pt">embedded-statement</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">resource-acquisition</span> is the
same as the state of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
on the control flow transfer to <span class="Production">embedded-statement</span>
is the same as the state of <span class="Production">v</span> at the end of <span class="Production">resource-acquisition</span>.</p>

<h4><a name="_Toc251613016">5.3.3.18 Lock statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span>
statement <span class="Production">stmt </span>of the form:</p>

<p class="Code">lock ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
) <span class="Production"><span style="font-size:11.0pt">embedded-statement</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the state
of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
on the control flow transfer to <span class="Production">embedded-statement</span>
is the same as the state of <span class="Production">v</span> at the end of <span class="Production">expr</span>.</p>

<h4><a name="_Toc251613017">5.3.3.19 Yield statements</a></h4>

<p class="MsoNormal">For a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement <span class="Production">stmt</span> of the form:</p>

<p class="Code">yield return <span class="Production"><span style="font-size:11.0pt">expr</span></span>
;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr</span> is the same as the state
of <span class="Production">v</span> at the beginning of <span class="Production">stmt</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end of <span class="Production">stmt</span> is the same as the state of <span class="Production">v</span> at the end of <span class="Production">expr</span>.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">A <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement
has no effect on the definite assignment state.</p>

<h4><a name="_Toc251613018">5.3.3.20 General rules for simple expressions</a></h4>

<p class="MsoNormal">The following rule applies to these kinds of expressions:
literals (§7.6.1), simple names (§7.6.2), member access expressions (§7.6.4), non-indexed base access expressions (§7.6.8), <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span> expressions (§7.6.11), and default value expressions (§7.6.13). </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end of such an expression is the same as the definite assignment state
of <span class="Production">v</span> at the beginning of the expression. </p>

<h4><a name="_Toc251613019">5.3.3.21 General rules for expressions with
embedded expressions</a></h4>

<p class="MsoNormal">The following rules apply to these kinds of expressions:
parenthesized expressions (§7.6.3), element access expressions (§7.6.6), base access expressions with indexing (§7.6.8), increment and decrement
expressions (§7.6.9, §7.7.5), cast expressions (§7.7.6), unary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">~</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> expressions,
binary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">is</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">as</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span> expressions
(§7.8, §7.9, §7.10, §7.11), compound assignment expressions (§7.17.2), <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
expressions (§7.6.12), plus array and delegate creation expressions (§7.6.10).</p>

<p class="MsoNormal">Each of these expressions has one or more sub-expressions
that are unconditionally evaluated in a fixed order. For example, the binary <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> operator
evaluates the left hand side of the operator, then the right hand side. An
indexing operation evaluates the indexed expression, and then evaluates each of
the index expressions, in order from left to right. For an expression <span class="Production">expr</span>, which has sub-expressions <span class="Production">expr<sub>1</sub></span>,
<span class="Production">expr<sub>2</sub></span>, ..., <span class="Production">expr<sub>n</sub></span>,
evaluated in that order:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr<sub>1</sub></span> is the same
as the definite assignment state at the beginning of <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the beginning of <span class="Production">expr<sub>i</sub></span> (<span class="Production">i</span> greater than one) is the same as the definite
assignment state at the end of <span class="Production">expr<sub>i-1</sub></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
at the end of <span class="Production">expr</span> is the same as the definite
assignment state at the end of <span class="Production">expr<sub>n</sub></span>.</p>

<h4><a name="_Toc251613020">5.3.3.22 Invocation expressions and object creation
expressions</a></h4>

<p class="MsoNormal">For an invocation expression <span class="Production">expr</span>
of the form:</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">primary-expression</span></span>
( <span class="Production"><span style="font-size:11.0pt">arg<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">arg<sub>2</sub></span></span>
, … , <span class="Production"><span style="font-size:11.0pt">arg<sub>n</sub></span></span>
)</p>

<p class="MsoNormal">or an object creation expression of the form:</p>

<p class="Code">new <span class="Production"><span style="font-size:11.0pt">type</span></span>
( <span class="Production"><span style="font-size:11.0pt">arg<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">arg<sub>2</sub></span></span>
, … , <span class="Production"><span style="font-size:11.0pt">arg<sub>n</sub></span></span>
)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For an invocation expression, the definite assignment state of <span class="Production">v</span> before <span class="Production">primary-expression</span>
is the same as the state of <span class="Production">v</span> before <span class="Production">expr</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For an invocation expression, the definite assignment state of <span class="Production">v</span> before <span class="Production">arg<sub>1</sub></span> is
the same as the state of <span class="Production">v</span> after <span class="Production">primary-expression</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For an object creation expression, the definite assignment state
of <span class="Production">v</span> before <span class="Production">arg<sub>1</sub></span>
is the same as the state of <span class="Production">v</span> before <span class="Production">expr</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each argument <span class="Production">arg<sub>i</sub></span>,
the definite assignment state of <span class="Production">v</span> after <span class="Production">arg<sub>i</sub></span> is determined by the normal expression
rules, ignoring any <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
modifiers.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each argument <span class="Production">arg<sub>i</sub></span>
for any <span class="Production">i</span> greater than one, the definite
assignment state of <span class="Production">v</span> before <span class="Production">arg<sub>i</sub></span> is the same as the state of <span class="Production">v</span> after <span class="Production">arg<sub>i-1</sub></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the variable <span class="Production">v</span> is passed as an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> argument
(i.e., an argument of the form “<span class="Codefragment"><span style="font-size:10.0pt">out</span></span> <span class="Production">v</span>”) in
any of the arguments, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is definitely assigned. Otherwise; the state of <span class="Production">v</span> after <span class="Production">expr</span> is the same
as the state of <span class="Production">v</span> after <span class="Production">arg<sub>n</sub></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For array initializers (§7.6.10.4), object initializers (§7.6.10.2), collection initializers (§7.6.10.3) and anonymous object initializers (§7.6.10.6), the definite assignment state is determined by the expansion that
these constructs are defined in terms of.</p>

<h4><a name="_Toc251613021">5.3.3.23 Simple assignment expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Production">w</span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Production">expr-rhs</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-rhs</span> is the same as the definite
assignment state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Production">w</span> is the same variable as <span class="Production">v</span>, then the definite assignment state of <span class="Production">v</span> after <span class="Production">expr</span> is
definitely assigned. Otherwise, the definite assignment state of <span class="Production">v</span> after <span class="Production">expr</span> is the same
as the definite assignment state of <span class="Production">v</span> after <span class="Production">expr-rhs</span>.</p>

<h4><a name="_Toc251613022">5.3.3.24 &amp;&amp; expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Production">expr-first</span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> <span class="Production">expr-second</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-first</span> is the same as the definite
assignment state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-second</span> is definitely assigned if the
state of <span class="Production">v</span> after <span class="Production">expr-first</span>
is either definitely assigned or “definitely assigned after true expression”.
Otherwise, it is not definitely assigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
after <span class="Production">expr</span> is determined by:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-first</span>
is definitely assigned, then the state of <span class="Production">v</span> after
<span class="Production">expr</span> is definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-second</span>
is definitely assigned, and the state of <span class="Production">v</span> after <span class="Production">expr-first</span> is “definitely assigned after false
expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-second</span>
is definitely assigned or “definitely assigned after true expression”, then the
state of <span class="Production">v</span> after <span class="Production">expr</span>
is “definitely assigned after true expression”.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-first</span>
is “definitely assigned after false expression”, and the state of <span class="Production">v</span> after <span class="Production">expr-second</span> is
“definitely assigned after false expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is
“definitely assigned after false expression”.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
state of <span class="Production">v</span> after <span class="Production">expr</span>
is not definitely assigned.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; static void F(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x &gt;= 0 &amp;&amp; (i = y) &gt;= 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i not definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i not definitely assigned<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is considered definitely assigned in
one of the embedded statements of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement but not in the other. In
the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement in method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>,
the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
is definitely assigned in the first embedded statement because execution of the
expression <span class="Codefragment"><span style="font-size:10.0pt">(i</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> always
precedes execution of this embedded statement. In contrast, the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is not
definitely assigned in the second embedded statement, since <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> might have
tested false, resulting in the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> being unassigned. </p>

<h4><a name="_Toc251613023">5.3.3.25 || expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Production">expr-first</span> <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> <span class="Production">expr-second</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-first</span> is the same as the definite
assignment state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-second</span> is definitely assigned if the
state of <span class="Production">v</span> after <span class="Production">expr-first</span>
is either definitely assigned or “definitely assigned after false expression”.
Otherwise, it is not definitely assigned.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment statement of <span class="Production">v</span>
after <span class="Production">expr</span> is determined by:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-first</span>
is definitely assigned, then the state of <span class="Production">v</span> after
<span class="Production">expr</span> is definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-second</span>
is definitely assigned, and the state of <span class="Production">v</span> after <span class="Production">expr-first</span> is “definitely assigned after true
expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-second</span>
is definitely assigned or “definitely assigned after false expression”, then
the state of <span class="Production">v</span> after <span class="Production">expr</span>
is “definitely assigned after false expression”.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-first</span>
is “definitely assigned after true expression”, and the state of <span class="Production">v</span> after <span class="Production">expr-second</span> is
“definitely assigned after true expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is
“definitely assigned after true expression”.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
state of <span class="Production">v</span> after <span class="Production">expr</span>
is not definitely assigned.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; static void G(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x &gt;= 0 || (i = y) &gt;= 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i not definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // i not definitely assigned<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is considered definitely assigned in
one of the embedded statements of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement but not in the other. In
the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement in method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>,
the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
is definitely assigned in the second embedded statement because execution of
the expression <span class="Codefragment"><span style="font-size:10.0pt">(i</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> always
precedes execution of this embedded statement. In contrast, the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is not
definitely assigned in the first embedded statement, since <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> might have
tested true, resulting in the variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> being unassigned.</p>

<h4><a name="_Toc251613024">5.3.3.26 ! expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Codefragment"><span style="font-size:10.0pt">!</span></span> <span class="Production">expr-operand</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-operand</span> is the same as the definite
assignment state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
after <span class="Production">expr</span> is determined by:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-operand </span>is
definitely assigned, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-operand </span>is
not definitely assigned, then the state of <span class="Production">v</span>
after <span class="Production">expr</span> is not definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-operand </span>is
“definitely assigned after false expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is
“definitely assigned after true expression”.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the state of
<span class="Production">v</span> after <span class="Production">expr-operand </span>is
“definitely assigned after true expression”, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is
“definitely assigned after false expression”.</p>

<h4><a name="_Toc251613025">5.3.3.27 ?? expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Production">expr-first </span><span class="Codefragment"><span style="font-size:10.0pt">??</span></span><span class="Production"> expr-second</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-first</span> is the same as the definite
assignment state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-second</span> is the same as the definite
assignment state of <span class="Production">v</span> after <span class="Production">expr-first</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment statement of <span class="Production">v</span>
after <span class="Production">expr</span> is determined by:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Production">expr-first</span> is a constant expression (§7.19) with value null, then the the state of <span class="Production">v</span> after <span class="Production">expr</span> is the same as the state of <span class="Production">v</span> after <span class="Production">expr-second</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the state of <span class="Production">v</span> after <span class="Production">expr</span> is the same as the definite assignment state of <span class="Production">v</span> after <span class="Production">expr-first</span>.</p>

<h4><a name="_Toc251613026">5.3.3.28 ?: expressions</a></h4>

<p class="MsoNormal">For an expression <span class="Production">expr</span> of the
form <span class="Production">expr-cond</span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Production">expr-true</span>
<span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Production">expr-false</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-cond</span> is the same as the state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-true</span> is definitely assigned if and
only if the state of <span class="Production">v</span> after <span class="Production">expr-cond</span> is definitely assigned or “definitely assigned
after true expression”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
before <span class="Production">expr-false</span> is definitely assigned if and
only if the state of <span class="Production">v</span> after <span class="Production">expr-cond</span> is definitely assigned or “definitely
assigned after false expression”.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of <span class="Production">v</span>
after <span class="Production">expr</span> is determined by:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Production">expr-cond</span> is a constant expression (§7.19) with value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> then
the state of <span class="Production">v</span> after <span class="Production">expr</span>
is the same as the state of <span class="Production">v</span> after <span class="Production">expr-true</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Production">expr-cond</span> is a constant expression (§7.19) with value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> then
the state of <span class="Production">v</span> after <span class="Production">expr</span>
is the same as the state of <span class="Production">v</span> after <span class="Production">expr-false</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the state of <span class="Production">v</span> after <span class="Production">expr-true</span>
is definitely assigned and the state of <span class="Production">v</span> after <span class="Production">expr-false</span> is definitely assigned, then the state of <span class="Production">v</span> after <span class="Production">expr</span> is
definitely assigned.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
state of <span class="Production">v</span> after <span class="Production">expr</span>
is not definitely assigned.</p>

<h4><a name="_Toc251613027">5.3.3.29 Anonymous functions</a></h4>

<p class="MsoNormal">For a <span class="Production">lambda-expression</span> or <span class="Production">anonymous-method-expression</span> <span class="Production">expr</span>
with a body (either <span class="Production">block</span> or <span class="Production">expression</span>) <span class="Production">body</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of an outer variable <span class="Production">v</span> before <span class="Production">body</span> is the same
as the state of <span class="Production">v</span> before <span class="Production">expr</span>.
That is, definite assignment state of outer variables is inherited from the
context of the anonymous function.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The definite assignment state of an outer variable <span class="Production">v</span> after <span class="Production">expr</span> is the same
as the state of <span class="Production">v</span> before <span class="Production">expr</span>.</p>

<p class="MsoNormal">The example</p>

<p class="Code">delegate bool Filter(int i);</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; int max;</p>

<p class="Code">&nbsp;&nbsp; // Error, max is not definitely assigned<br>
&nbsp;&nbsp; Filter f = (int n) =&gt; n &lt; max;</p>

<p class="Code">&nbsp;&nbsp; max = 5;<br>
&nbsp;&nbsp; DoWork(f);<br>
}</p>

<p class="MsoNormal">generates a compile-time error since <span class="Codefragment"><span style="font-size:10.0pt">max</span></span> is not
definitely assigned where the anonymous function is declared. The example</p>

<p class="Code">delegate void D();</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; int n;<br>
&nbsp;&nbsp; D d = () =&gt; { n = 1; };</p>

<p class="Code">&nbsp;&nbsp; d();</p>

<p class="Code">&nbsp;&nbsp; // Error, n is not definitely assigned<br>
&nbsp;&nbsp; Console.WriteLine(n);<br>
}</p>

<p class="MsoNormal">also generates a compile-time error since the assignment to <span class="Codefragment"><span style="font-size:10.0pt">n</span></span> in the
anonymous function has no affect on the definite assignment state of <span class="Codefragment"><span style="font-size:10.0pt">n</span></span> outside the anonymous
function.</p>

<p class="MsoNormal">&nbsp;</p>

<h2><a name="_Toc251613028"></a><a name="_Ref12426105"></a><a name="_Ref12426064">5.4 Variable references</a></h2>

<p class="MsoNormal">A <span class="Production">variable-reference</span> is an <span class="Production">expression</span> that is classified as a variable. A <span class="Production">variable-reference</span> denotes a storage location that can
be accessed both to fetch the current value and to store a new value.</p>

<p class="Grammar">variable-reference:<br>
expression</p>

<p class="MsoNormal">In C and C++, a <span class="Production">variable-reference</span>
is known as an <span class="Production">lvalue</span>.</p>

<h2><a name="_Toc251613029"></a><a name="_Toc525095605">5.5 Atomicity of
variable references</a></h2>

<p class="MsoNormal">Reads and writes of the following data types are atomic: <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, and
reference types. In addition, reads and writes of enum types with an underlying
type in the previous list are also atomic. Reads and writes of other types,
including <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, as
well as user-defined types, are not guaranteed to be atomic. Aside from the
library functions designed for that purpose, there is no guarantee of atomic
read-modify-write, such as in the case of increment or decrement.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section7">

<h1><a name="_Toc445783004"></a><a name="_Toc446302805"></a><a name="_Toc251613030">6. Conversions</a></h1>

<p class="MsoNormal">A <span class="Term">conversion</span> enables an expression
to be treated as being of a particular type. A conversion may cause an
expression of a given type to be treated as having a different type, or it may
cause an expression without a type to get a type. Conversions can be <span class="Term">implicit</span> or <span class="Term">explicit</span>, and this
determines whether an explicit cast is required. For instance, the conversion
from type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
is implicit, so expressions of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> can implicitly be treated as type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>. The
opposite conversion, from type <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, is explicit and so an explicit cast
is required.</p>

<p class="Code">int a = 123;<br>
long b = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // implicit conversion from int to long<br>
int c = (int) b;&nbsp; // explicit conversion from long to int</p>

<p class="MsoNormal">Some conversions are defined by the language. Programs may
also define their own conversions (§6.4).</p>

<h2><a name="_Toc446302806"></a><a name="_Toc251613031"></a><a name="_Ref448664519">6.1 Implicit conversions</a></h2>

<p class="MsoNormal">The following conversions are classified as implicit
conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Identity conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit numeric conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit enumeration conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit nullable conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Null literal conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit reference conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boxing conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit dynamic conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit constant expression conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>User-defined implicit conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Anonymous function conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Method group conversions</p>

<p class="MsoNormal">Implicit conversions can occur in a variety of situations,
including function member invocations (§7.5.4), cast expressions (§7.7.6), and assignments (§7.17).</p>

<p class="MsoNormal">The pre-defined implicit conversions always succeed and
never cause exceptions to be thrown. Properly designed user-defined implicit
conversions should exhibit these characteristics as well.</p>

<p class="MsoNormal">For the purposes of conversion, the types <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> are
considered equivalent. </p>

<p class="MsoNormal">However, dynamic conversions (§6.1.8 and §6.2.6) apply only to expressions of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
(§4.7).</p>

<h3><a name="_Toc251613032"></a><a name="_Ref448886446"></a><a name="_Ref448283133">6.1.1 Identity conversion</a></h3>

<p class="MsoNormal">An identity conversion converts from any type to the same
type. This conversion exists such that an entity that already has a required
type can be said to be convertible to that type.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in"><a name="_Ref448239742">Because object and dynamic are considered equivalent there
is an identity conversion between </a><span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and between constructed types
that are the same when replacing all occurences of <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<h3><a name="_Toc251613033"></a><a name="_Ref248243780"></a><a name="_Ref248242989"></a><a name="_Ref248242930">6.1.2 Implicit numeric
conversions</a></h3>

<p class="MsoNormal">The implicit numeric conversions are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">double</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">double</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoNormal">Conversions from <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> and from <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> may cause a loss of precision,
but will never cause a loss of magnitude. The other implicit numeric
conversions never lose any information.</p>

<p class="MsoNormal"><a name="_Ref448278167">There are no implicit conversions to
the </a><span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
type, so values of the other integral types do not automatically convert to the
<span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
type.</p>

<h3><a name="_Ref449819402"></a><a name="_Toc251613034"></a><a name="_Ref174223609">6.1.3 Implicit enumeration conversions</a></h3>

<p class="MsoNormal">An implicit enumeration conversion permits the <span class="Production">decimal-integer-literal</span> <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> to be converted to any <span class="Production">enum-type</span> and to any <span class="Production">nullable-type</span>
whose underlying type is an <span class="Production">enum-type</span>. In the
latter case the conversion is evaluated by converting to the underlying <span class="Production">enum-type</span> and wrapping the result (§4.1.10).</p>

<h3><a name="_Toc251613035"></a><a name="_Ref169606766">6.1.4 Implicit nullable
conversions</a></h3>

<p class="MsoNormal">Predefined implicit conversions that operate on non-nullable
value types can also be used with nullable forms of those types. For each of
the predefined implicit identity and numeric conversions that convert from a
non-nullable value type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to a non-nullable value type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>, the following implicit nullable conversions exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoNormal">Evaluation of an implicit nullable conversion based on an
underlying conversion from <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> proceeds as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the nullable conversion is from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the source
value is null (<span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span>
property is false), the result is the null value of type <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
conversion is evaluated as an unwrapping from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>, followed by the underlying conversion
from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
followed by a wrapping (§4.1.10) from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the nullable conversion is from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>, the conversion is evaluated as the
underlying conversion from <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> followed by a wrapping from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<h3><a name="_Ref462377681"></a><a name="_Toc251613036"></a><a name="_Ref174221565"></a><a name="_Toc170295694"></a>6.1.5 Null literal
conversions</h3>

<p class="MsoNormal">An implicit conversion exists from the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> literal to
any nullable type. This conversion produces the null value (§4.1.10) of the given nullable type.</p>

<h3><a name="_Toc251613037"></a><a name="_Ref174236530"></a><a name="_Ref174234228"></a><a name="_Ref174234076"></a><a name="_Ref174234031"></a><a name="_Ref174230101"></a><a name="_Ref174228285"></a><a name="_Ref174227663"></a><a name="_Ref174223742"></a><a name="_Ref174223631"></a><a name="_Ref174223380"></a><a name="_Ref174221958">6.1.6 Implicit reference conversions</a></h3>

<p class="MsoNormal">The implicit reference conversions are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">reference-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> implements <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From an <span class="Production">array-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> with an
element type <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span>
to an <span class="Production">array-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with an element type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>,
provided all of the following are true:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> differ only
in element type. In other words, <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> have the same number of dimensions.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Both <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>
are <span class="Production">reference-type</span>s.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An implicit
reference conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">array-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
and the interfaces it implements.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From a single-dimensional array type <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;T&gt;</span></span>
and its base interfaces, provided that there is an implicit identity or reference
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">delegate-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
and the interfaces it implements.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the null literal to any <span class="Production">reference-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">reference-type</span> to a <span class="Production">reference-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> if it has an implicit identity or
reference conversion to a <span class="Production">reference-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
has an identity conversion to <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">reference-type</span> to an
interface or delegate type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> if it has an implicit identity or reference conversion
to an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is variance-convertible (§13.1.3.2) to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit conversions involving type parameters that are known to
be reference types. See §6.1.10 for more details on implicit conversions
involving type parameters.</p>

<p class="MsoNormal">The implicit reference conversions are those conversions
between <span class="Production">reference-type</span>s that can be proven to
always succeed, and therefore require no checks at run-time.</p>

<p class="MsoNormal">Reference conversions, implicit or explicit, never change
the referential identity of the object being converted. In other words, while a
reference conversion may change the type of the reference, it never changes the
type or value of the object being referred to.</p>

<h3><a name="_Toc251613038"></a><a name="_Ref448283165"></a><a name="_Toc248227762"></a>6.1.7 Boxing conversions</h3>

<p class="MsoNormal">A boxing conversion permits a <span class="Production">value-type</span>
to be implicitly converted to a reference type. A boxing conversion exists from
any <span class="Production">non-nullable-value-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, to <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
and to any <span class="Production">interface-type</span> implemented by the <span class="Production">non-nullable-value-type</span>. Furthermore an <span class="Production">enum-type</span> can be converted to the type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>.</p>

<p class="MsoNormal">A boxing conversion exists from a <span class="Production">nullable-type</span>
to a reference type, if and only if a boxing conversion exists from the
underlying <span class="Production">non-nullable-value-type</span> to the
reference type.</p>

<p class="MsoNormal">A value type has a boxing conversion to an interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> if it has a boxing
conversion to an interface type <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
has an identity conversion to <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span>.</p>

<p class="MsoNormal">A value type has a boxing conversion to an interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> if it has a
boxing conversion to an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
is variance-convertible (§13.1.3.2) to <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>.</p>

<p class="MsoNormal">Boxing a value of a <span class="Production">non-nullable-value-type</span>
consists of allocating an object instance and copying the <span class="Production">value-type</span> value into that instance. A struct can be
boxed to the type <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>,
since that is a base class for all structs&nbsp;(§11.3.2).</p>

<p class="MsoNormal">Boxing a value of a <span class="Production">nullable-type</span>
proceeds as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the source value is null (<span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span> property is false), the result
is a null reference of the target type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is a reference to a boxed <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> produced by
unwrapping and boxing the source value.</p>

<p class="MsoNormal">Boxing conversions are described further in §4.3.1.</p>

<h3><a name="_Ref448283176"></a><a name="_Toc251613039"></a><a name="_Ref248144441">6.1.8 Implicit dynamic conversions</a></h3>

<p class="MsoNormal">An implicit dynamic conversion exists from an expression of
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
to any type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
The conversion is dynamically bound (§7.2.2), which means that an implicit
conversion will be sought at run-time from the run-time type of the expression
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. If
no conversion is found, a run-time exception is thrown.</p>

<p class="MsoNormal">Note that this implicit conversion seemingly violates the
advice in the beginning of §6.1 that an implicit conversion should never cause
an exception. However it is not the conversion itself, but the <em>finding </em><em><span style="font-style:normal">of the conversion that causes the exception. The risk
of run-time exceptions is inherent in the use of dynamic binding. If dynamic
binding of the conversion is not desired, the expression can be first converted
to </span></em><span class="Codefragment"><span style="font-size:10.0pt">object</span></span><em><span style="font-style:normal">, and then to the desired type.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">The following example
illustrates implicit dynamic conversions:</span></em></p>

<p class="Code"><em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">object
o&nbsp; = “object”<br>
dynamic d = “dynamic”;</span></em></p>

<p class="Code"><em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">string
s1 = o; // Fails at compile-time – no conversion exists<br>
string s2 = d; // Compiles and succeeds at run-time<br>
int i&nbsp;&nbsp;&nbsp;&nbsp; = d; // Compiles but fails at run-time – no conversion exists</span></em></p>

<p class="MsoNormal">The assignments to <span class="Codefragment"><span style="font-size:10.0pt">s2</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> both employ implicit dynamic
conversions, where the binding of the operations is suspended until run-time.
At run-time, implicit conversions are sought from the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> – <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> – to the
target type. A conversion is found to <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> but not to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<h3><a name="_Toc251613040">6.1.9 Implicit constant expression conversions</a></h3>

<p class="MsoNormal">An implicit constant expression conversion permits the
following conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">constant-expression</span> (§7.19) of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
can be converted to type <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, provided
the value of the <span class="Production">constant-expression</span> is within
the range of the destination type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">constant-expression</span> of type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> can be
converted to type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>,
provided the value of the <span class="Production">constant-expression</span> is
not negative.</p>

<h3><a name="_Toc251613041"></a><a name="_Ref156731486">6.1.10 Implicit
conversions involving type parameters</a></h3>

<p class="MsoNormal">The following implicit conversions exist for a given type
parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to its effective base class <span class="Codefragment"><span style="font-size:
10.0pt">C</span></span>, from <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> to any base class of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, and from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to any interface implemented by <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>. At run-time,
if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
value type, the conversion is executed as a boxing conversion. Otherwise, the
conversion is executed as an implicit reference conversion or identity
conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to an interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>’s
effective interface set and from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to any base interface of <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>. At run-time,
if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
value type, the conversion is executed as a boxing conversion. Otherwise, the
conversion is executed as an implicit reference conversion or identity
conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to a type parameter <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>,
provided <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
depends on <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
(§10.1.5). At run-time, if <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> is a value type, then <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> are necessarily the same type and no
conversion is performed. Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a value type, the conversion is executed
as a boxing conversion. Otherwise, the conversion is executed as an implicit
reference conversion or identity conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the null literal to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is known to be a reference type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to a reference type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
if it has an implicit conversion to a reference type <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
has an identity conversion to <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span>. At run-time the conversion is executed the same way as
the conversion to <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to an interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
if it has an implicit conversion to an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
is variance-convertible to <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> (§13.1.3.2). At run-time, if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a value type, the conversion is
executed as a boxing conversion. Otherwise, the conversion is executed as an
implicit reference conversion or identity conversion.</p>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is known to be a reference type (§10.1.5), the conversions above are all
classified as implicit reference conversions (§6.1.6). If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is <em>not</em>
known to be a reference type, the conversions above are classified as boxing
conversions (§6.1.7).</p>

<h3><a name="_Toc251613042">6.1.11 User-defined implicit conversions</a></h3>

<p class="MsoNormal"><a name="_Ref446425180">A user-defined implicit conversion
consists of an optional standard implicit conversion, followed by execution of
a user-defined implicit conversion operator, followed by another optional
standard implicit conversion. The exact rules for evaluating user-defined implicit
conversions are described in §</a>6.4.4.</p>

<h3><a name="_Toc251613043">6.1.12 Anonymous function conversions and method
group conversions</a></h3>

<p class="MsoNormal">Anonymous functions and method groups do not have types in
and of themselves, but may be implicitly converted to delegate types or
expression tree types. Anonymous function conversions are described in more
detail in §6.5 and method group conversions in §6.6.</p>

<h2><a name="_Toc251613044"></a><a name="_Ref248225970"></a><a name="_Ref514494680"></a><a name="_Ref495396758"></a><a name="_Ref471295662"></a><a name="_Ref471264870"></a><a name="_Ref465820357"></a><a name="_Ref452746931"></a><a name="_Toc446302807">6.2 Explicit conversions</a></h2>

<p class="MsoNormal">The following conversions are classified as explicit
conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>All implicit conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit numeric conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit enumeration conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit nullable conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit reference conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit interface conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Unboxing conversions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit dynamic conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>User-defined explicit conversions.</p>

<p class="MsoNormal">Explicit conversions can occur in cast expressions (§7.7.6).</p>

<p class="MsoNormal">The set of explicit conversions includes all implicit
conversions. This means that redundant cast expressions are allowed.</p>

<p class="MsoNormal">The explicit conversions that are not implicit conversions
are conversions that cannot be proven to always succeed, conversions that are
known to possibly lose information, and conversions across domains of types
sufficiently different to merit explicit notation.</p>

<h3><a name="_Toc251613045"></a><a name="_Ref448239786">6.2.1 Explicit numeric
conversions</a></h3>

<p class="MsoNormal">The explicit numeric conversions are the conversions from a <span class="Production">numeric-type</span> to another <span class="Production">numeric-type</span>
for which an implicit numeric conversion (§6.1.2) does not already exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><a name="_Ref446425416"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From </a><span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoNormal">Because the explicit conversions include all implicit and
explicit numeric conversions, it is always possible to convert from any <span class="Production">numeric-type</span> to any other <span class="Production">numeric-type</span>
using a cast expression (§7.7.6).</p>

<p class="MsoNormal">The explicit numeric conversions possibly lose information
or possibly cause exceptions to be thrown. An explicit numeric conversion is
processed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from an integral type to another integral type,
the processing depends on the overflow checking context (§7.6.12) in which the conversion takes place:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, the conversion succeeds if the value of the source operand is within
the range of the destination type, but throws a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span> if the value of
the source operand is outside the range of the destination type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>In an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, the conversion always succeeds, and proceeds as follows.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the source type is larger than the destination type, then the
source value is truncated by discarding its “extra” most significant bits. The
result is then treated as a value of the destination type.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the source type is smaller than the destination type, then the
source value is either sign-extended or zero-extended so that it is the same
size as the destination type. Sign-extension is used if the source type is
signed; zero-extension is used if the source type is unsigned. The result is
then treated as a value of the destination type.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the source type is the same size as the destination type, then
the source value is treated as a value of the destination type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> to an integral type, the source
value is rounded towards zero to the nearest integral value, and this integral
value becomes the result of the conversion. If the resulting integral value is
outside the range of the destination type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>&nbsp;is thrown.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> to an integral type, the
processing depends on the overflow checking context (§7.6.12) in which the
conversion takes place:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, the conversion proceeds as follows:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the value of the operand is NaN or infinite, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the source operand is rounded towards zero to the
nearest integral value. If this integral value is within the range of the
destination type then this value is the result of the conversion.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, a <span class="Codefragment"><span style="font-size:
10.0pt">System.OverflowException</span></span> is thrown.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>In an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, the conversion always succeeds, and proceeds as follows.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the value of the operand is NaN or infinite, the result of the
conversion is an unspecified value of the destination type.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the source operand is rounded towards zero to the
nearest integral value. If this integral value is within the range of the
destination type then this value is the result of the conversion.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result of the conversion is an unspecified value
of the destination type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> value is rounded to the nearest <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> value. If
the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
value is too small to represent as a <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, the result becomes positive zero
or negative zero. If the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
value is too large to represent as a <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, the result becomes positive
infinity or negative infinity. If the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> value is NaN, the result is also NaN.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, the source value is converted
to <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
representation and rounded to the nearest number after the 28<sup>th</sup>
decimal place if required (§4.1.7). If the source value is too small to
represent as a <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>,
the result becomes zero. If the source value is NaN, infinity, or too large to
represent as a <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>,
a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a conversion from <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> value is rounded to the nearest <span class="Codefragment"><span style="font-size:10.0pt">double</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> value.
While this conversion may lose precision, it never causes an exception to be
thrown.</p>

<h3><a name="_Toc251613046"></a><a name="_Ref448239720">6.2.2 Explicit
enumeration conversions</a></h3>

<p class="MsoNormal">The explicit enumeration conversions are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> to any <span class="Production">enum-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">enum-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">enum-type</span> to any other <span class="Production">enum-type</span>.</p>

<p class="MsoNormal">An explicit enumeration conversion between two types is
processed by treating any participating <span class="Production">enum-type</span>
as the underlying type of that <span class="Production">enum-type</span>, and
then performing an implicit or explicit numeric conversion between the resulting
types. For example, given an <span class="Production">enum-type</span> <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> with and
underlying type of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
a conversion from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>
is processed as an explicit numeric conversion (§6.2.1) from <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, and a
conversion from <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is
processed as an implicit numeric conversion (§6.1.2) from <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<h3><a name="_Ref451687046"></a><a name="_Toc251613047"></a><a name="_Ref174437950">6.2.3 Explicit nullable conversions</a></h3>

<p class="MsoNormal"><span class="Term">Explicit nullable conversions</span> permit
predefined explicit conversions that operate on non-nullable value types to
also be used with nullable forms of those types. For each of the predefined
explicit conversions that convert from a non-nullable value type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to a
non-nullable value type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
(§6.1.1, §6.1.2, §6.1.3, §6.2.1, and §6.2.2), the following nullable
conversions exist:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An explicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An explicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An explicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoNormal">Evaluation of a nullable conversion based on an underlying
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
proceeds as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the nullable conversion is from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the source
value is null (<span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span>
property is false), the result is the null value of type <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
conversion is evaluated as an unwrapping from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>, followed by the underlying conversion
from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
followed by a wrapping from <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the nullable conversion is from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>, the conversion is evaluated as the
underlying conversion from <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> followed by a wrapping from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the nullable conversion is from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, the conversion is evaluated as an
unwrapping from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
followed by the underlying conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Note that an
attempt to unwrap a nullable value will throw an exception if the value is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<h3><a name="_Toc251613048"></a><a name="_Ref174234291"></a><a name="_Ref174234119"></a><a name="_Ref174234092"></a><a name="_Ref174234041"></a><a name="_Ref174227698"></a><a name="_Ref174223684">6.2.4 Explicit reference
conversions</a></h3>

<p class="MsoNormal">The explicit reference conversions are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
to any other <span class="Production">reference-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is a base class of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is not sealed and provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> does not
implement <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">class-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is not sealed or provided <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> implements <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is not derived from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From an <span class="Production">array-type</span> <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> with an
element type <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span>
to an <span class="Production">array-type</span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with an element type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>,
provided all of the following are true:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> differ only
in element type. In other words, <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> have the same number of dimensions.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Both <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>
are <span class="Production">reference-type</span>s.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An explicit
reference conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>E</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>E</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
and the interfaces it implements to any <span class="Production">array-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From a single-dimensional array type <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;T&gt;</span></span>
and its base interfaces, provided that there is an explicit reference
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;S&gt;</span></span>
and its base interfaces to a single-dimensional array type <span class="Codefragment"><span style="font-size:10.0pt">T[]</span></span>, provided
that there is an explicit identity or reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
and the interfaces it implements to any <span class="Production">delegate-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From a reference type to a reference type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> if it has an
explicit reference conversion to a reference type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
has an identity conversion <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From a reference type to an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> if it has an
explicit reference conversion to an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
and either <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is variance-convertible to <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is variance-convertible to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> (§13.1.3.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">D&lt;S<sub>1</sub>…S<sub>n</sub>&gt;</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">D&lt;T<sub>1</sub>…T<sub>n</sub>&gt;</span></span>
where <span class="Codefragment"><span style="font-size:10.0pt">D&lt;X<sub>1</sub>…X<sub>n</sub>&gt;</span></span>
is a generic delegate type, <span class="Codefragment"><span style="font-size:
10.0pt">D&lt;S<sub>1</sub>…S<sub>n</sub>&gt;</span></span> is not compatible
with or identical to <span class="Codefragment"><span style="font-size:10.0pt">D&lt;T<sub>1</sub>…T<sub>n</sub>&gt;</span></span>,
and for each type parameter <span class="Codefragment"><span style="font-size:
10.0pt">X<sub>i</sub></span></span> of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> the following holds:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is invariant, then <span class="Codefragment"><span style="font-size:10.0pt">S<sub>i</sub></span></span>
is identical to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is covariant, then there is an implicit or explicit identity or reference
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>i</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> is
contravariant, then <span class="Codefragment"><span style="font-size:10.0pt">S<sub>i</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>
are either identical or both reference types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit conversions involving type parameters that are known to
be reference types. For more details on explicit conversions involving type
parameters, see §6.2.6.</p>

<p class="MsoNormal">The explicit reference conversions are those conversions
between reference-types that require run-time checks to ensure they are
correct.</p>

<p class="MsoNormal">For an explicit reference conversion to succeed at run-time,
the value of the source operand must be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, or the <em>actual</em> type of the
object referenced by the source operand must be a type that can be converted to
the destination type by an implicit reference conversion (§6.1.6) or boxing conversion (§6.1.7). If an explicit reference conversion fails, a <span class="Codefragment"><span style="font-size:10.0pt">System.InvalidCastException</span></span>
is thrown.</p>

<p class="MsoNormal">Reference conversions, implicit or explicit, never change
the referential identity of the object being converted. In other words, while a
reference conversion may change the type of the reference, it never changes the
type or value of the object being referred to.</p>

<h3><a name="_Toc251613049"></a><a name="_Ref496417700">6.2.5 Unboxing
conversions</a></h3>

<p class="MsoNormal"><a name="_Ref446425460">An unboxing conversion permits a
reference type to be explicitly converted to a </a><span class="Production">value-type</span>.
An unboxing conversion exists from the types <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span> to any <span class="Production">non-nullable-value-type</span>, and from any <span class="Production">interface-type</span> to any <span class="Production">non-nullable-value-type</span>
that implements the <span class="Production">interface-type</span>. Furthermore
type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>
can be unboxed to any <span class="Production">enum-type</span>.</p>

<p class="MsoNormal">An unboxing conversion exists from a reference type to a <span class="Production">nullable-type</span> if an unboxing conversion exists from the
reference type to the underlying <span class="Production">non-nullable-value-type</span>
of the <span class="Production">nullable-type</span>.</p>

<p class="MsoNormal">A value type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> has an unboxing conversion from an
interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
if it has an unboxing conversion from an interface type <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
has an identity conversion to <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span>.</p>

<p class="MsoNormal">A value type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> has an unboxing conversion from an
interface type <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
if it has an unboxing conversion from an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
and either <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span>
is variance-convertible to <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> is variance-convertible to <span class="Codefragment"><span style="font-size:10.0pt">I<sub>0</sub></span></span> (§13.1.3.2).</p>

<p class="MsoNormal">An unboxing operation consists of first checking that the
object instance is a boxed value of the given <span class="Production">value-type</span>,
and then copying the value out of the instance. Unboxing a null reference to a <span class="Production">nullable-type</span> produces the null value of the <span class="Production">nullable-type</span>. A struct can be unboxed from the type <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>,
since that is a base class for all structs&nbsp;(§11.3.2).</p>

<p class="MsoNormal">Unboxing conversions are described further in §4.3.2.</p>

<h3><a name="_Ref156731196"></a><a name="_Toc251613050"></a><a name="_Ref248201876">6.2.6 Explicit dynamic conversions</a></h3>

<p class="MsoNormal">An explicit dynamic conversion exists from an expression of
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
to any type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
The conversion is dynamically bound (§7.2.2), which means that an explicit
conversion will be sought at run-time from the run-time type of the expression
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. If
no conversion is found, a run-time exception is thrown.</p>

<p class="MsoNormal"><em><span style="font-style:normal">If dynamic binding of
the conversion is not desired, the expression can be first converted to </span></em><span class="Codefragment"><span style="font-size:10.0pt">object</span></span><em><span style="font-style:normal">, and then to the desired type.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">Assume the following
class is defined:</span></em></p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; int i;</p>

<p class="Code">&nbsp;&nbsp; public C(int i) { this.i = i; }</p>

<p class="Code">&nbsp;&nbsp; public static explicit operator C(string s) <br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new C(int.Parse(s));<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal"><em><span style="font-style:normal">The following example
illustrates explicit dynamic conversions:</span></em></p>

<p class="Code">object o&nbsp; = "1";<br>
dynamic d = "2";</p>

<p class="Code">var c1 = (C)o; // Compiles, but explicit reference conversion
fails<br>
var c2 = (C)d; // Compiles and user defined conversion succeeds</p>

<p class="MsoNormal">The best conversion of <span class="Codefragment"><span style="font-size:10.0pt">o</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is found at compile-time to be an
explicit reference conversion. This fails at run-time, because <span class="Codefragment"><span style="font-size:10.0pt">“1”</span></span> is not in
fact a <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.
The conversion of <span class="Codefragment"><span style="font-size:10.0pt">d</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
however, as an explicit dynamic conversion, is suspended to run-time, where a
user defined conversion from the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> – <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> – to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is found, and succeeds.</p>

<h3><a name="_Toc251613051">6.2.7 Explicit conversions involving type
parameters</a></h3>

<p class="MsoNormal">The following explicit conversions exist for a given type
parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the effective base class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and from any base class of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. At run-time,
if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
value type, the conversion is executed as an unboxing conversion. Otherwise,
the conversion is executed as an explicit reference conversion or identity
conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any interface type to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. At run-time, if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a value
type, the conversion is executed as an unboxing conversion. Otherwise, the
conversion is executed as an explicit reference conversion or identity
conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to any <span class="Production">interface-type</span> <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> provided there is not already an
implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>. At
run-time, if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a value type, the conversion is executed as a boxing conversion followed by
an explicit reference conversion. Otherwise, the conversion is executed as an
explicit reference conversion or identity conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From a type parameter <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> depends on <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> (§10.1.5). At run-time, if <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is a value
type, then <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> are
necessarily the same type and no conversion is performed. Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a value
type, the conversion is executed as an unboxing conversion. Otherwise, the
conversion is executed as an explicit reference conversion or identity
conversion.</p>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is known to be a reference type, the conversions above are all classified as
explicit reference conversions (§6.2.4). If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is <em>not</em> known to be a
reference type, the conversions above are classified as unboxing conversions (§6.2.5).</p>

<p class="MsoNormal">The above rules do not permit a direct explicit conversion
from an unconstrained type parameter to a non-interface type, which might be
surprising. The reason for this rule is to prevent confusion and make the
semantics of such conversions clear. For example, consider the following
declaration:</p>

<p class="Code">class X&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public static long F(T t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (long)t;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // Error <br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">If the direct explicit conversion of <span class="Codefragment"><span style="font-size:10.0pt">t</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> were
permitted, one might easily expect that <span class="Codefragment"><span style="font-size:10.0pt">X&lt;int&gt;.F(7)</span></span> would return&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">7L</span></span>. However, it
would not, because the standard numeric conversions are only considered when
the types are known to be numeric at binding-time. In order to make the
semantics clear, the above example must instead be written:</p>

<p class="Code">class X&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public static long F(T t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (long)(object)t;&nbsp;&nbsp;&nbsp; // Ok, but will only work when T is long<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">This code will now compile but executing <span class="Codefragment"><span style="font-size:10.0pt">X&lt;int&gt;.F(7)</span></span>
would then throw an exception at run-time, since a boxed <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> cannot be
converted directly to a <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>.</p>

<h3><a name="_Toc251613052">6.2.8 User-defined explicit conversions</a></h3>

<p class="MsoNormal">A user-defined explicit conversion consists of an optional
standard explicit conversion, followed by execution of a user-defined implicit
or explicit conversion operator, followed by another optional standard explicit
conversion. The exact rules for evaluating user-defined explicit conversions
are described in §6.4.5.</p>

<h2><a name="_Ref446410621"></a><a name="_Toc446302808"></a><a name="_Toc251613053"></a><a name="_Ref461966605">6.3 Standard conversions</a></h2>

<p class="MsoNormal">The standard conversions are those pre-defined conversions
that can occur as part of a user-defined conversion.</p>

<h3><a name="_Toc251613054"></a><a name="_Ref448208013">6.3.1 Standard implicit
conversions</a></h3>

<p class="MsoNormal">The following implicit conversions are classified as
standard implicit conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Identity conversions (§6.1.1)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit numeric conversions (§6.1.2)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit nullable conversions (§6.1.4)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit reference conversions (§6.1.6)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boxing conversions (§6.1.7)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit constant expression conversions (§6.1.8)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit conversions involving type parameters (§6.1.10)</p>

<p class="MsoNormal">The standard implicit conversions specifically exclude
user-defined implicit conversions.</p>

<h3><a name="_Toc251613055"></a><a name="_Ref514068324">6.3.2 Standard explicit
conversions</a></h3>

<p class="MsoNormal">The standard explicit conversions are all standard implicit
conversions plus the subset of the explicit conversions for which an opposite
standard implicit conversion exists. In other words, if a standard implicit
conversion exists from a type <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> to a type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, then a standard explicit conversion
exists from type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
and from type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<h2><a name="_Toc251613056"></a><a name="_Ref461975069">6.4 User-defined
conversions</a></h2>

<p class="MsoNormal">C# allows the pre-defined implicit and explicit conversions
to be augmented by <span class="Term">user-defined conversions</span>.
User-defined conversions are introduced by declaring conversion operators (§10.10.3) in class and struct types.</p>

<h3><a name="_Toc251613057">6.4.1 Permitted user-defined conversions</a></h3>

<p class="MsoNormal">C# permits only certain user-defined conversions to be
declared. In particular, it is not possible to redefine an already existing
implicit or explicit conversion. </p>

<p class="MsoNormal">For a given source type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and target type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, if <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are nullable
types, let <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
refer to their underlying types, otherwise <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are equal to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
respectively. A class or struct is permitted to declare a conversion from a
source type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to a target type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
only if all of the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are different types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Either <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is the class or struct type in which the operator declaration takes place.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Neither <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
nor <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is an <span class="Production">interface-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Excluding user-defined conversions, a conversion does not exist
from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or from
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>.</p>

<p class="MsoNormal">The restrictions that apply to user-defined conversions are
discussed further in §10.10.3.</p>

<h3><a name="_Toc251613058">6.4.2 Lifted conversion operators</a></h3>

<p class="MsoNormal">Given a user-defined conversion operator that converts from
a non-nullable value type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to a non-nullable value type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>, a <span class="Term">lifted conversion operator</span>
exists that converts from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>. This
lifted conversion operator performs an unwrapping from <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> followed by
the user-defined conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> followed by a wrapping from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>, except that
a null valued <span class="Codefragment"><span style="font-size:10.0pt">S?</span></span>
converts directly to a null valued <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span>.</p>

<p class="MsoNormal">A lifted conversion operator has the same implicit or
explicit classification as its underlying user-defined conversion operator. The
term “user-defined conversion” applies to the use of both user-defined and
lifted conversion operators.</p>

<h3><a name="_Toc251613059"></a><a name="_Ref449415525"></a><a name="_Toc446302810">6.4.3 Evaluation of user-defined conversions</a></h3>

<p class="MsoNormal">A user-defined conversion converts a value from its type,
called the <span class="Term">source type</span>, to another type, called the <span class="Term">target type</span>. Evaluation of a user-defined conversion centers
on finding the <span class="Term">most specific</span> user-defined conversion
operator for the particular source and target types. This determination is
broken into several steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finding the set of classes and structs from which user-defined
conversion operators will be considered. This set consists of the source type
and its base classes and the target type and its base classes (with the
implicit assumptions that only classes and structs can declare user-defined
operators, and that non-class types have no base classes). For the purposes of
this step, if either the source or target type is a <span class="Production">nullable-type</span>,
their underlying type is used instead.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From that set of types, determining which user-defined and lifted
conversion operators are applicable. For a conversion operator to be
applicable, it must be possible to perform a standard conversion (§6.3) from the source type to the operand type of the operator, and it must be
possible to perform a standard conversion from the result type of the operator
to the target type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the set of applicable user-defined operators, determining
which operator is unambiguously the most specific. In general terms, the most
specific operator is the operator whose operand type is “closest” to the source
type and whose result type is “closest” to the target type. User-defined
conversion operators are preferred over lifted conversion operators. The exact
rules for establishing the most specific user-defined conversion operator are
defined in the following sections.</p>

<p class="MsoNormal">Once a most specific user-defined conversion operator has
been identified, the actual execution of the user-defined conversion involves
up to three steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First, if required, performing a standard conversion from the
source type to the operand type of the user-defined or lifted conversion
operator.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Next, invoking the user-defined or lifted conversion operator to
perform the conversion.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finally, if required, performing a standard conversion from the
result type of the user-defined or lifted conversion operator to the target
type.</p>

<p class="MsoNormal">Evaluation of a user-defined conversion never involves more
than one user-defined or lifted conversion operator. In other words, a
conversion from type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
will never first execute a user-defined conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and then
execute a user-defined conversion from <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoNormal"><a name="_Toc446302811">Exact definitions of evaluation of
user-defined implicit or explicit conversions are given in the following
sections. The definitions make use of the following terms:</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a standard implicit conversion (§6.3.1) exists from a type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> to a type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, and if
neither <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
nor <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
<span class="Production">interface-type</span>s, then <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is said to be <span class="Term">encompassed
by</span> <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> is
said to <span class="Term">encompass</span> <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Term">most encompassing type</span> in a set of
types is the one type that encompasses all other types in the set. If no single
type encompasses all other types, then the set has no most encompassing type.
In more intuitive terms, the most encompassing type is the “largest” type in
the set—the one type to which each of the other types can be implicitly
converted.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Term">most encompassed type</span> in a set of
types is the one type that is encompassed by all other types in the set. If no
single type is encompassed by all other types, then the set has no most
encompassed type. In more intuitive terms, the most encompassed type is the
“smallest” type in the set—the one type that can be implicitly converted to
each of the other types.</p>

<h3><a name="_Toc251613060"></a><a name="_Ref446426007">6.4.4 User-defined
implicit conversion</a>s</h3>

<p class="MsoNormal">A user-defined implicit conversion from type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is processed
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Determine the types <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>.
If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are nullable
types, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are their underlying types, otherwise <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are equal to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
respectively.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the set of types, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, from which user-defined conversion
operators will be considered. This set consists of <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> (if <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
is a class or struct), the base classes of <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> (if <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
is a class), and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
(if <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is a class or struct).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the set of applicable user-defined and lifted conversion
operators, <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
This set consists of the user-defined and lifted implicit conversion operators
declared by the classes or structs in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> that convert from a type encompassing <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to a type
encompassed by <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
If <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is
empty, the conversion is undefined and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific source type, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>, of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If any of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
is the most encompassed type in the combined set of source types of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
If exactly one most encompassed type cannot be found, then the conversion is
ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific target type, <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>, of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If any of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is the most encompassing type in the combined set of target types of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
If exactly one most encompassing type cannot be found, then the conversion is
ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific conversion operator:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> contains
exactly one user-defined conversion operator that converts from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>,
then this is the most specific conversion operator.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> contains
exactly one lifted conversion operator that converts from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>,
then this is the most specific conversion operator.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
conversion is ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finally, apply the conversion:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>,
then a standard implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span> is performed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The most
specific conversion operator is invoked to convert from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
then a standard implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is performed.</p>

<h3><a name="_Toc251613061"></a><a name="_Ref446426035"></a><a name="_Toc446302812">6.4.5 User-defined explicit conversion</a>s</h3>

<p class="MsoNormal">A user-defined explicit conversion from type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is processed
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Determine the types <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>.
If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are nullable
types, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are their underlying types, otherwise <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are equal to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
respectively.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the set of types, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, from which user-defined conversion
operators will be considered. This set consists of <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> (if <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
is a class or struct), the base classes of <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> (if <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
is a class), <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
(if <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is a class or struct), and the base classes of <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> (if <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is a class).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the set of applicable user-defined and lifted conversion
operators, <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
This set consists of the user-defined and lifted implicit or explicit
conversion operators declared by the classes or structs in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> that convert
from a type encompassing or encompassed by <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to a type encompassing or encompassed
by <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is empty, the
conversion is undefined and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific source type, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>, of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If any of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
any of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert from types that encompass <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>, then <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span> is the most encompassed
type in the combined set of source types of those operators. If no most
encompassed type can be found, then the conversion is ambiguous and a
compile-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
is the most encompassing type in the combined set of source types of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
If exactly one most encompassing type cannot be found, then the conversion is
ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific target type, <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>, of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If any of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
any of the operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
convert to types that are encompassed by <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, then <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span> is the most encompassing
type in the combined set of target types of those operators. If exactly one most
encompassing type cannot be found, then the conversion is ambiguous and a
compile-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is the most encompassed type in the combined set of target types of the
operators in <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>.
If no most encompassed type can be found, then the conversion is ambiguous and
a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Find the most specific conversion operator:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> contains
exactly one user-defined conversion operator that converts from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>,
then this is the most specific conversion operator.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> contains
exactly one lifted conversion operator that converts from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>,
then this is the most specific conversion operator.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
conversion is ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finally, apply the conversion:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>,
then a standard explicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span> is performed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The most
specific user-defined conversion operator is invoked to convert from <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
then a standard explicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">T<sub>X</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is performed.</p>

<h2><a name="_Toc251613062"></a><a name="_Ref171237574">6.5 Anonymous function
conversions</a></h2>

<p class="MsoNormal">An <span class="Production">anonymous-method-expression</span>
or <span class="Production">lambda-expression</span> is classified as an
anonymous function (§7.15). The expression does not have a type but can be
implicitly converted to a compatible delegate type or expression tree type.
Specifically, a delegate type <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> is compatible with an anonymous function <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> provided:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
contains an <span class="Production">anonymous-function-signature</span>, then <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> have the same
number of parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
does not contain an <span class="Production">anonymous-function-signature</span>,
then <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
may have zero or more parameters of any type, as long as no parameter of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> has the <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter
modifier.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
has an explicitly typed parameter list, each parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> has the same
type and modifiers as the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
has an implicitly typed parameter list, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> has no <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
has a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
return type and the body of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> is an expression, when each parameter of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is given the
type of the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is a valid expression (wrt §7) that
would be permitted as a <span class="Production">statement-expression</span>
(§8.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
has a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
return type and the body of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> is a statement block, when each parameter of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is given the
type of the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is a valid statement block (wrt §8.2)
in which no <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement specifies an expression.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
has a non-void return type and the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is an expression, when each parameter
of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is
given the type of the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is a valid expression (wrt §7) that is
implicitly convertible to the return type of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
has a non-void return type and the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is a statement block, when each
parameter of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is given the type of the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, the body of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is a valid statement block (wrt §8.2)
with a non-reachable end point in which each <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement specifies an expression
that is implicitly convertible to the return type of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>. </p>

<p class="MsoNormal">An expression tree type <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;D&gt;</span></span> is compatible with
an anonymous function <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
if the delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is compatible with <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>.</p>

<p class="MsoNormal">Certain anonymous functions cannot be converted to
expression tree types: Even though the conversion <em>exists</em>, it fails at
compile-time. This is the case if the anonymous expression contains one or more
of the following constructs:</p>

<p class="MsoListBullet"><em><span style="font-family:Symbol;font-style:normal">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><em><span style="font-style:normal">simple or compound
assignment operators</span></em></p>

<p class="MsoListBullet"><em><span style="font-family:Symbol;font-style:normal">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em><em><span style="font-style:normal">a dynamically bound
expression</span></em></p>

<p class="MsoNormal">The examples that follow use a generic delegate type <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;A,R&gt;</span></span>
which represents a function that takes an argument of type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and returns a
value of type <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>:</p>

<p class="Code">delegate R Func&lt;A,R&gt;(A arg);</p>

<p class="MsoNormal">In the assignments</p>

<p class="Code">Func&lt;int,int&gt; f1 = x =&gt; x + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">Func&lt;int,double&gt; f2 = x =&gt; x + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">Func&lt;double,int&gt; f3 = x =&gt; x + 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error</p>

<p class="MsoNormal">the parameter and return types of each anonymous function
are determined from the type of the variable to which the anonymous function is
assigned. </p>

<p class="MsoNormal">The first assignment successfully converts the anonymous
function to the delegate type <span class="Codefragment"><span style="font-size:
10.0pt">Func&lt;int,int&gt;</span></span> because, when <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is given type
<span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> is a valid
expression that is implicitly convertible to type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>. </p>

<p class="MsoNormal">Likewise, the second assignment successfully converts the anonymous
function to the delegate type <span class="Codefragment"><span style="font-size:
10.0pt">Func&lt;int,double&gt;</span></span> because the result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> (of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>) is
implicitly convertible to type <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span>. </p>

<p class="MsoNormal">However, the third assignment is a compile-time error
because, when <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is given type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>,
the result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> (of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>) is not
implicitly convertible to type <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span>.</p>

<p class="MsoNormal">Anonymous functions may influence overload resolution, and
participate in type inference. See §7.5 for further details.</p>

<h3><a name="_Ref171237559"></a><a name="_Toc251613063"></a><a name="_Toc171393631"></a>6.5.1 Evaluation of anonymous function conversions to
delegate types</h3>

<p class="MsoNormal">Conversion of an anonymous function to a delegate type
produces a delegate instance which references the anonymous function and the
(possibly empty) set of captured outer variables that are active at the time of
the evaluation. When the delegate is invoked, the body of the anonymous
function is executed. The code in the body is executed using the set of
captured outer variables referenced by the delegate.</p>

<p class="MsoNormal">The invocation list of a delegate produced from an anonymous
function contains a single entry. The exact target object and target method of
the delegate are unspecified. In particular, it is unspecified whether the
target object of the delegate is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> value of the enclosing function
member, or some other object.</p>

<p class="MsoNormal">Conversions of semantically identical anonymous functions
with the same (possibly empty) set of captured outer variable instances to the
same delegate types are permitted (but not required) to return the same delegate instance. The term semantically identical is used here to mean that execution of
the anonymous functions will, in all cases, produce the same effects given the
same arguments. This rule permits code such as the following to be optimized.</p>

<p class="Code">delegate double Function(double x);</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static double[] Apply(double[] a, Function f) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[] result = new double[a.Length];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.Length; i++) result[i] = f(a[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(double[] a, double[] b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = Apply(a, (double x) =&gt; Math.Sin(x));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = Apply(b, (double y) =&gt; Math.Sin(y));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Since the two anonymous function delegates have the same
(empty) set of captured outer variables, and since the anonymous functions are
semantically identical, the compiler is permitted to have the delegates refer
to the same target method. Indeed, the compiler is permitted to return the very
same delegate instance from both anonymous function expressions.</p>

<h3><a name="_Toc251613064"></a><a name="_Ref174229760">6.5.2 Evaluation of
anonymous function conversions to expression tree types</a></h3>

<p class="MsoNormal">Conversion of an anonymous function to an expression tree type
produces an expression tree (§4.6). More precisely, evaluation of the anonymous
function conversion leads to the construction of an object structure that
represents the structure of the anonymous function itself. The precise
structure of the expression tree, as well as the exact process for creating it,
are implementation defined.</p>

<h3><a name="_Toc251613065">6.5.3 Implementation example</a></h3>

<p class="MsoNormal">This section describes a possible implementation of
anonymous function conversions in terms of other C# constructs. The
implementation described here is based on the same principles used by the
Microsoft C# compiler, but it is by no means a mandated implementation, nor is
it the only one possible. It only briefly mentions conversions to expression
trees, as their exact semantics are outside the scope of this specification.</p>

<p class="MsoNormal">The remainder of this section gives several examples of code
that contains anonymous functions with different characteristics. For each
example, a corresponding translation to code that uses only other C# constructs
is provided. In the examples, the identifier <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is assumed by represent the following delegate type:</p>

<p class="Code">public delegate void D();</p>

<p class="MsoNormal">The simplest form of an anonymous function is one that
captures no outer variables:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = () =&gt; { Console.WriteLine("test"); };<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">This can be translated to a delegate instantiation that
references a compiler generated static method in which the code of the anonymous
function is placed:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = new D(__Method1);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void __Method1() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("test");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the following example, the anonymous function references
instance members of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; int x;</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = () =&gt; { Console.WriteLine(x); };<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">This can be translated to a compiler generated instance
method containing the code of the anonymous function:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; int x;</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = new D(__Method1);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void __Method1() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In this example, the anonymous function captures a local
variable:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = () =&gt; { Console.WriteLine(y); };<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The lifetime of the local variable must now be extended to
at least the lifetime of the anonymous function delegate. This can be achieved
by “hoisting” the local variable into a field of a compiler generated class.
Instantiation of the local variable (§7.15.5.2) then corresponds to creating an
instance of the compiler generated class, and accessing the local variable
corresponds to accessing a field in the instance of the compiler generated
class. Furthermore, the anonymous function becomes an instance method of the
compiler generated class:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __Locals1 __locals1 = new __Locals1();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __locals1.y = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = new D(__locals1.__Method1);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Locals1<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int y;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void __Method1() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Finally, the following anonymous function captures <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> as well as
two local variables with different lifetimes:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; int x;</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y = 123;<br>
&nbsp;&nbsp; &nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int z = i * 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = () =&gt; { Console.WriteLine(x + y + z); };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Here, a compiler generated class is created for each
statement block in which locals are captured such that the locals in the
different blocks can have independent lifetimes. An instance of <span class="Codefragment"><span style="font-size:10.0pt">__Locals2</span></span>, the
compiler generated class for the inner statement block, contains the local
variable <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>
and a field that references an instance of <span class="Codefragment"><span style="font-size:10.0pt">__Locals1</span></span>.&nbsp; An instance of <span class="Codefragment"><span style="font-size:10.0pt">__Locals1</span></span>, the
compiler generated class for the outer statement block, contains the local
variable <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
and a field that references <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> of the enclosing function member. With these data
structures it is possible to reach all captured outer variables through an
instance of <span class="Codefragment"><span style="font-size:10.0pt">__Local2</span></span>,
and the code of the anonymous function can thus be implemented as an instance
method of that class.</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __Locals1 __locals1 = new __Locals1();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __locals1.__this = this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __locals1.y = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 10; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __Locals2 __locals2 = new __Locals2();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __locals2.__locals1 = __locals1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __locals2.z = i * 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = new D(__locals2.__Method1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Locals1<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Test __this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int y;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Locals2<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public __Locals1 __locals1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int z;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void __Method1() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(__locals1.__this.x + __locals1.y + z);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The same technique applied here to capture local variables
can also be used when converting anonymous functions to expression trees: References
to the compiler generated objects can be stored in the expression tree, and
access to the local variables can be represented as field accesses on these
objects. The advantage of this approach is that it allows the “lifted” local
variables to be shared between delegates and expression trees.</p>

<h2><a name="_Toc251613066"></a><a name="_Ref174227969"></a><a name="_Ref174226976"></a><a name="_Ref174226940"></a><a name="_Ref174225595"></a><a name="_Ref174224347"></a><a name="_Ref174223454">6.6 Method group conversions</a></h2>

<p class="MsoNormal">An implicit conversion (§6.1) exists from a method group (§7.1)
to a compatible delegate type. Given a delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and an expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> that is
classified as a method group, an implicit conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> contains at
least one method that is applicable in its normal form (§7.5.3.1) to an argument list constructed by use of the parameter types and modifiers of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, as described
in the following.</p>

<p class="MsoNormal">The compile-time application of a conversion from a method
group <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to a delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is described in the following. Note that the existence of an implicit
conversion from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> does
not guarantee that the compile-time application of the conversion will succeed
without error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A single method <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is selected corresponding to a method invocation (§7.6.5.1) of the form <span class="Codefragment"><span style="font-size:10.0pt">E(A)</span></span>,
with the following modifications:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The argument
list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
a list of expressions, each classified as a variable and with the type and
modifier (<span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>)
of the corresponding parameter in the <span class="Production">formal-parameter-list</span>
of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The candidate
methods considered are only those methods that are applicable in their normal
form (§7.5.3.1), not those applicable only in their expanded form.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the algorithm of §7.6.5.1 produces an error, then a
compile-time error occurs. Otherwise the algorithm produces a single best
method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> having
the same number of parameters as <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and the conversion is considered to
exist.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The selected method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> must be compatible (§15.2) with the delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>,
or otherwise, a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the selected method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an instance method, the instance
expression associated with <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> determines the target object of the delegate.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the selected method M is an extension method which is denoted
by means of a member access on an instance expression, that instance expression
determines the target object of the delegate.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The result of the conversion is a value of type&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, namely a
newly created delegate that refers to the selected method and target object.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Note that this
process can lead to the creation of a delegate to an extension method, if the
algorithm of §7.6.5.1 fails to find an instance method but succeeds in
processing the invocation of <span class="Codefragment"><span style="font-size:
10.0pt">E(A)</span></span> as an extension method invocation (§7.6.5.2). A delegate thus created captures the extension method as well as its first
argument.</p>

<p class="MsoNormal">The following example demonstrates method group conversions:</p>

<p class="Code">delegate string D1(object o);</p>

<p class="Code">delegate object D2(string s);</p>

<p class="Code">delegate object D3();</p>

<p class="Code">delegate string D4(object o, params object[] a);</p>

<p class="Code">delegate string D5(int i);</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static string F(object o) {...}</p>

<p class="Code">&nbsp;&nbsp; static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D1 d1 = F;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D2 d2 = F;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D3 d3 = F;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error – not applicable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D4 d4 = F;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error – not applicable in normal form<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D5 d5 = F; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error – applicable but not compatible</p>

<p class="Code">&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">d1</span></span> implicitly converts the method group <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> to a value of
type <span class="Codefragment"><span style="font-size:10.0pt">D1</span></span>.</p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">d2</span></span> shows how it is possible to create a delegate to a method that has less derived (contra-variant) parameter types and a more
derived (covariant) return type. </p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">d3</span></span> shows how no conversion exists if the
method is not applicable.</p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">d4</span></span> shows how the method must be
applicable in its normal form.</p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">d5</span></span> shows how parameter and return types
of the delegate and method are allowed to differ only for reference types.</p>

<p class="MsoNormal">As with all other implicit and explicit conversions, the
cast operator can be used to explicitly perform a method group conversion.
Thus, the example</p>

<p class="Code">object obj = new EventHandler(myDialog.OkClick);</p>

<p class="MsoNormal">could instead be written</p>

<p class="Code">object obj = (EventHandler)myDialog.OkClick;</p>

<p class="MsoNormal">Method groups may influence overload resolution, and
participate in type inference. See §7.5 for further details.</p>

<p class="MsoNormal">The run-time evaluation of a method group conversion
proceeds as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the method selected at compile-time is an instance method, or
it is an extension method which is accessed as an instance method, the target
object of the delegate is determined from the instance expression associated
with <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
expression is evaluated. If this evaluation causes an exception, no further
steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the instance
expression is of a <span class="Production">reference-type</span>, the value
computed by the instance expression becomes the target object. If the selected
method is an instance method and the target object is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span> is thrown
and no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the instance
expression is of a <span class="Production">value-type</span>, a boxing operation
(§4.3.1) is performed to convert the value to an object, and this object
becomes the target object.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise the selected method is part of a static method call, and
the target object of the delegate is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A new instance of the delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is allocated. If there is not enough
memory available to allocate the new instance, a <span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span> is thrown
and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The new delegate instance is initialized with a reference to the
method that was determined at compile-time and a reference to the target object
computed above.</p>

<p class="MsoNormal">&nbsp;</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section8">

<h1><a name="_Toc251613067">7. Expressions</a></h1>

<p class="MsoNormal">An expression is a sequence of operators and operands. This
chapter defines the syntax, order of evaluation of operands and operators, and
meaning of expressions.</p>

<h2><a name="_Toc445783005"></a><a name="_Toc251613068"></a><a name="_Ref508192644">7.1 Expression classifications</a></h2>

<p class="MsoNormal">An expression is classified as one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A value. Every value has an associated type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable. Every variable has an associated type, namely the
declared type of the variable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A namespace. An expression with this classification can only
appear as the left hand side of a <span class="Production">member-access</span>
(§7.6.4). In any other context, an expression classified as a namespace causes
a compile-time error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type. An expression with this classification can only appear as
the left hand side of a <span class="Production">member-access</span> (§7.6.4), or as an operand for the <span class="Codefragment"><span style="font-size:
10.0pt">as</span></span> operator (§7.10.11), the <span class="Codefragment"><span style="font-size:10.0pt">is</span></span> operator (§7.10.10), or the <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span> operator
(§7.6.11). In any other context, an expression classified as a type causes a
compile-time error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A method group, which is a set of overloaded methods resulting
from a member lookup (§7.4). A method group may have an associated instance
expression and an associated type argument list. When an instance method is
invoked, the result of evaluating the instance expression becomes the instance
represented by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
(§7.6.7). A method group is permitted in an <span class="Production">invocation-expression</span>
(§7.6.5) , a <span class="Production">delegate-creation-expression</span> (§7.6.10.5) and as the left hand side of an is operator, and can be implicitly
converted to a compatible delegate type (§6.6). In any other context, an
expression classified as a method group causes a compile-time error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A null literal. An expression with this classification can be
implicitly converted to a reference type or nullable type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An anonymous function. An expression with this classification can
be implicitly converted to a compatible delegate type or expression tree type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property access. Every property access has an associated type,
namely the type of the property. Furthermore, a property access may have an
associated instance expression. When an accessor (the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> block) of an instance property
access is invoked, the result of evaluating the instance expression becomes the
instance represented by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
(§7.6.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An event access. Every event access has an associated type,
namely the type of the event. Furthermore, an event access may have an
associated instance expression. An event access may appear as the left hand
operand of the <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>
operators (§7.17.3). In any other context, an expression classified as an event
access causes a compile-time error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An indexer access. Every indexer access has an associated type,
namely the element type of the indexer. Furthermore, an indexer access has an
associated instance expression and an associated argument list. When an accessor
(the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
block) of an indexer access is invoked, the result of evaluating the instance
expression becomes the instance represented by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> (§7.6.7), and the result of
evaluating the argument list becomes the parameter list of the invocation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Nothing. This occurs when the expression is an invocation of a
method with a return type of <span class="Codefragment"><span style="font-size:
10.0pt">void</span></span>. An expression classified as nothing is only valid
in the context of a <span class="Production">statement-expression</span> (§8.6).</p>

<p class="MsoNormal">The final result of an expression is never a namespace,
type, method group, or event access. Rather, as noted above, these categories of
expressions are intermediate constructs that are only permitted in certain
contexts.</p>

<p class="MsoNormal">A property access or indexer access is always reclassified
as a value by performing an invocation of the <span class="Production">get-accessor</span>
or the <span class="Production">set-accessor</span>. The particular accessor is
determined by the context of the property or indexer access: If the access is
the target of an assignment, the <span class="Production">set-accessor</span> is
invoked to assign a new value (§7.17.1). Otherwise, the <span class="Production">get-accessor</span>
is invoked to obtain the current value (§7.1.1).</p>

<h3><a name="_Toc251613069"></a><a name="_Ref450699668"></a><a name="_Ref448042219">7.1.1 Values of </a>expressions</h3>

<p class="MsoNormal">Most of the constructs that involve an expression ultimately
require the expression to denote a <span class="Term">value</span>. In such
cases, if the actual expression denotes a namespace, a type, a method group, or
nothing, a compile-time error occurs. However, if the expression denotes a
property access, an indexer access, or a variable, the value of the property,
indexer, or variable is implicitly substituted:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of a variable is simply the value currently stored in
the storage location identified by the variable. A variable must be considered
definitely assigned (§5.3) before its value can be obtained, or otherwise a
compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of a property access expression is obtained by invoking
the <span class="Production">get-accessor</span> of the property. If the property
has no <span class="Production">get-accessor</span>, a compile-time error occurs.
Otherwise, a function member invocation (§7.5.4) is performed, and the result
of the invocation becomes the value of the property access expression.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of an indexer access expression is obtained by invoking
the <span class="Production">get-accessor</span> of the indexer. If the indexer
has no <span class="Production">get-accessor</span>, a compile-time error occurs.
Otherwise, a function member invocation (§7.5.4) is performed with the argument
list associated with the indexer access expression, and the result of the
invocation becomes the value of<a name="_Ref449406927"></a><a name="_Ref448204715"> the indexer access expression.</a></p>

<h2><a name="_Toc251613070"></a><a name="_Ref248143997"></a><a name="_Ref248143966">7.2 Static and Dynamic Binding</a></h2>

<p class="MsoNormal">The process of determining the meaning of an operation based
on the type or value of constituent expressions (arguments, operands,
receivers) is often referred to as <span class="Term">binding</span>. For
instance the meaning of a method call is determined based on the type of the
receiver and arguments. The meaning of an operator is determined based on the
type of its operands.</p>

<p class="MsoNormal">In C# the meaning of an operation is usually determined at compile-time,
based on the compile-time type of its constituent expressions. Likewise, if an
expression contains an error, the error is detected and reported by the
compiler. This approach is known as <span class="Term">static binding</span>.</p>

<p class="MsoNormal">However, if an expression is a <em>dynamic expression</em>
(i.e. has the type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>)
this indicates that any binding that it participates in should be based on its run-time
type (i.e. the <em>actual</em> type of the object it denotes at run-time)
rather than the type it has at compile-time. The binding of such an operation
is therefore deferred until the time where the operation is to be executed
during the running of the program. This is referred to as <span class="Term">dynamic
binding</span>.</p>

<p class="MsoNormal">When an operation is dynamically bound, little or no
checking is performed by the compiler. Instead if the run-time binding fails,
errors are reported as exceptions at run-time.</p>

<p class="MsoNormal">The following operations in C# are subject to binding:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Member access: <span class="Codefragment"><span style="font-size:
10.0pt">e.M</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Method invocation: <span class="Codefragment"><span style="font-size:10.0pt">e.M(e<sub>1</sub>,…,e<sub>n</sub>)</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Delegate invocaton:<span class="Codefragment"><span style="font-size:10.0pt"> e(e<sub>1</sub>,…,e<sub>n</sub>)</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Element access: <span class="Codefragment"><span style="font-size:
10.0pt">e[e<sub>1</sub>,…,e<sub>n</sub>]</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Object creation: <span class="Codefragment"><span style="font-size:
10.0pt">new C(e<sub>1</sub>,…,e<sub>n</sub>)</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloaded unary operators: <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">~</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Overloaded binary operators: <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">??</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>,<span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Assignment operators: <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;=</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit and explicit conversions</p>

<p class="MsoNormal">When no dynamic expressions are involved, C# defaults to
static binding, which means that the compile-time types of constituent
expressions are used in the selection process. However, when one of the
constituent expressions in the operations listed above is a dynamic expression,
the operation is instead dynamically bound.</p>

<h3><a name="_Toc251613071">7.2.1 Binding-time</a></h3>

<p class="MsoNormal">Static binding takes place at compile-time, whereas dynamic
binding takes place at run-time. In the following sections, the term <span class="Term">binding-time</span> refers to either compile-time or run-time,
depending on when the binding takes place.</p>

<p class="MsoNormal">The following example illustrates the notions of static and
dynamic binding and of binding-time:</p>

<p class="Code">object o&nbsp; = 5;<br>
dynamic d = 5;</p>

<p class="Code">Console.WriteLine(5); // &nbsp;static binding to
Console.WriteLine(int)<br>
Console.WriteLine(o); // &nbsp;static binding to Console.WriteLine(object)<br>
Console.WriteLine(d); // dynamic binding to Console.WriteLine(int)</p>

<p class="MsoNormal">The first two calls are statically bound: the overload of <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
is picked based on the compile-time type of their argument. Thus, the
binding-time is <em>compile-time</em>. </p>

<p class="MsoNormal">The third call is dynamically bound: the overload of <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
is picked based on the run-time type of its argument. This happens because the
argument is a dynamic expression – its compile-time type is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. Thus,
the binding-time for the third call is <em>run-time</em>.</p>

<h3><a name="_Toc251613072"></a><a name="_Ref248201593">7.2.2 Dynamic binding</a></h3>

<p class="MsoNormal">The purpose of dynamic binding is to allow C# programs to
interact with <span class="Term">dynamic objects</span><em><span style="font-style:normal">, i.e. objects that do not follow the normal rules of
the C# type system. Dynamic objects may be objects from other programming
languages with different types systems, or they may be objects that are programmatically
setup to implement their own binding semantics for different operations.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">The mechanism by which a
dynamic object implements its own semantics is implementation defined. A given
interface – again implementation defined – is implemented by dynamic objects to
signal to the C# run-time that they have special semantics. Thus, whenever
operations on a dynamic object are dynamically bound, their own binding
semantics, rather than those of C# as specified in this document, take over.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">While the purpose of
dynamic binding is to allow interoperation with dynamic objects, C# allows
dynamic binding on all objects, whether they are dynamic or not. This allows
for a smoother integration of dynamic objects, as the results of operations on
them may not themselves be dynamic objects, but are still of a type unknown to
the programmer at compile-time. Also dynamic binding can help eliminate
error-prone reflection-based code even when no objects involved are dynamic
objects.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">The following sections
describe for each construct in the language exactly when dynamic binding is
applied, what compile time checking – if any – is applied, and what the
compile-time result and expression classification is.</span></em></p>

<h3><a name="_Toc251613073"><em><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;;
font-style:normal">7.2.3 </span></em><em><span style="font-family:&quot;Arial&quot;,&quot;sans-serif&quot;;
font-style:normal">Types of constituent expressions</span></em></a></h3>

<p class="MsoNormal">When an operation is statically bound, the type of a
constituent expression (e.g. a receiver, and argument, an index or an operand)
is always considered to be the compile-time type of that expression.</p>

<p class="MsoNormal">When an operation is dynamically bound, the type of a
constituent expression is determined in different ways depending on the
compile-time type of the constituent expression:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A constituent expression of compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> is
considered to have the type of the actual value that the expression evaluates
to at runtime</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A constituent expression whose compile-time type is a type
parameter is considered to have the type which the type parameter is bound to
at runtime</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise the constituent expression is considered to have its
compile-time type. </p>

<h2><a name="_Toc251613074"></a><a name="_Ref465590476"></a><a name="_Toc248222114"></a><a name="_Toc248227800"></a><a name="_Toc248222116"></a><a name="_Toc248227802"></a><a name="_Toc248222120"></a><a name="_Toc248227806"></a>7.3
Operators</h2>

<p class="MsoNormal">Expressions are constructed from <span class="Term">operands</span>
and <span class="Term">operators</span>. The operators of an expression indicate
which operations to apply to the operands. Examples of operators include <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>. Examples
of operands include literals, fields, local variables, and expressions.</p>

<p class="MsoNormal">There are three kinds of operators:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Unary operators. The unary operators take one operand and use
either prefix notation (such as <span class="Codefragment"><span style="font-size:10.0pt">–x</span></span>) or postfix notation (such as <span class="Codefragment"><span style="font-size:10.0pt">x++</span></span>).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Binary operators. The binary operators take two operands and all
use infix notation (such as <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span>&nbsp;<span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>&nbsp;<span class="Codefragment"><span style="font-size:
10.0pt">y</span></span>).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Ternary operator. Only one ternary operator, <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span>, exists; it
takes three operands and uses infix notation (<span class="Codefragment"><span style="font-size:10.0pt">c?</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">x:</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>).</p>

<p class="MsoNormal">The order of evaluation of operators in an expression is
determined by the <span class="Term">precedence</span> and <span class="Term">associativity</span>
of the operators (§7.3.1).</p>

<p class="MsoNormal">Operands in an expression are evaluated from left to right.
For example, in <span class="Codefragment"><span style="font-size:10.0pt">F(i)</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">G(i++)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">H(i)</span></span>, method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is called
using the old value of <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>,
then method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
is called with the old value of <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>, and, finally, method <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> is called
with the new value of <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>.
This is separate from and unrelated to operator precedence.</p>

<p class="MsoNormal">Certain operators can be <span class="Term">overloaded</span>.
Operator overloading permits user-defined operator implementations to be
specified for operations where one or both of the operands are of a
user-defined class or struct type (§7.3.2).</p>

<h3><a name="_Toc251613075"></a><a name="_Ref461355228">7.3.1 Operator
precedence and associativity</a></h3>

<p class="MsoNormal">When an expression contains multiple operators, the <span class="Term">precedence</span> of the operators controls the order in which the
individual operators are evaluated. For example, the expression <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">+</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">+</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">(y</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">z)</span></span> because the <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> operator has
higher precedence than the binary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> operator. The precedence of an
operator is established by the definition of its associated grammar production.
For example, an <span class="Production">additive-expression</span> consists of a
sequence of <span class="Production">multiplicative-expression</span>s separated
by <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> operators,
thus giving the <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>
operators lower precedence than the <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> operators.</p>

<p class="MsoNormal">The following table summarizes all operators in order of
precedence from highest to lowest:</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Section</b></p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Category</b></p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Operators</b></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.6</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Primary</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">x.y&nbsp;
  f(x)&nbsp; a[x]&nbsp; x++&nbsp; x--&nbsp; new</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">typeof&nbsp;
  default&nbsp; checked&nbsp; unchecked&nbsp; delegate</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.7</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Unary</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">+&nbsp; -&nbsp;
  !&nbsp; ~&nbsp; ++x&nbsp; --x&nbsp; (T)x</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.8</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Multiplicative</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">*&nbsp; /&nbsp;
  %</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.8</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Additive</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">+&nbsp; -</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.9</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Shift</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;&nbsp;
  &gt;&gt;</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.10</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Relational and type testing</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;&nbsp; &gt;&nbsp;
  &lt;=&nbsp; &gt;=&nbsp; is&nbsp; as</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.10</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Equality</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">==&nbsp; !=</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.11</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Logical AND</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.11</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Logical XOR</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">^</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.11</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Logical OR</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">|</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.12</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Conditional AND</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.12</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Conditional OR</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">||</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.13</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Null coalescing</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">??</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.14</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Conditional</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">?:</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="61" valign="top" style="width:45.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">7.17, 7.15</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Assignment and lambda expression</p>
  </td>
  <td width="426" valign="top" style="width:319.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">=&nbsp; *=&nbsp;
  /=&nbsp; %=&nbsp; +=&nbsp; -=&nbsp; &lt;&lt;=&nbsp; &gt;&gt;=&nbsp; &amp;=&nbsp; ^=&nbsp; |=</span></span></p>
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal">When an operand occurs between two operators with the same
precedence, the associativity of the operators controls the order in which the
operations are performed:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Except for the assignment operators, all binary operators are <span class="Term">left-associative</span>, meaning that operations are performed from
left to right. For example, <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">(x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The assignment operators and the conditional operator (<span class="Codefragment"><span style="font-size:10.0pt">?:</span></span>) are <span class="Term">right-associative</span>, meaning that operations are performed from
right to left. For example, <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z)</span></span>.</p>

<p class="MsoNormal">Precedence and associativity can be controlled using
parentheses. For example, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> first
multiplies <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
by <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> and
then adds the result to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>,
but <span class="Codefragment"><span style="font-size:10.0pt">(x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> first adds <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> and then
multiplies the result by <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>.</p>

<h3><a name="_Toc251613076"></a><a name="_Ref461356007">7.3.2 Operator overloading</a></h3>

<p class="MsoNormal">All unary and binary operators have predefined
implementations that are automatically available in any expression. In addition
to the predefined implementations, user-defined implementations can be
introduced by including <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
declarations in classes and structs (§10.10). User-defined operator
implementations always take precedence over predefined operator
implementations: Only when no applicable user-defined operator implementations
exist will the predefined operator implementations be considered, as described
in §7.3.3 and §7.3.4.</p>

<p class="MsoNormal">The <span class="Term">overloadable unary operators</span>
are:</p>

<p class="Code">+&nbsp;&nbsp; -&nbsp;&nbsp; !&nbsp;&nbsp; ~&nbsp;&nbsp; ++&nbsp;&nbsp; --&nbsp;&nbsp; true&nbsp;&nbsp; false</p>

<p class="MsoNormal">Although <span class="Codefragment"><span style="font-size:
10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">false</span></span> are not used explicitly in expressions (and
therefore are not included in the precedence table in §7.3.1), they are considered operators because they are invoked in several expression contexts: boolean
expressions (§7.20) and expressions involving the conditional (§7.14), and conditional logical operators (§7.12). </p>

<p class="MsoNormal">The <span class="Term">overloadable binary operators</span>
are:</p>

<p class="Code">+&nbsp;&nbsp; -&nbsp;&nbsp; *&nbsp;&nbsp; /&nbsp;&nbsp; %&nbsp;&nbsp; &amp;&nbsp;&nbsp; |&nbsp;&nbsp; ^&nbsp;&nbsp; &lt;&lt;&nbsp;&nbsp; &gt;&gt;&nbsp;&nbsp; ==&nbsp;&nbsp;
!=&nbsp;&nbsp; &gt;&nbsp;&nbsp; &lt;&nbsp;&nbsp; &gt;=&nbsp;&nbsp; &lt;=</p>

<p class="MsoNormal">Only the operators listed above can be overloaded. In
particular, it is not possible to overload member access, method invocation, or
the <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">??</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">as</span></span>, and i<span class="Codefragment"><span style="font-size:10.0pt">s</span></span> operators.</p>

<p class="MsoNormal">When a binary operator is overloaded, the corresponding
assignment operator, if any, is also implicitly overloaded. For example, an
overload of operator <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
is also an overload of operator <span class="Codefragment"><span style="font-size:10.0pt">*=</span></span>. This is described further in §7.17.2. Note that the assignment operator itself (<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>) cannot be overloaded. An assignment
always performs a simple bit-wise copy of a value into a variable.</p>

<p class="MsoNormal">Cast operations, such as <span class="Codefragment"><span style="font-size:10.0pt">(T)x</span></span>, are overloaded by providing
user-defined conversions (§6.4).</p>

<p class="MsoNormal">Element access, such as <span class="Codefragment"><span style="font-size:10.0pt">a[x]</span></span>, is not considered an overloadable
operator. Instead, user-defined indexing is supported through indexers (§10.9).</p>

<p class="MsoNormal">In expressions, operators are referenced using operator
notation, and in declarations, operators are referenced using functional
notation. The following table shows the relationship between operator and
functional notations for unary and binary operators. In the first entry, <span class="Production">op</span> denotes any overloadable unary prefix operator. In
the second entry, <span class="Production">op</span> denotes the unary postfix <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span> operators.
In the third entry, <span class="Production">op</span> denotes any overloadable
binary operator.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Operator notation</b></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Functional notation</b></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
  <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(x)</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
  <span class="Production">op</span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
  <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(x)</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
  <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="252" valign="top" style="width:189.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
  <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal">User-defined operator declarations always require at least
one of the parameters to be of the class or struct type that contains the
operator declaration. Thus, it is not possible for a user-defined operator to
have the same signature as a predefined operator.</p>

<p class="MsoNormal">User-defined operator declarations cannot modify the syntax,
precedence, or associativity of an operator. For example, the <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> operator is
always a binary operator, always has the precedence level specified in §7.3.1, and is always left-associative.</p>

<p class="MsoNormal">While it is possible for a user-defined operator to perform
any computation it pleases, implementations that produce results other than
those that are intuitively expected are strongly discouraged. For example, an
implementation of <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span> should
compare the two operands for equality and return an appropriate <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> result.</p>

<p class="MsoNormal">The descriptions of individual operators in §7.6 through §7.12 specify the predefined implementations of the operators and any
additional rules that apply to each operator. The descriptions make use of the
terms <span class="Term">unary operator overload resolution</span>, <span class="Term">binary operator overload resolution</span>, and <span class="Term">numeric
promotion</span>, definitions of which are found in the following sections.</p>

<h3><a name="_Toc251613077"></a><a name="_Ref461527392">7.3.3 Unary operator
overload resolution</a></h3>

<p class="MsoNormal">An operation of the form <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span>, where <span class="Production">op</span> is an
overloadable unary operator, and <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an expression of type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, is processed
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of candidate user-defined operators provided by <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> for the
operation <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(x)</span></span> is determined using the rules of §7.3.5.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the set of candidate user-defined operators is not empty, then
this becomes the set of candidate operators for the operation. Otherwise, the
predefined unary <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Production">op</span> implementations, including their lifted forms,
become the set of candidate operators for the operation. The predefined
implementations of a given operator are specified in the description of the
operator (§7.6 and §7.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The overload resolution rules of §7.5.3 are applied to the set of
candidate operators to select the best operator with respect to the argument
list <span class="Codefragment"><span style="font-size:10.0pt">(x)</span></span>,
and this operator becomes the result of the overload resolution process. If
overload resolution fails to select a single best operator, a binding-time
error occurs.</p>

<h3><a name="_Toc251613078"></a><a name="_Ref461528019">7.3.4 Binary operator
overload resolution</a></h3>

<p class="MsoNormal">An operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Production">op</span> is an overloadable binary operator, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an
expression of type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
an expression of type <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>,
is processed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of candidate user-defined operators provided by <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> for the
operation <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> is determined. The set consists of
the union of the candidate operators provided by <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and the candidate operators provided
by <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>,
each determined using the rules of §7.3.5. If <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> are the same type, or if <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> are derived
from a common base type, then shared candidate operators only occur in the
combined set once.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the set of candidate user-defined operators is not empty, then
this becomes the set of candidate operators for the operation. Otherwise, the
predefined binary <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Production">op</span> implementations, including their lifted forms,
&nbsp;become the set of candidate operators for the operation. The predefined
implementations of a given operator are specified in the description of the
operator (§7.8 through §7.12).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The overload resolution rules of §7.5.3 are applied to the set of
candidate operators to select the best operator with respect to the argument
list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>, and this
operator becomes the result of the overload resolution process. If overload
resolution fails to select a single best operator, a binding-time error occurs.</p>

<h3><a name="_Toc251613079"></a><a name="_Ref461518649">7.3.5 Candidate
user-defined operators</a></h3>

<p class="MsoNormal">Given a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and an operation <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(A)</span></span>,
where <span class="Production">op</span> is an overloadable operator and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an
argument list, the set of candidate user-defined operators provided by <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> for <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">(A)</span></span>
is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Determine the type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a nullable
type, <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is its underlying type, otherwise <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> is equal to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For all <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Production">op</span> declarations in <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> and all lifted forms of
such operators, if at least one operator is applicable (§7.5.3.1) with respect to the argument list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
then the set of candidate operators consists of all such applicable operators in
<span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">T<sub>0</sub></span></span> is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, the set of candidate operators
is empty.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the set of candidate operators provided by <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is the set of candidate operators provided by the direct base class of <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>,
or the effective base class of<span class="Codefragment"><span style="font-size:
10.0pt"> T<sub>0</sub></span></span> if <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span> is a type parameter.</p>

<h3><a name="_Toc251613080">7.3.6 Numeric promotions</a></h3>

<p class="MsoNormal">Numeric promotion consists of automatically performing
certain implicit conversions of the operands of the predefined unary and binary
numeric operators. Numeric promotion is not a distinct mechanism, but rather an
effect of applying overload resolution to the predefined operators. Numeric
promotion specifically does not affect evaluation of user-defined operators,
although user-defined operators can be implemented to exhibit similar effects.</p>

<p class="MsoNormal"><a name="_Ref450957799">As an example of numeric promotion,
consider the predefined implementations of the binary </a><span class="Codefragment"><span style="font-size:10.0pt">*</span></span> operator:</p>

<p class="Code">int operator *(int x, int y);<br>
uint operator *(uint x, uint y);<br>
long operator *(long x, long y);<br>
ulong operator *(ulong x, ulong y);<br>
float operator *(float x, float y);<br>
double operator *(double x, double y);<br>
decimal operator *(decimal x, decimal y);</p>

<p class="MsoNormal">When overload resolution rules (§7.5.3) are applied to this
set of operators, the effect is to select the first of the operators for which
implicit conversions exist from the operand types. For example, for the
operation <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is a <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">s</span></span> is a <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, overload
resolution selects <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">*(int,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">int)</span></span> as the
best operator. Thus, the effect is that <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">s</span></span> are converted to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, and the
type of the result is <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.
Likewise, for the operation <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">d</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> is a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>,
overload resolution selects <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">*(double,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">double)</span></span> as the best operator.</p>

<h4><a name="_Toc251613081">7.3.6.1 Unary numeric promotions</a></h4>

<p class="MsoNormal">Unary numeric promotion occurs for the operands of the
predefined <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">~</span></span> unary
operators. Unary numeric promotion simply consists of converting operands of
type <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.
Additionally, for the unary <span class="Codefragment"><span style="font-size:
10.0pt">–</span></span> operator, unary numeric promotion converts operands of
type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>.</p>

<h4><a name="_Toc251613082"></a><a name="_Ref452887272">7.3.6.2 Binary numeric
promotions</a></h4>

<p class="MsoNormal">Binary numeric promotion occurs for the operands of the
predefined <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span> binary
operators. Binary numeric promotion implicitly converts both operands to a
common type which, in case of the non-relational operators, also becomes the
result type of the operation. Binary numeric promotion consists of applying the
following rules, in the order they appear here:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, the other operand is converted
to type <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>,
or a binding-time error occurs if the other operand is of type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, the other operand is converted
to type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, the other operand is converted to
type <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, the other operand is converted to
type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>,
or a binding-time error occurs if the other operand is of type <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, the other operand is converted to
type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span> and the other operand is of type <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, both
operands are converted to type <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if either operand is of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, the other operand is converted to
type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, both operands are converted to type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<p class="MsoNormal">Note that the first rule disallows any operations that mix
the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
type with the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
types. The rule follows from the fact that there are no implicit conversions
between the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
type and the <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>
types.</p>

<p class="MsoNormal">Also note that it is not possible for an operand to be of
type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>
when the other operand is of a signed integral type. The reason is that no
integral type exists that can represent the full range of <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> as well
as the signed integral types.</p>

<p class="MsoNormal">In both of the above cases, a cast expression can be used to
explicitly convert one operand to a type that is compatible with the other
operand.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">decimal AddPercent(decimal x, double percent) {<br>
&nbsp;&nbsp; return x * (1.0 + percent / 100.0);<br>
}</p>

<p class="MsoNormal">a binding-time error occurs because a <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> cannot
be multiplied by a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.
The error is resolved by explicitly converting the second operand to <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, as
follows:</p>

<p class="Code">decimal AddPercent(decimal x, double percent) {<br>
&nbsp;&nbsp; return x * (decimal)(1.0 + percent / 100.0);<br>
}</p>

<h3><a name="_Toc251613083"></a><a name="_Toc111395394"></a><a name="_Toc70845690"></a><a name="_Toc78087315">7.3.7 Lifted operators</a></h3>

<p class="MsoNormal"><span class="Term">Lifted operators</span> permit predefined
and user-defined operators that operate on non-nullable value types to also be
used with nullable forms of those types. Lifted operators are constructed from
predefined and user-defined operators that meet certain requirements, as described
in the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the unary operators</p>

<p class="Code">+&nbsp; ++&nbsp; -&nbsp; --&nbsp; !&nbsp; ~</p>

<p class="MsoNormal" style="margin-left:.25in">a lifted form of an operator
exists if the operand and result types are both non-nullable value types. The
lifted form is constructed by adding a single <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> modifier to the operand and result types.
The lifted operator produces a null value if the operand is null. Otherwise,
the lifted operator unwraps the operand, applies the underlying operator, and
wraps the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the binary operators</p>

<p class="Code">+&nbsp; -&nbsp; *&nbsp; /&nbsp; %&nbsp; &amp;&nbsp; |&nbsp; ^&nbsp; &lt;&lt;&nbsp; &gt;&gt;</p>

<p class="MsoNormal" style="margin-left:.25in">a lifted form of an operator
exists if the operand and result types are all non-nullable value types. The
lifted form is constructed by adding a single <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> modifier to each operand and result
type. The lifted operator produces a null value if one or both operands are
null (an exception being the <span class="Codefragment"><span style="font-size:
10.0pt">&amp;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> operators of the <span class="Codefragment"><span style="font-size:10.0pt">bool?</span></span> type, as
described in §7.11.3). Otherwise, the lifted operator unwraps the operands,
applies the underlying operator, and wraps the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the equality operators</p>

<p class="Code">==&nbsp; !=</p>

<p class="MsoNormal" style="margin-left:.25in">a lifted form of an operator
exists if the operand types are both non-nullable value types and if the result
type is <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.
The lifted form is constructed by adding a single <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> modifier to each operand type. The
lifted operator considers two null values equal, and a null value unequal to
any non-null value. If both operands are non-null, the lifted operator unwraps
the operands and applies the underlying operator to produce the <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For the relational operators</p>

<p class="Code"><span class="Codefragment">&lt;</span>&nbsp; <span class="Codefragment">&gt;</span>&nbsp;
<span class="Codefragment">&lt;=</span>&nbsp; <span class="Codefragment">&gt;=</span></p>

<p class="MsoNormal" style="margin-left:.25in">a lifted form of an operator
exists if the operand types are both non-nullable value types and if the result
type is <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.
The lifted form is constructed by adding a single <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> modifier to each operand type. The
lifted operator produces the value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> if one or both operands are null.
Otherwise, the lifted operator unwraps the operands and applies the underlying
operator to produce the <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
result.</p>

<h2><a name="_Toc251613084"></a><a name="_Ref463167327">7.4 Member lookup</a></h2>

<p class="MsoNormal">A member lookup&nbsp;is the process whereby the meaning of a name
in the context of a type is determined. A member lookup can occur as part of
evaluating a <span class="Production">simple-name</span> (§7.6.2) or a <span class="Production">member-access</span> (§7.6.4) in an expression. If the <span class="Production">simple-name</span> or <span class="Production">member-access</span>
occurs as the <span class="Production">simple-expression</span> of an <span class="Production">invocation-expression</span> (§7.6.5.1), the member is said to
be <em>invoked</em>.</p>

<p class="MsoNormal">If a member is a method or event, or if it is a constant, field
or property of either a delegate type (§15) or the type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> (§4.7), then the member is said to be <em>invocable</em><em><span style="font-style:
normal">.</span></em></p>

<p class="MsoNormal">Member lookup considers not only the name of a member but
also the number of type parameters the member has and whether the member is
accessible. For the purposes of member lookup, generic methods and nested
generic types have the number of type parameters indicated in their respective
declarations and all other members have zero type parameters.</p>

<p class="MsoNormal">A member lookup of a name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters in a type&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is processed
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First, a set of accessible members named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is
determined:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a type
parameter, then the set is the union of the sets of accessible members
named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
in each of the types specified as a primary constraint or secondary constraint (§10.1.5) for&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
along with the set of accessible members named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
set consists of all accessible (§3.5) members named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> in&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, including
inherited members and the accessible members named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
constructed type, the set of members is obtained by substituting type arguments
as described in §10.3.2. Members that include an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> modifier are excluded from the
set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Next, if <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero, all nested types whose declarations include type parameters are
removed. If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is not zero, all members with a different number of type parameters are removed.
Note that when <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero, methods having type parameters are not removed, since the type
inference process (§7.5.2) might be able to infer the type arguments.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Next, if the member is <em>invoked</em><em><span style="font-style:normal">, all non-</span>invocable</em><em><span style="font-style:normal"> members are removed from the set.</span></em></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Next, members that are hidden by other members are removed from
the set. For every member <span class="Codefragment"><span style="font-size:10.0pt">S.M</span></span>
in the set, where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
is the type in which the member&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is declared, the following rules are
applied:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a
constant, field, property, event, or enumeration member, then all members
declared in a base type of <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> are removed from the set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a type
declaration, then all non-types declared in a base type of <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> are removed
from the set, and all type declarations with the same number of type parameters
as <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
declared in a base type of <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> are removed from the set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a method,
then all non-method members declared in a base type of <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> are removed
from the set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Next, interface members that are hidden by class members are
removed from the set. This step only has an effect if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a type parameter and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> has both an
effective base class other than <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and a non-empty effective
interface set (§10.1.5). For every member <span class="Codefragment"><span style="font-size:10.0pt">S.M</span></span> in the set, where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is the type
in which the member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is declared, the following rules are applied if <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is a class declaration other than <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a
constant, field, property, event, enumeration member, or type declaration, then
all members declared in an interface declaration are removed from the set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a method,
then all non-method members declared in an interface declaration are removed
from the set, and all methods with the same signature as <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> declared in
an interface declaration are removed from the set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Finally, having removed hidden members, the result of the lookup
is determined:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the set
consists of a single member that is not a method, then this member is the
result of the lookup.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the set contains only methods, then this group of methods is the result of the
lookup.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
lookup is ambiguous, and a binding-time error occurs.</p>

<p class="MsoNormal">For member lookups in types other than type parameters and
interfaces, and member lookups in interfaces that are strictly
single-inheritance (each interface in the inheritance chain has exactly zero or
one direct base interface), the effect of the lookup rules is simply that
derived members hide base members with the same name or signature. Such
single-inheritance lookups are never ambiguous. The ambiguities that can
possibly arise from member lookups in multiple-inheritance interfaces are
described in §13.2.5.</p>

<h3><a name="_Toc251613085"></a><a name="_Ref463164451">7.4.1 Base types</a></h3>

<p class="MsoNormal">For purposes of member lookup, a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is considered
to have the following base types:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has no base type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an <span class="Production">enum-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the class
types <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">struct-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the class
types <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">class-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the base
classes of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
including the class type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an <span class="Production">interface-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the base
interfaces of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
and the class type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an <span class="Production">array-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the class
types <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">delegate-type</span>, the base types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the class
types <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<h2><a name="_Toc251613086"></a><a name="_Ref513814740"></a><a name="_Ref513812025">7.5 Function members</a></h2>

<p class="MsoNormal">Function members are members that contain executable
statements. Function members are always members of types and cannot be members
of namespaces. C# defines the following categories of function members:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Methods</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Properties</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Events</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Indexers</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>User-defined operators</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance constructors</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static constructors</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Destructors</p>

<p class="MsoNormal">Except for destructors and static constructors (which cannot
be invoked explicitly), the statements contained in function members are
executed through function member invocations. The actual syntax for writing a
function member invocation depends on the particular function member category. </p>

<p class="MsoNormal">The argument list (§7.5.1) of a function member invocation
provides actual values or variable references for the parameters of the
function member.</p>

<p class="MsoNormal">Invocations of generic methods may employ type inference to
determine the set of type arguments to pass to the method. This process is
described in §7.5.2.</p>

<p class="MsoNormal">Invocations of methods, indexers, operators and instance
constructors employ overload resolution to determine which of a candidate set
of function members to invoke. This process is described in §7.5.3.</p>

<p class="MsoNormal">Once a particular function member has been identified at binding-time,
possibly through overload resolution, the actual run-time process of invoking
the function member is described in §7.5.4.</p>

<p class="MsoNormal">The following table summarizes the processing that takes
place in constructs involving the six categories of function members that can
be explicitly invoked. In the table, <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> indicate expressions classified as
variables or values, <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
indicates an expression classified as a type, <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is the simple name of a method, and <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is the simple
name of a property.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <thead>
  <tr>
   <td width="97" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
   padding:0in 5.4pt 0in 5.4pt">
   <p class="Table" style="page-break-after:auto"><b>Construct</b></p>
   </td>
   <td width="126" valign="top" style="width:94.5pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt">
   <p class="Table" style="page-break-after:auto"><b>Example</b></p>
   </td>
   <td width="390" valign="top" style="width:292.5pt;border:solid windowtext 1.0pt;
   border-left:none;padding:0in 5.4pt 0in 5.4pt">
   <p class="Table" style="page-break-after:auto"><b>Description</b></p>
   </td>
  </tr>
 </thead>
 <tbody><tr style="page-break-inside:avoid">
  <td width="97" rowspan="3" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Method invocation</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">F(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best method <span class="Codefragment"><span style="font-size:
  10.0pt">F</span></span> in the containing class or struct. The method is
  invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>. If the method is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>, the
  instance expression is <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">T.F(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best method <span class="Codefragment"><span style="font-size:
  10.0pt">F</span></span> in the class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. A binding-time error occurs if the
  method is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>.
  The method is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e.F(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best method F in the class, struct, or interface given by the
  type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>.
  A binding-time error occurs if the method is <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>. The method is invoked with the
  instance expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>
  and the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span>
  <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="97" rowspan="6" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Property access</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">P</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  containing class or struct is invoked. A compile-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is
  write-only. If <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
  is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>,
  the instance expression is <span class="Codefragment"><span style="font-size:
  10.0pt">this</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">P</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  containing class or struct is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(value)</span></span>. A
  compile-time error occurs if <span class="Codefragment"><span style="font-size:
  10.0pt">P</span></span> is read-only. If <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>, the instance expression is <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">T.P</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
  is invoked. A compile-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> or if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is write-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">T.P</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
  is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(value)</span></span>. A compile-time error occurs
  if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is
  not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
  or if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
  is read-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e.P</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  class, struct, or interface given by the type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is invoked with the instance
  expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>.
  A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> or if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is write-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e.P</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of the property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> in the
  class, struct, or interface given by the type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is invoked with the instance
  expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>
  and the argument list <span class="Codefragment"><span style="font-size:10.0pt">(value)</span></span>.
  A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> or if <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is read-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="97" rowspan="6" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Event access</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">E += value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  containing class or struct is invoked. If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not static, the instance
  expression is <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">E -= value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  containing class or struct is invoked. If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not static, the instance
  expression is <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">T.E += value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
  is invoked. A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not static.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">T.E -= value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
  is invoked. A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not static.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e.E += value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  class, struct, or interface given by the type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is invoked with the instance
  expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>.
  A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is static.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e.E -= value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">The <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span> accessor of the event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in the
  class, struct, or interface given by the type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is invoked with the instance
  expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>.
  A binding-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is static.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="97" rowspan="2" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Indexer access</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e[x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y]</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best indexer in the class, struct, or interface given by the
  type of e. The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
  accessor of the indexer is invoked with the instance expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> and the
  argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span>
  <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>. A binding-time
  error occurs if the indexer is write-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">e[x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y]</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">value</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best indexer in the class, struct, or interface given by the
  type of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span>.
  The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
  accessor of the indexer is invoked with the instance expression <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> and the
  argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span>
  <span class="Codefragment"><span style="font-size:10.0pt">y,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">value)</span></span>. A binding-time
  error occurs if the indexer is read-only.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="97" rowspan="2" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Operator invocation</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">-x</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best unary operator in the class or struct given by the type of
  <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. The
  selected operator is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x)</span></span>.</p>
  </td>
 </tr>
 <tr style="page-break-inside:avoid">
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best binary operator in the classes or structs given by the
  types of x and y. The selected operator is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.</p>
  </td>
 </tr>
 <tr>
  <td width="97" valign="top" style="width:72.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Instance constructor invocation</p>
  </td>
  <td width="126" valign="top" style="width:94.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto"><span class="Codefragment"><span style="font-size:10.0pt">new</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span></p>
  </td>
  <td width="390" valign="top" style="width:292.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" style="page-break-after:auto">Overload resolution is applied
  to select the best instance constructor in the class or struct <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. The
  instance constructor is invoked with the argument list <span class="Codefragment"><span style="font-size:10.0pt">(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h3><a name="_Toc251613087"></a><a name="_Ref469563958">7.5.1 Argument lists</a></h3>

<p class="MsoNormal">Every function member and delegate invocation includes an
argument list which provides actual values or variable references for the
parameters of the function member. The syntax for specifying the argument list
of a function member invocation depends on the function member category:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For instance constructors, methods, indexers and delegates, the
arguments are specified as an <span class="Production">argument-list</span>, as
described below. For indexers, when invoking the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor, the argument list
additionally includes the expression specified as the right operand of the
assignment operator.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For properties, the argument list is empty when invoking the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor,
and consists of the expression specified as the right operand of the assignment
operator when invoking the <span class="Codefragment"><span style="font-size:
10.0pt">set</span></span> accessor.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For events, the argument list consists of the expression specified
as the right operand of the <span class="Codefragment"><span style="font-size:
10.0pt">+=</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">-=</span></span> operator. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For user-defined operators, the argument list consists of the
single operand of the unary operator or the two operands of the binary
operator.</p>

<p class="MsoNormal">The arguments of properties (§10.7), events (§10.8), and user-defined operators (§10.10) are always passed as value parameters (§10.6.1.1). The arguments of indexers (§10.9) are always passed as value
parameters (§10.6.1.1) or parameter arrays (§10.6.1.4). Reference and output
parameters are not supported for these categories of function members.</p>

<p class="MsoNormal">The arguments of an instance constructor, method, indexer or
delegate invocation are specified as an <span class="Production">argument-list</span>:</p>

<p class="Grammar">argument-list:<br>
argument<br>
argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; argument</p>

<p class="Grammar">argument:<br>
argument-name<sub>opt</sub>&nbsp;&nbsp; argument-value</p>

<p class="Grammar">argument-name:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-family:
Consolas;font-style:normal">:</span></span></p>

<p class="Grammar">argument-value:<br>
expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-family:Consolas;
font-style:normal">ref</span></span>&nbsp;&nbsp; variable-reference<br>
<span class="Terminal"><span style="font-size:10.0pt;font-family:Consolas;
font-style:normal">out</span></span>&nbsp;&nbsp; variable-reference</p>

<p class="MsoNormal">An <span class="Production">argument-list</span> consists of
one or more <span class="Production">argument</span>s, separated by commas. Each
argument consists of an optional&nbsp; <span class="Production">argument-name</span>
followed by an <span class="Production">argument-value</span>. An <span class="Production">argument</span> with an <span class="Production">argument-name</span>
is referred to as a <span class="Term">named argument</span>, whereas an <span class="Production">argument</span> without an <span class="Production">argument-name</span>
is a <span class="Term">positional argument</span>. It is an error for a
positional argument to appear after a named argument in an <span class="Production">argument-list</span>.</p>

<p class="MsoNormal">The <span class="Production">argument-value</span> can take
one of the following forms:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An <span class="Production">expression</span>, indicating that the
argument is passed as a value parameter (§10.6.1.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The keyword <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
followed by a <span class="Production">variable-reference</span> (§5.4), indicating that the argument is passed as a reference parameter (§10.6.1.2). A variable must be definitely assigned (§5.3) before it can be passed as a
reference parameter. The keyword <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> followed by a <span class="Production">variable-reference</span> (§5.4), indicating that the argument
is passed as an output parameter (§10.6.1.3). A variable is considered definitely
assigned (§5.3) following a function member invocation in which the variable is
passed as an output parameter. </p>

<h4><a name="_Toc251613088"></a><a name="_Ref248219641">7.5.1.1 Corresponding
parameters</a></h4>

<p class="MsoNormal">For each argument in an argument list there has to be a
corresponding parameter in the function member or delegate being invoked. </p>

<p class="MsoNormal">The parameter list used in the following is determined as
follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For virtual methods and indexers defined in classes, the
parameter list is picked from the most specific declaration or override of the
function member, starting with the static type of the receiver, and searching
through its base classes.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For interface methods and indexers, the parameter list is picked
form the most specific definition of the member, starting with the interface
type and searching through the base interfaces. If no unique parameter list is
found, a parameter list with inaccessible names and no optional parameters is
constructed, so that invocations cannot use named parameters or omit optional
arguments.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For partial methods, the parameter list of the defining partial
method declaration is used.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For all other function members and delegates there is only a
single parameter list, which is the one used.</p>

<p class="MsoNormal">The position of an argument or parameter is defined as the
number of arguments or parameters preceding it in the argument list or
parameter list.</p>

<p class="MsoNormal">The corresponding parameters for function member arguments are
established as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Arguments in the <span class="Production">argument-list</span> of instance
constructors, methods, indexers and delegates:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A positional
argument where a fixed parameter occurs at the same position in the parameter
list corresponds to that parameter.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A positional
argument of a function member with a parameter array invoked in its normal form
corresponds to the parameter &nbsp;array, which must occur at the same position in
the parameter list.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A positional
argument of a function member with a parameter array invoked in its expanded
form, where no fixed parameter occurs at the same position in the parameter
list, corresponds to an element in the parameter array.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A named
argument corresponds to the parameter of the same name in the parameter list. </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>For indexers,
when invoking the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor, the expression specified as the right operand of the assignment
operator corresponds to the implicit <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> parameter of the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor
declaration.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For properties, when invoking the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor there are no arguments.
When invoking the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor, the expression specified as the right operand of the assignment
operator corresponds to the implicit <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> parameter of the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor
declaration.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For user-defined unary operators (including conversions), the single
operand corresponds to the single parameter of the operator declaration.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For user-defined binary operators, the left operand corresponds
to the first parameter, and the right operand corresponds to the second
parameter of the operator declaration.</p>

<h4><a name="_Toc251613089">7.5.1.2 Run-time evaluation of argument lists</a></h4>

<p class="MsoNormal">During the run-time processing of a function member
invocation (§7.5.4), the expressions or variable references of an argument list
are evaluated in order, from left to right, as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a value parameter, the argument expression is evaluated and
an implicit conversion (§6.1) to the corresponding parameter type is performed.
The resulting value becomes the initial value of the value parameter in the
function member invocation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a reference or output parameter, the variable reference is
evaluated and the resulting storage location becomes the storage location
represented by the parameter in the function member invocation. If the variable
reference given as a reference or output parameter is an array element of a <span class="Production">reference-type</span>, a run-time check is performed to ensure
that the element type of the array is identical to the type of the parameter.
If this check fails, a <span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span>
is thrown.</p>

<p class="MsoNormal">Methods, indexers, and instance constructors may declare
their right-most parameter to be a parameter array (§10.6.1.4). Such function
members are invoked either in their normal form or in their expanded form
depending on which is applicable (§7.5.3.1):</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a function member with a parameter array is invoked in its
normal form, the argument given for the parameter array must be a single
expression that is implicitly convertible (§6.1) to the parameter array type.
In this case, the parameter array acts precisely like a value parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a function member with a parameter array is invoked in its
expanded form, the invocation must specify zero or more positional arguments
for the parameter array, where each argument is an expression that is
implicitly convertible (§6.1) to the element type of the parameter array. In
this case, the invocation creates an instance of the parameter array type with
a length corresponding to the number of arguments, initializes the elements of
the array instance with the given argument values, and uses the newly created
array instance as the actual argument.</p>

<p class="MsoNormal">The expressions of an argument list are always evaluated in
the order they are written. Thus, the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F(int x, int y = -1, int z = -2) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine("x = {0}, y = {1}, z = {2}", x, y, z);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(i++, i++, i++);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(z: i++, x: i++);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">x = 0, y = 1, z = 2<br>
x = 4, y = -1, z = 3</p>

<p class="MsoNormal">The array co-variance rules (§12.5) permit a value of an
array type <span class="Codefragment"><span style="font-size:10.0pt">A[]</span></span>
to be a reference to an instance of an array type <span class="Codefragment"><span style="font-size:10.0pt">B[]</span></span>, provided an implicit reference
conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
Because of these rules, when an array element of a <span class="Production">reference-type</span>
is passed as a reference or output parameter, a run-time check is required to
ensure that the actual element type of the array is <em>identical</em> to that
of the parameter. In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F(ref object x) {...}</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] a = new object[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] b = new string[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(ref a[0]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(ref b[1]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ArrayTypeMismatchException<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the second invocation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> causes a <span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span> to be
thrown because the actual element type of <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> and not <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoNormal">When a function member with a parameter array is invoked in
its expanded form, the invocation is processed exactly as if an array creation
expression with an array initializer (§7.6.10.4) was inserted around the
expanded parameters. For example, given the declaration</p>

<p class="Code">void F(int x, int y, params object[] args);</p>

<p class="MsoNormal">the following invocations of the expanded form of the method</p>

<p class="Code">F(10, 20);<br>
F(10, 20, 30, 40);<br>
F(10, 20, 1, "hello", 3.0);</p>

<p class="MsoNormal">correspond exactly to</p>

<p class="Code">F(10, 20, new object[] {});<br>
F(10, 20, new object[] {30, 40});<br>
F(10, 20, new object[] {1, "hello", 3.0});</p>

<p class="MsoNormal">In particular, note that an empty array is created when
there are zero arguments given for the parameter array.</p>

<p class="MsoNormal">When arguments are omitted from a function member with
corresponding optional parameters, the default arguments of the function member
declaration are implicitly passed. Because these are always constant, their
evaluation will not impact the evaluation order of the remaining arguments.</p>

<h3><a name="_Ref450459464"></a><a name="_Toc251613090"></a><a name="_Toc154460624"></a><a name="_Ref96251878">7.5.2 Type inference</a></h3>

<p class="MsoNormal">When a generic method is called without specifying type
arguments, a <span class="Term">type inference</span> process attempts to infer
type arguments for the call. The presence of type inference allows a more convenient
syntax to be used for calling a generic method, and allows the programmer to
avoid specifying redundant type information. For example, given the method
declaration:</p>

<p class="Code">class Chooser<br>
{<br>
&nbsp;&nbsp; static Random rand = new Random();</p>

<p class="Code">&nbsp;&nbsp; public static T Choose&lt;T&gt;(T first, T second) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (rand.Next(2) == 0)? first: second;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">it is possible to invoke the <span class="Codefragment"><span style="font-size:10.0pt">Choose</span></span> method without explicitly
specifying a type argument:</p>

<p class="Code">int i = Chooser.Choose(5, 213);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls
Choose&lt;int&gt;</p>

<p class="Code">string s = Chooser.Choose("foo", "bar");&nbsp;&nbsp;&nbsp;&nbsp; //
Calls Choose&lt;string&gt;</p>

<p class="MsoNormal">Through type inference, the type arguments <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> are
determined from the arguments to the method.</p>

<p class="MsoNormal">Type inference occurs as part of the binding-time processing
of a method invocation (§7.6.5.1) and takes place before the overload
resolution step of the invocation. When a particular method group is specified
in a method invocation, and no type arguments are specified as part of the method
invocation, type inference is applied to each generic method in the method
group. If type inference succeeds, then the inferred type arguments are used to
determine the types of arguments for subsequent overload resolution. If
overload resolution chooses a generic method as the one to invoke, then the
inferred type arguments are used as the actual type arguments for the
invocation. If type inference for a particular method fails, that method does
not participate in overload resolution. The failure of type inference, in and
of itself, does not cause a binding-time error. However, it often leads to a binding-time
error when overload resolution then fails to find any applicable methods.</p>

<p class="MsoNormal">If the supplied number of arguments is different than the
number of parameters in the method, then inference immediately fails.
Otherwise, assume that the generic method has the following signature:</p>

<p class="Code">T<sub>r</sub> M&lt;X<sub>1</sub>…X<sub>n</sub>&gt;(T<sub>1</sub>
x<sub>1</sub> … T<sub>m</sub> x<sub>m</sub>)</p>

<p class="MsoNormal">With a method call of the form <span class="Codefragment"><span style="font-size:10.0pt">M(E<sub>1</sub> …E<sub>m</sub>)</span></span> the task
of type inference is to find unique type arguments <span class="Codefragment"><span style="font-size:10.0pt">S<sub>1</sub>…S<sub>n</sub></span></span> for each of
the type parameters <span class="Codefragment"><span style="font-size:10.0pt">X<sub>1</sub>…X<sub>n</sub></span></span>
so that the call <span class="Codefragment"><span style="font-size:10.0pt">M&lt;S<sub>1</sub>…S<sub>n</sub>&gt;(E<sub>1</sub>…E<sub>m</sub>)</span></span>becomes
valid.</p>

<p class="MsoNormal">During the process of inference each type parameter <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is either <i>fixed</i> to a particular type <span class="Codefragment"><span style="font-size:10.0pt">S<sub>i</sub></span></span> or <i>unfixed</i> with an
associated set of <i>bounds. </i>Each of the bounds is some type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. Initially
each type variable <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is unfixed with an empty set of bounds.</p>

<p class="MsoNormal">Type inference takes place in phases. Each phase will try to
infer type arguments for more type variables based on the findings of the
previous phase. The first phase makes some initial inferences of bounds,
whereas the second phase fixes type variables to specific types and infers
further bounds. The second phase may have to be repeated a number of times.</p>

<p class="MsoNormal"><i>Note:</i> Type inference takes place not only when a
generic method is called. Type inference for conversion of method groups is
described in §7.5.2.13 and finding the best common type of a set of expressions
is described in §7.5.2.14.</p>

<h4><a name="_Toc251613091"></a><a name="_Toc154460625">7.5.2.1 The first phase</a></h4>

<p class="MsoNormal">For each of the method arguments <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span>:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">If <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span>
     is an anonymous function, an <em>explicit parameter type inference</em> (§7.5.2.7) is made <em>from</em> <span class="Codefragment"><span style="font-size:
     10.0pt">E<sub>i</sub></span></span> <em>to</em> <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span></li>
 <li class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">Otherwise,
     if <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span>
     has a type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
     and <span class="Codefragment"><span style="font-size:10.0pt">x<sub>i</sub></span></span>
     is a value parameter then a <i>lower-bound inference</i> is made <em>from</em>
     <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em>
     <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>.</li>
 <li class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">Otherwise,
     if <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span>
     has a type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
     and <span class="Codefragment"><span style="font-size:10.0pt">x<sub>i</sub></span></span>
     is a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
     or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
     parameter then an <em>exact inference</em> is made <em>from</em> <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em>
     <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>.
     </li>
 <li class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">Otherwise,
     no inference is made for this argument.</li>
</ul>

<h4><a name="_Toc251613092"></a><a name="_Toc154460626"></a><a name="_Toc248227825"></a>7.5.2.2 The second phase</h4>

<p class="MsoNormal">The second phase proceeds as follows:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">All <em>unfixed</em> type variables <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
     which do not <em>depend on</em> (§7.5.2.5) any <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span> are fixed (§7.5.2.10).</li>
 <li class="MsoNormal">If no such type variables exist, all <em>unfixed</em> type
     variables <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
     are <em>fixed</em> for which all of the following hold:</li>
 <ul style="margin-top:0in" type="circle">
  <li class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">There is
      at least one type variable <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub> </span></span>that <em>depends on</em>
      <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span></li>
  <li class="MsoNormal" style="margin-bottom:8.0pt"><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> has a non-empty set
      of bounds</li>
 </ul>
 <li class="MsoNormal">If no such type variables exist and there are still <em>unfixed</em>
     type variables, type inference fails. </li>
 <li class="MsoNormal">Otherwise, if no further <em>unfixed</em> type variables
     exist, type inference succeeds.</li>
 <li class="MsoNormal">Otherwise, for all arguments <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span> with corresponding parameter
     type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>
     where the <em>output types</em> (§7.5.2.4) contain <em>unfixed</em> type
     variables <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span>
     but the <em>input types</em> (§7.5.2.3) do not, an <em>output type
     inference</em> (§7.5.2.6) is made <em>from</em> <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span> <em>to</em> <span class="Codefragment"><span style="font-size:10.0pt">T<sub>i</sub></span></span>.
     Then the second phase is repeated.</li>
</ul>

<h4><a name="_Toc251613093"></a><a name="_Toc154460627"></a><a name="_Ref154312393">7.5.2.3 Input types</a></h4>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a method group or implicitly typed anonymous function and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a delegate
type or expression tree type then all the parameter types of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are <i>input
types</i> <i>of</i> <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
<i>with type</i> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<h4>7.5.2.4 &nbsp;<a name="_Toc251613094"></a><a name="_Toc154460628"></a><a name="_Ref154312377">Output types</a></h4>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a method group or an anonymous function and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a delegate type or expression tree
type then the return type of <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is an <i>output type</i> <i>of</i> <span class="Codefragment"><span style="font-size:10.0pt">E</span></span><i> with type </i><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<h4><a name="_Toc251613095"></a><a name="_Toc154460629"></a><a name="_Ref154309196">7.5.2.5 Dependence</a></h4>

<p class="MsoNormal">An <em>unfixed</em> type variable <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> <i>depends directly on</i>
an <em>unfixed</em> type variable <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span> if for some argument <span class="Codefragment"><span style="font-size:10.0pt">E<sub>k</sub></span></span>
with type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>k</sub></span></span>
<span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span>
occurs in an <em>input type</em> of <span class="Codefragment"><span style="font-size:10.0pt">E<sub>k</sub></span></span> with type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>k</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
occurs in an <em>output type</em> of <span class="Codefragment"><span style="font-size:10.0pt">E<sub>k</sub></span></span> with type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>k</sub></span></span>.</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span>
<i>depends on </i><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
if <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span>
<em>depends directly on</em> <span class="Codefragment"><span style="font-size:
10.0pt">X<sub>i</sub></span></span> or if <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> <em>depends directly on</em>
<span class="Codefragment"><span style="font-size:10.0pt">X<sub>k</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">X<sub>k</sub></span></span>
<em>depends on</em> <span class="Codefragment"><span style="font-size:10.0pt">X<sub>j</sub></span></span>.
Thus “<em>depends on</em>” is the transitive but not reflexive closure of “<em>depends
directly on</em>”.</p>

<h4><a name="_Toc251613096"></a><a name="_Toc154460630"></a><a name="_Ref154312284">7.5.2.6 Output type inferences</a></h4>

<p class="MsoNormal">An <em>output type inference</em> is made <em>from</em> an
expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
<em>to</em> a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
in the following way:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an anonymous function with inferred return type&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> (§7.5.2.12) and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a delegate
type or expression tree type with return type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>b</sub></span></span>, then a <em>lower-bound
inference</em> (§7.5.2.9) is made <em>from</em> <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em> <span class="Codefragment"><span style="font-size:10.0pt">T<sub>b</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a method group and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a delegate type or expression tree
type with parameter types <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub>…T<sub>k</sub></span></span>
and return type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>b</sub></span></span>,
and overload resolution of <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> with the types <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub>…T<sub>k</sub></span></span> yields a
single method with return type <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span>, then a <em>lower-bound inference</em> is made <em>from</em>
<span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em>
<span class="Codefragment"><span style="font-size:10.0pt">T<sub>b</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is an expression with type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>, then a <em>lower-bound inference</em>
is made <em>from</em> <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
<em>to</em> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, no inferences are made.</p>

<h4><a name="_Toc251613097"></a><a name="_Toc154460631"></a><a name="_Ref154312263">7.5.2.7 Explicit parameter type inferences</a></h4>

<p class="MsoNormal">An <em>explicit parameter type inference</em> is made <em>from</em>
an expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
<em>to</em> a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
in the following way:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an explicitly typed anonymous function with parameter types <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>…U<sub>k</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
a delegate type or expression tree type with parameter types <span class="Codefragment"><span style="font-size:10.0pt">V<sub>1</sub>…V<sub>k</sub></span></span>
then for each <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i</sub></span></span>
an <em>exact inference</em> (§7.5.2.8) is made <em>from</em> <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i</sub></span></span> <em>to</em>
the corresponding <span class="Codefragment"><span style="font-size:10.0pt">V<sub>i</sub></span></span>.</p>

<h4><a name="_Toc251613098"></a><a name="_Toc154460632"></a><a name="_Ref154312564">7.5.2.8 Exact inferences</a></h4>

<p class="MsoNormal">An <em>exact inference</em> <em>from</em> a type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em> a
type <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
made as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is one of the <em>unfixed</em> <span class="Codefragment"><span style="font-size:
10.0pt">X<sub>i</sub></span></span> then <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is added to the set of exact bounds
for <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, sets <span class="Codefragment"><span style="font-size:
10.0pt">V<sub>1</sub>…V<sub>k </sub></span></span>and <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>…U<sub>k</sub> </span></span>are
determined by checking if any of the following cases apply:</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is an array type <span class="Codefragment"><span style="font-size:10.0pt">V<sub>1</sub>[…]
</span></span>and<span class="Codefragment"><span style="font-size:10.0pt"> U</span></span>
is an array type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>[…]</span></span>&nbsp;
of the same rank</p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is the type<span class="Codefragment"><span style="font-size:10.0pt"> V<sub>1</sub>?</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is
the type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>?</span></span></p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is a constructed type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;V<sub>1</sub>…V<sub>k</sub>&gt;</span></span>
<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">and
</span></span><span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
is a constructed type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;U<sub>1</sub>…U<sub>k</sub>&gt;</span></span><span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"> </span></span></p>

<p class="MsoListBullet" style="text-indent:0in">If any of these cases apply then
an <em>exact inference</em> is made <em><span style="font-style:normal">from</span></em>
each <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i</sub></span></span>
<em><span style="font-style:normal">to</span></em> the corresponding <span class="Codefragment"><span style="font-size:10.0pt">V<sub>i</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise no inferences are made.</p>

<h4><a name="_Toc251613099"></a><a name="_Toc154460633"></a><a name="_Ref154312506">7.5.2.9 Lower-bound inferences</a></h4>

<p class="MsoNormal">A <em>lower-bound inference from</em> a type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em> a
type <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
made as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is one of the <em>unfixed</em> <span class="Codefragment"><span style="font-size:
10.0pt">X<sub>i</sub></span></span> then <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is added to the set of lower bounds
for <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, sets <span class="Codefragment"><span style="font-size:
10.0pt">U<sub>1</sub>…U<sub>k</sub> </span></span>and <span class="Codefragment"><span style="font-size:10.0pt">V<sub>1</sub>…V<sub>k </sub></span></span>are
determined by checking if any of the following cases apply:</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is an array type <span class="Codefragment"><span style="font-size:10.0pt">V<sub>1</sub>[…]</span></span>and
<span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is an
array type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>[…]</span></span>
(or a type parameter whose effective base type is <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>[…]</span></span>) of the same rank</p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is one of <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;V<sub>1</sub>&gt;</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">ICollection&lt;V<sub>1</sub>&gt;</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;V<sub>1</sub>&gt;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is
a one-dimensional array type <span class="Codefragment"><span style="font-size:
10.0pt">U<sub>1</sub>[]</span></span>(or a type parameter whose effective base
type is <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>[]</span></span>)
</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is the type<span class="Codefragment"><span style="font-size:10.0pt"> V<sub>1</sub>?</span></span><span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"> </span></span>and
<span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is the
type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>?</span></span>
</p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is a constructed class, struct, interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;V<sub>1</sub>…V<sub>k</sub>&gt;</span></span>
and there is a unique type <span class="Codefragment"><span style="font-size:
10.0pt">C&lt;U<sub>1</sub>…U<sub>k</sub>&gt; </span></span>such that <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> (or, if <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is a type
parameter, its effective base class or any member of its effective interface
set) is identical to, inherits from (directly or indirectly), or implements
(directly or indirectly) <span class="Codefragment"><span style="font-size:10.0pt">C&lt;U<sub>1</sub>…U<sub>k</sub>&gt;.</span></span></p>

<p class="MsoListBullet" style="margin-left:.5in;text-indent:0in">(The
“uniqueness” restriction means that in the case <span style="font-size:10.0pt;
font-family:&quot;Lucida Console&quot;">interface C&lt;T&gt;{} class U: C&lt;X&gt;,
C&lt;Y&gt;{}</span>, then no inference is made when inferring from <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> to <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">C&lt;T&gt; </span>because
<span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub></span></span>
could be <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">X</span>
or <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y</span>.)</p>

<p class="MsoListBullet" style="text-indent:0in">If any of these cases apply then
an inference is made <em><span style="font-style:normal">from</span></em> each <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i</sub></span></span> <em><span style="font-style:normal">to</span></em> the corresponding <span class="Codefragment"><span style="font-size:10.0pt">V<sub>i</sub></span></span>
as follows:</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i
</sub></span></span>is not known to be a reference type then an <i>exact
inference</i> is made</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> is an array type then a <i>lower-bound inference</i> is
made</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">V</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">C&lt;V<sub>1</sub>…V<sub>k</sub>&gt;</span></span> then inference
depends on the i-th type parameter of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>:</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is covariant then a <i>lower-bound inference</i> is made.</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is contravariant then an <i>upper-bound inference</i> is
made.</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is invariant then an <i>exact inference</i> is made.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, no inferences are made.</p>

<h4><a name="_Toc154460634"></a><a name="_Ref154312320"></a><a name="_Toc251613100">7.5.2.10 Upper-bound inferences</a></h4>

<p class="MsoNormal">An <em>upper-bound inference from</em> a type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <em>to</em> a
type <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
made as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is one of the <em>unfixed</em> <span class="Codefragment"><span style="font-size:
10.0pt">X<sub>i</sub></span></span> then <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is added to the set of upper bounds
for <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, sets <span class="Codefragment"><span style="font-size:
10.0pt">V<sub>1</sub>…V<sub>k </sub></span></span>and<span class="Codefragment"><span style="font-size:10.0pt"> U<sub>1</sub>…U<sub>k</sub></span></span> are
determined by checking if any of the following cases apply:</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
is an array type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>[…]</span></span>and
<span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is an
array type <span class="Codefragment"><span style="font-size:10.0pt">V<sub>1</sub>[…]</span></span>of
the same rank</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
is one of <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;U<sub>e</sub>&gt;</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">ICollection&lt;U<sub>e</sub>&gt;</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;U<sub>e</sub>&gt;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
a one-dimensional array type <span class="Codefragment"><span style="font-size:
10.0pt">V<sub>e</sub>[]</span></span></p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
is the type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub>?</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
the type<span class="Codefragment"><span style="font-size:10.0pt"> V<sub>1</sub>?</span></span></p>

<p class="MsoListBullet" style="margin-left:.5in"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
is constructed class, struct, interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;U<sub>1</sub>…U<sub>k</sub>&gt;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is
a class, struct, interface or delegate type which is identical to, inherits
from (directly or indirectly), or implements (directly or indirectly) a unique
type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;V<sub>1</sub>…V<sub>k</sub>&gt;</span></span></p>

<p class="MsoListBullet" style="margin-left:.5in;text-indent:0in">(The
“uniqueness” restriction means that if we have <span style="font-size:10.0pt;
font-family:&quot;Lucida Console&quot;">interface C&lt;T&gt;{} class V&lt;Z&gt;: C&lt;X&lt;Z&gt;&gt;,
C&lt;Y&lt;Z&gt;&gt;{}</span>, then no inference is made when inferring from <span class="Codefragment"><span style="font-size:10.0pt">C&lt;U<sub>1</sub>&gt;</span></span>
to <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">V&lt;Q&gt;. </span>Inferences
are not made from <span class="Codefragment"><span style="font-size:10.0pt">U<sub>1</sub></span></span>
to either <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">X&lt;Q&gt;</span>
or <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y&lt;Q&gt;</span>.)</p>

<p class="MsoListBullet" style="text-indent:0in">If any of these cases apply then
an inference is made <em><span style="font-style:normal">from</span></em> each <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i</sub></span></span> <em><span style="font-style:normal">to</span></em> the corresponding <span class="Codefragment"><span style="font-size:10.0pt">V<sub>i</sub></span></span>
as follows:</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">U<sub>i
</sub></span></span>is not known to be a reference type then an <i>exact
inference</i> is made</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">V</span></span> is an array type then an <i>upper-bound inference</i>
is made</p>

<p class="MsoListBullet" style="margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">C&lt;U<sub>1</sub>…U<sub>k</sub>&gt;</span></span> then inference
depends on the i-th type parameter of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>:</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is covariant then an <i>upper-bound inference</i> is made.</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is contravariant then a <i>lower-bound inference</i> is
made.</p>

<p class="MsoListBullet" style="margin-left:.75in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If it is invariant then an <i>exact inference</i> is made.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, no inferences are made.&nbsp; </p>

<h4><a name="_Toc251613101">7.5.2.11 Fixing</a></h4>

<p class="MsoNormal">An <em>unfixed</em> type variable <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> with a set of bounds is <em>fixed</em>
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of <i>candidate types</i> <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span> starts out as the set of
all types in the set of bounds for <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>We then examine each bound for <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> in turn: For each bound <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
all types <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span>
which are not identical to <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> are removed from the candidate set. For each lower
bound <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
of <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
all types <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span>
to which there is <i>not</i> an implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> are removed
from the candidate set. For each upper bound <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> all types <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span>
from which there is <i>not</i> an implicit conversion to <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> are removed
from the candidate set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If among the remaining candidate types <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span> there is a unique type <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> from which
there is an implicit conversion to all the other candidate types, then <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is fixed to <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, type inference fails.</p>

<h4><a name="_Toc251613102"></a><a name="_Toc154460635"></a><a name="_Ref154312466">7.5.2.12 Inferred return type</a></h4>

<p class="MsoNormal">The <span class="Term">inferred return type</span> of an anonymous
function <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is used during type inference and overload resolution. The inferred return type
can only be determined for an anonymous function where all parameter types are
known, either because they are explicitly given, provided through an anonymous
function conversion or inferred during type inference on an enclosing generic
method invocation. The inferred return type is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the body of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> is an <span class="Production">expression</span>, then the
inferred return type of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is the type of that expression.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the body of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> is a <span class="Production">block</span> and the set of
expressions in the block’s <span class="Codefragment"><span style="font-size:
10.0pt">return</span></span> statements has a best common type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (§7.5.2.14), then the inferred return type of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, a return type cannot be inferred for <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoNormal">As an example of type inference involving anonymous functions,
consider the <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span>
extension method declared in the <span class="Codefragment"><span style="font-size:10.0pt">System.Linq.Enumerable</span></span> class:</p>

<p class="Code">namespace System.Linq<br>
{<br>
&nbsp;&nbsp; public static class Enumerable<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt;(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this IEnumerable&lt;TSource&gt; source,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Func&lt;TSource,TResult&gt; selector)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (TSource element in source) yield return selector(element);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Assuming the <span class="Codefragment"><span style="font-size:10.0pt">System.Linq</span></span> namespace was imported with
a <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
clause, and given a class <span class="Codefragment"><span style="font-size:10.0pt">Customer</span></span>
with a <span class="Codefragment"><span style="font-size:10.0pt">Name</span></span>
property of type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>,
the <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span>
method can be used to select the names of a list of customers:</p>

<p class="Code">List&lt;Customer&gt; customers = GetCustomerList();<br>
IEnumerable&lt;string&gt; names = customers.Select(c =&gt; c.Name);</p>

<p class="MsoNormal">The extension method invocation (§7.6.5.2) of <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span> is
processed by rewriting the invocation to a static method invocation:</p>

<p class="Code">IEnumerable&lt;string&gt; names = Enumerable.Select(customers, c
=&gt; c.Name);</p>

<p class="MsoNormal">Since type arguments were not explicitly specified, type
inference is used to infer the type arguments. First, the <span class="Codefragment"><span style="font-size:10.0pt">customers</span></span>
argument is related to the <span class="Codefragment"><span style="font-size:
10.0pt">source</span></span> parameter, inferring <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to be <span class="Codefragment"><span style="font-size:10.0pt">Customer</span></span>. Then, using the anonymous
function type inference process described above, <span class="Codefragment"><span style="font-size:10.0pt">c</span></span> is given type <span class="Codefragment"><span style="font-size:10.0pt">Customer</span></span>, and
the expression <span class="Codefragment"><span style="font-size:10.0pt">c.Name</span></span>
is related to the return type of the <span class="Codefragment"><span style="font-size:10.0pt">selector</span></span> parameter, inferring <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to be <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>. Thus,
the invocation is equivalent to</p>

<p class="Code">Sequence.Select&lt;Customer,string&gt;(customers, (Customer c)
=&gt; c.Name)</p>

<p class="MsoNormal">and the result is of type <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;string&gt;</span></span>.</p>

<p class="MsoNormal">The following example demonstrates how anonymous function
type inference allows type information to “flow” between arguments in a generic
method invocation. Given the method:</p>

<p class="Code">static Z F&lt;X,Y,Z&gt;(X value, Func&lt;X,Y&gt; f1,
Func&lt;Y,Z&gt; f2) {<br>
&nbsp;&nbsp; return f2(f1(value));<br>
}</p>

<p class="MsoNormal">Type inference for the invocation:</p>

<p class="Code">double seconds = F("1:15:30", s =&gt;
TimeSpan.Parse(s), t =&gt; t.TotalSeconds);</p>

<p class="MsoNormal">proceeds as follows: First, the argument <span class="Codefragment"><span style="font-size:10.0pt">"1:15:30"</span></span>
is related to the <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>
parameter, inferring <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
to be <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>.
Then, the parameter of the first anonymous function, <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>, is given the inferred type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, and the
expression <span class="Codefragment"><span style="font-size:10.0pt">TimeSpan.Parse(s)</span></span>
is related to the return type of <span class="Codefragment"><span style="font-size:10.0pt">f1</span></span>, inferring <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> to be <span class="Codefragment"><span style="font-size:10.0pt">System.TimeSpan</span></span>. Finally, the parameter
of the second anonymous function, <span class="Codefragment"><span style="font-size:10.0pt">t</span></span>, is given the inferred type <span class="Codefragment"><span style="font-size:10.0pt">System.TimeSpan</span></span>,
and the expression <span class="Codefragment"><span style="font-size:10.0pt">t.TotalSeconds</span></span>
is related to the return type of <span class="Codefragment"><span style="font-size:10.0pt">f2</span></span>, inferring <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span> to be <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>. Thus, the result of the
invocation is of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<h4><a name="_Toc251613103"></a><a name="_Toc154460637"></a><a name="_Ref154312211"></a><a name="_Toc154460636"></a>7.5.2.13 Type inference
for conversion of method groups</h4>

<p class="MsoNormal">Similar to calls of generic methods, type inference must
also be applied when a method group <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> containing a generic method is converted
to a given delegate type <span class="Codefragment"><span style="font-size:10.0pt">D
(§</span></span><span class="Codefragment"><span style="font-size:10.0pt">6.6</span></span><span class="Codefragment"><span style="font-size:10.0pt">)</span></span>. Given a
method</p>

<p class="Code">T<sub>r</sub> M&lt;X<sub>1</sub>…X<sub>n</sub>&gt;(T<sub>1</sub>
x<sub>1</sub> … T<sub>m</sub> x<sub>m</sub>)</p>

<p class="MsoNormal">and the method group <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> being assigned to the delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> the task of
type inference is to find type arguments <span class="Codefragment"><span style="font-size:10.0pt">S<sub>1</sub>…S<sub>n</sub></span></span> so that the
expression:</p>

<p class="Code">M&lt;S<sub>1</sub>…S<sub>n</sub>&gt;</p>

<p class="MsoNormal">becomes compatible (§15.1) with <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoNormal">Unlike the type inference algorithm for generic method
calls, in this case there are only argument <em>types</em>, no argument <em>expressions</em>.
In particular, there are no anonymous functions and hence no need for multiple
phases of inference. </p>

<p class="MsoNormal">Instead, all <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span> are considered <em>unfixed</em>,
and a <em>lower-bound inference</em> is made <em>from</em> each argument type <span class="Codefragment"><span style="font-size:10.0pt">U<sub>j</sub></span></span>
of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> <em>to</em>
the corresponding parameter type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>j</sub></span></span> of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>. If for any
of the <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
no bounds were found, type inference fails. Otherwise, all <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
are <em>fixed</em> to corresponding <span class="Codefragment"><span style="font-size:10.0pt">S<sub>i</sub></span></span>, which are the result of
type inference.</p>

<h4><a name="_Toc251613104"></a><a name="_Toc154460638"></a><a name="_Ref154312241">7.5.2.14 Finding the best common type of a set of
expressions</a></h4>

<p class="MsoNormal">In some cases, a common type needs to be inferred for a set
of expressions. In particular, the element types of implicitly typed arrays and
the return types of anonymous functions with <span class="Production">block</span>
bodies are found in this way.</p>

<p class="MsoNormal">Intuitively, given a set of expressions <span class="Codefragment"><span style="font-size:10.0pt">E<sub>1</sub>…E<sub>m</sub></span></span>
this inference should be equivalent to calling a method</p>

<p class="Code">T<sub>r</sub> M&lt;X&gt;(X x<sub>1</sub> … X x<sub>m</sub>)</p>

<p class="MsoNormal">with the <span class="Codefragment"><span style="font-size:
10.0pt">E<sub>i</sub></span></span> as arguments. </p>

<p class="MsoNormal">More precisely, the inference starts out with an <em>unfixed</em>
type variable <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>.
<em>Output type inferences</em> are then made <em>from</em> each <span class="Codefragment"><span style="font-size:10.0pt">E<sub>i</sub></span></span> <em>to</em>
<span class="Codefragment"><span style="font-size:10.0pt">X</span></span>.
Finally, <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is <em>fixed</em> and, if successful, the resulting type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is the
resulting best common type for the expressions. If no such <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> exists, the
expressions have no best common type.</p>

<h3><a name="_Toc251613105"></a><a name="_Ref174194617">7.5.3 Overload
resolution</a></h3>

<p class="MsoNormal">Overload resolution is a binding-time mechanism for
selecting the best function member to invoke given an argument list and a set
of candidate function members. Overload resolution selects the function member
to invoke in the following distinct contexts within C#:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Invocation of a method named in an <span class="Production">invocation-expression</span>
(§7.6.5.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Invocation of an instance constructor named in an <span class="Production">object-creation-expression</span> (§7.6.10.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Invocation of an indexer accessor through an <span class="Production">element-access</span> (§7.6.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Invocation of a predefined or user-defined operator referenced in
an expression (§7.3.3 and §7.3.4).</p>

<p class="MsoNormal">Each of these contexts defines the set of candidate function
members and the list of arguments in its own unique way, as described in detail
in the sections listed above. For example, the set of candidates for a method
invocation does not include methods marked <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> (§7.4), and methods in a base
class are not candidates if any method in a derived class is applicable (§7.6.5.1).</p>

<p class="MsoNormal">Once the candidate function members and the argument list
have been identified, the selection of the best function member is the same in
all cases:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Given the set of applicable candidate function members, the best
function member in that set is located. If the set contains only one function
member, then that function member is the best function member. Otherwise, the
best function member is the one function member that is better than all other
function members with respect to the given argument list, provided that each
function member is compared to all other function members using the rules in §7.5.3.2. If there is not exactly one function member that is better than all
other function members, then the function member invocation is ambiguous and a binding-time
error occurs.</p>

<p class="MsoNormal">The following sections define the exact meanings of the
terms <span class="Term">applicable function member</span> and <span class="Term">better
function member</span>.</p>

<h4><a name="_Toc251613106"></a><a name="_Ref450458823">7.5.3.1 Applicable
function member</a></h4>

<p class="MsoNormal">A function member is said to be an <span class="Term">applicable
function member</span> with respect to an argument list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> when all of
the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Each argument in <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> corresponds to a parameter in the function member
declaration as described in §7.5.1.1, and any parameter to which no argument
corresponds is an optional parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each argument in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, the parameter passing mode of the
argument (i.e., value, <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>)
is identical to the parameter passing mode of the corresponding parameter, and</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>for a value
parameter or a parameter array, an implicit conversion (§6.1) exists from the argument to the type of the corresponding parameter, or</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>for a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter,
the type of the argument is identical to the type of the corresponding
parameter. After all, a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter is an alias for the argument passed.</p>

<p class="MsoNormal">For a function member that includes a parameter array, if
the function member is applicable by the above rules, it is said to be
applicable in its <span class="Term">normal form</span>. If a function member
that includes a parameter array is not applicable in its normal form, the
function member may instead be applicable in its <span class="Term">expanded form</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The expanded form is constructed by replacing the parameter array
in the function member declaration with zero or more value parameters of the
element type of the parameter array such that the number of arguments in the
argument list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
matches the total number of parameters. If <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> has fewer arguments than the number of
fixed parameters in the function member declaration, the expanded form of the
function member cannot be constructed and is thus not applicable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the expanded form is applicable if for each argument
in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> the
parameter passing mode of the argument is identical to the parameter passing
mode of the corresponding parameter, and</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>for a fixed
value parameter or a value parameter created by the expansion, an implicit
conversion (§6.1) exists from the type of the argument to the type of the corresponding
parameter, or</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>for a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter,
the type of the argument is identical to the type of the corresponding
parameter.</p>

<h4><a name="_Toc251613107"></a><a name="_Ref450459121">7.5.3.2 Better function
member</a></h4>

<p class="MsoNormal">For the purposes of determining the better function member,
a stripped-down argument list A is constructed containing just the argument
expressions themselves in the order they appear in the original argument list.</p>

<p class="MsoNormal">Parameter lists for each of the candidate function members
are constructed in the following way: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The expanded form is used if the function member was applicable
only in the expanded form.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Optional parameters with no corresponding arguments are removed
from the parameter list</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The parameters are reordered so that they occur at the same
position as the corresponding argument in the argument list.</p>

<p class="MsoNormal">Given an argument list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> with a set of argument expressions { <span class="Codefragment"><span style="font-size:10.0pt">E<sub>1</sub></span></span>, <span class="Codefragment"><span style="font-size:10.0pt">E<sub>2</sub></span></span>,
..., <span class="Codefragment"><span style="font-size:10.0pt">E<sub>N</sub></span></span>
} and two applicable function members <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>
with parameter types { <span class="Codefragment"><span style="font-size:10.0pt">P<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">P<sub>2</sub></span></span>,
..., <span class="Codefragment"><span style="font-size:10.0pt">P<sub>N</sub></span></span>
} and { <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">Q<sub>2</sub></span></span>,
..., <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>N</sub></span></span>
}, <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is defined to be a <span class="Term">better function member</span> than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>
if</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>for each argument, the implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">E<sub>X</sub></span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">Q<sub>X</sub></span></span>
is not better than the implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">E<sub>X</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">P<sub>X</sub></span></span>,
and</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>for at least one argument, the conversion from <span class="Codefragment"><span style="font-size:10.0pt">E<sub>X</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">P<sub>X</sub></span></span>
is better than the conversion from <span class="Codefragment"><span style="font-size:10.0pt">E<sub>X</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>X</sub></span></span>.</p>

<p class="MsoNormal">When performing this evaluation, if <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>
is applicable in its expanded form, then <span class="Codefragment"><span style="font-size:10.0pt">P<sub>X</sub></span></span> or <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>X</sub></span></span>
refers to a parameter in the expanded form of the parameter list.</p>

<p class="MsoNormal">In case the parameter type sequences&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">{P<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">P<sub>2</sub></span></span>,
…, <span class="Codefragment"><span style="font-size:10.0pt">P<sub>N</sub>}</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">{Q<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">Q<sub>2</sub></span></span>,
…, <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>N</sub>}</span></span>
are equivalent (i.e. each <span class="Codefragment"><span style="font-size:10.0pt">P<sub>i</sub></span></span>
has an identity conversion to the corresponding <span class="Codefragment"><span style="font-size:10.0pt">Q<sub>i</sub></span></span>), the following
tie-breaking rules are applied, in order, to determine the better function
member. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is a non-generic method and <span class="Codefragment"><span style="font-size:
10.0pt">M<sub>Q</sub></span></span> is a generic method, then <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is better than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M<sub>P</sub></span></span> is applicable in its normal form and <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>
has a <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
array and is applicable only in its expanded form, then <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is better than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M<sub>P</sub></span></span> has more declared parameters than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is better than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.
This can&nbsp;occur if both methods&nbsp;have <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> arrays and are applicable only in
their expanded forms.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise if all parameters of <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span> have a corresponding
argument whereas default arguments need to be substituted for at least one
optional parameter in <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>
then <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is better than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.
</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M<sub>P</sub></span></span> has more specific parameter types than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
is better than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.
Let <span class="Codefragment"><span style="font-size:10.0pt">{R<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">R<sub>2</sub></span></span>,
…, <span class="Codefragment"><span style="font-size:10.0pt">R<sub>N</sub>}</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">{S<sub>1</sub></span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">S<sub>2</sub></span></span>,
…, <span class="Codefragment"><span style="font-size:10.0pt">S<sub>N</sub>}</span></span>
represent the uninstantiated and unexpanded parameter types of <span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>.
<span class="Codefragment"><span style="font-size:10.0pt">M<sub>P</sub></span></span>’s
parameter types are more specific than <span class="Codefragment"><span style="font-size:10.0pt">M<sub>Q</sub></span></span>’s if, for each parameter, <span class="Codefragment"><span style="font-size:10.0pt">R<sub>X</sub></span></span>
is not less specific than <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>,
and, for at least one parameter, <span class="Codefragment"><span style="font-size:10.0pt">R<sub>X</sub></span></span> is more specific than <span class="Codefragment"><span style="font-size:10.0pt">S<sub>X</sub></span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A type
parameter is less specific than a non-type parameter.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Recursively, a
constructed type is more specific than another constructed type&nbsp;(with the
same number of type arguments)&nbsp;if at least one type argument is more
specific and no type argument is less specific than the corresponding type
argument in the other.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An array type
is more specific than another array type (with the same number of dimensions)
if the element type of the first is more specific than the element type of the
second.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise if one member is a non-lifted operator and&nbsp; the other is
a lifted operator, the non-lifted one is better.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, neither function member is better.</p>

<h4><a name="_Toc251613108">7.5.3.3 Better conversion from expression</a></h4>

<p class="MsoNormal">Given an implicit conversion <span class="Codefragment"><span style="font-size:10.0pt">C<sub>1</sub></span></span> that converts from an
expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to a type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>,
and an implicit conversion <span class="Codefragment"><span style="font-size:
10.0pt">C<sub>2</sub></span></span> that converts from an expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to a type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>, <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">C<sub>1</sub></span> is a
<span class="Term">better conversion</span> than <span style="font-size:10.0pt;
font-family:&quot;Lucida Console&quot;">C<sub>2</sub></span> if at least one of the
following holds:</p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;text-autospace:
none"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">E</span>
has a type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">S</span>
and an identity conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span> but not from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span></p>

<p class="MsoListBullet"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">E</span>
is not an anonymous function and <span style="font-size:10.0pt;font-family:
&quot;Lucida Console&quot;">T<sub>1</sub></span> is a better conversion target than <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>2</sub></span> (§7.5.3.5)</p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;text-autospace:
none"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">E</span>
is an anonymous function, <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>1
</sub></span>is either a delegate type <span style="font-size:10.0pt;
font-family:&quot;Lucida Console&quot;">D<sub>1 </sub></span>or an expression tree type <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;</span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>1</sub></span><span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>2 </sub></span>is
either a delegate type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2
</sub></span>or an expression tree type <span class="Codefragment"><span style="font-size:10.0pt">Expression&lt;</span></span><span style="font-size:
10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2</sub></span><span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> and one of
the following holds:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>1</sub></span> is a
better conversion target than <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2</sub></span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>1 </sub></span>and <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2</sub></span> have
identical parameter lists, and one of the following holds:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&nbsp;<span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>1
</sub></span>has a return type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y<sub>1</sub></span>,
and <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2</sub></span>
has a return type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y<sub>2</sub></span>,
an inferred return type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">X</span>
exists for <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">E</span>
in the context of that parameter list (§7.5.2.12), and the conversion from <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">X</span> to <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y<sub>1 </sub></span>is
better than the conversion from <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">X</span>
to <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y<sub>2</sub></span></p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>1
</sub></span>has a return type <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">Y</span>,
and <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">D<sub>2</sub></span>
is void returning</p>

<h4><a name="_Toc251613109"></a><a name="_Toc248227843"></a>7.5.3.4 Better
conversion from type</h4>

<p class="MsoNormal">Given a conversion <span class="Codefragment"><span style="font-size:10.0pt">C<sub>1</sub></span></span> that converts from a type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to a type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>,
and a conversion <span class="Codefragment"><span style="font-size:10.0pt">C<sub>2</sub></span></span>
that converts from a type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to a type <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>,
<span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">C<sub>1</sub></span>
is a <span class="Term">better conversion</span> than <span style="font-size:
10.0pt;font-family:&quot;Lucida Console&quot;">C<sub>2</sub></span> if at least one of
the following holds:</p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;text-autospace:
none"><span class="Codefragment"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span>An identity conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span> but
not from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span></p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:-.25in;text-autospace:
none"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>1</sub></span>
is a better conversion target than <span style="font-size:10.0pt;font-family:
&quot;Lucida Console&quot;">T<sub>2</sub></span> (§7.5.3.5)</p>

<h4><a name="_Toc251613110"></a><a name="_Ref248196480">7.5.3.5 Better
conversion target</a></h4>

<p class="MsoNormal">Given two different types <span style="font-size:10.0pt;
font-family:&quot;Lucida Console&quot;">T<sub>1</sub></span> and <span style="font-size:
10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>2</sub></span>, <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>1</sub></span> is a
better conversion target than <span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">T<sub>2</sub></span>
if at least one of the following holds:</p>

<p class="MsoListBullet"><a name="_Ref450459806"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An implicit conversion from </a><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>
exists, and no implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
exists</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
is a signed integral type and <span class="Codefragment"><span style="font-size:
10.0pt">T<sub>2</sub></span></span> is an unsigned integral type. Specifically:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">T<sub>1</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>2</sub></span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span></p>

<h4><a name="_Toc251613111">7.5.3.6 Overloading in generic classes</a></h4>

<p class="MsoNormal">While signatures as declared must be unique, it is possible
that substitution of type arguments results in identical signatures. In such
cases, the tie-breaking rules of overload resolution above will pick the most
specific member.</p>

<p class="MsoNormal">The following examples show overloads that are valid and
invalid according to this rule:</p>

<p class="Code">interface I1&lt;T&gt; {...}</p>

<p class="Code">interface I2&lt;T&gt; {...}</p>

<p class="Code">class G1&lt;U&gt;<br>
{<br>
&nbsp;&nbsp; int F1(U u);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Overload resulotion for G&lt;int&gt;.F1<br>
&nbsp;&nbsp; int F1(int i); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // will pick non-generic</p>

<p class="Code">&nbsp;&nbsp; void F2(I1&lt;U&gt; a);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Valid overload<br>
&nbsp;&nbsp; void F2(I2&lt;U&gt; a);<br>
}</p>

<p class="Code">class G2&lt;U,V&gt;<br>
{<br>
&nbsp;&nbsp; void F3(U u, V v);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Valid, but overload resolution for<br>
&nbsp;&nbsp; void F3(V v, U u);&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // G2&lt;int,int&gt;.F3 will fail</p>

<p class="Code">&nbsp;&nbsp; void F4(U u, I1&lt;V&gt; v);&nbsp; &nbsp;&nbsp; // Valid, but overload
resolution for&nbsp; <br>
&nbsp;&nbsp; void F4(I1&lt;V&gt; v, U u);&nbsp; &nbsp;&nbsp; // G2&lt;I1&lt;int&gt;,int&gt;.F4 will fail</p>

<p class="Code">&nbsp;&nbsp; void F5(U u1, I1&lt;V&gt; v2);&nbsp;&nbsp; // Valid overload<br>
&nbsp;&nbsp; void F5(V v1, U u2);</p>

<p class="Code">&nbsp;&nbsp; void F6(ref U u);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // valid overload<br>
&nbsp;&nbsp; void F6(out V v);<br>
}</p>

<h3><a name="_Ref174194973"></a><a name="_Toc251613112"></a><a name="_Ref248204048">7.5.4 Compile-time checking of dynamic overload resolution</a></h3>

<p class="MsoNormal">For most dynamically bound operations the set of possible
candidates for resolution is unknown at compile-time. In certain cases, however
the candidate set is known at compile-time:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static method calls with dynamic arguments</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance method calls where the receiver is not a dynamic
expression</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Indexer calls where the receiver is not a dynamic expression</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constructor calls with dynamic arguments</p>

<p class="MsoNormal">In these cases a limited compile-time check is performed for
each candidate to see if any of them could possibly apply at run-time.This
check consists of the following steps:</p>

<p class="MsoListBullet"><em><span style="font-family:Symbol;font-style:normal">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></em>Partial type inference: Any type argument that does not
depend directly or indirectly on an argument of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> is inferred using the rules of §7.5.2. The remaining type arguments are <em>unknown.</em></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Partial applicability check: Applicability is checked according
to §7.5.3.1, but ignoring parameters whose types are <em>unknown.</em></p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">If no candidate
passes this test, a compile-time error occurs.</p>

<h3><a name="_Toc251613113">7.5.5 Function member invocation</a></h3>

<p class="MsoNormal">This section describes the process that takes place at
run-time to invoke a particular function member. It is assumed that a binding-time
process has already determined the particular member to invoke, possibly by
applying overload resolution to a set of candidate function members.</p>

<p class="MsoNormal">For purposes of describing the invocation process, function
members are divided into two categories:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static function members. These are instance constructors, static
methods, static property accessors, and user-defined operators. Static function
members are always non-virtual.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance function members. These are instance methods, instance
property accessors, and indexer accessors. Instance function members are either
non-virtual or virtual, and are always invoked on a particular instance. The
instance is computed by an instance expression, and it becomes accessible
within the function member as <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> (§7.6.7).</p>

<p class="MsoNormal">The run-time processing of a function member invocation
consists of the following steps, where <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is the function member and, if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an
instance member, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is the instance expression:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a static function member:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The argument
list is evaluated as described in §7.5.1.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is invoked.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is an instance function member declared in a <span class="Production">value-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is evaluated.
If this evaluation causes an exception, then no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not
classified as a variable, then a temporary local variable of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>’s type is
created and the value of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is assigned to that variable. <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is then reclassified as a reference to that temporary
local variable. The temporary variable is accessible as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> within <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>, but not in
any other way. Thus, only when <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a true variable is it possible for the caller to
observe the changes that <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
makes to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The argument
list is evaluated as described in §7.5.1.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is invoked.
The variable referenced by <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> becomes the variable referenced by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is an instance function member declared in a <span class="Production">reference-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is evaluated.
If this evaluation causes an exception, then no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The argument
list is evaluated as described in §7.5.1.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a <span class="Production">value-type</span>, a boxing conversion (§4.3.1) is performed to convert <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is
considered to be of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
in the following steps. In this case, <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> could only be a member of <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is checked to
be valid. If the value of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The function
member implementation to invoke is determined: </p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the binding-time type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is an interface, the function member
to invoke is the implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> provided by the run-time type of the
instance referenced by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.
This function member is determined by applying the interface mapping rules (§13.4.4) to determine the implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> provided by the run-time type of the
instance referenced by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span> is a virtual function member, the function member to
invoke is the implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> provided by the run-time type of the
instance referenced by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.
This function member is determined by applying the rules for determining the
most derived implementation (§10.6.3) of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> with respect to the run-time type of
the instance referenced by <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a non-virtual function member, and the function member to invoke is <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> itself. </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The function
member implementation determined in the step above is invoked. The object
referenced by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
becomes the object referenced by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<h4><a name="_Ref450460073"></a><a name="_Toc251613114">7.5.5.1 Invocations on
boxed instances</a></h4>

<p class="MsoNormal">A function member implemented in a <span class="Production">value-type</span>
can be invoked through a boxed instance of that <span class="Production">value-type</span>
in the following situations:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the function member is an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> of a method inherited from type
<span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
and is invoked through an instance expression of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the function member is an implementation of an interface
function member and is invoked through an instance expression of an <span class="Production">interface-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the function member is invoked through a delegate.</p>

<p class="MsoNormal">In these situations, the boxed instance is considered to
contain a variable of the <span class="Production">value-type</span>, and this
variable becomes the variable referenced by <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> within the function member
invocation. In particular, this means that when a function member is invoked on
a boxed instance, it is possible for the function member to modify the value
contained in the boxed instance.</p>

<h2><a name="_Toc251613115"></a><a name="_Ref486767029"></a><a name="_Ref486766991"></a><a name="_Ref450882425">7.6 Primary expressions</a></h2>

<p class="MsoNormal">Primary expressions include the simplest forms of expressions.</p>

<p class="Grammar">primary-expression: <br>
primary-no-array-creation-expression<br>
array-creation-expression</p>

<p class="Grammar">primary-no-array-creation-expression:<br>
literal<br>
simple-name<br>
parenthesized-expression<br>
member-access<br>
invocation-expression<br>
element-access<br>
this-access<br>
base-access<br>
post-increment-expression<br>
post-decrement-expression<br>
object-creation-expression<br>
delegate-creation-expression<br>
anonymous-object-creation-expression<br>
typeof-expression<br>
&nbsp;checked-expression<br>
unchecked-expression <br>
default-value-expression<br>
anonymous-method-expression</p>

<p class="MsoNormal">Primary expressions are divided between <span class="Production">array-creation-expressions</span> and <span class="Production">primary-no-array-creation-expression</span>s.
Treating array-creation-expression in this way, rather than listing it along
with the other simple expression forms, enables the grammar to disallow
potentially confusing code such as</p>

<p class="Code">object o = new int[3][1];</p>

<p class="MsoNormal">which would otherwise be interpreted as </p>

<p class="Code">object o = (new int[3])[1];</p>

<h3><a name="_Toc251613116"></a><a name="_Ref529351788">7.6.1 Literals</a></h3>

<p class="MsoNormal">A <span class="Production">primary-expression</span> that
consists of a <span class="Production">literal</span> (§2.4.4) is classified as a
value.<a name="_Ref451236352"></a></p>

<h3><a name="_Toc251613117"></a><a name="_Ref493143522"></a><a name="_Ref493143521">7.6.2 Simple names</a></h3>

<p class="MsoNormal">A <span class="Production">simple-name</span> consists of an
identifier, optionally followed by a type argument list:</p>

<p class="Grammar">simple-name:<br>
identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub></p>

<p class="MsoNormal">A <span class="Production">simple-name</span> is either of the
form <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> or
of the form <span class="Codefragment"><span style="font-size:10.0pt">I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
is a single identifier and <span class="Codefragment"><span style="font-size:
10.0pt">&lt;A<sub>1</sub>,</span></span> ...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span> is an optional <span class="Production">type-argument-list</span>. When no <span class="Production">type-argument-list</span>
is specified, consider <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
to be zero. The <span class="Production">simple-name</span> is evaluated and
classified as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and the <span class="Production">simple-name</span> appears within a <span class="Production">block</span> and if the <span class="Production">block</span>’s
(or an enclosing <span class="Production">block</span>’s) local variable
declaration space (§3.3) contains a local variable, parameter or constant with
name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>,
then the <span class="Production">simple-name</span> refers to that local
variable, parameter or constant and is classified as a variable or value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and the <span class="Production">simple-name</span> appears within the
body of a generic method declaration and if that declaration includes a type
parameter with name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>,
then the <span class="Production">simple-name</span> refers to that type
parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, for each instance type&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (§10.3.1), starting with the instance
type of the immediately enclosing type declaration and continuing with the
instance type of each enclosing class or struct declaration (if any):</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and
the declaration of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
includes a type parameter with name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>, then the <span class="Production">simple-name</span>
refers to that type parameter.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if a
member lookup (§7.4) of <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with
<span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
arguments produces a match:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is the instance type of the immediately enclosing class or struct type and the
lookup identifies one or more methods, the result is a method group with an
associated instance expression of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>. If a type argument list was
specified, it is used in calling a generic method (§7.6.5.1).</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is the instance type of the immediately enclosing class
or struct type, if the lookup identifies an instance member, and if the
reference occurs within the <span class="Production">block</span> of an instance
constructor, an instance method, or an instance accessor, the result is the
same as a member access (§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">this.I</span></span>. This can only happen when <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is the same as a member access (§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">T.I</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">T.I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>.
In this case, it is a binding-time error for the <span class="Production">simple-name</span>
to refer to an instance member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, for each namespace&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, starting with the namespace in which
the <span class="Production">simple-name</span> occurs, continuing with each
enclosing namespace (if any), and ending with the global namespace, the
following steps are evaluated until an entity is located: </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is the name
of a namespace in&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>,
then:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the location where the <span class="Production">simple-name</span>
occurs is enclosed by a namespace declaration for <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> and the namespace declaration contains
an <span class="Production">extern-alias-directive</span> or <span class="Production">using-alias-directive</span> that associates the name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> with a
namespace or type, then the <span class="Production">simple-name</span> is
ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">simple-name</span> refers
to the namespace named <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> contains an
accessible type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and the location where the <span class="Production">simple-name</span>
occurs is enclosed by a namespace declaration for <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> and the namespace declaration contains
an <span class="Production">extern-alias-directive</span> or <span class="Production">using-alias-directive</span> that associates the name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> with a
namespace or type, then the <span class="Production">simple-name</span> is
ambiguous and a compile-time error occurs.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">namespace-or-type-name</span>
refers to the type constructed with the given type arguments.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the location where the <span class="Production">simple-name</span> occurs is enclosed
by a namespace declaration for&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and the namespace declaration contains an <span class="Production">extern-alias-directive</span>
or <span class="Production">using-alias-directive</span> that associates the
name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
with an imported namespace or type, then the <span class="Production">simple-name</span>
refers to that namespace or type.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the namespaces imported by the <span class="Production">using-namespace-directive</span>s of the namespace declaration
contain exactly one type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">simple-name</span> refers to that type constructed with the
given type arguments.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the namespaces imported by the <span class="Production">using-namespace-directive</span>s of the namespace declaration
contain more than one type having name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">simple-name</span> is ambiguous and an error occurs.</p>

<p class="MsoNormal" style="margin-left:.25in">Note that this entire step is
exactly parallel to the corresponding step in the processing of a <span class="Production">namespace-or-type-name</span> (§3.8).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">simple-name</span> is
undefined and a compile-time error occurs.</p>

<h4><a name="_Toc251613118"></a><a name="_Ref469999377">7.6.2.1 Invariant
meaning in blocks</a></h4>

<p class="MsoNormal">For each occurrence of a given identifier as a <span class="Production">simple-name</span> in an expression or declarator, within the local
variable declaration space (§3.3) immediately enclosing that occurrence, every
other occurrence of the same identifier as a <span class="Production">simple-name</span>
in an expression or declarator must refer to the same entity. This rule ensures
that the meaning of a name is always the same within a given block, switch
block, for-, foreach- or using-statement, or anonymous function.</p>

<p class="MsoNormal">The example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; double x;</p>

<p class="Code">&nbsp;&nbsp; void F(bool b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">results in a compile-time error because <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> refers to
different entities within the outer block (the extent of which includes the
nested block in the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement). In contrast, the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; double x;</p>

<p class="Code">&nbsp;&nbsp; void F(bool b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1.0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">is permitted because the name <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is never used in the outer block.</p>

<p class="MsoNormal">Note that the rule of invariant meaning applies only to
simple names. It is perfectly valid for the same identifier to have one meaning
as a simple name and another meaning as right operand of a member access (§7.6.4). For example:</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; int x, y;</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The example above illustrates a common pattern of using the
names of fields as parameter names in an instance constructor. In the example,
the simple names <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
refer to the parameters, but that does not prevent the member access
expressions <span class="Codefragment"><span style="font-size:10.0pt">this.x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">this.y</span></span>
from accessing the fields.</p>

<h3><a name="_Toc251613119"></a><a name="_Ref469547105">7.6.3 Parenthesized
expressions</a></h3>

<p class="MsoNormal">A <span class="Production">parenthesized-expression</span>
consists of an <span class="Production">expression</span> enclosed in
parentheses.</p>

<p class="Grammar">parenthesized-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="MsoNormal">A <span class="Production">parenthesized-expression</span> is
evaluated by evaluating the <span class="Production">expression</span> within the
parentheses. If the <span class="Production">expression</span> within the parentheses
denotes a namespace or type, a compile-time error occurs. Otherwise, the result
of the <span class="Production">parenthesized-expression</span> is the result of
the evaluation of the contained <span class="Production">expression</span>.</p>

<h3><a name="_Toc251613120"></a><a name="_Ref448036412">7.6.4 Member access</a></h3>

<p class="MsoNormal">A <span class="Production">member-access</span> consists of a <span class="Production">primary-expression</span>, a <span class="Production">predefined-type</span>,
or a <span class="Production">qualified-alias-member</span>, followed by a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>” token,
followed by an <span class="Production">identifier</span>, optionally followed by
a <span class="Production">type-argument-list</span>.</p>

<p class="Grammar">member-access:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp; type-argument-list<sub>opt</sub><br>
predefined-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp; type-argument-list<sub>opt</sub><br>
qualified-alias-member&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">predefined-type:&nbsp; one of<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">bool&nbsp;&nbsp;&nbsp;&nbsp; byte&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp;&nbsp; decimal&nbsp; double&nbsp;&nbsp; float&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long<br>
object&nbsp;&nbsp; sbyte&nbsp;&nbsp;&nbsp; short&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp; uint&nbsp;&nbsp;&nbsp;&nbsp; ulong&nbsp;&nbsp;&nbsp; ushort</span></span></p>

<p class="MsoNormal">The <span class="Production">qualified-alias-member</span> production
is defined in §9.7.</p>

<p class="MsoNormal">A <span class="Production">member-access</span> is either of
the form <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>
or of the form <span class="Codefragment"><span style="font-size:10.0pt">E.I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a primary-expression, <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
is a single identifier and <span class="Codefragment"><span style="font-size:
10.0pt">&lt;A<sub>1</sub>,</span></span> ...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span> is an optional <span class="Production">type-argument-list</span>. When no <span class="Production">type-argument-list</span>
is specified, consider <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
to be zero. </p>

<p class="MsoNormal">A <span class="Production">member-access</span> with a <span class="Production">primary-expression</span> of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> is dynamically bound (§7.2.2). In this case the compiler classifies the member access as a property access
of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.
The rules below to determine the meaning of the <span class="Production">member-access</span>
are then applied at run-time, using the run-time type instead of the
compile-time type of the <span class="Production">primary-expression</span>. If
this run-time classification leads to a method group, then the member access
must be the <span class="Production">primary-expression</span> of an <span class="Production">invocation-expression</span>.</p>

<p class="MsoNormal">The <span class="Production">member-access</span> is evaluated
and classified as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is zero and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a namespace and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
contains a nested namespace with name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>, then the result is that namespace.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a namespace and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> contains an accessible type having
name&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters, then the result is that type constructed with the given type
arguments.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a <span class="Production">predefined-type</span> or a <span class="Production">primary-expression</span>
classified as a type, if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is not a type parameter, and if a member lookup (§7.4) of <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters produces a match, then <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> is evaluated and classified as
follows:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies a
type, then the result is that type constructed with the given type arguments.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies
one or more methods, then the result is a method group with no associated
instance expression. If a type argument list was specified, it is used in
calling a generic method (§7.6.5.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
property, then the result is a property access with no associated instance
expression.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> field:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the field is <span class="Codefragment"><span style="font-size:
10.0pt">readonly</span></span> and the reference occurs outside the static
constructor of the class or struct in which the field is declared, then the
result is a value, namely the value of the static field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is a variable, namely the static
field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
in&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> event:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the reference occurs within the class or struct in which the
event is declared, and the event was declared without <span class="Production">event-accessor-declarations</span>
(§10.8), then <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>
is processed exactly as if <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> were a static field.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is an event access with no associated
instance expression.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies a
constant, then the result is a value, namely the value of that constant. </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies an
enumeration member, then the result is a value, namely the value of that
enumeration member.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> is an
invalid member reference, and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a property access, indexer access, variable, or value, the type of which
is&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
and a member lookup (§7.4) of <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> with <span class="Codefragment"><span style="font-size:
10.0pt">K</span></span>&nbsp;type arguments produces a match, then <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> is
evaluated and classified as follows:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>First, if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a property
or indexer access, then the value of the property or indexer access is obtained
(§7.1.1) and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is reclassified as a value.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies
one or more methods, then the result is a method group with an associated
instance expression of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.
If a type argument list was specified, it is used in calling a generic method (§7.6.5.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies an
instance property, then the result is a property access with an associated
instance expression of&nbsp;<span class="Codefragment"><span style="font-size:
10.0pt">E</span></span>. </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a <span class="Production">class-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies an instance field of that <span class="Production">class-type</span>:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the value of <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span>, then a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span> is thrown.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the field is <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> and the reference occurs
outside an instance constructor of the class in which the field is declared,
then the result is a value, namely the value of the field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in the object
referenced by&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is a variable, namely the field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in the object
referenced by&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a <span class="Production">struct-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies an instance field of that <span class="Production">struct-type</span>:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a value, or if the field is <span class="Codefragment"><span style="font-size:
10.0pt">readonly</span></span> and the reference occurs outside an instance
constructor of the struct in which the field is declared, then the result is a
value, namely the value of the field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in the struct instance given by&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is a variable, namely the field&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in the struct
instance given by&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> identifies an
instance event:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the reference occurs within the class or struct in which the
event is declared, and the event was declared without <span class="Production">event-accessor-declarations</span>
(§10.8), then <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>
is processed exactly as if <span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> was an instance field.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is an event access with an associated
instance expression of&nbsp;<span class="Codefragment"><span style="font-size:
10.0pt">E</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol;layout-grid-mode:line">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, an attempt is made to process<span class="Codefragment"><span style="font-size:10.0pt"> E.I</span></span> as an extension method invocation
(§7.6.5.2). If this fails, <span class="Codefragment"><span style="font-size:
10.0pt">E.I</span></span> is an invalid member reference, and a binding-time
error occurs.</p>

<h4><a name="_Toc251613121"></a><a name="_Toc156718321"></a>7.6.4.1 Identical
simple names and type names</h4>

<p class="MsoNormal">In a member access of the form <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>, if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a single identifier, and if the
meaning of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
as a <span class="Production">simple-name</span> (§7.6.2) is a constant, field,
property, local variable, or parameter with the same type as the meaning of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> as a <span class="Production">type-name</span> (§3.8), then both possible meanings of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> are
permitted. The two possible meanings of <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> are never ambiguous, since <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> must
necessarily be a member of the type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in both cases. In other words, the
rule simply permits access to the static members and nested types of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> where a
compile-time error would otherwise have occurred. For example:</p>

<p class="Code"><span style="layout-grid-mode:line">struct Color<br>
{<br>
&nbsp;&nbsp; public static readonly Color White = new Color(...);<br>
&nbsp;&nbsp; public static readonly Color Black = new Color(...);</span></p>

<p class="Code"><span style="layout-grid-mode:line">&nbsp;&nbsp; public Color Complement()
{...}<br>
}</span></p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public <u>Color</u> Color;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Field Color of type Color</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color = <u>Color</u>.Black; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // References Color.Black static
member<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color = Color.Complement();&nbsp;&nbsp; // Invokes Complement() on Color field<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <u>Color</u> c = <u>Color</u>.White;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // References Color.White
static member<br>
&nbsp;&nbsp; }<br>
<span style="layout-grid-mode:line">}</span></p>

<p class="MsoNormal"><span style="layout-grid-mode:line">Within the </span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span><span style="layout-grid-mode:line"> class, those occurrences of the </span><span class="Codefragment"><span style="font-size:10.0pt">Color</span></span><span style="layout-grid-mode:line"> identifier that reference the </span><span class="Codefragment"><span style="font-size:10.0pt">Color</span></span><span style="layout-grid-mode:line"> type are underlined, and those that reference
the </span><span class="Codefragment"><span style="font-size:10.0pt">Color</span></span><span style="layout-grid-mode:line"> field are not underlined.</span></p>

<h4><a name="_Ref450699391"></a><a name="_Ref448053537"></a><a name="_Toc251613122">7.6.4.2 Grammar ambiguities</a></h4>

<p class="MsoNormal">The productions for <span class="Production">simple-name</span>
(§7.6.2) and <span class="Production">member-access</span> (§7.6.4) can give rise to ambiguities in the grammar for expressions. For example, the statement:</p>

<p class="Code">F(G&lt;A,B&gt;(7));</p>

<p class="MsoNormal">could be interpreted as a call to <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> with two arguments, <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(7)</span></span>.
Alternatively, it could be interpreted as a call to <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> with one argument, which is a call to
a generic method&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
with two type arguments and one regular argument.</p>

<p class="MsoNormal">If a sequence of tokens can be parsed (in context) as a <span class="Production">simple-name</span> (§7.6.2), <span class="Production">member-access</span>
(§7.6.4), or <span class="Production">pointer-member-access</span> (§18.5.2)
ending with a <span class="Production">type-argument-list</span> (§4.4.1), the token immediately following the closing <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> token is examined. If it is one of</p>

<p class="Code"><span class="Codefragment">(&nbsp; )&nbsp; ]&nbsp; }&nbsp; :&nbsp; ;&nbsp; ,&nbsp; .&nbsp; ?&nbsp; ==&nbsp; !=&nbsp; |&nbsp; ^</span></p>

<p class="MsoNormal">then the <span class="Production">type-argument-list</span> is
retained as part of the <span class="Production">simple-name</span>, <span class="Production">member-access</span> or <span class="Production">pointer-member-access</span>
and any other possible parse of the sequence of tokens is discarded. Otherwise,
the <span class="Production">type-argument-list</span> is not considered to be
part of the <span class="Production">simple-name</span>, <span class="Production">member-access</span>
or <span class="Production">pointer-member-access</span>, even if there is no
other possible parse of the sequence of tokens. Note that these rules are not
applied when parsing a <span class="Production">type-argument-list</span> in a <span class="Production">namespace-or-type-name</span> (§3.8). The statement</p>

<p class="Code">F(G&lt;A,B&gt;(7));</p>

<p class="MsoNormal">will, according to this rule, be interpreted as a call to <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> with one
argument, which is a call to a generic method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> with two type arguments and one
regular argument. The statements</p>

<p class="Code">F(G &lt; A, B &gt; 7);<br>
F(G &lt; A, B &gt;&gt; 7);</p>

<p class="MsoNormal">will each be interpreted as a call to <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> with two
arguments. The statement</p>

<p class="Code">x = F &lt; A &gt; +y;</p>

<p class="MsoNormal">will be interpreted as a less than operator, greater than
operator, and unary plus operator, as if the statement had been written <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(F</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(+y)</span></span>, instead
of as a <span class="Production">simple-name</span> with a <span class="Production">type-argument-list</span> followed by a binary plus operator.
In the statement</p>

<p class="Code">x = y is C&lt;T&gt; + z;</p>

<p class="MsoNormal">the tokens <span class="Codefragment"><span style="font-size:
10.0pt">C&lt;T&gt;</span></span> are interpreted as a <span class="Production">namespace-or-type-name</span>
with a <span class="Production">type-argument-list</span>.</p>

<h3><a name="_Toc251613123"></a><a name="_Ref174237062"></a><a name="_Ref174224314"></a><a name="_Ref174222683">7.6.5 Invocation</a>
expressions</h3>

<p class="MsoNormal">An <span class="Production">invocation-expression</span> is
used to invoke a method.</p>

<p class="Grammar">invocation-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="MsoNormal">An <span class="Production">invocation-expression</span> is
dynamically bound (§7.2.2) if at least one of the following holds: </p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">The <span class="Production">primary-expression</span> has compile-time
     type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</li>
 <li class="MsoNormal">At least one argument of the optional <span class="Production">argument-list</span> has compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
     and the <span class="Production">primary-expression</span> does not have a
     delegate type.</li>
</ul>

<p class="MsoNormal">In this case the compiler classifies the <span class="Production">invocation-expression</span> as a value of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. The
rules below to determine the meaning of the <span class="Production">invocation-expression</span>
are then applied at run-time, using the run-time type instead of the
compile-time type of those of the <span class="Production">primary-expression</span>
and arguments which have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. If the <span class="Production">primary-expression</span>
does not have compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, then the method invocation
undergoes a limited compile time check as described in §7.5.4.</p>

<p class="MsoNormal">The <span class="Production">primary-expression</span> of an <span class="Production">invocation-expression</span> must be a method group or a value
of a <span class="Production">delegate-type</span>. If the <span class="Production">primary-expression</span> is a method group, the <span class="Production">invocation-expression</span> is a method invocation (§7.6.5.1). If the <span class="Production">primary-expression</span> is a value of a <span class="Production">delegate-type</span>, the <span class="Production">invocation-expression</span>
is a delegate invocation (§7.6.5.3). If the <span class="Production">primary-expression</span>
is neither a method group nor a value of a <span class="Production">delegate-type</span>,
a binding-time error occurs.</p>

<p class="MsoNormal">The optional <span class="Production">argument-list</span> (§7.5.1) provides values or variable references for the parameters of the method.</p>

<p class="MsoNormal">The result of evaluating an <span class="Production">invocation-expression</span>
is classified as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Production">invocation-expression</span>
invokes a method or delegate that returns <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, the result is nothing. An
expression that is classified as nothing is permitted only in the context of a <span class="Production">statement-expression</span> (§8.6) or as the body of a <span class="Production">lambda-expression</span> (§7.15). Otherwise a binding-time
error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the result is a value of the type returned by the
method or delegate.</p>

<h4><a name="_Toc251613124"></a><a name="_Ref450536895">7.6.5.1 Method
invocations</a></h4>

<p class="MsoNormal">For a method invocation, the <span class="Production">primary-expression</span>
of the <span class="Production">invocation-expression</span> must be a method
group. The method group identifies the one method to invoke or the set of
overloaded methods from which to choose a specific method to invoke. In the
latter case, determination of the specific method to invoke is based on the
context provided by the types of the arguments in the <span class="Production">argument-list</span>.</p>

<p class="MsoNormal">The binding-time processing of a method invocation of the
form <span class="Codefragment"><span style="font-size:10.0pt">M(A)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a method group (possibly including a <span class="Production">type-argument-list</span>),
and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
an optional <span class="Production">argument-list</span>, consists of the
following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of candidate methods for the method invocation is
constructed. For each method <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> associated with the method group <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is
non-generic, <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is a candidate when:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
has no type argument list, and</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is applicable with respect to <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> (§7.5.3.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is generic
and <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> has
no type argument list, <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is a candidate when:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Type inference (§7.5.2) succeeds, inferring a list of type
arguments for the call, and</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Once the inferred type arguments are substituted for the
corresponding method type parameters, all constructed types in the parameter
list of F satisfy their constraints (§4.4.4), and the parameter list of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is applicable
with respect to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
(§7.5.3.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is generic
and <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
includes a type argument list, <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> is a candidate when:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
has the same number of method type parameters as were supplied in the type
argument list, and</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Once the type arguments are substituted for the corresponding
method type parameters, all constructed types in the parameter list of F
satisfy their constraints (§4.4.4), and the parameter list of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is applicable
with respect to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
(§7.5.3.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of candidate methods is reduced to contain only methods
from the most derived types: For each method <span class="Codefragment"><span style="font-size:10.0pt">C.F</span></span> in the set, where <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is the type
in which the method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is declared, all methods declared in a base type of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> are removed from the set. Furthermore,
if <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is a
class type other than <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
all methods declared in an interface type are removed from the set. (This
latter rule only has affect when the method group was the result of a member
lookup on a type parameter having an effective base class other than object and
a non-empty effective interface set.)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the resulting set of candidate methods is empty, then further
processing along the following steps are abandoned, and instead an attempt is
made to process the invocation as an extension method invocation (§7.6.5.2). If this fails, then no applicable methods exist, and a binding-time error
occurs. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The best method of the set of candidate methods is identified
using the overload resolution rules of §7.5.3. If a single best method cannot
be identified, the method invocation is ambiguous, and a binding-time error
occurs. When performing overload resolution, the parameters of a generic method
are considered after substituting the type arguments (supplied or inferred) for
the corresponding method type parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Final validation of the chosen best method is performed:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The method is
validated in the context of the method group: If the best method is a static
method, the method group must have resulted from a <span class="Production">simple-name</span>
or a <span class="Production">member-access</span> through a type. If the best
method is an instance method, the method group must have resulted from a <span class="Production">simple-name</span>, a <span class="Production">member-access</span>
through a variable or value, or a <span class="Production">base-access</span>. If
neither of these requirements is true, a binding-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the best
method is a generic method, the type arguments (supplied or inferred) are
checked against the constraints (§4.4.4) declared on the generic method. If any
type argument does not satisfy the corresponding constraint(s) on the type
parameter, a binding-time error occurs.</p>

<p class="MsoNormal">Once a method has been selected and validated at binding-time
by the above steps, the actual run-time invocation is processed according to
the rules of function member invocation described in §7.5.4.</p>

<p class="MsoNormal">The intuitive effect of the resolution rules described above
is as follows: To locate the particular method invoked by a method invocation,
start with the type indicated by the method invocation and proceed up the
inheritance chain until at least one applicable, accessible, non-override
method declaration is found. Then perform type inference and overload
resolution on the set of applicable, accessible, non-override methods declared
in that type and invoke the method thus selected. If no method was found, try
instead to process the invocation as an extension method invocation.</p>

<h4><a name="_Ref450536905"></a><a name="_Toc251613125"></a><a name="_Ref171506638">7.6.5.2 Extension method invocations</a></h4>

<p class="MsoNormal">In a method invocation (§7.5.5.1) of one of the forms</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">expr</span></span>
. <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
( )</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">expr</span></span>
. <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
( <span class="Production"><span style="font-size:11.0pt">args</span></span> )</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">expr</span></span>
. <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
&lt; <span class="Production"><span style="font-size:11.0pt">typeargs</span></span>
&gt; ( )</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">expr</span></span>
. <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
&lt; <span class="Production"><span style="font-size:11.0pt">typeargs</span></span>
&gt; ( <span class="Production"><span style="font-size:11.0pt">args</span></span>
)</p>

<p class="MsoNormal">if the normal processing of the invocation finds no
applicable methods, an attempt is made to process the construct as an extension
method invocation. If <span class="Production">expr</span> or any of the <span class="Production">args</span> has compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, extension methods will not
apply.</p>

<p class="MsoNormal">The objective is to find the best <span class="Production">type-name</span>
<span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, so
that the corresponding static method invocation can take place:</p>

<p class="Code">C . <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
( <span class="Production"><span style="font-size:11.0pt">expr</span></span> )</p>

<p class="Code">C . <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
( <span class="Production"><span style="font-size:11.0pt">expr</span></span> , <span class="Production"><span style="font-size:11.0pt">args</span></span> )</p>

<p class="Code">C . <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
&lt; <span class="Production"><span style="font-size:11.0pt">typeargs</span></span>
&gt; ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
)</p>

<p class="Code">C . <span class="Production"><span style="font-size:11.0pt">identifier</span></span>
&lt; <span class="Production"><span style="font-size:11.0pt">typeargs</span></span>
&gt; ( <span class="Production"><span style="font-size:11.0pt">expr</span></span>
, <span class="Production"><span style="font-size:11.0pt">args</span></span> )</p>

<p class="MsoNormal">An extension method <span class="Codefragment"><span style="font-size:10.0pt">C<sub>i</sub>.M<sub>j</sub></span></span> is <span class="Term">eligible</span> if:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">C<sub>i</sub></span></span>
is a non-generic, non-nested class</p>

<p class="MsoListBullet"><span class="Production"><span style="font-family:Symbol;
font-style:normal">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span>The name of <span class="Codefragment"><span style="font-size:10.0pt">M<sub>j</sub></span></span> is <span class="Production">identifier</span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">M<sub>j</sub></span></span>
is accessible and applicable when applied to the arguments as a static method
as shown above</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An implicit identity, reference or boxing conversion exists from <span class="Production">expr</span> to the type of the first parameter of <span class="Codefragment"><span style="font-size:10.0pt">M<sub>j</sub>.</span></span></p>

<p class="MsoNormal">The search for <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> proceeds as follows: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Starting with the closest enclosing namespace declaration,
continuing with each enclosing namespace declaration, and ending with the
containing compilation unit, successive attempts are made to find a candidate
set of extension methods:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the given
namespace or compilation unit directly contains non-generic type declarations <span class="Codefragment"><span style="font-size:10.0pt">C<sub>i</sub></span></span>
with eligible extension methods <span class="Codefragment"><span style="font-size:10.0pt">M<sub>j</sub></span></span>, then the set of those
extension methods is the candidate set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If namespaces
imported by using namespace directives in the given namespace or compilation
unit directly contain non-generic type declarations <span class="Codefragment"><span style="font-size:10.0pt">C<sub>i</sub></span></span> with eligible extension
methods <span class="Codefragment"><span style="font-size:10.0pt">M<sub>j</sub></span></span>,
then the set of those extension methods is the candidate set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If no candidate set is found in any enclosing namespace
declaration or compilation unit, a compile-time error occurs. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, overload resolution is applied to the candidate set as
described in (§7.5.3). If no single best method is found, a compile-time error
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
is the type within which the best method is declared as an extension method.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Using <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> as a target,
the method call is then processed as a static method invocation (§7.5.4).</p>

<p class="MsoNormal">The preceding rules mean that instance methods take
precedence over extension methods, that extension methods available in inner
namespace declarations take precedence over extension methods available in
outer namespace declarations, and that extension methods declared directly in a
namespace take precedence over extension methods imported into that same
namespace with a using namespace directive. For example:</p>

<p class="Code">public static class E<br>
{<br>
&nbsp;&nbsp; public static void F(this object obj, int i) { }</p>

<p class="Code">&nbsp;&nbsp; public static void F(this object obj, string s) { }<br>
}</p>

<p class="Code">class A { }</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public void F(int i) { }<br>
}</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public void F(object obj) { }<br>
}</p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; static void Test(A a, B b, C c) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // E.F(object, int)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.F("hello");&nbsp;&nbsp;&nbsp;&nbsp; // E.F(object, string)</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // B.F(int)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.F("hello");&nbsp;&nbsp;&nbsp;&nbsp; // E.F(object, string)</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // C.F(object)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.F("hello");&nbsp;&nbsp;&nbsp;&nbsp; // C.F(object)<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the example, <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s method takes precedence over the
first extension method, and <span class="Codefragment"><span style="font-size:
10.0pt">C</span></span>’s method takes precedence over both extension methods.</p>

<p class="Code">public static class C<br>
{<br>
&nbsp;&nbsp; public static void F(this int i) { Console.WriteLine("C.F({0})",
i); }<br>
&nbsp;&nbsp; public static void G(this int i) { Console.WriteLine("C.G({0})",
i); }<br>
&nbsp;&nbsp; public static void H(this int i) { Console.WriteLine("C.H({0})",
i); }<br>
}</p>

<p class="Code">namespace N1<br>
{<br>
&nbsp;&nbsp; public static class D<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void F(this int i) { Console.WriteLine("D.F({0})",
i); }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void G(this int i) {
Console.WriteLine("D.G({0})", i); }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace N2<br>
{<br>
&nbsp;&nbsp; using N1;</p>

<p class="Code">&nbsp;&nbsp; public static class E<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void F(this int i) {
Console.WriteLine("E.F({0})", i); }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class Test<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main(string[] args)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.G();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.H();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The output of this example is:</p>

<p class="Code">E.F(1)<br>
D.G(2)<br>
C.H(3)</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">D.G</span></span>
takes precendece over <span class="Codefragment"><span style="font-size:10.0pt">C.G</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">E.F</span></span>
takes precedence over both <span class="Codefragment"><span style="font-size:
10.0pt">D.F</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">C.F</span></span>.</p>

<h4><a name="_Toc251613126"></a><a name="_Ref174181455">7.6.5.3 Delegate
invocations</a></h4>

<p class="MsoNormal">For a delegate invocation, the <span class="Production">primary-expression</span>
of the <span class="Production">invocation-expression</span> must be a value of a
<span class="Production">delegate-type</span>. Furthermore, considering the <span class="Production">delegate-type</span> to be a function member with the same
parameter list as the <span class="Production">delegate-type</span>, the <span class="Production">delegate-type</span> must be applicable (§7.5.3.1) with respect to the <span class="Production">argument-list</span> of the <span class="Production">invocation-expression</span>.</p>

<p class="MsoNormal">The run-time processing of a delegate invocation of the form
<span class="Codefragment"><span style="font-size:10.0pt">D(A)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is a <span class="Production">primary-expression</span> of a <span class="Production">delegate-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an optional <span class="Production">argument-list</span>,
consists of the following steps:</p>

<p class="MsoListBullet"><a name="_Ref450456451"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is evaluated. If this evaluation causes an exception, no further steps are
executed.</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> is checked to be valid. If the value of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is a reference to a delegate instance. Function member invocations (§7.5.4) are performed on each of the callable entities in the invocation list of the
delegate. For callable entities consisting of an instance and instance method,
the instance for the invocation is the instance contained in the callable
entity.</p>

<h3><a name="_Toc251613127"></a><a name="_Ref450701326">7.6.6 Element access</a></h3>

<p class="MsoNormal">An <span class="Production">element-access</span> consists of
a <span class="Production">primary-no-array-creation-expression</span>, followed
by a “<span class="Codefragment"><span style="font-size:10.0pt">[</span></span>“
token, followed by an <span class="Production">argument-list</span>, followed by
a “<span class="Codefragment"><span style="font-size:10.0pt">]</span></span>”
token. The <span class="Production">argument-list</span> consists of one or more <span class="Production">argument</span>s, separated by commas.</p>

<p class="Grammar">element-access:<br>
primary-no-array-creation-expression &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp; argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="MsoNormal">The <span class="Production">argument-list</span> of an <span class="Production">element-access</span> is not allowed to contain <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> arguments.</p>

<p class="MsoNormal">An <span class="Production">element-access</span> is
dynamically bound (§7.2.2) if at least one of the following holds: </p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">The <span class="Production">primary-no-array-creation-expression</span>
     has compile-time type <span class="Codefragment"><span style="font-size:
     10.0pt">dynamic</span></span>.</li>
 <li class="MsoNormal">At least one expression of the <span class="Production">argument-list</span>
     has compile-time type <span class="Codefragment"><span style="font-size:
     10.0pt">dynamic</span></span> and the <span class="Production">primary-no-array-creation-expression</span>
     does not have an array type.</li>
</ul>

<p class="MsoNormal">In this case the compiler classifies the <span class="Production">element-access</span> as a value of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. The
rules below to determine the meaning of the <span class="Production">element-access</span>
are then applied at run-time, using the run-time type instead of the
compile-time type of those of the <span class="Production">primary-no-array-creation-expression</span>
and <span class="Production">argument-list</span> expressions which have the
compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.
If the <span class="Production">primary-no-array-creation-expression</span> does
not have compile-time type <span class="Codefragment"><span style="font-size:
10.0pt">dynamic</span></span>, then the element access undergoes a limited
compile time check as described in §7.5.4.</p>

<p class="MsoNormal">If the <span class="Production">primary-no-array-creation-expression</span>
of an <span class="Production">element-access</span> is a value of an <span class="Production">array-type</span>, the <span class="Production">element-access</span>
is an array access (§7.6.6.1). Otherwise, the <span class="Production">primary-no-array-creation-expression</span>
must be a variable or value of a class, struct, or interface type that has one
or more indexer members, in which case the <span class="Production">element-access</span>
is an indexer access (§7.6.6.2).</p>

<h4><a name="_Toc251613128"></a><a name="_Ref450735349">7.6.6.1 Array access</a></h4>

<p class="MsoNormal">For an array access, the <span class="Production">primary-no-array-creation-expression</span>
of the <span class="Production">element-access</span> must be a value of an <span class="Production">array-type</span>. Furthermore, the <span class="Production">argument-list</span>
of an array access is not allowed to contain named arguments.The number of
expressions in the <span class="Production">argument-list</span> must be the same
as the rank of the <span class="Production">array-type</span>, and each
expression must be of type <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">ulong</span></span>, or must be implicitly convertible to one or more
of these types.</p>

<p class="MsoNormal">The result of evaluating an array access is a variable of
the element type of the array, namely the array element selected by the
value(s) of the expression(s) in the <span class="Production">argument-list</span>.</p>

<p class="MsoNormal">The run-time processing of an array access of the form <span class="Codefragment"><span style="font-size:10.0pt">P[A]</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is a <span class="Production">primary-no-array-creation-expression</span> of an <span class="Production">array-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an <span class="Production">argument-list</span>,
consists of the following steps:</p>

<p class="MsoListBullet"><a name="_Ref450735501"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
is evaluated. If this evaluation causes an exception, no further steps are
executed.</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The index expressions of the <span class="Production">argument-list</span>
are evaluated in order, from left to right. Following evaluation of each index
expression, an implicit conversion (§6.1) to one of the following types is
performed: <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>. The
first type in this list for which an implicit conversion exists is chosen. For
instance, if the index expression is of type <span class="Codefragment"><span style="font-size:10.0pt">short</span></span> then an implicit conversion to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> is
performed, since implicit conversions from <span class="Codefragment"><span style="font-size:10.0pt">short</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> and from <span class="Codefragment"><span style="font-size:10.0pt">short</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> are possible. If evaluation of an
index expression or the subsequent implicit conversion causes an exception,
then no further index expressions are evaluated and no further steps are
executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of <span class="Codefragment"><span style="font-size:
10.0pt">P</span></span> is checked to be valid. If the value of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The value of each expression in the <span class="Production">argument-list</span>
is checked against the actual bounds of each dimension of the array instance
referenced by <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.
If one or more values are out of range, a <span class="Codefragment"><span style="font-size:10.0pt">System.IndexOutOfRangeException</span></span> is
thrown and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The location of the array element given by the index
expression(s) is computed, and this location becomes the result of the array
access.</p>

<h4><a name="_Toc251613129"></a><a name="_Ref450790928">7.6.6.2 Indexer access</a></h4>

<p class="MsoNormal">For an indexer access, the <span class="Production">primary-no-array-creation-expression</span>
of the <span class="Production">element-access</span> must be a variable or value
of a class, struct, or interface type, and this type must implement one or more
indexers that are applicable with respect to the <span class="Production">argument-list</span>
of the <span class="Production">element-access</span>.</p>

<p class="MsoNormal">The binding-time processing of an indexer access of the form
<span class="Codefragment"><span style="font-size:10.0pt">P[A]</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
is a <span class="Production">primary-no-array-creation-expression</span> of a
class, struct, or interface type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an <span class="Production">argument-list</span>,
consists of the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set of indexers provided by <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is constructed. The set consists of
all indexers declared in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
or a base type of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
that are not <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
declarations and are accessible in the current context (§3.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The set is reduced to those indexers that are applicable and not
hidden by other indexers. The following rules are applied to each indexer <span class="Codefragment"><span style="font-size:10.0pt">S.I</span></span> in the set,
where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
is the type in which the indexer <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is declared:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is not
applicable with respect to <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> (§7.5.3.1), then <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is removed from the set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is applicable
with respect to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
(§7.5.3.1), then all indexers declared in a base type of <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> are removed
from the set.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is applicable
with respect to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
(§7.5.3.1) and <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
is a class type other than <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span>, all indexers declared in an interface are removed
from the set.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the resulting set of candidate indexers is empty, then no
applicable indexers exist, and a binding-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The best indexer of the set of candidate indexers is identified
using the overload resolution rules of §7.5.3. If a single best indexer cannot
be identified, the indexer access is ambiguous, and a binding-time error
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The index expressions of the <span class="Production">argument-list</span>
are evaluated in order, from left to right. The result of processing the
indexer access is an expression classified as an indexer access. The indexer
access expression references the indexer determined in the step above, and has
an associated instance expression of <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and an associated argument list of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoNormal">Depending on the context in which it is used, an indexer
access causes invocation of either the <span class="Production">get-accessor</span>
or the <span class="Production">set-accessor</span> of the indexer. If the
indexer access is the target of an assignment, the <span class="Production">set-accessor</span>
is invoked to assign a new value (§7.17.1). In all other cases, the <span class="Production">get-accessor</span> is invoked to obtain the current value (§7.1.1).</p>

<h3><a name="_Toc251613130"></a><a name="_Ref450031207">7.6.7 This access</a></h3>

<p class="MsoNormal">A <span class="Production">this-access</span> consists of the
reserved word <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<p class="Grammar">this-access:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span></p>

<p class="MsoNormal">A <span class="Production">this-access</span> is permitted
only in the <span class="Production">block</span> of an instance constructor, an
instance method, or an instance accessor. It has one of the following meanings:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is used in a <span class="Production">primary-expression</span> within an
instance constructor of a class, it is classified as a value. The type of the
value is the instance type (§10.3.1) of the class within which the usage
occurs, and the value is a reference to the object being constructed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is used in a <span class="Production">primary-expression</span> within an
instance method or instance accessor of a class, it is classified as a value.
The type of the value is the instance type (§10.3.1) of the class within which
the usage occurs, and the value is a reference to the object for which the
method or accessor was invoked.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is used in a <span class="Production">primary-expression</span> within an
instance constructor of a struct, it is classified as a variable. The type of
the variable is the instance type (§10.3.1) of the struct within which the
usage occurs, and the variable represents the struct being constructed. The <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> variable
of an instance constructor of a struct behaves exactly the same as an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter
of the struct type—in particular, this means that the variable must be
definitely assigned in every execution path of the instance constructor.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is used in a <span class="Production">primary-expression</span> within an instance
method or instance accessor of a struct, it is classified as a variable. The
type of the variable is the instance type (§10.3.1) of the struct within which
the usage occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the method
or accessor is not an iterator (§10.14), the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> variable represents the struct for
which the method or accessor was invoked, and behaves exactly the same as a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> parameter
of the struct type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the method
or accessor is an iterator, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> variable represents a <em>copy</em>
of the struct for which the method or accessor was invoked, and behaves exactly
the same as a <em>value</em> parameter of the struct type.</p>

<p class="MsoNormal">Use of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in a <span class="Production">primary-expression</span> in a context other than
the ones listed above is a compile-time error. In particular, it is not
possible to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in a static method, a static property accessor, or in a <span class="Production">variable-initializer</span>
of a field declaration.</p>

<h3><a name="_Toc251613131"></a><a name="_Ref459598796">7.6.8 Base access</a></h3>

<p class="MsoNormal">A <span class="Production">base-access</span> consists of the
reserved word <span class="Codefragment"><span style="font-size:10.0pt">base</span></span>
followed by either a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>”
token and an identifier or an <span class="Production">argument-list</span>
enclosed in square brackets:</p>

<p class="Grammar">base-access:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">.</span></span>&nbsp;&nbsp;
identifier<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">]</span></span></p>

<p class="MsoNormal">A <span class="Production">base-access</span> is used to
access base class members that are hidden by similarly named members in the
current class or struct. A <span class="Production">base-access</span> is
permitted only in the <span class="Production">block</span> of an instance
constructor, an instance method, or an instance accessor. When <span class="Codefragment"><span style="font-size:10.0pt">base.I</span></span> occurs
in a class or struct, <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
must denote a member of the base class of that class or struct. Likewise, when <span class="Codefragment"><span style="font-size:10.0pt">base[E]</span></span> occurs
in a class, an applicable indexer must exist in the base class.</p>

<p class="MsoNormal">At binding-time, <span class="Production">base-access</span>
expressions of the form <span class="Codefragment"><span style="font-size:10.0pt">base.I</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">base[E]</span></span>
are evaluated exactly as if they were written <span class="Codefragment"><span style="font-size:10.0pt">((B)this).I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">((B)this)[E]</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is the base class of the class or struct in which the construct occurs. Thus, <span class="Codefragment"><span style="font-size:10.0pt">base.I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">base[E]</span></span>
correspond to <span class="Codefragment"><span style="font-size:10.0pt">this.I</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">this[E]</span></span>,
except <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is viewed as an instance of the base class.</p>

<p class="MsoNormal">When a <span class="Production">base-access</span> references
a virtual function member (a method, property, or indexer), the determination
of which function member to invoke at run-time (§7.5.4) is changed. The
function member that is invoked is determined by finding the most derived
implementation (§10.6.3) of the function member with respect to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> (instead of
with respect to the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>, as would be usual in a non-base
access). Thus, within an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
of a <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
function member, a <span class="Production">base-access</span> can be used to
invoke the inherited implementation of the function member. If the function
member referenced by a <span class="Production">base-access</span> is abstract, a
binding-time error occurs.</p>

<h3><a name="_Toc251613132"></a><a name="_Ref466968183">7.6.9 Postfix increment
and decrement operators</a></h3>

<p class="Grammar">post-increment-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">++</span></span></p>

<p class="Grammar">post-decrement-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">--</span></span></p>

<p class="MsoNormal">The operand of a postfix increment or decrement operation
must be an expression classified as a variable, a property access, or an
indexer access. The result of the operation is a value of the same type as the
operand.</p>

<p class="MsoNormal">If the <span class="Production">primary-expression </span>has
the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
then the operator is dynamically bound (§7.2.2), the <span class="Production">post-increment-expression</span>
or <span class="Production">post-decrement-expression</span> has the compile-time
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
and the following rules are applied at run-time using the run-time type of the <span class="Production">primary-expression</span>. </p>

<p class="MsoNormal">If the operand of a postfix increment or decrement operation
is a property or indexer access, the property or indexer must have both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> and a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor.
If this is not the case, a binding-time error occurs.</p>

<p class="MsoNormal">Unary operator overload resolution (§7.3.3) is applied to select a specific operator implementation. Predefined <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span> operators exist for the following
types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, and
any enum type. The predefined <span class="Codefragment"><span style="font-size:
10.0pt">++</span></span> operators return the value produced by adding 1 to the
operand, and the predefined <span class="Codefragment"><span style="font-size:
10.0pt">--</span></span> operators return the value produced by subtracting 1
from the operand. In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, if the result of this addition or subtraction is outside the range of
the result type and the result type is an integral type or enum type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoNormal">The run-time processing of a postfix increment or decrement
operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x++</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">x--</span></span>
consists of the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a variable:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated
to produce the variable.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is saved.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The selected
operator is invoked with the saved value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> as its argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value
returned by the operator is stored in the location given by the evaluation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The saved value
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
becomes the result of the operation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a property or indexer access:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
expression (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>)
and the argument list (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an indexer access) associated with <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are evaluated, and the results are
used in the subsequent <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor invocations.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
invoked and the returned value is saved.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The selected
operator is invoked with the saved value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> as its argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
invoked with the value returned by the operator as its <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The saved value
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
becomes the result of the operation.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
operators also support prefix notation (§7.7.5). Typically, the result of <span class="Codefragment"><span style="font-size:10.0pt">x++</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x--</span></span> is the
value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<em>before</em> the operation, whereas the result of <span class="Codefragment"><span style="font-size:10.0pt">++x</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">--x</span></span> is the value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <em>after</em>
the operation. In either case, <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> itself has the same value after the operation.</p>

<p class="MsoNormal">An <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">++</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
implementation can be invoked using either postfix or prefix notation. It is
not possible to have separate operator implementations for the two notations.</p>

<h3><a name="_Toc251613133"></a><a name="_Ref504396082">7.6.10 The new operator</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator is used to create new instances of types.</p>

<p class="MsoNormal">There are three forms of <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> expressions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Object creation expressions are used to create new instances of
class types and value types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Array creation expressions are used to create new instances of
array types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Delegate creation expressions are used to create new instances of
delegate types.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator implies creation of an instance of a type, but does not necessarily
imply dynamic allocation of memory. In particular, instances of value types
require no additional memory beyond the variables in which they reside, and no
dynamic allocations occur when <span class="Codefragment"><span style="font-size:
10.0pt">new</span></span> is used to create instances of value types.</p>

<h4><a name="_Toc251613134"></a><a name="_Ref451397492">7.6.10.1 Object
creation expressions</a></h4>

<p class="MsoNormal">An <span class="Production">object-creation-expression</span>
is used to create a new instance of a <span class="Production">class-type</span>
or a <span class="Production">value-type</span>.</p>

<p class="Grammar">object-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; object-or-collection-initializer<sub>opt</sub>
<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; object-or-collection-initializer</p>

<p class="Grammar">object-or-collection-initializer:<br>
object-initializer<br>
collection-initializer</p>

<p class="MsoNormal">The <span class="Production">type</span> of an <span class="Production">object-creation-expression</span> must be a <span class="Production">class-type</span>, a <span class="Production">value-type</span> or
a<span class="Production"> type-parameter</span>. The <span class="Production">type</span>
cannot be an <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
<span class="Production">class-type</span>.</p>

<p class="MsoNormal">The optional <span class="Production">argument-list</span> (§7.5.1) is permitted only if the <span class="Production">type</span> is a <span class="Production">class-type</span> or a <span class="Production">struct-type</span>.</p>

<p class="MsoNormal">An object creation expression can omit the constructor
argument list and enclosing parentheses provided it includes an object initializer
or collection initializer. Omitting the constructor argument list and enclosing
parentheses is equivalent to specifying an empty argument list.</p>

<p class="MsoNormal">Processing of an object creation expression that includes an
object initializer or collection initializer consists of first processing the
instance constructor and then processing the member or element initializations
specified by the object initializer (§7.6.10.2) or collection initializer (§7.6.10.3).</p>

<p class="MsoNormal">If any of the arguments in the optional <i>argument-list </i>has
the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>
then the <span class="Production">object-creation-expression</span> is
dynamically bound (§7.2.2) and the following rules are applied at run-time
using the run-time type of those arguments of the <span class="Production">argument-list</span>
that have the compile time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. However, the object creation
undergoes a limited compile time check as described in §7.5.4.</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">The binding-time processing of an <span class="Production">object-creation-expression</span>
of the form <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">T(A)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">class-type</span> or a <span class="Production">value-type</span>
and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
an optional <span class="Production">argument-list</span>, consists of the
following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">value-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not present:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Production">object-creation-expression</span> is a default constructor
invocation. The result of the <span class="Production">object-creation-expression</span>
is a value of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
namely the default value for <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> as defined in §4.1.1.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is a <span class="Production">type-parameter</span> and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is not
present:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If no value
type constraint or constructor constraint (§10.1.5) has been specified for <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, a binding-time
error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The result of
the <span class="Production">object-creation-expression</span> is a value of the
run-time type that the type parameter has been bound to, namely the result of
invoking the default constructor of that type. The run-time type may be a
reference type or a value type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is a <span class="Production">class-type</span> or a <span class="Production">struct-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is an <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> <span class="Production">class-type</span>, a compile-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
constructor to invoke is determined using the overload resolution rules of §7.5.3. The set of candidate instance constructors consists of all accessible
instance constructors declared in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> which are applicable with respect to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> (§7.5.3.1). If the set of candidate instance constructors is empty, or if a single best
instance constructor cannot be identified, a binding-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The result of
the <span class="Production">object-creation-expression</span> is a value of type
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, namely
the value produced by invoking the instance constructor determined in the step
above.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">object-creation-expression</span>
is invalid, and a binding-time error occurs.</p>

<p class="MsoNormal">Even if the <span class="Production">object-creation-expression</span>
is dynamically bound, the compile-time type is still <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoNormal">The run-time processing of an <span class="Production">object-creation-expression</span>
of the form <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">T(A)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is <span class="Production">class-type</span> or a <span class="Production">struct-type</span>
and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
an optional <span class="Production">argument-list</span>, consists of the
following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">class-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A new instance
of class <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is allocated. If there is not enough memory available to allocate the new
instance, a <span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>All fields of
the new instance are initialized to their default values (§5.2).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
constructor is invoked according to the rules of function member invocation (§7.5.4). A reference to the newly allocated instance is automatically passed to
the instance constructor and the instance can be accessed from within that
constructor as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a <span class="Production">struct-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>An instance of
type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
created by allocating a temporary local variable. Since an instance constructor
of a <span class="Production">struct-type</span> is required to definitely assign
a value to each field of the instance being created, no initialization of the
temporary variable is necessary.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
constructor is invoked according to the rules of function member invocation (§7.5.4). A reference to the newly allocated instance is automatically passed to
the instance constructor and the instance can be accessed from within that
constructor as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.</p>

<h4><a name="_Toc251613135"></a><a name="_Ref171758344">7.6.10.2 Object
initializers</a></h4>

<p class="MsoNormal"><a name="_Ref451662101">An <span class="Term">object
initializer</span> specifies values for zero or more fields or properties of an
object.</a></p>

<p class="Grammar">object-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-initializer-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">member-initializer-list:<br>
member-initializer<br>
member-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; member-initializer</p>

<p class="Grammar">member-initializer:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; initializer-value</p>

<p class="Grammar">initializer-value:<br>
expression<br>
object-or-collection-initializer</p>

<p class="MsoNormal">An object initializer consists of a sequence of member
initializers, enclosed by <span class="Codefragment"><span style="font-size:10.0pt">{</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">}</span></span>
tokens and separated by commas. Each member initializer must name an accessible
field or property of the object being initialized, followed by an equals sign
and an expression or an object initializer or collection initializer. It is an
error for an object initializer to include more than one member initializer for
the same field or property. It is not possible for the object initializer to
refer to the newly created object it is initializing.</p>

<p class="MsoNormal">A member initializer that specifies an expression after the
equals sign is processed in the same way as an assignment (§7.17.1) to the field or property.</p>

<p class="MsoNormal">A member initializer that specifies an object initializer
after the equals sign is a <span class="Term">nested object initializer</span>,
i.e. an initialization of an embedded object. Instead of assigning a new value
to the field or property, the assignments in the nested object initializer are
treated as assignments to members of the field or property. Nested object
initializers cannot be applied to properties with a value type, or to read-only
fields with a value type.</p>

<p class="MsoNormal">A member initializer that specifies a collection initializer
after the equals sign is an initialization of an embedded collection. Instead
of assigning a new collection to the field or property, the elements given in
the initializer are added to the collection referenced by the field or
property. The field or property must be of a collection type that satisfies the
requirements specified in §7.6.10.3.</p>

<p class="MsoNormal">The following class represents a point with two coordinates:</p>

<p class="Code">public class Point<br>
{<br>
&nbsp;&nbsp; int x, y;</p>

<p class="Code">&nbsp;&nbsp; public int X { get { return x; } set { x = value; } }<br>
&nbsp;&nbsp; public int Y { get { return y; } set { y = value; } }<br>
}</p>

<p class="MsoNormal">An instance of <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> can be created and initialized as
follows:</p>

<p class="Code">Point a = new Point { X = 0, Y = 1 };</p>

<p class="MsoNormal">which has the same effect as</p>

<p class="Code">Point __a = new Point();<br>
__a.X = 0;<br>
__a.Y = 1; <br>
Point a = __a;</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">__a</span></span>
is an otherwise invisible and inaccessible temporary variable. The following
class represents a rectangle created from two points:</p>

<p class="Code">public class Rectangle<br>
{<br>
&nbsp;&nbsp; Point p1, p2;</p>

<p class="Code">&nbsp;&nbsp; public Point P1 { get { return p1; } set { p1 = value; } }<br>
&nbsp;&nbsp; public Point P2 { get { return p2; } set { p2 = value; } }<br>
}</p>

<p class="MsoNormal">An instance of <span class="Codefragment"><span style="font-size:10.0pt">Rectangle</span></span> can be created and initialized
as follows:</p>

<p class="Code">Rectangle r = new Rectangle {<br>
&nbsp;&nbsp; P1 = new Point { X = 0, Y = 1 },<br>
&nbsp;&nbsp; P2 = new Point { X = 2, Y = 3 }<br>
};</p>

<p class="MsoNormal">which has the same effect as</p>

<p class="Code">Rectangle __r = new Rectangle();<br>
Point __p1 = new Point();<br>
__p1.X = 0;<br>
__p1.Y = 1;<br>
__r.P1 = __p1;<br>
Point __p2 = new Point();<br>
__p2.X = 2;<br>
__p2.Y = 3;<br>
__r.P2 = __p2; <br>
Rectangle r = __r;<br>
<br>
</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">__r</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">__p1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">__p2</span></span> are
temporary variables that are otherwise invisible and inaccessible.</p>

<p class="MsoNormal">If <span class="Codefragment"><span style="font-size:10.0pt">Rectangle’s</span></span>
constructor allocates the two embedded <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> instances</p>

<p class="Code">public class Rectangle<br>
{<br>
&nbsp;&nbsp; Point p1 = new Point();<br>
&nbsp;&nbsp; Point p2 = new Point();</p>

<p class="Code">&nbsp;&nbsp; public Point P1 { get { return p1; } }<br>
&nbsp;&nbsp; public Point P2 { get { return p2; } }<br>
}</p>

<p class="MsoNormal">the following construct can be used to initialize the
embedded <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>
instances instead of assigning new instances:</p>

<p class="Code">Rectangle r = new Rectangle {<br>
&nbsp;&nbsp; P1 = { X = 0, Y = 1 },<br>
&nbsp;&nbsp; P2 = { X = 2, Y = 3 }<br>
};</p>

<p class="MsoNormal">which has the same effect as</p>

<p class="Code">Rectangle __r = new Rectangle();<br>
__r.P1.X = 0;<br>
__r.P1.Y = 1;<br>
__r.P2.X = 2;<br>
__r.P2.Y = 3;<br>
Rectangle r = __r;</p>

<h4><a name="_Toc251613136"></a><a name="_Ref171750262">7.6.10.3 Collection
initializers</a></h4>

<p class="MsoNormal">A collection initializer specifies the elements of a
collection.</p>

<p class="Grammar">collection-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">element-initializer-list:<br>
element-initializer<br>
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; element-initializer</p>

<p class="Grammar">element-initializer:<br>
non-assignment-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="Grammar">expression-list:<br>
expression<br>
expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; expression</p>

<p class="MsoNormal">A collection initializer consists of a sequence of element
initializers, enclosed by <span class="Codefragment"><span style="font-size:10.0pt">{</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">}</span></span>
tokens and separated by commas. Each element initializer specifies an element
to be added to the collection object being initialized, and consists of a list
of expressions enclosed by <span class="Codefragment"><span style="font-size:
10.0pt">{</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">}</span></span> tokens and separated by commas.&nbsp; A single-expression
element initializer can be written without braces, but cannot then be an
assignment expression, to avoid ambiguity with member initializers. The <span class="Production">non-assignment-expression</span> production is defined in §7.18.</p>

<p class="MsoNormal">The following is an example of an object creation expression
that includes a collection initializer:</p>

<p class="Code">List&lt;int&gt; digits = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5,
6, 7, 8, 9 };</p>

<p class="MsoNormal">The collection object to which a collection initializer is
applied must be of a type that implements <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span> or a
compile-time error occurs. For each specified element in order, the collection
initializer invokes an <span class="Codefragment"><span style="font-size:10.0pt">Add</span></span>
method on the target object with the expression list of the element initializer
as argument list, applying normal overload resolution for each invocation.
Thus, the collection object must contain an applicable <span class="Codefragment"><span style="font-size:10.0pt">Add</span></span> method for
each element initializer.</p>

<p class="MsoNormal">The following class represents a contact with a name and a
list of phone numbers:</p>

<p class="Code">public class Contact<br>
{<br>
&nbsp;&nbsp; string name;<br>
&nbsp;&nbsp; List&lt;string&gt; phoneNumbers = new List&lt;string&gt;();</p>

<p class="Code">&nbsp;&nbsp; public string Name { get { return name; } set { name = value;
} }</p>

<p class="Code">&nbsp;&nbsp; public List&lt;string&gt; PhoneNumbers { get { return
phoneNumbers; } }<br>
}</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">List&lt;Contact&gt;</span></span>
can be created and initialized as follows:</p>

<p class="Code">var contacts = new List&lt;Contact&gt; {<br>
&nbsp;&nbsp; new Contact {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name = "Chris Smith",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PhoneNumbers = { "206-555-0101", "425-882-8080" }<br>
&nbsp;&nbsp; },<br>
&nbsp;&nbsp; new Contact {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name = "Bob Harris",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PhoneNumbers = { "650-555-0199" }<br>
&nbsp;&nbsp; }<br>
};</p>

<p class="MsoNormal">which has the same effect as</p>

<p class="Code">var __clist = new List&lt;Contact&gt;();<br>
Contact __c1 = new Contact();<br>
__c1.Name = "Chris Smith";<br>
__c1.PhoneNumbers.Add("206-555-0101");<br>
__c1.PhoneNumbers.Add("425-882-8080");<br>
__clist.Add(__c1);<br>
Contact __c2 = new Contact();<br>
__c2.Name = "Bob Harris";<br>
__c2.PhoneNumbers.Add("650-555-0199");<br>
__clist.Add(__c2);<br>
var contacts = __clist;</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">__clist</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">__c1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">__c2</span></span> are
temporary variables that are otherwise invisible and inaccessible.</p>

<h4><a name="_Toc251613137"></a><a name="_Ref174234329"></a><a name="_Ref174234148"></a><a name="_Ref174228445"></a><a name="_Ref174225386"></a><a name="_Ref174223006">7.6.10.4 Array creation expressions</a></h4>

<p class="MsoNormal">An <span class="Production">array-creation-expression</span>
is used to create a new instance of an <span class="Production">array-type</span>.</p>

<p class="Grammar">array-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
non-array-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span>&nbsp;&nbsp; rank-specifiers<sub>opt</sub>&nbsp;&nbsp;
array-initializer<sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
array-type&nbsp;&nbsp; array-initializer <br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
rank-specifier&nbsp;&nbsp; array-initializer</p>

<p class="MsoNormal">An array creation expression of the first form allocates an
array instance of the type that results from deleting each of the individual
expressions from the expression list. For example, the array creation
expression <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">int[10,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">20]</span></span> produces an
array instance of type <span class="Codefragment"><span style="font-size:10.0pt">int[,]</span></span>,
and the array creation expression <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> <span class="Codefragment"><span style="font-size:10.0pt">int[10][,]</span></span> produces an array of type <span class="Codefragment"><span style="font-size:10.0pt">int[][,]</span></span>. Each
expression in the expression list must be of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or implicitly convertible to one
or more of these types. The value of each expression determines the length of
the corresponding dimension in the newly allocated array instance. Since the
length of an array dimension must be nonnegative, it is a compile-time error to
have a <span class="Production">constant-expression</span> with a negative value
in the expression list.</p>

<p class="MsoNormal">Except in an unsafe context (§18.1), the layout of arrays is
unspecified.</p>

<p class="MsoNormal">If an array creation expression of the first form includes
an array initializer, each expression in the expression list must be a constant
and the rank and dimension lengths specified by the expression list must match
those of the array initializer.</p>

<p class="MsoNormal">In an array creation expression of the second or third form,
the rank of the specified array type or rank specifier must match that of the
array initializer. The individual dimension lengths are inferred from the
number of elements in each of the corresponding nesting levels of the array
initializer. Thus, the expression</p>

<p class="Code">new int[,] {{0, 1}, {2, 3}, {4, 5}}</p>

<p class="MsoNormal">exactly corresponds to</p>

<p class="Code">new int[3, 2] {{0, 1}, {2, 3}, {4, 5}}</p>

<p class="MsoNormal">An array creation expression of the third form is referred
to as an <span class="Term">implicitly typed array creation expression</span>. It
is similar to the second form, except that the element type of the array is not
explicitly given, but determined as the best common type (§7.5.2.14) of the set of expressions in the array initializer. For a multidimensional array, i.e.,
one where the <span class="Production">rank-specifier</span> contains at least
one comma, this set comprises all <span class="Production">expression</span>s
found in nested <span class="Production">array-initializer</span>s.</p>

<p class="MsoNormal">Array initializers are described further in §12.6.</p>

<p class="MsoNormal">The result of evaluating an array creation expression is
classified as a value, namely a reference to the newly allocated array
instance. The run-time processing of an array creation expression consists of
the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The dimension length expressions of the <span class="Production">expression-list</span>
are evaluated in order, from left to right. Following evaluation of each
expression, an implicit conversion (§6.1) to one of the following types is
performed: <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>. The
first type in this list for which an implicit conversion exists is chosen. If
evaluation of an expression or the subsequent implicit conversion causes an
exception, then no further expressions are evaluated and no further steps are
executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The computed values for the dimension lengths are validated as
follows. If one or more of the values are less than zero, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An array instance with the given dimension lengths is allocated.
If there is not enough memory available to allocate the new instance, a <span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>All elements of the new array instance are initialized to their
default values (§5.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the array creation expression contains an array initializer,
then each expression in the array initializer is evaluated and assigned to its
corresponding array element. The evaluations and assignments are performed in
the order the expressions are written in the array initializer—in other words,
elements are initialized in increasing index order, with the rightmost dimension
increasing first. If evaluation of a given expression or the subsequent
assignment to the corresponding array element causes an exception, then no
further elements are initialized (and the remaining elements will thus have
their default values).</p>

<p class="MsoNormal">An array creation expression permits instantiation of an
array with elements of an array type, but the elements of such an array must be
manually initialized. For example, the statement</p>

<p class="Code">int[][] a = new int[100][];</p>

<p class="MsoNormal">creates a single-dimensional array with 100 elements of type
<span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span>.
The initial value of each element is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. It is not possible for the same
array creation expression to also instantiate the sub-arrays, and the statement</p>

<p class="Code">int[][] a = new int[100][5];&nbsp;&nbsp;&nbsp;&nbsp; // Error</p>

<p class="MsoNormal">results in a compile-time error. Instantiation of the
sub-arrays must instead be performed manually, as in</p>

<p class="Code">int[][] a = new int[100][];<br>
for (int i = 0; i &lt; 100; i++) a[i] = new int[5];</p>

<p class="MsoNormal">When an array of arrays has a “rectangular” shape, that is
when the sub-arrays are all of the same length, it is more efficient to use a
multi-dimensional array. In the example above, instantiation of the array of
arrays creates 101 objects—one outer array and 100 sub-arrays. In contrast,</p>

<p class="Code">int[,] = new int[100, 5];</p>

<p class="MsoNormal">creates only a single object, a two-dimensional array, and
accomplishes the allocation in a single statement.</p>

<p class="MsoNormal"><a name="_Ref452698892">The following are examples of
implicitly typed array creation expressions:</a></p>

<p class="Code">var a = new[] { 1, 10, 100, 1000 };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // int[]</p>

<p class="Code">var b = new[] { 1, 1.5, 2, 2.5 };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
double[]</p>

<p class="Code">var c = new[,] { { "hello", null }, {
"world", "!" } };&nbsp; // string[,]</p>

<p class="Code">var d = new[] { 1, "one", 2, "two" };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Error</p>

<p class="MsoNormal">The last expression causes a compile-time error because
neither <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
nor <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
is implicitly convertible to the other, and so there is no best common type. An
explicitly typed array creation expression must be used in this case, for
example specifying the type to be <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>. Alternatively, one of the
elements can be cast to a common base type, which would then become the
inferred element type.</p>

<p class="MsoNormal">Implicitly typed array creation expressions can be combined
with anonymous object initializers (§7.6.10.6) to create anonymously typed data
structures. For example:</p>

<p class="Code">var contacts = new[] {<br>
&nbsp;&nbsp; new {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name = "Chris Smith",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PhoneNumbers = new[] { "206-555-0101", "425-882-8080"
}<br>
&nbsp;&nbsp; },<br>
&nbsp;&nbsp; new {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name = "Bob Harris",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PhoneNumbers = new[] { "650-555-0199" }<br>
&nbsp;&nbsp; }<br>
};</p>

<h4><a name="_Toc251613138"></a><a name="_Ref174236690"></a><a name="_Ref174229718"></a><a name="_Ref174224330">7.6.10.5 Delegate creation
expressions</a></h4>

<p class="MsoNormal">A <span class="Production">delegate-creation-expression</span>
is used to create a new instance of a <span class="Production">delegate-type</span>.</p>

<p class="Grammar">delegate-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
delegate-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="MsoNormal">The argument of a delegate creation expression must be a
method group, an anonymous function or a value of either the compile time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> or a <span class="Production">delegate-type</span>. If the argument is a method group, it
identifies the method and, for an instance method, the object for which to
create a delegate. If the argument is an anonymous function it directly defines
the parameters and method body of the delegate target. If the argument is a
value it identifies a delegate instance of which to create a copy.</p>

<p class="MsoNormal">If the <span class="Production">expression</span> has the
compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
the <span class="Production">delegate-creation-expression</span> is dynamically
bound (§7.2.2), and the rules below are applied at run-time using the run-time
type of the <span class="Production">expression</span>. Otherwise the rules are
applied at compile-time.</p>

<p class="MsoNormal">The binding-time processing of a <span class="Production">delegate-creation-expression</span>
of the form <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">D(E)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is a <span class="Production">delegate-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is an <span class="Production">expression</span>,
consists of the following steps:</p>

<p class="MsoListBullet" style="margin-left:.2in;text-indent:-.2in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a method group, the delegate creation expression is processed in the same
way as a method group conversion (§6.6) from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet" style="margin-left:.2in;text-indent:-.2in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an anonymous function, the delegate creation expression is processed in the
same way as an anonymous function conversion (§6.5) from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<p class="MsoListBullet" style="margin-left:.2in;text-indent:-.2in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a value, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
must be compatible (§15.1) with <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>, and the result is a reference to a
newly created delegate of type <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> that refers to the same invocation list as <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not
compatible with <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>,
a compile-time error occurs.</p>

<p class="MsoNormal">The run-time processing of a <span class="Production">delegate-creation-expression</span>
of the form <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">D(E)</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is a <span class="Production">delegate-type</span> and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is an <span class="Production">expression</span>,
consists of the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a method group, the delegate creation expression is evaluated as a method
group conversion (§6.6) from <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an anonymous function, the delegate creation is evaluated as an anonymous
function conversion from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> (§6.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a value of a <span class="Production">delegate-type</span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is evaluated.
If this evaluation causes an exception, no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the value of
<span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A new instance
of the delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is allocated. If there is not enough memory available to allocate the new
instance, a <span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span>
is thrown and no further steps are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The new delegate
instance is initialized with the same invocation list as the delegate instance
given by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoNormal">The invocation list of a delegate is determined when the
delegate is instantiated and then remains constant for the entire lifetime of
the delegate. In other words, it is not possible to change the target callable
entities of a delegate once it has been created. When two delegates are
combined or one is removed from another (§15.1), a new delegate results; no
existing delegate has its contents changed.</p>

<p class="MsoNormal">It is not possible to create a delegate that refers to a
property, indexer, user-defined operator, instance constructor, destructor, or
static constructor.</p>

<p class="MsoNormal">As described above, when a delegate is created from a method
group, the formal parameter list and return type of the delegate determine
which of the overloaded methods to select. In the example</p>

<p class="Code">delegate double DoubleFunc(double x);</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; DoubleFunc f = new DoubleFunc(Square);</p>

<p class="Code">&nbsp;&nbsp; static float Square(float x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * x;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static double Square(double x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * x;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">A.f</span></span>
field is initialized with a delegate that refers to the second <span class="Codefragment"><span style="font-size:10.0pt">Square</span></span> method
because that method exactly matches the formal parameter list and return type
of <span class="Codefragment"><span style="font-size:10.0pt">DoubleFunc</span></span>.
Had the second <span class="Codefragment"><span style="font-size:10.0pt">Square</span></span>
method not been present, a compile-time error would have occurred.</p>

<h4><a name="_Ref503342546"></a><a name="_Toc251613139"></a><a name="_Ref174223030"></a><a name="_Ref171779215">7.6.10.6 Anonymous </a>object
creation expressions</h4>

<p class="MsoNormal">An <span class="Production">anonymous-object-creation-expression</span>
is used to create an object of an anonymous type.</p>

<p class="Grammar">anonymous-object-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
anonymous-object-initializer</p>

<p class="Grammar">anonymous-object-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-declarator-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-declarator-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">member-declarator-list:<br>
member-declarator<br>
member-declarator-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; member-declarator</p>

<p class="Grammar">member-declarator:<br>
simple-name<br>
member-access<br>
base-access<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; expression</p>

<p class="MsoNormal">An anonymous object initializer declares an anonymous type
and returns an instance of that type. An anonymous type is a nameless class
type that inherits directly from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. The members of an anonymous type
are a sequence of read-only properties inferred from the anonymous object
initializer used to create an instance of the type. Specifically, an anonymous
object initializer of the form</p>

<p class="Code">new { <span class="Production"><span style="font-size:11.0pt">p<sub>1</sub></span></span>
= <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">p<sub>2</sub></span></span>
= <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">…</span></span> <span class="Production"><span style="font-size:11.0pt">p<sub>n</sub></span></span> = <span class="Production"><span style="font-size:11.0pt">e<sub>n</sub></span></span> }</p>

<p class="MsoNormal">declares an anonymous type of the form</p>

<p class="Code">class __Anonymous1<br>
{<br>
&nbsp;&nbsp; private readonly <span class="Production"><span style="font-size:11.0pt">T<sub>1</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">f<sub>1</sub></span></span>
;<br>
&nbsp;&nbsp; private readonly <span class="Production"><span style="font-size:11.0pt">T<sub>2</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">f<sub>2</sub></span></span>
;<br>
&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">…</span></span><br>
&nbsp;&nbsp; private readonly <span class="Production"><span style="font-size:11.0pt">T<sub>n</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">f<sub>n</sub></span></span>
;</p>

<p class="Code">&nbsp;&nbsp; public __Anonymous1(<span class="Production"><span style="font-size:11.0pt">T<sub>1</sub></span></span> <span class="Production"><span style="font-size:11.0pt">a<sub>1</sub></span></span>,<span class="Production"><span style="font-size:11.0pt"> T<sub>2</sub></span></span> <span class="Production"><span style="font-size:11.0pt">a<sub>2</sub></span></span>,<span class="Production"><span style="font-size:11.0pt">…</span></span>,<span class="Production"><span style="font-size:11.0pt"> T<sub>n</sub></span></span> <span class="Production"><span style="font-size:11.0pt">a<sub>n</sub></span></span>) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">f<sub>1</sub></span></span>
= <span class="Production"><span style="font-size:11.0pt">a<sub>1</sub></span></span>
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">f<sub>2</sub></span></span>
= <span class="Production"><span style="font-size:11.0pt">a<sub>2</sub></span></span>
;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">…</span></span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">f<sub>n</sub></span></span>
= <span class="Production"><span style="font-size:11.0pt">a<sub>n</sub></span></span>
;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public <span class="Production"><span style="font-size:11.0pt">T<sub>1</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">p<sub>1</sub></span></span>
{ get { return <span class="Production"><span style="font-size:11.0pt">f<sub>1</sub></span></span>
; } }<br>
&nbsp;&nbsp; public <span class="Production"><span style="font-size:11.0pt">T<sub>2</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">p<sub>2</sub></span></span>
{ get { return <span class="Production"><span style="font-size:11.0pt">f<sub>2</sub></span></span>
; } }<br>
&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">…</span></span><br>
&nbsp;&nbsp; public <span class="Production"><span style="font-size:11.0pt">T<sub>n</sub></span></span>
<span class="Production"><span style="font-size:11.0pt">p<sub>n</sub></span></span>
{ get { return <span class="Production"><span style="font-size:11.0pt">f<sub>n</sub></span></span>
; } }</p>

<p class="Code">&nbsp;&nbsp; public override bool Equals(object o) { … }<br>
&nbsp;&nbsp; public override int GetHashCode() { … }<br>
}</p>

<p class="MsoNormal">where each <span class="Production">T<sub>x</sub></span> is
the type of the corresponding expression <span class="Production">e<sub>x</sub></span>.
The expression used in a <span class="Production">member-declarator</span> must
have a type. Thus, it is a compile-time error for an expression in a <span class="Production">member-declarator</span> to be null or an anonymous function.
It is also a compile-time error for the expression to have an unsafe type.</p>

<p class="MsoNormal">The name of an anonymous type is automatically generated by
the compiler and cannot be referenced in program text.</p>

<p class="MsoNormal">Within the same program, two anonymous object initializers
that specify a sequence of properties of the same names and compile-time types
in the same order will produce instances of the same anonymous type. </p>

<p class="MsoNormal">In the example</p>

<p class="Code">var p1 = new { Name = "Lawnmower", Price = 495.00 };<br>
var p2 = new { Name = "Shovel", Price = 26.95 };<br>
p1 = p2;</p>

<p class="MsoNormal">the assignment on the last line is permitted because <span class="Codefragment"><span style="font-size:10.0pt">p1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">p2</span></span> are of the same
anonymous type.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Equals</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">GetHashcode</span></span>
methods on anonymous types override the methods inherited from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, and are
defined in terms of the <span class="Codefragment"><span style="font-size:10.0pt">Equals</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">GetHashcode</span></span>
of the properties, so that two instances of the same anonymous type are equal
if and only if all their properties are equal.</p>

<p class="MsoNormal">A member declarator can be abbreviated to a simple name (§7.5.2),
a member access (§7.5.4) or a base access (§7.6.8). This is called a <span class="Term">projection initializer</span> and is shorthand for a declaration of
and assignment to a property with the same name. Specifically, member
declarators of the forms</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">identifier&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; expr</span></span>
. <span class="Production"><span style="font-size:11.0pt">identifier</span></span></p>

<p class="MsoNormal">are precisely equivalent to the following, respectively:</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">identifer</span></span>
= <span class="Production"><span style="font-size:11.0pt">identifier</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">identifier</span></span> = <span class="Production"><span style="font-size:11.0pt">expr</span></span> . <span class="Production"><span style="font-size:11.0pt">identifier</span></span></p>

<p class="MsoNormal">Thus, in a projection initializer the <span class="Production">identifier</span> selects both the value and the field or
property to which the value is assigned. Intuitively, a projection initializer
projects not just a value, but also the name of the value.</p>

<h3><a name="_Toc251613140"></a><a name="_Ref174236908"></a><a name="_Ref174224271"></a><a name="_Ref174222834"></a><a name="_Ref174221898"></a><a name="_Ref174221805">7.6.11 The typeof operator</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>&nbsp;operator is used to obtain the <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>&nbsp;object for a type.</p>

<p class="Grammar"><a name="Grammar_typeof_expression">typeof-expression:<br>
</a><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">typeof</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)<br>
typeof</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; unbound-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)<br>
typeof ( void )</span></span></p>

<p class="Grammar"><a name="Grammar_unbound_type_name">unbound-type-name:<br>
identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub><br>
identifier&nbsp;&nbsp; </a><span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">::</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub><br>
unbound-type-name&nbsp;&nbsp; <span class="Term"><span style="font-style:normal">.</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub></p>

<p class="Grammar"><a name="Grammar_generic_dimension_specifier">generic-dimension-specifier:<br>
</a><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
commas<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span></p>

<p class="Grammar"><a name="Grammar_commas">commas:<br>
</a><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
commas&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span></p>

<p class="MsoNormal">The first form of <span class="Production">typeof-expression</span>
consists of a <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>
keyword followed by a parenthesized <span class="Production">type</span>. The
result of an expression of this form is the <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span> object for the indicated
type. There is only one <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object for any given type. This means that for a type&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">typeof(T)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> <span class="Codefragment"><span style="font-size:10.0pt">typeof(T)</span></span> is
always true. The <span class="Production">type</span> cannot be <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">The second form of <span class="Production">typeof-expression</span>
consists of a <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>
keyword followed by a parenthesized <span class="Production">unbound-type-name</span>.
An <span class="Production">unbound-type-name</span> is very similar to a <span class="Production">type-name</span> (§3.8) except that an <span class="Production">unbound-type-name</span>
contains <span class="Production">generic-dimension-specifier</span>s where a <span class="Production">type-name</span> contains <span class="Production">type-argument-list</span>s.
When the operand of a <span class="Production">typeof-expression</span> is a
sequence of tokens that satisfies the grammars of both <span class="Production">unbound-type-name</span>
and <span class="Production">type-name</span>, namely when it contains neither a <span class="Production">generic-dimension-specifier</span> nor a <span class="Production">type-argument-list</span>, the sequence of tokens is
considered to be a <span class="Production">type-name</span>. The meaning of an <span class="Production">unbound-type-name</span> is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Convert the sequence of tokens to a <span class="Production">type-name</span>
by replacing each <span class="Production">generic-dimension-specifier</span>
with a <span class="Production">type-argument-list</span> having the same number
of commas and the keyword <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
as each <span class="Production">type-argument</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Evaluate the resulting <span class="Production">type-name</span>,
while ignoring all type parameter constraints.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">unbound-type-name</span> resolves to the
unbound generic type associated with the resulting constructed type (§4.4.3).</p>

<p class="MsoNormal">The result of the <span class="Production">typeof-expression</span>
is the <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object for the resulting unbound generic type.</p>

<p class="MsoNormal">The third form of <span class="Production">typeof-expression</span>
consists of a <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>
keyword followed by a parenthesized <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> keyword. The result of an
expression of this form is the <span class="Codefragment"><span style="font-size:
10.0pt">System.Type</span></span> object that represents the absence of a type.
The type object returned by <span class="Codefragment"><span style="font-size:
10.0pt">typeof(void)</span></span> is distinct from the type object returned
for any type. This special type object is useful in class libraries that allow
reflection onto&nbsp;methods in the language, where those methods wish to have
a way to represent the return type of any method, including void methods, with
an instance of <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span>
operator can be used on a type parameter. The result is the <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object for the run-time type that was bound to the type parameter. The <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span> operator
can also be used on a constructed type or an unbound generic type (§4.4.3). The <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object for an unbound generic type is not the same as the <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object of the instance type. The instance type is always a closed constructed
type at run-time so its <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object depends on the run-time type arguments in use, while the unbound generic
type has no type arguments.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class X&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public static void PrintTypes() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Type[] t = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(int),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(System.Int32),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(string),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(double[]),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(void),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(T),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(X&lt;T&gt;),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(X&lt;X&lt;T&gt;&gt;),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof(X&lt;&gt;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; t.Length; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(t[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X&lt;int&gt;.PrintTypes();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the following output:</p>

<p class="Code">System.Int32<br>
System.Int32<br>
System.String<br>
System.Double[]<br>
System.Void<br>
System.Int32<br>
X`1[System.Int32]<br>
<span lang="FR">X`1[X`1[System.Int32]]<br>
X`1[T]</span></p>

<p class="MsoNormal">Note that <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">System.Int32</span></span> are the same type.</p>

<p class="MsoNormal"><a name="_Ref503504874">Also note that the result of </a><span class="Codefragment"><span style="font-size:10.0pt">typeof(X&lt;&gt;)</span></span>
does not depend on the type argument but the result of <span class="Codefragment"><span style="font-size:10.0pt">typeof(X&lt;T&gt;)</span></span>
does.</p>

<h3><a name="_Toc251613141"></a><a name="_Ref174228848"></a><a name="_Ref174223514"></a><a name="_Ref174223503"></a><a name="_Ref174222954"></a><a name="_Ref174221480">7.6.12 The checked and unchecked operators</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operators are used to control the <span class="Term">overflow checking context</span>
for integral-type arithmetic operations and conversions.</p>

<p class="Grammar">checked-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">checked</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="Grammar">unchecked-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unchecked</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
operator evaluates the contained expression in a checked context, and the <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operator evaluates the contained expression in an unchecked context. A <span class="Production">checked-expression</span> or <span class="Production">unchecked-expression</span>
corresponds exactly to a <span class="Production">parenthesized-expression</span>
(§7.6.3), except that the contained expression is evaluated in the given
overflow checking context.</p>

<p class="MsoNormal">The overflow checking context can also be controlled through
the <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
statements (§8.11).</p>

<p class="MsoNormal">The following operations are affected by the overflow checking
context established by the <span class="Codefragment"><span style="font-size:
10.0pt">checked</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> operators and statements:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined <span class="Codefragment"><span style="font-size:
10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">--</span></span> unary operators (§7.6.9 and §7.7.5), when the operand
is of an integral type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined <span class="Codefragment"><span style="font-size:
10.0pt">-</span></span> unary operator (§7.7.2), when the operand is of an
integral type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined <span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> binary
operators (§7.8), when both operands are of integral types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit numeric conversions (§6.2.1) from one integral type to
another integral type, or from <span class="Codefragment"><span style="font-size:
10.0pt">float</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span> to an integral type.</p>

<p class="MsoNormal">When one of the above operations produce a result that is
too large to represent in the destination type, the context in which the
operation is performed controls the resulting behavior:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, if the operation is a constant expression (§7.19), a compile-time
error occurs. Otherwise, when the operation is performed at run-time, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, the result is truncated by discarding any high-order bits that do not
fit in the destination type.</p>

<p class="MsoNormal">For non-constant expressions (expressions that are evaluated
at run-time) that are not enclosed by any <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> operators or statements, the
default overflow checking context is <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> unless external factors (such as
compiler switches and execution environment configuration) call for <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
evaluation.</p>

<p class="MsoNormal">For constant expressions (expressions that can be fully
evaluated at compile-time), the default overflow checking context is always <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>. Unless
a constant expression is explicitly placed in an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> context, overflows that occur
during the compile-time evaluation of the expression always cause compile-time
errors.</p>

<p class="MsoNormal">The body of an anonymous function is not affected by <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
contexts in which the anonymous function occurs.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static readonly int x = 1000000;<br>
&nbsp;&nbsp; static readonly int y = 1000000;</p>

<p class="Code">&nbsp;&nbsp; static int F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return checked(x * y);&nbsp;&nbsp;&nbsp;&nbsp; // Throws OverflowException<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static int G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return unchecked(x * y);&nbsp;&nbsp; // Returns -727379968<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static int H() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Depends on default<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">no compile-time errors are reported since neither of the
expressions can be evaluated at compile-time. At run-time, the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method throws
a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>,
and the <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
method returns –727379968 (the lower 32 bits of the out-of-range result). The
behavior of the <span class="Codefragment"><span style="font-size:10.0pt">H</span></span>
method depends on the default overflow checking context for the compilation,
but it is either the same as <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> or the same as <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; const int x = 1000000;<br>
&nbsp;&nbsp; const int y = 1000000;</p>

<p class="Code">&nbsp;&nbsp; static int F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return checked(x * y);&nbsp;&nbsp;&nbsp;&nbsp; // Compile error, overflow<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static int G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return unchecked(x * y);&nbsp;&nbsp; // Returns -727379968<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static int H() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Compile error, overflow<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the overflows that occur when evaluating the constant
expressions in <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">H</span></span>
cause compile-time errors to be reported because the expressions are evaluated
in a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context. An overflow also occurs when evaluating the constant expression in <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>, but since
the evaluation takes place in an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> context, the overflow is not
reported.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operators only affect the overflow checking context for those operations that
are textually contained within the “<span class="Codefragment"><span style="font-size:10.0pt">(</span></span>” and “<span class="Codefragment"><span style="font-size:10.0pt">)</span></span>” tokens. The operators have no effect
on function members that are invoked as a result of evaluating the contained
expression. In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static int Multiply(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x * y;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static int F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return checked(Multiply(1000000, 1000000));<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the use of <span class="Codefragment"><span style="font-size:
10.0pt">checked</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> does not affect the evaluation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Multiply</span></span>, so <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated
in the default overflow checking context.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operator is convenient when writing constants of the signed integral types in
hexadecimal notation. For example:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; public const int AllBits = unchecked((int)0xFFFFFFFF);</p>

<p class="Code">&nbsp;&nbsp; public const int HighBit = unchecked((int)0x80000000);<br>
}</p>

<p class="MsoNormal">Both of the hexadecimal constants above are of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>. Because
the constants are outside the <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> range, without the <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> operator, the casts to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> would
produce compile-time errors.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
operators and statements allow programmers to control certain aspects of some
numeric calculations. However, the behavior of some numeric operators depends
on their operands’ data types. For example, multiplying two decimals always
results in an exception on overflow <em>even</em> within an explicitly <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
construct. Similarly, multiplying two floats never results in an exception on
overflow <em>even</em> within an explicitly <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> construct. In addition, other
operators are <em>never</em> affected by the mode of checking, whether default
or explicit.</p>

<h3><a name="_Toc251613142"></a><a name="_Ref174222843"></a><a name="_Ref174222209">7.6.13 Default value expressions</a></h3>

<p class="MsoNormal">A default value expression is used to obtain the default
value (§5.2) of a type. Typically a default value expression is used for type
parameters, since it may not be known if the type parameter is a value type or
a reference type. (No conversion exists from the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> literal to a type parameter unless
the type parameter is known to be a reference type.)</p>

<p class="Grammar">default-value-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="MsoNormal">If the <span class="Production">type</span> in a <span class="Production">default-value-expression</span> evaluates at run-time to a
reference type, the result is <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span> converted to that type. If the <span class="Production">type</span> in a <span class="Production">default-value-expression</span>
evaluates at run-time to a value type, the result is the <span class="Production">value-type</span>’s default value (§4.1.2).</p>

<p class="MsoNormal">A <span class="Production">default-value-expression</span> is
a constant expression (§7.19) if the type is a reference type or a type
parameter that is known to be a reference type (§10.1.5). In addition, a <span class="Production">default-value-expression</span> is a constant expression if
the type is one of the following value types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, or any enumeration type.</p>

<h3><a name="_Toc251613143">7.6.14 Anonymous method expressions</a></h3>

<p class="MsoNormal">An <span class="Production">anonymous-method-expression</span>
is one of two ways of defining an anonymous function. These are further
described in §7.15.</p>

<h2><a name="_Toc445783008"></a><a name="_Toc251613144"></a><a name="_Ref529685859"></a><a name="_Ref529685858"></a><a name="_Ref529685857">7.7
Unary operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">~</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>, and cast
operators are called the unary operators.</p>

<p class="Grammar">unary-expression:<br>
primary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">-</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
unary-expression<br>
pre-increment-expression<br>
pre-decrement-expression<br>
cast-expression</p>

<p class="MsoNormal">If the operand of a <span class="Production">unary-expression</span>
has the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
it is dynamically bound (§7.2.2). In this case the compile-time type of the <span class="Production">unary-expression</span> is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of the operand.</p>

<h3><a name="_Toc251613145"></a><a name="_Ref12515739">7.7.1 Unary plus
operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">+x</span></span>, unary operator overload resolution
(§7.3.3) is applied to select a specific operator implementation. The operand
is converted to the parameter type of the selected operator, and the type of
the result is the return type of the operator. The predefined unary plus
operators are:</p>

<p class="Code">int operator +(int x);<br>
uint operator +(uint x);<br>
long operator +(long x);<br>
ulong operator +(ulong x);<br>
float operator +(float x);<br>
double operator +(double x);<br>
decimal operator +(decimal x);</p>

<p class="MsoNormal">For each of these operators, the result is simply the value
of the operand.</p>

<h3><a name="_Toc251613146"></a><a name="_Ref462544979">7.7.2 Unary minus
operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">–x</span></span>, unary operator overload resolution
(§7.3.3) is applied to select a specific operator implementation. The operand
is converted to the parameter type of the selected operator, and the type of
the result is the return type of the operator. The predefined negation
operators are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer negation:</p>

<p class="Code">int operator –(int x);<br>
long operator –(long x);</p>

<p class="MsoNormal" style="margin-left:.25in">The result is computed by
subtracting <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
from zero. If the value of of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is the smallest representable value of the operand type
(−2<sup>31</sup> for <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> or −2<sup>63</sup> for <span class="Codefragment"><span style="font-size:10.0pt">long)</span></span>, then the
mathematical negation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not representable within the operand type. If this occurs within a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown; if it occurs within an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> context, the result is the
value of the operand and the overflow is not reported.</p>

<p class="MsoNormal" style="margin-left:.25in">If the operand of the negation
operator is of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>,
it is converted to type <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>,
and the type of the result is <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>. An exception is the rule that permits the <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> value
−2147483648 (−2<sup>31</sup>) to be written as a decimal integer literal
(§2.4.4.2).</p>

<p class="MsoNormal" style="margin-left:.25in">If the operand of the negation
operator is of type <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>,
a compile-time error occurs. An exception is the rule that permits the <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> value
−9223372036854775808 (−2<sup>63</sup>) to be written as a decimal
integer literal (§2.4.4.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point negation:</p>

<p class="Code">float operator –(float x);<br>
double operator –(double x);</p>

<p class="MsoNormal" style="margin-left:.25in">The result is the value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> with its sign
inverted. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is NaN, the result is also NaN.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal negation:</p>

<p class="Code">decimal operator –(decimal x);</p>

<p class="MsoNormal" style="margin-left:.25in">The result is computed by
subtracting <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
from zero. Decimal negation is equivalent to using the unary minus operator of
type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<h3><a name="_Toc251613147">7.7.3 Logical negation operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">!x</span></span>, unary operator overload resolution
(§7.3.3) is applied to select a specific operator implementation. The operand
is converted to the parameter type of the selected operator, and the type of
the result is the return type of the operator. Only one predefined logical
negation operator exists:</p>

<p class="Code">bool operator !(bool x);</p>

<p class="MsoNormal">This operator computes the logical negation of the operand:
If the operand is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>,
the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.
If the operand is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>,
the result is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<h3><a name="_Toc251613148"></a><a name="_Ref485189005">7.7.4 Bitwise
complement operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">~x</span></span>, unary operator overload resolution
(§7.3.3) is applied to select a specific operator implementation. The operand
is converted to the parameter type of the selected operator, and the type of
the result is the return type of the operator. The predefined bitwise
complement operators are:</p>

<p class="Code">int operator ~(int x);<br>
uint operator ~(uint x);<br>
long operator ~(long x);<br>
ulong operator ~(ulong x);</p>

<p class="MsoNormal">For each of these operators, the result of the operation is
the bitwise complement of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoNormal">Every enumeration type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> implicitly provides the following
bitwise complement operator:</p>

<p class="Code">E operator <span class="Codefragment">~</span>(E x);</p>

<p class="MsoNormal">The result of evaluating ~<span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an expression of an enumeration
type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
with an underlying type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>,
is exactly the same as evaluating (E)<span class="Codefragment"><span style="font-size:10.0pt">(~(U)x)</span></span>.</p>

<h3><a name="_Toc251613149"></a><a name="_Ref466967949">7.7.5 Prefix increment
and decrement operators</a></h3>

<p class="Grammar">pre-increment-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">++</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">pre-decrement-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">--</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="MsoNormal">The operand of a prefix increment or decrement operation
must be an expression classified as a variable, a property access, or an
indexer access. The result of the operation is a value of the same type as the
operand.</p>

<p class="MsoNormal">If the operand of a prefix increment or decrement operation
is a property or indexer access, the property or indexer must have both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> and a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor.
If this is not the case, a binding-time error occurs.</p>

<p class="MsoNormal">Unary operator overload resolution (§7.3.3) is applied to select a specific operator implementation. Predefined <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span> operators exist for the following
types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, and
any enum type. The predefined <span class="Codefragment"><span style="font-size:
10.0pt">++</span></span> operators return the value produced by adding 1 to the
operand, and the predefined <span class="Codefragment"><span style="font-size:
10.0pt">--</span></span> operators return the value produced by subtracting 1
from the operand. In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
context, if the result of this addition or subtraction is outside the range of
the result type and the result type is an integral type or enum type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown.</p>

<p class="MsoNormal">The run-time processing of a prefix increment or decrement
operation of the form <span class="Codefragment"><span style="font-size:10.0pt">++x</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">--x</span></span>
consists of the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a variable:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated
to produce the variable.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The selected
operator is invoked with the value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> as its argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value
returned by the operator is stored in the location given by the evaluation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value
returned by the operator becomes the result of the operation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a property or indexer access:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
expression (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>)
and the argument list (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an indexer access) associated with <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are evaluated, and the results are
used in the subsequent <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor invocations.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
invoked.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The selected
operator is invoked with the value returned by the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor as its argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
invoked with the value returned by the operator as its <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> argument.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value
returned by the operator becomes the result of the operation.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
operators also support postfix notation (§7.6.9). Typically, the result of <span class="Codefragment"><span style="font-size:10.0pt">x++</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x--</span></span> is the
value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<em>before</em> the operation, whereas the result of <span class="Codefragment"><span style="font-size:10.0pt">++x</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">--x</span></span> is the value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <em>after</em>
the operation. In either case, <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> itself has the same value after the operation.</p>

<p class="MsoNormal">An <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">++</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
implementation can be invoked using either postfix or prefix notation. It is
not possible to have separate operator implementations for the two notations.</p>

<h3><a name="_Ref452704864"></a><a name="_Ref448204749"></a><a name="_Toc445783007"></a><a name="_Toc251613150"></a><a name="_Ref452746437">7.7.6
Cast expressions</a></h3>

<p class="MsoNormal">A <span class="Production">cast-expression</span> is used to
explicitly convert an expression to a given type.</p>

<p class="Grammar">cast-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="MsoNormal">A <span class="Production">cast-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">(T)E</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a <span class="Production">type</span> and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a <span class="Production">unary-expression</span>,
performs an explicit conversion (§6.2) of the value of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. If no
explicit conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, a binding-time error occurs.
Otherwise, the result is the value produced by the explicit conversion. The
result is always classified as a value, even if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> denotes a variable.</p>

<p class="MsoNormal">The grammar for a <span class="Production">cast-expression</span>
leads to certain syntactic ambiguities. For example, the expression <span class="Codefragment"><span style="font-size:10.0pt">(x)–y</span></span> could
either be interpreted as a <span class="Production">cast-expression</span> (a
cast of <span class="Codefragment"><span style="font-size:10.0pt">–y</span></span>
to type <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>)
or as an <span class="Production">additive-expression</span> combined with a <span class="Production">parenthesized-expression</span> (which computes the value <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.</p>

<p class="MsoNormal">To resolve <span class="Production">cast-expression</span>
ambiguities, the following rule exists: A sequence of one or more <span class="Production">token</span>s (§2.3.3) enclosed in parentheses is considered
the start of a <span class="Production">cast-expression</span> only if at least
one of the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The sequence of tokens is correct grammar for a <span class="Production">type</span>, but not for an <span class="Production">expression</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The sequence of tokens is correct grammar for a <span class="Production">type</span>, and the token immediately following the closing
parentheses is the token “<span class="Codefragment"><span style="font-size:10.0pt">~</span></span>”,
the token “<span class="Codefragment"><span style="font-size:10.0pt">!</span></span>”,
the token “<span class="Codefragment"><span style="font-size:10.0pt">(</span></span>”,
an <span class="Production">identifier</span> (§2.4.1), a <span class="Production">literal</span>
(§2.4.4), or any <span class="Production">keyword</span> (§2.4.3) except <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">is</span></span>.</p>

<p class="MsoNormal">The term “correct grammar” above means only that the
sequence of tokens must conform to the particular grammatical production. It
specifically does not consider the actual meaning of any constituent
identifiers. For example, if <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">y</span></span> are identifiers, then <span class="Codefragment"><span style="font-size:10.0pt">x.y</span></span> is correct grammar for a type, even if
<span class="Codefragment"><span style="font-size:10.0pt">x.y</span></span>
doesn’t actually denote a type.</p>

<p class="MsoNormal">From the disambiguation rule it follows that, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
identifiers, <span class="Codefragment"><span style="font-size:10.0pt">(x)y</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">(x)(y)</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">(x)(-y)</span></span>
are <span class="Production">cast-expression</span>s, but <span class="Codefragment"><span style="font-size:10.0pt">(x)-y</span></span> is not,
even if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
identifies a type. However, if <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is a keyword that identifies a predefined type (such as
<span class="Codefragment"><span style="font-size:10.0pt">int</span></span>),
then all four forms are <span class="Production">cast-expression</span>s (because
such a keyword could not possibly be an expression by itself).</p>

<h2><a name="_Toc445783010"></a><a name="_Toc251613151"></a><a name="_Ref467234273"></a><a name="_Ref461525515"></a><a name="_Ref461349839">7.8
Arithmetic operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> operators are
called the arithmetic operators.</p>

<p class="Grammar">multiplicative-expression:<br>
unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">*</span></span>&nbsp;&nbsp; unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">/</span></span>&nbsp;&nbsp; unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">%</span></span>&nbsp;&nbsp; unary-expression</p>

<p class="Grammar">additive-expression:<br>
multiplicative-expression<br>
additive-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">+</span></span>&nbsp;&nbsp; multiplicative-expression<br>
additive-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">–</span></span>&nbsp;&nbsp; multiplicative-expression</p>

<p class="MsoNormal">If an operand of an arithmetic operator has the compile-time
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the expression is dynamically bound (§7.2.2). In this case the
compile-time type of the expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of those operands
that have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<h3><a name="_Toc251613152">7.8.1 Multiplication operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, binary operator overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined multiplication operators are listed below.
The operators all compute the product of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer multiplication:</p>

<p class="Code">int operator *(int x, int y);<br>
uint operator *(uint x, uint y);<br>
long operator *(long x, long y);<br>
ulong operator *(ulong x, ulong y);</p>

<p class="MsoNormal" style="margin-left:.25in">In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> context, if the product is
outside the range of the result type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span> is thrown. In
an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, overflows are not reported and any significant high-order bits outside
the range of the result type are discarded.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point multiplication:</p>

<p class="Code">float operator *(float x, float y);<br>
double operator *(double x, double y);</p>

<p class="MsoNormal" style="margin-left:.25in">The product is computed according
to the rules of IEEE 754 arithmetic. The following table lists the results of
all possible combinations of nonzero finite values, zeros, infinities, and NaN’s. In the table, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
positive finite values. <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>
is the result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. If the
result is too large for the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is infinity. If the result is too
small for the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is zero.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal multiplication:</p>

<p class="Code">decimal operator *(decimal x, decimal y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the resulting value is too
large to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
format, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown. If the result value is too small to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> format,
the result is zero. The scale of the result, before any rounding, is the sum of
the scales of the two operands.</p>

<p class="MsoNormal" style="margin-left:.25in">Decimal multiplication is
equivalent to using the multiplication operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<h3><a name="_Toc251613153"></a><a name="_Ref486414684">7.8.2 Division operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, binary operator overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined division operators are listed below. The
operators all compute the quotient of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer division:</p>

<p class="Code">int operator /(int x, int y);<br>
uint operator /(uint x, uint y);<br>
long operator /(long x, long y);<br>
ulong operator /(ulong x, ulong y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the value of the right operand
is zero, a <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span>
is thrown.</p>

<p class="MsoNormal" style="margin-left:.25in">The division rounds the result
towards zero. Thus the absolute value of the result is the largest possible
integer that is less than or equal to the absolute value of the quotient of the
two operands. The result is zero or positive when the two operands have the
same sign and zero or negative when the two operands have opposite signs.</p>

<p class="MsoNormal" style="margin-left:.25in">If the left operand is the
smallest representable <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
value and the right operand is <span class="Codefragment"><span style="font-size:
10.0pt">–1</span></span>, an overflow occurs. In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> context, this causes a <span class="Codefragment"><span style="font-size:10.0pt">System.ArithmeticException</span></span>
(or a subclass thereof) to be thrown. In an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> context, it is
implementation-defined as to whether a <span class="Codefragment"><span style="font-size:10.0pt">System.ArithmeticException</span></span> (or a
subclass thereof) is thrown or the overflow goes unreported with the resulting
value being that of the left operand.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point division:</p>

<p class="Code">float operator /(float x, float y);<br>
double operator /(double x, double y);</p>

<p class="MsoNormal" style="margin-left:.25in">The quotient is computed according
to the rules of IEEE 754 arithmetic. The following table lists the results of
all possible combinations of nonzero finite values, zeros, infinities, and NaN’s. In the table, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
positive finite values. <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>
is the result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. If the
result is too large for the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is infinity. If the result is too
small for the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is zero.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal division:</p>

<p class="Code">decimal operator /(decimal x, decimal y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the value of the right operand
is zero, a <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span>
is thrown. If the resulting value is too large to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> format,
a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown. If the result value is too small to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span> format,
the result is zero. The scale of the result is the smallest scale that will
preserve a result equal to the nearest representantable decimal value to the
true mathematical result.</p>

<p class="MsoNormal" style="margin-left:.25in">Decimal division is equivalent to
using the division operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<h3><a name="_Toc251613154">7.8.3 Remainder operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, binary operator overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined remainder operators are listed below. The
operators all compute the remainder of the division between <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer remainder:</p>

<p class="Code">int operator %(int x, int y);<br>
uint operator %(uint x, uint y);<br>
long operator %(long x, long y);<br>
ulong operator %(ulong x, ulong y);</p>

<p class="MsoNormal" style="margin-left:.25in">The result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is the value
produced by <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is zero, a <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span>
is thrown. </p>

<p class="MsoNormal" style="margin-left:.25in">If the left operand is the
smallest <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>
value and the right operand is <span class="Codefragment"><span style="font-size:
10.0pt">-1</span></span>, a <span class="Codefragment"><span style="font-size:
10.0pt">System.OverflowException</span></span> is thrown. In no case does <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> throw an
exception where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> would not
throw an exception.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point remainder:</p>

<p class="Code">float operator %(float x, float y);<br>
double operator %(double x, double y);</p>

<p class="MsoNormal" style="margin-left:.25in">The following table lists the
results of all possible combinations of nonzero finite values, zeros,
infinities, and NaN’s. In the table, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are positive finite values. <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is the result
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">%</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> and is
computed as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">n</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">n</span></span> is the largest
possible integer that is less than or equal to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. This method of computing the
remainder is analogous to that used for integer operands, but differs from the
IEEE 754 definition (in which <span class="Codefragment"><span style="font-size:
10.0pt">n</span></span> is the integer closest to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>).</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal remainder:</p>

<p class="Code">decimal operator %(decimal x, decimal y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the value of the right operand
is zero, a <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span>
is thrown. The scale of the result, before any rounding, is the larger of the
scales of the two operands, and the sign of the result, if non-zero, is the
same as that of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoNormal" style="margin-left:.25in">Decimal remainder is equivalent to
using the remainder operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<h3><a name="_Toc251613155"></a><a name="_Ref485188914">7.8.4 Addition operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, binary operator overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined addition operators are listed below. For
numeric and enumeration types, the predefined addition operators compute the
sum of the two operands. When one or both operands are of type string, the
predefined addition operators concatenate the string representation of the
operands.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer addition:</p>

<p class="Code">int operator +(int x, int y);<br>
uint operator +(uint x, uint y);<br>
long operator +(long x, long y);<br>
ulong operator +(ulong x, ulong y);</p>

<p class="MsoNormal" style="margin-left:.25in">In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> context, if the sum is outside
the range of the result type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span> is thrown. In
an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, overflows are not reported and any significant high-order bits outside
the range of the result type are discarded.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point addition:</p>

<p class="Code">float operator +(float x, float y);<br>
double operator +(double x, double y);</p>

<p class="MsoNormal" style="margin-left:.25in">The sum is computed according to
the rules of IEEE 754 arithmetic. The following table lists the results of all
possible combinations of nonzero finite values, zeros, infinities, and NaN’s. In the table, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
nonzero finite values, and <span class="Codefragment"><span style="font-size:
10.0pt">z</span></span> is the result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> have the same magnitude but opposite
signs, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>
is positive zero. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is too large
to represent in the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is an infinity with the same sign as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal addition:</p>

<p class="Code">decimal operator +(decimal x, decimal y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the resulting value is too
large to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
format, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown. The scale of the result, before any rounding, is the larger of the
scales of the two operands.</p>

<p class="MsoNormal" style="margin-left:.25in">Decimal addition is equivalent to
using the addition operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Enumeration addition. Every enumeration type implicitly provides
the following predefined operators, where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is the enum type, and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is the
underlying type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>:</p>

<p class="Code"><span lang="DE">E operator +(E x, U y);<br>
E operator +(U x, E y);</span></p>

<p class="MsoNormal" style="margin-left:.25in">At run-time these operators are
evaluated exactly as <span class="Codefragment"><span style="font-size:10.0pt">(E)((U)x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(U)y)</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>String concatenation:</p>

<p class="Code">string operator +(string x, string y);<br>
string operator +(string x, object y);<br>
string operator +(object x, string y);</p>

<p class="MsoNormal" style="margin-left:.25in">These overloads of the binary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> operator
perform string concatenation. If an operand of string concatenation is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, an empty
string is substituted. Otherwise, any non-string argument is converted to its
string representation by invoking the virtual <span class="Codefragment"><span style="font-size:10.0pt">ToString</span></span> method inherited from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">ToString</span></span>
returns <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
an empty string is substituted.</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("s = &gt;" + s + "&lt;");&nbsp;&nbsp;&nbsp;&nbsp; //
displays s = &gt;&lt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("i = " + i);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // displays i = 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float f = 1.2300E+15F;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("f = " + f);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // displays f =
1.23E+15<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decimal d = 2.900m;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("d = " + d);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // displays d = 2.900<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal" style="margin-left:.25in">The result of the string
concatenation operator is a string that consists of the characters of the left
operand followed by the characters of the right operand. The string
concatenation operator never returns a <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> value. A <span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span> may be
thrown if there is not enough memory available to allocate the resulting string.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Delegate combination. Every delegate type implicitly provides the
following predefined operator, where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is the delegate type:</p>

<p class="Code">D operator <span class="Codefragment">+</span>(D x, D y);</p>

<p class="MsoNormal" style="margin-left:.25in"><a name="_Ref485188932">The binary
</a><span class="Codefragment"><span style="font-size:10.0pt">+</span></span>
operator performs delegate combination when both operands are of some delegate
type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>. (If
the operands have different delegate types, a binding-time error occurs.) If
the first operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
the result of the operation is the value of the second operand (even if that is
also <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>).
Otherwise, if the second operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, then the result of the operation
is the value of the first operand. Otherwise, the result of the operation is a
new delegate instance that, when invoked, invokes the first operand and then
invokes the second operand. For examples of delegate combination, see §7.8.5 and §15.4. Since <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
is not a delegate type, <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> is not defined
for it.</p>

<h3><a name="_Toc251613156"></a><a name="_Ref486414401">7.8.5 Subtraction
operator</a></h3>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, binary operator overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined subtraction operators are listed below. The
operators all subtract <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
from <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Integer subtraction:</p>

<p class="Code">int operator <span class="Codefragment">–</span>(int x, int y);<br>
uint operator <span class="Codefragment">–</span>(uint x, uint y);<br>
long operator <span class="Codefragment">–</span>(long x, long y);<br>
ulong operator <span class="Codefragment">–</span>(ulong x, ulong y);</p>

<p class="MsoNormal" style="margin-left:.25in">In a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> context, if the difference is
outside the range of the result type, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span> is thrown. In
an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, overflows are not reported and any significant high-order bits outside
the range of the result type are discarded.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Floating-point subtraction:</p>

<p class="Code">float operator <span class="Codefragment">–</span>(float x, float
y);<br>
double operator <span class="Codefragment">–</span>(double x, double y);</p>

<p class="MsoNormal" style="margin-left:.25in">The difference is computed
according to the rules of IEEE 754 arithmetic. The following table lists the
results of all possible combinations of nonzero finite values, zeros,
infinities, and NaNs. In the table, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are nonzero finite values, and <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is the result
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are equal, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is positive
zero. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is too large
to represent in the destination type, <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> is an infinity with the same sign as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">z</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–y</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+0</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">+∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">–∞</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="66" valign="top" style="width:49.25pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
  <td width="66" valign="top" style="width:49.3pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">NaN</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Decimal subtraction:</p>

<p class="Code">decimal operator <span class="Codefragment">–</span>(decimal x,
decimal y);</p>

<p class="MsoNormal" style="margin-left:.25in">If the resulting value is too
large to represent in the <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>
format, a <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>
is thrown. The scale of the result, before any rounding, is the larger of the
scales of the two operands.</p>

<p class="MsoNormal" style="margin-left:.25in">Decimal subtraction is equivalent
to using the subtraction operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<p class="MsoListBullet"><a name="_Ref461349852"></a><a name="_Toc445783009"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Enumeration subtraction. Every enumeration type implicitly
provides the following predefined operator, where </a><span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is the enum type, and <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is the
underlying type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>:</p>

<p class="Code"><span lang="DE">U operator <span class="Codefragment">–</span>(E x, E
y);</span></p>

<p class="MsoNormal" style="margin-left:.25in">This operator is evaluated exactly
as <span class="Codefragment"><span style="font-size:10.0pt">(U)((U)x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(U)y)</span></span>. In other
words, the operator computes the difference between the ordinal values of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, and the type
of the result is the underlying type of the enumeration.</p>

<p class="Code"><span lang="DE">E operator <span class="Codefragment">–</span>(E x, U
y);</span></p>

<p class="MsoNormal" style="margin-left:.25in">This operator is evaluated exactly
as <span class="Codefragment"><span style="font-size:10.0pt">(E)((U)x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>. In other
words, the operator subtracts a value from the underlying type of the enumeration,
yielding a value of the enumeration.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Delegate removal. Every delegate type implicitly provides the
following predefined operator, where <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is the delegate type:</p>

<p class="Code">D operator <span class="Codefragment">–</span>(D x, D y);</p>

<p class="MsoNormal" style="margin-left:.25in"><a name="_Ref466793384"></a><a name="_Ref461974749">The binary </a><span class="Codefragment"><span style="font-size:10.0pt">–</span></span> operator performs delegate removal
when both operands are of some delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>. If the operands have different
delegate types, a binding-time error occurs. If the first operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, the
result of the operation is <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span>. Otherwise, if the second operand is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, then the
result of the operation is the value of the first operand. Otherwise, both
operands represent invocation lists (§15.1) having one or more entries, and the
result is a new invocation list consisting of the first operand’s list with the
second operand’s entries removed from it, provided the second operand’s list is
a proper contiguous sublist of the first’s.&nbsp;&nbsp;  (To determine sublist equality,
corresponding entries are compared as for the delegate equality operator (§7.10.8).)
Otherwise, the result is the value of the left operand. Neither of the
operands’ lists is changed in the process. If the second operand’s list matches
multiple sublists of contiguous entries in the first operand’s list, the
right-most matching sublist of contiguous entries is removed. If removal
results in an empty list, the result is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. For example:</p>

<p class="Code">delegate void D(int x);</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public static void M1(int i) { /* … */ }<br>
&nbsp;&nbsp; public static void M2(int i) { /* … */ }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd1 = new D(C.M1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd2 = new D(C.M2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd3 = cd1 + cd2 + cd2 + cd1;&nbsp;&nbsp; // M1 + M2 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; M1 + M2 + M2</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 = cd1 + cd2 + cd2 + cd1;&nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1 + cd2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; M2 + M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 = cd1 + cd2 + cd2 + cd1;&nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd2 + cd2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; M1 + M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 = cd1 + cd2 + cd2 + cd1;&nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd2 + cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; M1 + M2</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 = cd1 + cd2 + cd2 + cd1;&nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1 + cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; M1 + M2 + M2 + M1<br>
&nbsp;&nbsp; }<br>
}</p>

<h2><a name="_Toc251613157"></a><a name="_Ref493868012">7.9 Shift operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>
operators are used to perform bit shifting operations.</p>

<p class="Grammar">shift-expression:<br>
additive-expression <br>
shift-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;&lt;</span></span>&nbsp;&nbsp; additive-expression<br>
shift-expression&nbsp;&nbsp; right-shift&nbsp;&nbsp; additive-expression</p>

<p class="MsoNormal">If an operand of a <span class="Production">shift-expression</span>
has the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the expression is dynamically bound (§7.2.2). In this case the
compile-time type of the expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of those operands
that have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">count</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">count</span></span>, binary operator overload
resolution (§7.3.4) is applied to select a specific operator implementation.
The operands are converted to the parameter types of the selected operator, and
the type of the result is the return type of the operator.</p>

<p class="MsoNormal">When declaring an overloaded shift operator, the type of the
first operand must always be the class or struct containing the operator
declaration, and the type of the second operand must always be <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<p class="MsoNormal">The predefined shift operators are listed below.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Shift left:</p>

<p class="Code">int operator &lt;&lt;(int x, int count);<br>
uint operator &lt;&lt;(uint x, int count);<br>
long operator &lt;&lt;(long x, int count);<br>
ulong operator &lt;&lt;(ulong x, int count);</p>

<p class="MsoNormal" style="margin-left:.25in">The <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span> operator shifts <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> left by a
number of bits computed as described below.</p>

<p class="MsoNormal" style="margin-left:.25in">The high-order bits outside the
range of the result type of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> are discarded, the remaining bits are shifted left, and
the low-order empty bit positions are set to zero.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Shift right:</p>

<p class="Code">int operator &gt;&gt;(int x, int count);<br>
uint operator &gt;&gt;(uint x, int count);<br>
long operator &gt;&gt;(long x, int count);<br>
ulong operator &gt;&gt;(ulong x, int count);</p>

<p class="MsoNormal" style="margin-left:.25in">The <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span> operator shifts <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> right by a
number of bits computed as described below.</p>

<p class="MsoNormal" style="margin-left:.25in">When <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, the low-order bits of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are
discarded, the remaining bits are shifted right, and the high-order empty bit
positions are set to zero if <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is non-negative and set to one if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is negative.</p>

<p class="MsoNormal" style="margin-left:.25in">When <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is of type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, the low-order bits of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are
discarded, the remaining bits are shifted right, and the high-order empty bit
positions are set to zero.</p>

<p class="MsoNormal">For the predefined operators, the number of bits to shift is
computed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the type of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">uint</span></span>, the shift count is given by the low-order five bits
of <span class="Codefragment"><span style="font-size:10.0pt">count</span></span>.
In other words, the shift count is computed from <span class="Codefragment"><span style="font-size:10.0pt">count</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0x1F</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the type of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">ulong</span></span>, the shift count is given by the low-order six bits
of <span class="Codefragment"><span style="font-size:10.0pt">count</span></span>.
In other words, the shift count is computed from <span class="Codefragment"><span style="font-size:10.0pt">count</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">0x3F</span></span>.</p>

<p class="MsoNormal">If the resulting shift count is zero, the shift operators
simply return the value of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span>.</p>

<p class="MsoNormal">Shift operations never cause overflows and produce the same
results in <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
contexts.</p>

<p class="MsoNormal">When the left operand of the <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span> operator is of a signed
integral type, the operator performs an <em>arithmetic</em> shift right wherein
the value of the most significant bit (the sign bit) of the operand is
propagated to the high-order empty bit positions. When the left operand of the <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>
operator is of an unsigned integral type, the operator performs a <em>logical</em>
shift right wherein high-order empty bit positions are always set to zero. To
perform the opposite operation of that inferred from the operand type, explicit
casts can be used. For example, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is a variable of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, the
operation <span class="Codefragment"><span style="font-size:10.0pt">unchecked((int)((uint)x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y))</span></span> performs a
logical shift right of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<h2><a name="_Toc251613158"></a><a name="_Ref461974763">7.10 Relational and
type-testing operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">is</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> operators
are called the relational and type-testing operators.</p>

<p class="Grammar">relational-expression:<br>
shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;=</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;=</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">is</span></span>&nbsp;&nbsp; type<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">as</span></span>&nbsp;&nbsp; type</p>

<p class="Grammar">equality-expression:<br>
relational-expression<br>
equality-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">==</span></span>&nbsp;&nbsp; relational-expression<br>
equality-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">!=</span></span>&nbsp;&nbsp; relational-expression</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">is</span></span>
operator is described in §7.10.10 and the <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> operator is described in §7.10.11.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> operators
are <span class="Term">comparison operators</span>. </p>

<p class="MsoNormal">If an operand of a comparison operator has the compile-time
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the expression is dynamically bound (§7.2.2). In this case the
compile-time type of the expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of those operands
that have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Production">op</span> is a comparison operator, overload resolution (§7.3.4) is applied to select a specific operator implementation. The operands are
converted to the parameter types of the selected operator, and the type of the
result is the return type of the operator.</p>

<p class="MsoNormal">The predefined comparison operators are described in the
following sections. All predefined comparison operators return a result of type
<span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, as
described in the following table.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Operation</b></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Result</b></p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  equal to <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
  <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
  otherwise</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  not equal to <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
  <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
  otherwise</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  less than <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
  <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
  otherwise</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  greater than <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
  <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
  otherwise</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  less than or equal to <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
  <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
  otherwise</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
  if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
  greater than or equal to <span class="Codefragment"><span style="font-size:
  10.0pt">y</span></span>, <span class="Codefragment"><span style="font-size:
  10.0pt">false</span></span> otherwise</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h3><a name="_Toc251613159">7.10.1 Integer comparison operators</a></h3>

<p class="MsoNormal">The predefined integer comparison operators are:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(int x, int y);<br>
bool operator <span class="Codefragment">==</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">==</span>(long x, long y);<br>
bool operator <span class="Codefragment">==</span>(ulong x, ulong y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(int x, int y);<br>
bool operator <span class="Codefragment">!=</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">!=</span>(long x, long y);<br>
bool operator <span class="Codefragment">!=</span>(ulong x, ulong y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;</span>(int x, int y);<br>
bool operator <span class="Codefragment">&lt;</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">&lt;</span>(long x, long y);<br>
bool operator <span class="Codefragment">&lt;</span>(ulong x, ulong y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;</span>(int x, int y);<br>
bool operator <span class="Codefragment">&gt;</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">&gt;</span>(long x, long y);<br>
bool operator <span class="Codefragment">&gt;</span>(ulong x, ulong y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;=</span>(int x, int
y);<br>
bool operator <span class="Codefragment">&lt;=</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">&lt;=</span>(long x, long y);<br>
bool operator <span class="Codefragment">&lt;=</span>(ulong x, ulong y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;=</span>(int x, int
y);<br>
bool operator <span class="Codefragment">&gt;=</span>(uint x, uint y);<br>
bool operator <span class="Codefragment">&gt;=</span>(long x, long y);<br>
bool operator <span class="Codefragment">&gt;=</span>(ulong x, ulong y);</p>

<p class="MsoNormal">Each of these operators compares the numeric values of the
two integer operands and returns a <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> value that indicates whether the
particular relation is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<h3><a name="_Toc251613160">7.10.2 Floating-point comparison operators</a></h3>

<p class="MsoNormal">The predefined floating-point comparison operators are:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(float x, float
y);<br>
bool operator <span class="Codefragment">==</span>(double x, double y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(float x, float
y);<br>
bool operator <span class="Codefragment">!=</span>(double x, double y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;</span>(float x, float
y);<br>
bool operator <span class="Codefragment">&lt;</span>(double x, double y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;</span>(float x, float
y);<br>
bool operator <span class="Codefragment">&gt;</span>(double x, double y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;=</span>(float x,
float y);<br>
bool operator <span class="Codefragment">&lt;=</span>(double x, double y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;=</span>(float x,
float y);<br>
bool operator <span class="Codefragment">&gt;=</span>(double x, double y);</p>

<p class="MsoNormal">The operators compare the operands according to the rules of
the IEEE 754 standard:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If either operand is NaN, the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> for all operators except <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, for which
the result is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.
For any two operands, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> always
produces the same result as <span class="Codefragment"><span style="font-size:
10.0pt">!(x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>.
However, when one or both operands are NaN, the <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> operators <em>do not</em> produce
the same results as the logical negation of the opposite operator. For example,
if either of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is NaN, then <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, but <span class="Codefragment"><span style="font-size:10.0pt">!(x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When neither operand is NaN, the operators compare the values of
the two floating-point operands with respect to the ordering</p>

<p class="Code"><span class="Codefragment">–∞ &lt; –max &lt; </span><span style="layout-grid-mode:line">...</span><span class="Codefragment"> &lt; –min
&lt; –0.0 == +0.0 &lt; +min &lt; ... &lt; +max &lt; +∞</span></p>

<p class="MsoNormal" style="margin-left:.25in">where <span class="Codefragment"><span style="font-size:10.0pt">min</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">max</span></span> are the smallest and largest
positive finite values that can be represented in the given floating-point
format. Notable effects of this ordering are:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Negative and
positive zeros are considered equal.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A negative
infinity is considered less than all other values, but equal to another
negative infinity.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A positive
infinity is considered greater than all other values, but equal to another
positive infinity.</p>

<h3><a name="_Toc251613161">7.10.3 Decimal comparison operators</a></h3>

<p class="MsoNormal">The predefined decimal comparison operators are:</p>

<p class="Code">bool operator ==(decimal x, decimal y);</p>

<p class="Code">bool operator !=(decimal x, decimal y);</p>

<p class="Code">bool operator &lt;(decimal x, decimal y);</p>

<p class="Code">bool operator &gt;(decimal x, decimal y);</p>

<p class="Code">bool operator &lt;=(decimal x, decimal y);</p>

<p class="Code">bool operator &gt;=(decimal x, decimal y);</p>

<p class="MsoNormal">Each of these operators compares the numeric values of the
two decimal operands and returns a <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> value that indicates whether the
particular relation is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.
Each decimal comparison is equivalent to using the corresponding relational or
equality operator of type <span class="Codefragment"><span style="font-size:10.0pt">System.Decimal</span></span>.</p>

<h3><a name="_Toc251613162">7.10.4 Boolean equality operators</a></h3>

<p class="MsoNormal">The predefined boolean equality operators are:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(bool x, bool y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(bool x, bool y);</p>

<p class="MsoNormal">The result of <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> if both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> or if both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.
Otherwise, the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The result of <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> if both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> or if both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.
Otherwise, the result is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.
When the operands are of type <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> operator produces the same result as
the <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>
operator.</p>

<h3><a name="_Toc251613163"></a><a name="_Ref485189099">7.10.5 Enumeration
comparison operators</a></h3>

<p class="MsoNormal">Every enumeration type implicitly provides the following
predefined comparison operators:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(E x, E y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(E x, E y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;</span>(E x, E y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;</span>(E x, E y);</p>

<p class="Code">bool operator <span class="Codefragment">&lt;=</span>(E x, E y);</p>

<p class="Code">bool operator <span class="Codefragment">&gt;=</span>(E x, E y);</p>

<p class="MsoNormal">The result of evaluating <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
expressions of an enumeration type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> with an underlying type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>, and <span class="Production">op</span> is one of the comparison operators, is exactly the
same as evaluating <span class="Codefragment"><span style="font-size:10.0pt">((U)x)</span></span>
<span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">((U)y)</span></span>. In other words, the enumeration
type comparison operators simply compare the underlying integral values of the
two operands.</p>

<h3><a name="_Toc251613164"></a><a name="_Ref462910907">7.10.6 Reference type
equality operators</a></h3>

<p class="MsoNormal">The predefined reference type equality operators are:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(object x, object
y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(object x, object
y);</p>

<p class="MsoNormal">The operators return the result of comparing the two references
for equality or non-equality.</p>

<p class="MsoNormal">Since the predefined reference type equality operators
accept operands of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
they apply to all types that do not declare applicable <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> members.
Conversely, any applicable user-defined equality operators effectively hide the
predefined reference type equality operators.</p>

<p class="MsoNormal">The predefined reference type equality operators require one
of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Both operands are a value of a type known to be a <span class="Production">reference-type</span> or the literal <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. Furthermore, an explicit reference
conversion (§6.2.4) exists from the type of either operand to the type of the
other operand. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>One operand is a value of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a <span class="Production">type-parameter</span>
and the other operand is the literal <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. Furthermore <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> does not have
the value type constraint.</p>

<p class="MsoNormal">Unless one of these conditions are true, a binding-time
error occurs. Notable implications of these rules are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a binding-time error to use the predefined reference type
equality operators to compare two references that are known to be different at binding-time.
For example, if the binding-time types of the operands are two class types <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, and if
neither <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
nor <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
derives from the other, then it would be impossible for the two operands to
reference the same object. Thus, the operation is considered a binding-time
error.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined reference type equality operators do not permit
value type operands to be compared. Therefore, unless a struct type declares
its own equality operators, it is not possible to compare values of that struct
type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined reference type equality operators never cause
boxing operations to occur for their operands. It would be meaningless to
perform such boxing operations, since references to the newly allocated boxed
instances would necessarily differ from all other references.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If an operand of a type parameter type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is compared to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, and the run-time
type of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a value type, the result of the comparison is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The following example checks whether an argument of an
unconstrained type parameter type is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="Code">class C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; void F(T x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x == null) throw new ArgumentNullException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span> <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> construct
is permitted even though <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
could represent a value type, and the result is simply defined to be <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> when <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a value
type.</p>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, if any applicable <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> exists, the
operator overload resolution (§7.3.4) rules will select that operator instead
of the predefined reference type equality operator. However, it is always
possible to select the predefined reference type equality operator by
explicitly casting one or both of the operands to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. The
example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s = "Test";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string t = string.Copy(s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s == t);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine((object)s == t);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s == (object)t);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine((object)s == (object)t);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">True<br>
False<br>
False<br>
False</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">t</span></span>
variables refer to two distinct <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> instances containing the same
characters. The first comparison outputs <span class="Codefragment"><span style="font-size:10.0pt">True</span></span> because the predefined string
equality operator (§7.10.7) is selected when both operands are of type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>. The
remaining comparisons all output <span class="Codefragment"><span style="font-size:10.0pt">False</span></span> because the predefined reference
type equality operator is selected when one or both of the operands are of type
<span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoNormal">Note that the above technique is not meaningful for value
types. The example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int j = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Console.WriteLine((object)i == (object)j);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">outputs <span class="Codefragment"><span style="font-size:
10.0pt">False</span></span> because the casts create references to two separate
instances of boxed <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
values.</p>

<h3><a name="_Toc251613165"></a><a name="_Ref462803398">7.10.7 String equality
operators</a></h3>

<p class="MsoNormal">The predefined string equality operators are:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(string x, string
y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(string x, string
y);</p>

<p class="MsoNormal">Two <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
values are considered equal when one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Both values are <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Both values are non-null references to string instances that have
identical lengths and identical characters in each character position.</p>

<p class="MsoNormal"><a name="_Ref462720250">The string equality operators
compare string <em>values</em> rather than string <em>references</em>. When two
separate string instances contain the exact same sequence of characters, the
values of the strings are equal, but the references are different. As described
in §</a>7.10.6, the reference type equality operators can be used to compare string
references instead of string values.</p>

<h3><a name="_Toc251613166"></a><a name="_Ref486412217">7.10.8 Delegate
equality operators</a></h3>

<p class="MsoNormal">Every delegate type implicitly provides the following
predefined comparison operators:</p>

<p class="Code">bool operator <span class="Codefragment">==</span>(System.Delegate
x, System.Delegate y);</p>

<p class="Code">bool operator <span class="Codefragment">!=</span>(System.Delegate
x, System.Delegate y);</p>

<p class="MsoNormal">Two delegate instances are considered equal as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If either of the delegate instances is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, they are equal if and only if both
are <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the delegates have different run-time type they are never
equal.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If both of the delegate instances have an invocation list (§15.1), those instances are equal if and only if their invocation lists are the same
length, and each entry in one’s invocation list is equal (as defined below) to
the corresponding entry, in order, in the other’s invocation list.</p>

<p class="MsoNormal">The following rules govern the equality of invocation list
entries:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If two invocation list entries both refer to the same static
method then the entries are equal. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If two invocation list entries both refer to the same non-static
method on the same target object (as defined by the reference equality
operators) then the entries are equal.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Invocation list entries produced from evaluation of semantically
identical<span class="Production"> anonymous-function-expression</span>s with the
same (possibly empty) set of captured outer variable instances are permitted
(but not required) to be equal.</p>

<h3><a name="_Ref463325755"></a><a name="_Toc251613167"></a><a name="_Toc111395397"></a><a name="_Toc70845692"></a><a name="_Toc78087317">7.10.9
Equality operators and null</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>
operators permit one operand to be a value of a nullable type and the other to
be the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
literal, even if no predefined or user-defined operator (in unlifted or lifted
form) exists for the operation.</p>

<p class="MsoNormal">For an operation of one of the forms</p>

<p class="Code">x == null&nbsp;&nbsp;&nbsp; null == x&nbsp;&nbsp;&nbsp; x != null&nbsp;&nbsp;&nbsp; null != x</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an expression of a nullable type, if operator overload resolution (§7.2.4) fails
to find an applicable operator, the result is instead computed from the <span class="Codefragment"><span style="font-size:10.0pt">HasValue</span></span>
property of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.
Specifically, the first two forms are translated into <span class="Codefragment"><span style="font-size:10.0pt">!x.HasValue</span></span>, and last two forms are
translated into <span class="Codefragment"><span style="font-size:10.0pt">x.HasValue</span></span>.</p>

<h3><a name="_Toc251613168"></a><a name="_Ref174227569"></a><a name="_Ref174224256">7.10.10 The is operator</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">is</span></span>
operator is used to dynamically check if the run-time type of an object is
compatible with a given type. The result of the operation <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> <span class="Codefragment"><span style="font-size:10.0pt">is</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is an
expression and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a type, is a boolean value indicating whether <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> can successfully be converted to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> by a
reference conversion, a boxing conversion, or an unboxing conversion. The
operation is evaluated as follows, after type arguments have been substituted
for all type parameters:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an anonymous function, a compile-time error occurs</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is a method group or the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
literal, of if the type of <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a reference type or a nullable type and the value of
<span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is
null, the result is false.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, let <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> represent the dynamic type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> as follows:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a
reference type, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is the run-time type of the instance reference by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a nullable
type, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is the underlying type of that nullable type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a
non-nullable value type, <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
is the type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The result of the operation depends on <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> as follows:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
reference type, the result is true if <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the same type, if <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is a
reference type and an implicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> exists, or if
<span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is a
value type and a boxing conversion from <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> exists.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a nullable
type, the result is true if <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> is the underlying type of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is a
non-nullable value type, the result is true if <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are the same type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the
result is false.</p>

<p class="MsoNormal">Note that user defined conversions, are not considered by
the <span class="Codefragment"><span style="font-size:10.0pt">is</span></span>
operator.</p>

<h3><a name="_Toc251613169"></a><a name="_Ref496263262">7.10.11 The as operator</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">as</span></span>
operator is used to explicitly convert a value to a given reference type or
nullable type. Unlike a cast expression (§7.7.6), the <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> operator never throws an exception.
Instead, if the indicated conversion is not possible, the resulting value is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">In an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> must be an expression and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> must be a
reference type, a type parameter known to be a reference type, or a nullable
type. Furthermore, at least one of the following must be true, or otherwise a
compile-time error occurs:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An identity (§6.1.1), implicit nullable (§6.1.4), implicit reference (§6.1.6), boxing (§6.1.7), explicit nullable (§6.2.3), explicit reference
(§6.2.4), or unboxing (§6.2.5) conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
an open type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
literal.</p>

<p class="MsoNormal">If the compile-time type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, the operation <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> produces the
same result as</p>

<p class="Code"><span lang="FR">E is T ? (T)(E) : (T)null</span></p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">except that <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is only
evaluated once. The compiler can be expected to optimize <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to perform at
most one dynamic type check as opposed to the two dynamic type checks implied
by the expansion above.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">If the
compile-time type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
unlike the cast operator the <span class="Codefragment"><span style="font-size:
10.0pt">as</span></span> operator is not dynamically bound (§7.2.2). Therefore the expansion in this case is:</p>

<p class="Code"><span lang="FR">E is T ? (T)(object)(E) : (T)null</span></p>

<p class="MsoNormal">Note that some conversions, such as user defined
conversions, are not possible with the <span class="Codefragment"><span style="font-size:10.0pt">as</span></span> operator and should instead be
performed using cast expressions.</p>

<p class="MsoNormal">In the example</p>

<p class="Code"><a name="_Ref529351924"></a><a name="_Ref461974981"></a><a name="_Toc445783011">class X<br>
{</a></p>

<p class="Code">&nbsp;&nbsp; public string F(object o) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return o as string;&nbsp;&nbsp;&nbsp;&nbsp; // OK, string is a reference type<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public T G&lt;T&gt;(object o) where T: Attribute {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return o as T;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, T has a class constraint<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public U H&lt;U&gt;(object o) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return o as U;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, U is unconstrained <br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> is known to be a reference type,
because it has the class constraint. The type parameter <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> is not
however; hence the use of the <span class="Codefragment"><span style="font-size:
10.0pt">as</span></span> operator in <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> is disallowed. </p>

<h2><a name="_Toc251613170"></a><a name="_Ref174224630"></a><a name="_Ref174224623"></a><a name="_Ref174224617"></a><a name="_Ref174222919">7.11
Logical operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> operators are
called the logical operators.</p>

<p class="Grammar">and-expression:<br>
equality-expression<br>
and-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">&amp;</span></span>&nbsp;&nbsp; equality-expression</p>

<p class="Grammar">exclusive-or-expression:<br>
and-expression<br>
exclusive-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">^</span></span>&nbsp;&nbsp; and-expression</p>

<p class="Grammar">inclusive-or-expression:<br>
exclusive-or-expression<br>
inclusive-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">|</span></span>&nbsp;&nbsp; exclusive-or-expression</p>

<p class="MsoNormal">If an operand of a logical operator has the compile-time
type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the expression is dynamically bound (§7.2.2). In this case the
compile-time type of the expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of those operands
that have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">For an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Production">op</span> is one of the logical operators, overload resolution
(§7.3.4) is applied to select a specific operator implementation. The operands
are converted to the parameter types of the selected operator, and the type of
the result is the return type of the operator.</p>

<p class="MsoNormal">The predefined logical operators are described in the following
sections.</p>

<h3><a name="_Toc251613171">7.11.1 Integer logical operators</a></h3>

<p class="MsoNormal">The predefined integer logical operators are:</p>

<p class="Code">int operator <span class="Codefragment">&amp;</span>(int x, int y);<br>
uint operator <span class="Codefragment">&amp;</span>(uint x, uint y);<br>
long operator <span class="Codefragment">&amp;</span>(long x, long y);<br>
ulong operator <span class="Codefragment">&amp;</span>(ulong x, ulong y);</p>

<p class="Code">int operator <span class="Codefragment">|</span>(int x, int y);<br>
uint operator <span class="Codefragment">|</span>(uint x, uint y);<br>
long operator <span class="Codefragment">|</span>(long x, long y);<br>
ulong operator <span class="Codefragment">|</span>(ulong x, ulong y);</p>

<p class="Code">int operator <span class="Codefragment">^</span>(int x, int y);<br>
uint operator <span class="Codefragment">^</span>(uint x, uint y);<br>
long operator <span class="Codefragment">^</span>(long x, long y);<br>
ulong operator <span class="Codefragment">^</span>(ulong x, ulong y);</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operator computes the bitwise logical <span class="Codefragment"><span style="font-size:10.0pt">AND</span></span> of the two operands, the <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> operator
computes the bitwise logical <span class="Codefragment"><span style="font-size:
10.0pt">OR</span></span> of the two operands, and the <span class="Codefragment"><span style="font-size:10.0pt">^</span></span> operator computes the bitwise logical
exclusive <span class="Codefragment"><span style="font-size:10.0pt">OR</span></span>
of the two operands. No overflows are possible from these operations.</p>

<h3><a name="_Ref463406000"></a><a name="_Toc251613172"></a><a name="_Ref483218257">7.11.2 Enumeration logical operators</a></h3>

<p class="MsoNormal">Every enumeration type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> implicitly provides the following
predefined logical operators:</p>

<p class="Code"><span lang="DE">E operator <span class="Codefragment">&amp;</span>(E
x, E y);<br>
E operator <span class="Codefragment">|</span>(E x, E y);<br>
E operator <span class="Codefragment">^</span>(E x, E y);</span></p>

<p class="MsoNormal">The result of evaluating <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
expressions of an enumeration type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> with an underlying type <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>, and <span class="Production">op</span> is one of the logical operators, is exactly the same
as evaluating (E)<span class="Codefragment"><span style="font-size:10.0pt">((U)x</span></span>
<span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">(U)y)</span></span>. In other words, the enumeration
type logical operators simply perform the logical operation on the underlying
type of the two operands.</p>

<h3><a name="_Toc251613173"></a><a name="_Ref108517484">7.11.3 Boolean logical
operators</a></h3>

<p class="MsoNormal">The predefined boolean logical operators are:</p>

<p class="Code">bool operator <span class="Codefragment">&amp;</span>(bool x, bool
y);</p>

<p class="Code">bool operator <span class="Codefragment">|</span>(bool x, bool y);</p>

<p class="Code">bool operator <span class="Codefragment">^</span>(bool x, bool y);</p>

<p class="MsoNormal">The result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> if both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. Otherwise, the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> if either <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. Otherwise, the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The result of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">^</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. Otherwise, the result is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>. When the
operands are of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>,
the <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>
operator computes the same result as the <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span> operator.</p>

<h3><a name="_Ref529352711"></a><a name="_Ref461975001"></a><a name="_Toc445783012"></a><a name="_Toc251613174"></a><a name="_Ref170125286">7.11.4
Nullable boolean logical operators</a></h3>

<p class="MsoNormal">The nullable boolean type <span class="Codefragment"><span style="font-size:10.0pt">bool?</span></span> can represent three values, <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, and is
conceptually similar to the three-valued type used for boolean expressions in
SQL. To ensure that the results produced by the <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> operators for <span class="Codefragment"><span style="font-size:10.0pt">bool?</span></span> operands
are consistent with SQL’s three-valued logic, the following predefined
operators are provided:</p>

<p class="Code">bool? operator &amp;(bool? x, bool? y);</p>

<p class="Code">bool? operator |(bool? x, bool? y);</p>

<p class="MsoNormal">The following table lists the results produced by these
operators for all combinations of the values <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">y</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x &amp; y</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">x | y</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">true</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">false</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="96" valign="top" style="width:1.0in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
  <td width="96" valign="top" style="width:1.0in;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center"><span class="Codefragment"><span style="font-size:10.0pt">null</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<h2><a name="_Toc251613175"></a><a name="_Ref174224954"></a><a name="_Ref174224872"></a><a name="_Ref174224753"></a><a name="_Ref174224653"></a><a name="_Ref174224646">7.12 Conditional logical operators</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>
operators are called the conditional logical operators. They are also called
the “short-circuiting” logical operators.</p>

<p class="Grammar">conditional-and-expression:<br>
inclusive-or-expression<br>
conditional-and-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&amp;&amp;</span></span>&nbsp;&nbsp; inclusive-or-expression</p>

<p class="Grammar">conditional-or-expression:<br>
conditional-and-expression<br>
conditional-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">||</span></span>&nbsp;&nbsp; conditional-and-expression</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>
operators are conditional versions of the <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> operators:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
corresponds to the operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, except
that <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated only if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
corresponds to the operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, except
that <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated only if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<p class="MsoNormal">If an operand of a conditional logical operator has the
compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the expression is dynamically bound (§7.2.2). In this case the
compile-time type of the expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time using the run-time type of those operands
that have the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>.</p>

<p class="MsoNormal">An operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is processed by applying overload
resolution (§7.3.4) as if the operation was written <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. Then,</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If overload resolution fails to find a single best operator, or
if overload resolution selects one of the predefined integer logical operators,
a binding-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the selected operator is one of the predefined
boolean logical operators (§7.11.3) or nullable boolean logical operators (§7.11.4), the operation is processed as described in §7.12.1.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the selected operator is a user-defined operator, and
the operation is processed as described in §7.12.2.</p>

<p class="MsoNormal"><a name="_Ref463404645">It is not possible to directly
overload the conditional logical operators. However, because the conditional
logical operators are evaluated in terms of the regular logical operators,
overloads of the regular logical operators are, with certain restrictions, also
considered overloads of the conditional logical operators. This is described
further in §</a>7.12.2.</p>

<h3><a name="_Toc251613176"></a><a name="_Ref463412700">7.12.1 Boolean
conditional logical operators</a></h3>

<p class="MsoNormal">When the operands of <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> are of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, or when the operands are of types
that do not define an applicable <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, but do define implicit conversions to
<span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, the
operation is processed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>. In other
words, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is first evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>. Then, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, and this
becomes the result of the operation. Otherwise, the result of the operation is <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. In other
words, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is first evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>. Then, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, the result of the operation is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.
Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
is evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, and this becomes the result of the
operation.</p>

<h3><a name="_Toc251613177"></a><a name="_Ref463404823">7.12.2 User-defined
conditional logical operators</a></h3>

<p class="MsoNormal">When the operands of <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> are of types that declare an
applicable user-defined <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, both of the
following must be true, where <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> is the type in which the selected operator is declared:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The return type and the type of each parameter of the selected
operator must be <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
In other words, the operator must compute the logical <span class="Codefragment"><span style="font-size:10.0pt">AND</span></span> or the logical <span class="Codefragment"><span style="font-size:10.0pt">OR</span></span> of two
operands of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
and must return a result of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
must contain declarations of <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">false</span></span>.</p>

<p class="MsoNormal">A binding-time error occurs if either of these requirements
is not satisfied. Otherwise, the <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">||</span></span> operation is evaluated by combining
the user-defined <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">true</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> with the
selected user-defined operator:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated as <span class="Codefragment"><span style="font-size:10.0pt">T.false(x)</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T.&amp;(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T.false(x)</span></span> is
an invocation of the <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
declared in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">T.&amp;(x,</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> is an
invocation of the selected <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">&amp;</span></span>. In other words, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is first evaluated and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> is
invoked on the result to determine if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is definitely false. Then, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is definitely
false, the result of the operation is the value previously computed for <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated,
and the selected <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> is
invoked on the value previously computed for <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and the value computed for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> to produce
the result of the operation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The operation <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is
evaluated as <span class="Codefragment"><span style="font-size:10.0pt">T.true(x)</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T.|(x,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T.true(x)</span></span> is an
invocation of the <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
declared in <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">T.|(x,</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y)</span></span> is an
invocation of the selected <span class="Codefragment"><span style="font-size:
10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">|</span></span>. In other words, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is first evaluated and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> is invoked
on the result to determine if <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is definitely true. Then, if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is definitely true, the result of the
operation is the value previously computed for <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated, and the selected <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">|</span></span> is invoked on
the value previously computed for <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and the value computed for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> to produce
the result of the operation.</p>

<p class="MsoNormal">In either of these operations, the expression given by <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is only
evaluated once, and the expression given by <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is either not evaluated or evaluated
exactly once.</p>

<p class="MsoNormal">For an example of a type that implements <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, see §11.4.2.</p>

<h2><a name="_Ref529352704"></a><a name="_Ref470173328"></a><a name="_Ref463366835"></a><a name="_Ref461974823"></a><a name="_Toc445783013"></a><a name="_Toc251613178">7.13 The null coalescing operator</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">??</span></span>
operator is called the null coalescing operator.</p>

<p class="Grammar">null-coalescing-expression:<br>
conditional-or-expression<br>
conditional-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">??</span></span>&nbsp;&nbsp; null-coalescing-expression</p>

<p class="MsoNormal">A null coalescing expression of the form <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> requires <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> to be of a
nullable type or reference type. If <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> is non-null, the result of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>; otherwise,
the result is <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>.
The operation evaluates <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
only if <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is null.</p>

<p class="MsoNormal">The null coalescing operator is right-associative, meaning
that operations are grouped from right to left. For example, an expression of
the form <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">c</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">c)</span></span>. In general
terms, an expression of the form <span class="Codefragment"><span style="font-size:10.0pt">E<sub>1</sub></span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">E<sub>2</sub></span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> ... <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">E<sub>N</sub></span></span> returns the first of the
operands that is non-null, or null if all operands are null.</p>

<p class="MsoNormal">The type of the expression <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> depends on which implicit conversions
are available on the operands. In order of preference, the type of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>, <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is the type
of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> (provided
that <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
has a type), <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is the type of <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
(provided that <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
has a type), and <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>
is the underlying type of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
if <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a
nullable type, or <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
otherwise. Specifically, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">??</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is processed
as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
exists and is not a nullable type or a reference type, a compile-time error
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is a dynamic expression, the result type is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>. At run-time, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> is first
evaluated. If <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is not null, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is converted to dynamic, and this becomes the result. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is evaluated,
and this becomes the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> exists and is a nullable type and an implicit
conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>,
the result type is <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>.
At run-time, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is first evaluated. If <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is not null, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is unwrapped to type <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>,
and this becomes the result. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> is evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>,
and this becomes the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> exists and an implicit conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, the result
type is <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
At run-time, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is first evaluated. If <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is not null, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
becomes the result. Otherwise, <span class="Codefragment"><span style="font-size:
10.0pt">b</span></span> is evaluated and converted to type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, and this
becomes the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">b</span></span> has a type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> and an implicit conversion exists from
<span class="Codefragment"><span style="font-size:10.0pt">a</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, the result
type is <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.
At run-time, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is first evaluated. If <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is not null, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is unwrapped to type <span class="Codefragment"><span style="font-size:10.0pt">A<sub>0</sub></span></span>
(if <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
exists and is nullable) and converted to type <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, and this becomes the result.
Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is evaluated and becomes the result.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> are
incompatible, and a compile-time error occurs.</p>

<h2><a name="_Toc251613179"></a><a name="_Ref174228504"></a><a name="_Ref174224742"></a><a name="_Ref174224664">7.14 Conditional operator</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span>
operator is called the conditional operator. It is at times also called the
ternary operator.</p>

<p class="Grammar">conditional-expression:<br>
null-coalescing-expression<br>
null-coalescing-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">?</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp; expression</p>

<p class="MsoNormal">A conditional expression of the form <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> first
evaluates the condition <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>.
Then, if <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated
and becomes the result of the operation. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated and becomes the result of
the operation. A conditional expression never evaluates both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>.</p>

<p class="MsoNormal">The conditional operator is right-associative, meaning that
operations are grouped from right to left. For example, an expression of the
form <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">c</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(c</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">e)</span></span>.</p>

<p class="MsoNormal">The first operand of the <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span> operator must be an expression that
can be implicitly converted to <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span>, or an expression of a type that implements <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. If
neither of these requirements is satisfied, a compile-time error occurs.</p>

<p class="MsoNormal">The second and third operands, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, of the <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span> operator control the type of the
conditional expression. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
has type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> has
type <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>
then</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If an implicit
conversion (§6.1) exists from <span class="Codefragment"><span style="font-size:
10.0pt">X</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">Y</span></span>, but not from <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, then <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> is the type of the conditional
expression.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If an implicit
conversion (§6.1) exists from <span class="Codefragment"><span style="font-size:
10.0pt">Y</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">X</span></span>, but not from <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>, then <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> is the type of the conditional
expression.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, no
expression type can be determined, and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If only one of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">y</span></span> has a type, and both <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, of areimplicitly convertible to that
type, then that is the type of the conditional expression.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, no expression type can be determined, and a
compile-time error occurs.<a name="_Ref448204698"></a><a name="_Toc445783014"></a></p>

<p class="MsoNormal">The run-time processing of a conditional expression of the
form <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">?</span></span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> consists of
the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First, <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is evaluated, and the <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
value of <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is determined:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If an implicit
conversion from the type of <span class="Codefragment"><span style="font-size:
10.0pt">b</span></span> to <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span> exists, then this implicit conversion is performed
to produce a <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
value.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> defined by
the type of <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is invoked to produce a <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>
value produced by the step above is <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, then <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated and converted to the type
of the conditional expression, and this becomes the result of the conditional
expression.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
is evaluated and converted to the type of the conditional expression, and this
becomes the result of the conditional expression.</p>

<h2><a name="_Toc251613180"></a><a name="_Ref170644974">7.15 Anonymous function
expressions</a></h2>

<p class="MsoNormal">An <span class="Term">anonymous function</span> is an
expression that represents an “in-line” method definition. An anonymous
function does not have a value or type in and of itself, but is convertible to
a compatible delegate or expression tree type. The evaluation of an anonymous
function conversion depends on the target type of the conversion: If it is a
delegate type, the conversion evaluates to a delegate value referencing the
method which the anonymous function defines. If it is an expression tree type,
the conversion evaluates to an expression tree which represents the structure
of the method as an object structure.</p>

<p class="MsoNormal">For historical reasons there are two syntactic flavors of
anonymous functions, namely <span class="Production">lambda-expression</span>s
and <span class="Production">anonymous-method-expression</span>s. For almost all
purposes, <span class="Production">lambda-expression</span>s are more concise and
expressive than <span class="Production">anonymous-method-expression</span>s,
which remain in the language for backwards compatibility.</p>

<p class="Grammar">lambda-expression:<br>
anonymous-function-signature&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">=&gt;</span></span>&nbsp;&nbsp; anonymous-function-body</p>

<p class="Grammar">anonymous-method-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">delegate</span></span>&nbsp;&nbsp;
explicit-anonymous-function-signature<sub>opt</sub>&nbsp;&nbsp; block</p>

<p class="Grammar">anonymous-function-signature:<br>
explicit-anonymous-function-signature <br>
implicit-anonymous-function-signature</p>

<p class="Grammar">explicit-anonymous-function-signature:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
explicit-anonymous-function-parameter-list<span class="Production"><sub>opt</sub></span><span style="font-style:normal">&nbsp;&nbsp; </span><span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">explicit-anonymous-function-parameter-list:<br>
explicit-anonymous-function-parameter<br>
explicit-anonymous-function-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
explicit-anonymous-function-parameter</p>

<p class="Grammar">explicit-anonymous-function-parameter:<br>
anonymous-function-parameter-modifier<sub>opt</sub>&nbsp;&nbsp; type &nbsp;&nbsp;identifier</p>

<p class="Grammar">anonymous-function-parameter-modifier: <br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ref<br>
out</span></span></p>

<p class="Grammar">implicit-anonymous-function-signature:<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">(</span></span><span style="font-style:normal">&nbsp;&nbsp; </span>implicit-anonymous-function-parameter-list<span class="Production"><sub>opt</sub></span><span style="font-style:normal">&nbsp;&nbsp; </span><span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">)<br>
</span></span>implicit-anonymous-function-parameter</p>

<p class="Grammar">implicit-anonymous-function-parameter-list:<br>
implicit-anonymous-function-parameter<br>
implicit-anonymous-function-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp; implicit-anonymous-function-parameter</p>

<p class="Grammar">implicit-anonymous-function-parameter:<br>
identifier</p>

<p class="Grammar">anonymous-function-body:<br>
expression<br>
block</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span>
operator has the same precedence as assignment (<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>) and is right-associative. </p>

<p class="MsoNormal">The parameters of an anonymous function in the form of a <span class="Production">lambda-expression</span> can be explicitly or implicitly
typed. In an explicitly typed parameter list, the type of each parameter is
explicitly stated. In an implicitly typed parameter list, the types of the
parameters are inferred from the context in which the anonymous function
occurs—specifically, when the anonymous function is converted to a compatible delegate
type or expression tree type, that type provides the parameter types (§6.5).</p>

<p class="MsoNormal">In an anonymous function with a single, implicitly typed
parameter, the parentheses may be omitted from the parameter list. In other
words, an anonymous function of the form</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">param</span></span>
) =&gt; <span class="Production"><span style="font-size:11.0pt">expr</span></span></p>

<p class="MsoNormal">can be abbreviated to</p>

<p class="Code"><span class="Production"><span style="font-size:11.0pt">param</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">expr</span></span></p>

<p class="MsoNormal">The parameter list of an anonymous function in the form of
an <span class="Production">anonymous-method-expression</span> is optional. If
given, the parameters must be explicitly typed. If not, the anonymous function
is convertible to a delegate with any parameter list not containing <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters.</p>

<p class="MsoNormal">Some examples of anonymous functions follow below:</p>

<p class="Code">x =&gt; x + 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Implicitly typed,
expression body</p>

<p class="Code">x =&gt; { return x + 1; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Implicitly typed,
statement body</p>

<p class="Code">(int x) =&gt; x + 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Explicitly typed,
expression body</p>

<p class="Code">(int x) =&gt; { return x + 1; }&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Explicitly typed,
statement body</p>

<p class="Code">(x, y) =&gt; x * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Multiple parameters</p>

<p class="Code">() =&gt; Console.WriteLine()&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // No parameters</p>

<p class="Code">delegate (int x) { return x + 1; }&nbsp; // Anonymous method expression</p>

<p class="Code">delegate { return 1 + 1; }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Parameter list omitted</p>

<p class="MsoNormal">The behavior of <span class="Production">lambda-expression</span>s
and <span class="Production">anonymous-method-expression</span>s is the same
except for the following points:</p>

<p class="MsoListBullet" style="margin-top:0in;margin-right:0in;margin-bottom:
8.0pt;margin-left:.5in"><a name="_Ref448886341"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">anonymous-method-expression</span>s permit
the parameter list to be omitted entirely, yielding convertibility to delegate
types of any list of value parameters.</a></p>

<p class="MsoListBullet" style="margin-top:0in;margin-right:0in;margin-bottom:
8.0pt;margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Production">lambda-expression</span>s permit parameter
types to be omitted and inferred whereas <span class="Production">anonymous-method-expression</span>s
require parameter types to be explicitly stated.</p>

<p class="MsoListBullet" style="margin-top:0in;margin-right:0in;margin-bottom:
8.0pt;margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The body of a <span class="Production">lambda-expression</span> can
be an expression or a statement block whereas the body of an <span class="Production">anonymous-method-expression</span> must be a statement block.</p>

<p class="MsoListBullet" style="margin-top:0in;margin-right:0in;margin-bottom:
8.0pt;margin-left:.5in"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Since only <span class="Production">lambda-expression</span>s can
have an <span class="Production">expression</span> body, no <span class="Production">anonymous-method-expression</span> can be successfully converted
to an expression tree type (§4.6).</p>

<h3><a name="_Toc251613181">7.15.1 Anonymous function signatures</a></h3>

<p class="MsoNormal">The optional <span class="Production">anonymous-function-signature</span>
of an anonymous function defines the names and optionally the types of the
formal parameters for the anonymous function. The scope of the parameters of
the anonymous function is the <span class="Production">anonymous-function-body</span>.
(§3.7) Together with the parameter list (if given) the anonymous-method-body
constitutes a declaration space (§3.3). It is thus a compile-time error for the
name of a parameter of the anonymous function to match the name of a local
variable, local constant or parameter whose scope includes the <span class="Production">anonymous-method-expression</span> or <span class="Production">lambda-expression</span>.</p>

<p class="MsoNormal">If an anonymous function has an <span class="Production">explicit-anonymous-function-signature</span>,
then the set of compatible delegate types and expression tree types is
restricted to those that have the same parameter types and modifiers in the
same order. In contrast to method group conversions (§6.6), contra-variance of
anonymous function parameter types is not supported. If an anonymous function does
not have an <span class="Production">anonymous-function-signature</span>, then
the set of compatible delegate types and expression tree types is restricted to
those that have no <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameters.</p>

<p class="MsoNormal">Note that an <span class="Production">anonymous-function-signature</span>
cannot include attributes or a parameter array. Nevertheless, an <span class="Production">anonymous-function-signature</span> may be compatible with a
delegate type whose parameter list contains a parameter array.<a name="_Toc41111189"></a><a name="_Toc41111190"></a></p>

<p class="MsoNormal">Note also that conversion to an expression tree type, even
if compatible, may still fail at compile-time (§4.6). </p>

<h3><a name="_Toc251613182">7.15.2 Anonymous function bodies</a></h3>

<p class="MsoNormal">The body (<span class="Production">expression</span> or <span class="Production">block</span>) of an anonymous function is subject to the
following rules:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the anonymous function includes a signature, the parameters
specified in the signature are available in the body. If the anonymous function
has no signature it can be converted to a delegate type or expression type having
parameters (§6.5), but the parameters cannot be accessed in the body.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Except for <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameters specified in the signature (if any) of the nearest enclosing
anonymous function, it is a compile-time error for the body to access a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the type of <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> is a struct type, it is a compile-time error for the
body to access <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.
This is true whether the access is explicit (as in <span class="Codefragment"><span style="font-size:10.0pt">this.x</span></span>) or implicit (as in <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an
instance member of the struct). This rule simply prohibits such access and does
not affect whether member lookup results in a member of the struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The body has access to the outer variables (§7.15.5) of the anonymous function. Access of an outer variable will reference the instance of the
variable that is active at the time the <span class="Production">lambda-expression</span>
or <span class="Production">anonymous-method-expression</span> is evaluated (§7.15.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for the body to contain a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement,
<span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement, or <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement whose target is outside the body or within the body of a contained anonymous
function.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement in the body returns control from an invocation of the nearest
enclosing anonymous function, not from the enclosing function member. An
expression specified in a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement must be implicitly convertible to the return type of the delegate
type or expression tree type to which the nearest enclosing <span class="Production">lambda-expression</span> or <span class="Production">anonymous-method-expression</span>
is converted (§6.5).</p>

<p class="MsoNormal">It is explicitly unspecified whether there is any way to
execute the block of an anonymous function other than through evaluation and
invocation of the <span class="Production">lambda-expression</span> or <span class="Production">anonymous-method-expression</span>. In particular, the
compiler may choose to implement an anonymous function by synthesizing one or
more named methods or types. The names of any such synthesized elements must be
of a form reserved for compiler use.</p>

<h3><a name="_Toc111395346"></a><a name="_Toc41804967"></a><a name="_Ref41231591"></a><a name="_Toc251613183">7.15.3 Overload resolution</a></h3>

<p class="MsoNormal">Anonymous functions in an argument list participate in type
inference and overload resolution. <a name="_GoBack">Please refer to §</a>7.5.2 and §7.5.3 for the exact rules.</p>

<p class="MsoNormal">The following example illustrates the effect of anonymous
functions on overload resolution.</p>

<p class="Code">class ItemList&lt;T&gt;: List&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public int Sum(Func&lt;T,int&gt; selector) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int sum = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (T item in this) sum += selector(item);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sum;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public double Sum(Func&lt;T,double&gt; selector) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double sum = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (T item in this) sum += selector(item);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sum;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">ItemList&lt;T&gt;</span></span>
class has two <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span>
methods. Each takes a <span class="Codefragment"><span style="font-size:10.0pt">selector</span></span>
argument, which extracts the value to sum over from a list item. The extracted
value can be either an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
or a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>
and the resulting sum is likewise either an <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> or a <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span>
methods could for example be used to compute sums from a list of detail lines
in an order.</p>

<p class="Code">class Detail<br>
{<br>
&nbsp;&nbsp; public int UnitCount;<br>
&nbsp;&nbsp; public double UnitPrice;<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">void ComputeSums() {<br>
&nbsp;&nbsp; ItemList&lt;Detail&gt; orderDetails = GetOrderDetails(...);<br>
&nbsp;&nbsp; int totalUnits = orderDetails.Sum(d =&gt; d.UnitCount);<br>
&nbsp;&nbsp; double orderTotal = orderDetails.Sum(d =&gt; d.UnitPrice * d.UnitCount);<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">In the first invocation of <span class="Codefragment"><span style="font-size:10.0pt">orderDetails.Sum</span></span>, both <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span> methods are
applicable because the anonymous function <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">d.UnitCount</span></span> is compatible with both <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;Detail,int&gt;</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;Detail,double&gt;</span></span>.
However, overload resolution picks the first <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span> method because the conversion to <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;Detail,int&gt;</span></span>
is better than the conversion to <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;Detail,double&gt;</span></span>.</p>

<p class="MsoNormal">In the second invocation of <span class="Codefragment"><span style="font-size:10.0pt">orderDetails.Sum</span></span>, only the second <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span> method is
applicable because the anonymous function <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span> <span class="Codefragment"><span style="font-size:10.0pt">d.UnitPrice</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">d.UnitCount</span></span> produces a value of type <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>. Thus,
overload resolution picks the second <span class="Codefragment"><span style="font-size:10.0pt">Sum</span></span> method for that invocation.</p>

<h3><a name="_Toc251613184">7.15.4 Anonymous functions and dynamic binding</a></h3>

<p class="MsoNormal">An anonymous function cannot be a receiver, argument or
operand of a dynamically bound operation.</p>

<h3><a name="_Toc251613185"></a><a name="_Ref174228070">7.15.5 Outer variables</a></h3>

<p class="MsoNormal">Any local variable, value parameter, or parameter array
whose scope includes the <span class="Production">lambda-expression</span> or <span class="Production">anonymous-method-expression</span> is called an <span class="Term">outer variable</span> of the anonymous function. In an instance
function member of a class, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> value is considered a value
parameter and is an outer variable of any anonymous function contained within
the function member.</p>

<h4><a name="_Toc251613186"></a><a name="_Toc111395347"></a><a name="_Toc41804968"></a><a name="_Ref41363872">7.15.5.1 Captured outer
variables</a></h4>

<p class="MsoNormal">When an outer variable is referenced by an anonymous
function, the outer variable is said to have been <span class="Term">captured</span>
by the anonymous function. Ordinarily, the lifetime of a local variable is
limited to execution of the block or statement with which it is associated
(§5.1.7). However, the lifetime of a captured outer variable is extended at
least until the delegate or expression tree created from the anonymous function
becomes eligible for garbage collection.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">delegate int D();</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static D F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D result = () =&gt; ++x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(d());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(d());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(d());<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the local variable <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is captured by the anonymous function,
and the lifetime of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is extended at least until the delegate returned from <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> becomes eligible for garbage
collection (which doesn’t happen until the very end of the program). Since each
invocation of the anonymous function operates on the same instance of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, the output
of the example is:</p>

<p class="Code">1<br>
2<br>
3</p>

<p class="MsoNormal">When a local variable or a value parameter is captured by an
anonymous function, the local variable or parameter is no longer considered to
be a fixed variable (§18.3), but is instead considered to be a moveable
variable. Thus any <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
code that takes the address of a captured outer variable must first use the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement
to fix the variable.</p>

<p class="MsoNormal">Note that unlike an uncaptured variable, a captured local
variable can be simultaneously exposed to multiple threads of execution.</p>

<h4><a name="_Toc251613187"></a><a name="_Toc111395348"></a><a name="_Toc41804969"></a><a name="_Ref41388375">7.15.5.2 Instantiation of local
variables</a></h4>

<p class="MsoNormal">A local variable is considered to be <span class="Term">instantiated</span>
when execution enters the scope of the variable. For example, when the
following method is invoked, the local variable <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is instantiated and initialized three
times—once for each iteration of the loop.</p>

<p class="Code">static void F() {<br>
&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = i * 2 + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">However, moving the declaration of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> outside the loop results in a single
instantiation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>:</p>

<p class="Code">static void F() {<br>
&nbsp;&nbsp; int x;<br>
&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = i * 2 + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">When not captured, there is no way to observe exactly how
often a local variable is instantiated—because the lifetimes of the
instantiations are disjoint, it is possible for each instantation to simply use
the same storage location. However, when an anonymous function captures a local
variable, the effects of instantiation become apparent.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">delegate void D();</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static D[] F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D[] result = new D[3];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = i * 2 + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result[i] = () =&gt; { Console.WriteLine(x); };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (D d in F()) d();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output:</p>

<p class="Code">1<br>
3<br>
5</p>

<p class="MsoNormal">However, when the declaration of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is moved outside the loop:</p>

<p class="Code">static D[] F() {<br>
&nbsp;&nbsp; D[] result = new D[3];<br>
&nbsp;&nbsp; int x;<br>
&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = i * 2 + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result[i] = () =&gt; { Console.WriteLine(x); };<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; return result;<br>
}</p>

<p class="MsoNormal">the output is:</p>

<p class="Code">5<br>
5<br>
5</p>

<p class="MsoNormal">If a for-loop declares an iteration variable, that variable
itself is considered to be declared outside of the loop. Thus, if the example
is changed to capture the iteration variable itself:</p>

<p class="Code">static D[] F() {<br>
&nbsp;&nbsp; D[] result = new D[3];<br>
&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result[i] = () =&gt; { Console.WriteLine(i); };<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; return result;<br>
}</p>

<p class="MsoNormal">only one instance of the iteration variable is captured,
which produces the output:</p>

<p class="Code">3<br>
3<br>
3</p>

<p class="MsoNormal">It is possible for anonymous function delegates to share
some captured variables yet have separate instances of others. For example, if <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is changed to</p>

<p class="Code">static D[] F() {<br>
&nbsp;&nbsp; D[] result = new D[3];<br>
&nbsp;&nbsp; int x = 0;<br>
&nbsp;&nbsp; for (int i = 0; i &lt; 3; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result[i] = () =&gt; { Console.WriteLine("{0} {1}", ++x, ++y);
};<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; return result;<br>
}</p>

<p class="MsoNormal">the three delegates capture the same instance of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> but separate
instances of <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>,
and the output is:</p>

<p class="Code">1 1<br>
2 1<br>
3 1</p>

<p class="MsoNormal">Separate anonymous functions can capture the same instance
of an outer variable. In the example:</p>

<p class="Code">using System;</p>

<p class="Code">delegate void Setter(int value);</p>

<p class="Code">delegate int Getter();</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Setter s = (int value) =&gt; { x = value; };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Getter g = () =&gt; { return x; };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s(5);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(g());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s(10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(g());<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the two anonymous functions capture the same instance of the
local variable <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>,
and they can thus “communicate” through that variable. The output of the
example is:</p>

<p class="Code">5<br>
10</p>

<h3><a name="_Toc251613188"></a><a name="_Toc111395349"></a><a name="_Toc41804970"></a><a name="_Ref41363785">7.15.6 Evaluation of anonymous
function </a>expressions</h3>

<p class="MsoNormal">An anonymous function <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> must always be converted to a delegate
type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> or
an expression tree type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>,
either directly or through the execution of a delegate creation expression <span class="Codefragment"><span style="font-size:10.0pt">new D(F)</span></span>. This
conversion determines the result of the anonymous function, as described in §6.5.</p>

<h2><a name="_Toc251613189">7.16 Query expressions</a></h2>

<p class="MsoNormal"><span class="Term">Query expressions</span> provide a language
integrated syntax for queries that is similar to relational and hierarchical
query languages such as SQL and XQuery.</p>

<p class="Grammar">query-expression:<br>
from-clause&nbsp;&nbsp; query-body</p>

<p class="Grammar">from-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">from</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">query-body:<br>
query-body-clauses<sub>opt</sub>&nbsp;&nbsp; select-or-group-clause&nbsp;&nbsp; query-continuation<sub>opt</sub></p>

<p class="Grammar">query-body-clauses:<br>
query-body-clause<br>
query-body-clauses&nbsp;&nbsp; query-body-clause</p>

<p class="Grammar">query-body-clause:<br>
from-clause<br>
let-clause<br>
where-clause<br>
join-clause<br>
join-into-clause<br>
orderby-clause</p>

<p class="Grammar">let-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">let</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">where-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">where</span></span>&nbsp;&nbsp;
boolean-expression</p>

<p class="Grammar">join-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">join</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">on</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">equals</span></span>&nbsp;&nbsp;
expression </p>

<p class="Grammar">join-into-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">join</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">on</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">equals</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">into</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">orderby-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">orderby</span></span>&nbsp;&nbsp;
orderings</p>

<p class="Grammar">orderings:<br>
ordering<br>
orderings&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
ordering</p>

<p class="Grammar">ordering:<br>
expression &nbsp;&nbsp;&nbsp;ordering-direction<sub>opt</sub></p>

<p class="Grammar">ordering-direction:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ascending</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">descending</span></span></p>

<p class="Grammar">select-or-group-clause:<br>
select-clause<br>
group-clause</p>

<p class="Grammar">select-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">select</span></span>&nbsp;&nbsp;
expression</p>

<p class="Grammar">group-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">group</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">by</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">query-continuation:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">into</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; query-body</p>

<p class="MsoNormal">A query expression begins with a <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> clause and ends with either a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">group</span></span> clause.
The initial <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>
clause can be followed by zero or more <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">let</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">orderby</span></span> clauses. Each <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> clause is
a generator introducing a <span class="Term">range variable</span> which ranges
over the elements of a <span class="Term">sequence</span>. Each <span class="Codefragment"><span style="font-size:10.0pt">let</span></span> clause introduces
a range variable representing a value computed by means of previous range
variables. Each <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>
clause is a filter that excludes items from the result. Each <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> clause
compares specified keys of the source sequence with keys of another sequence,
yielding matching pairs. Each <span class="Codefragment"><span style="font-size:
10.0pt">orderby</span></span> clause reorders items according to specified
criteria.The final <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">group</span></span>
clause specifies the shape of the result in terms of the range variables.
Finally, an <span class="Codefragment"><span style="font-size:10.0pt">into</span></span>
clause can be used to “splice” queries by treating the results of one query as
a generator in a subsequent query.</p>

<h3><a name="_Toc251613190"></a><a name="_Toc154460646">7.16.1 Ambiguities in
query expressions</a></h3>

<p class="MsoNormal">Query expressions contain a number of “contextual keywords”,
i.e., identifiers that have special meaning in a given context. Specifically
these are <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">where</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">join</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">on</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">equals</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">into</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">let</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">orderby</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ascending</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">descending</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">group</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">by</span></span>. In order to
avoid ambiguities in query expressions caused by mixed use of these identifiers
as keywords or simple names, these identifiers are considered keywords when
occurring anywhere within a query expression.</p>

<p class="MsoNormal">For this purpose, a query expression is any expression that
starts with “<span class="Codefragment"><span style="font-size:10.0pt">from</span></span>
<span class="Production">identifier</span>” <em><span style="font-style:normal">followed
by any token except “</span></em><span class="Codefragment"><span style="font-size:10.0pt">;</span></span><em><span style="font-style:normal">”,
“</span></em><span class="Codefragment"><span style="font-size:10.0pt">=</span></span><em><span style="font-style:normal">” or “</span></em><span class="Codefragment"><span style="font-size:10.0pt">,</span></span><em><span style="font-style:normal">”.</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">In order to use these
words as identifiers within a query expression, they can be prefixed with “</span></em><span class="Codefragment"><span style="font-size:10.0pt">@</span></span><em><span style="font-style:normal">” (§2.4.2).</span></em></p>

<h3><a name="_Toc251613191"></a><a name="_Toc154460647">7.16.2 Query expression
translation</a></h3>

<p class="MsoNormal">The C# language does not specify the execution semantics of
query expressions. Rather, query expressions are translated into invocations of
methods that adhere to the <em><span style="font-style:normal">query expression
pattern</span></em> (§7.16.3). Specifically, query expressions are translated
into invocations of methods named <span class="Codefragment"><span style="font-size:10.0pt">Where</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">SelectMany</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Join</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">GroupJoin</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">OrderBy</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">OrderByDescending</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ThenBy</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ThenByDescending</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">GroupBy</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">Cast</span></span>.These
methods are expected to have particular signatures and result types, as
described in §7.16.3. These methods can be instance methods of the object being
queried or extension methods that are external to the object, and they
implement the actual execution of the query.</p>

<p class="MsoNormal">The translation from query expressions to method invocations
is a syntactic mapping that occurs before any type binding or overload
resolution has been performed. The translation is guaranteed to be
syntactically correct, but it is not guaranteed to produce semantically correct
C# code. Following translation of query expressions, the resulting method
invocations are processed as regular method invocations, and this may in turn
uncover errors, for example if the methods do not exist, if arguments have
wrong types, or if the methods are generic and type inference fails.</p>

<p class="MsoNormal">A query expression is processed by repeatedly applying the
following translations until no further reductions are possible. The
translations are listed in order of application: each section assumes that the
translations in the preceding sections have been performed exhaustively, and
once exhausted, a section will not later be revisited in the processing of the
same query expression.</p>

<p class="MsoNormal">Assignment to range variables is not allowed in query
expressions. However a C# implementation is permitted to not always enforce
this restriction, since this may sometimes not be possible with the syntactic
translation scheme presented here.</p>

<p class="MsoNormal">Certain translations inject range variables with <em>transparent
identifiers</em> denoted by <span class="Codefragment"><span style="font-size:
10.0pt">*</span></span>. The special properties of transparent identifiers are
discussed further in §7.16.2.7.</p>

<h4><a name="_Toc251613192"></a><a name="_Toc154460648"></a><a name="_Ref132868937">7.16.2.1 Select and groupby clauses with continuations</a></h4>

<p class="MsoNormal">A query expression with a continuation</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">…</span></span>
into <span class="Production"><span style="font-size:11.0pt">x</span></span> <span class="Production"><span style="font-size:11.0pt">…</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in ( from <span class="Production"><span style="font-size:11.0pt">…</span></span>
) <span class="Production"><span style="font-size:11.0pt">…</span></span></p>

<p class="MsoNormal">The translations in the following sections assume that
queries have no <span class="Codefragment"><span style="font-size:10.0pt">into</span></span>
continuations.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
group c by c.Country into g<br>
select new { Country = g.Key, CustCount = g.Count() }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from g in<br>
&nbsp;&nbsp; from c in customers<br>
&nbsp;&nbsp; group c by c.Country<br>
select new { Country = g.Key, CustCount = g.Count() }</p>

<p class="MsoNormal">the final translation of which is</p>

<p class="Code">customers.<br>
GroupBy(c =&gt; c.Country).<br>
Select(g =&gt; new { Country = g.Key, CustCount = g.Count() })</p>

<h4><a name="_Toc251613193"></a><a name="_Toc154460649">7.16.2.2 Explicit range
variable types</a></h4>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>
clause that explicitly specifies a range variable type</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">T</span></span>
<span class="Production"><span style="font-size:11.0pt">x</span></span> in <span class="Production"><span style="font-size:11.0pt">e</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in ( <span class="Production"><span style="font-size:11.0pt">e</span></span> ) .
Cast &lt; <span class="Production"><span style="font-size:11.0pt">T</span></span>
&gt; ( )</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">join</span></span>
clause that explicitly specifies a range variable type</p>

<p class="Code">join <span class="Production"><span style="font-size:11.0pt">T</span></span>
<span class="Production"><span style="font-size:11.0pt">x</span></span> in <span class="Production"><span style="font-size:11.0pt">e</span></span> on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">join <span class="Production"><span style="font-size:11.0pt">x</span></span>
in ( <span class="Production"><span style="font-size:11.0pt">e</span></span> ) .
Cast &lt; <span class="Production"><span style="font-size:11.0pt">T</span></span>
&gt; ( ) on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span></p>

<p class="MsoNormal">The translations in the following sections assume that
queries have no explicit range variable types.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from Customer c in customers<br>
where c.City == "London"<br>
select c</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from c in customers.Cast&lt;Customer&gt;()<br>
where c.City == "London"<br>
select c</p>

<p class="MsoNormal">the final translation of which is</p>

<p class="Code">customers.<br>
Cast&lt;Customer&gt;().<br>
Where(c =&gt; c.City == "London")</p>

<p class="MsoNormal">Explicit range variable types are useful for querying
collections that implement the non-generic <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span> interface, but not the
generic <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>
interface. In the example above, this would be the case if <span class="Codefragment"><span style="font-size:10.0pt">customers</span></span> were
of type <span class="Codefragment"><span style="font-size:10.0pt">ArrayList</span></span>.</p>

<h4><a name="_Toc251613194"></a><a name="_Toc154460650">7.16.2.3 Degenerate
query expressions</a></h4>

<p class="MsoNormal">A query expression of the form</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span> select
<span class="Production"><span style="font-size:11.0pt">x</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e</span></span>
) . Select ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">x</span></span> )</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
select c</p>

<p class="MsoNormal">Is translated into </p>

<p class="Code">customers.Select(c =&gt; c)</p>

<p class="MsoNormal">A degenerate query expression is one that trivially selects
the elements of the source. A later phase of the translation removes degenerate
queries introduced by other translation steps by replacing them with their
source. It is important however to ensure that the result of a query expression
is never the source object itself, as that would reveal the type and identity
of the source to the client of the query. Therefore this step protects
degenerate queries written directly in source code by explicitly calling <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span> on the
source. It is then up to the implementers of <span class="Codefragment"><span style="font-size:10.0pt">Select</span></span> and other query operators to
ensure that these methods never return the source object itself.</p>

<h4><a name="_Toc251613195"></a><a name="_Toc154460651">7.16.2.4 From, let,
where, join and orderby clauses</a></h4>

<p class="MsoNormal">A query expression with a second <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> clause followed by a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span> clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
from <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span><br>
select <span class="Production"><span style="font-size:11.0pt">v</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . SelectMany( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
) =&gt; <span class="Production"><span style="font-size:11.0pt">v</span></span> )</p>

<p class="MsoNormal">A query expression with a second <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> clause followed by something other
than a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
clause:</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
from <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span><br>
…</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in ( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . SelectMany( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
) =&gt; new { <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
} )<br>
…</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">let</span></span> clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span><br>
let <span class="Production"><span style="font-size:11.0pt">y</span></span> = <span class="Production"><span style="font-size:11.0pt">f<br>
…</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in ( <span class="Production"><span style="font-size:11.0pt">e</span></span>
) . Select ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; new { <span class="Production"><span style="font-size:11.0pt">x</span></span>
, <span class="Production"><span style="font-size:11.0pt">y</span></span> = <span class="Production"><span style="font-size:11.0pt">f</span></span> } )<br>
…</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span><br>
where <span class="Production"><span style="font-size:11.0pt">f<br>
…</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in ( <span class="Production"><span style="font-size:11.0pt">e</span></span> ) .
Where ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">f</span></span> )<br>
…</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> clause without an <span class="Codefragment"><span style="font-size:10.0pt">into</span></span> followed
by a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
join <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span><br>
select <span class="Production"><span style="font-size:11.0pt">v</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . Join( <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
) =&gt; <span class="Production"><span style="font-size:11.0pt">v</span></span> )</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> clause without an <span class="Codefragment"><span style="font-size:10.0pt">into</span></span> followed
by something other than a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
join <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
<br>
…</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in ( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . Join(<br>
&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
) =&gt; new { <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
})<br>
…</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> clause with an <span class="Codefragment"><span style="font-size:10.0pt">into</span></span> followed
by a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
join <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
into <span class="Production"><span style="font-size:11.0pt">g</span></span><br>
select <span class="Production"><span style="font-size:11.0pt">v</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . GroupJoin( <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">g</span></span> ) =&gt;
<span class="Production"><span style="font-size:11.0pt">v</span></span> )</p>

<p class="MsoNormal">A query expression with a <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> clause with an <span class="Codefragment"><span style="font-size:10.0pt">into</span></span> followed
by something other than a <span class="Codefragment"><span style="font-size:10.0pt">select</span></span>
clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span><br>
join <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
in <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
on <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
equals <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
into <span class="Production"><span style="font-size:11.0pt">g</span></span><br>
…</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in ( <span class="Production"><span style="font-size:11.0pt">e<sub>1</sub></span></span>
) . GroupJoin(<br>
&nbsp;&nbsp; <span class="Production"><span style="font-size:11.0pt">e<sub>2</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">x<sub>2</sub></span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
, ( <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">g</span></span> ) =&gt;
new { <span class="Production"><span style="font-size:11.0pt">x<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">g</span></span> })<br>
…</p>

<p class="MsoNormal">A query expression with an <span class="Codefragment"><span style="font-size:10.0pt">orderby</span></span> clause</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span><br>
orderby <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
, <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
, … ,<span class="Codefragment"> </span><span class="Production"><span style="font-size:11.0pt">k<sub>n</sub></span></span><br>
<span class="Production"><span style="font-size:11.0pt">…</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in ( <span class="Production"><span style="font-size:11.0pt">e</span></span> ) . <br>
OrderBy ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>1</sub></span></span>
) . <br>
ThenBy ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>2</sub></span></span>
) .<br>
&nbsp;<span class="Production"><span style="font-size:11.0pt">…</span></span> . <br>
ThenBy ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k<sub>n</sub></span></span>
)<br>
…</p>

<p class="MsoNormal">If an ordering clause specifies a <span class="Codefragment"><span style="font-size:10.0pt">descending</span></span> direction indicator, an
invocation of <span class="Codefragment"><span style="font-size:10.0pt">OrderByDescending</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">ThenByDescending</span></span>
is produced instead.</p>

<p class="MsoNormal">The following translations assume that there are no <span class="Codefragment"><span style="font-size:10.0pt">let</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">join</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">orderby</span></span>
clauses, and no more than the one initial <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> clause in each query expression.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
from o in c.Orders<br>
select new { c.Name, o.OrderID, o.Total }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">customers.<br>
SelectMany(c =&gt; c.Orders,<br>
&nbsp;&nbsp; &nbsp;(c,o) =&gt; new { c.Name, o.OrderID, o.Total }<br>
)</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
from o in c.Orders<br>
orderby o.Total descending<br>
select new { c.Name, o.OrderID, o.Total }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in customers.<br>
&nbsp;&nbsp; SelectMany(c =&gt; c.Orders, (c,o) =&gt; new { c, o })<br>
orderby o.Total descending<br>
select new { c.Name, o.OrderID, o.Total }</p>

<p class="MsoNormal">the final translation of which is</p>

<p class="Code">customers.<br>
SelectMany(c =&gt; c.Orders, (c,o) =&gt; new { c, o }).<br>
<span lang="DA">OrderByDescending(x =&gt; x.o.Total).<br>
</span>Select(x =&gt; new { x.c.Name, x.o.OrderID, x.o.Total })</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is a compiler generated identifier that is otherwise invisible and
inaccessible.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from o in orders<br>
let t = o.Details.Sum(d =&gt; d.UnitPrice * d.Quantity)<br>
where t &gt;= 1000<br>
select new { o.OrderID, Total = t }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in orders.<br>
&nbsp;&nbsp; Select(o =&gt; new { o, t = o.Details.Sum(d =&gt; d.UnitPrice * d.Quantity)
})<br>
where t &gt;= 1000 <br>
select new { o.OrderID, Total = t }</p>

<p class="MsoNormal">the final translation of which is</p>

<p class="Code">orders.<br>
Select(o =&gt; new { o, t = o.Details.Sum(d =&gt; d.UnitPrice * d.Quantity) }).<br>
Where(x =&gt; x.t &gt;= 1000).<br>
Select(x =&gt; new { x.o.OrderID, Total = x.t })</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is a compiler generated identifier that is otherwise invisible and
inaccessible.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
join o in orders on c.CustomerID equals o.CustomerID<br>
select new { c.Name, o.OrderDate, o.Total }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">customers.Join(orders, c =&gt; c.CustomerID, o =&gt;
o.CustomerID,<br>
&nbsp;&nbsp; (c, o) =&gt; new { c.Name, o.OrderDate, o.Total })</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
join o in orders on c.CustomerID equals o.CustomerID into co<br>
let n = co.Count()<br>
where n &gt;= 10<br>
select new { c.Name, OrderCount = n }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in customers.<br>
&nbsp;&nbsp; GroupJoin(orders, c =&gt; c.CustomerID, o =&gt; o.CustomerID,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (c, co) =&gt; new { c, co })<br>
let n = co.Count()<br>
where n &gt;= 10 <br>
select new { c.Name, OrderCount = n }</p>

<p class="MsoNormal">the final translation of which is</p>

<p class="Code">customers.<br>
GroupJoin(orders, c =&gt; c.CustomerID, o =&gt; o.CustomerID,<br>
&nbsp;&nbsp; (c, co) =&gt; new { c, co }).<br>
Select(x =&gt; new { x, n = x.co.Count() }).<br>
Where(y =&gt; y.n &gt;= 10).<br>
Select(y =&gt; new { y.x.c.Name, OrderCount = y.n)</p>

<p class="MsoNormal"><a name="_Ref130958746">where </a><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are compiler generated identifiers
that are otherwise invisible and inaccessible.</p>

<p class="MsoNormal"><a name="_Ref130885087">The example</a></p>

<p class="Code">from o in orders<br>
orderby o.Customer.Name, o.Total descending<br>
select o</p>

<p class="MsoNormal">has the final translation</p>

<p class="Code">orders.<br>
OrderBy(o =&gt; o.Customer.Name).<br>
ThenByDescending(o =&gt; o.Total)</p>

<h4><a name="_Ref130958748"></a><a name="_Ref130885089"></a><a name="_Toc251613196"></a><a name="_Toc154460652"></a><a name="_Ref133130965">7.16.2.5
Select clauses</a></h4>

<p class="MsoNormal">A query expression of the form</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span> select
<span class="Production"><span style="font-size:11.0pt">v</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e</span></span>
) . Select ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">v</span></span> )</p>

<p class="MsoNormal">except when <span class="Production">v</span> is the
identifier <span class="Production">x</span>, the translation is simply</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e</span></span>
)</p>

<p class="MsoNormal">For example</p>

<p class="Code">from c in customers.Where(c =&gt; c.City == “London”)<br>
select c</p>

<p class="MsoNormal">is simply translated into</p>

<p class="Code">customers.Where(c =&gt; c.City == “London”)</p>

<h4><a name="_Toc251613197"></a><a name="_Toc154460653">7.16.2.6 Groupby
clauses</a></h4>

<p class="MsoNormal">A query expression of the form</p>

<p class="Code">from <span class="Production"><span style="font-size:11.0pt">x</span></span>
in <span class="Production"><span style="font-size:11.0pt">e</span></span> group <span class="Production"><span style="font-size:11.0pt">v</span></span> by <span class="Production"><span style="font-size:11.0pt">k</span></span></p>

<p class="MsoNormal">is translated into</p>

<p class="Code">( <span class="Production"><span style="font-size:11.0pt">e</span></span>
) . GroupBy ( <span class="Production"><span style="font-size:11.0pt">x</span></span>
=&gt; <span class="Production"><span style="font-size:11.0pt">k</span></span> , <span class="Production"><span style="font-size:11.0pt">x</span></span> =&gt; <span class="Production"><span style="font-size:11.0pt">v</span></span> )</p>

<p class="MsoNormal">except when <span class="Production">v</span> is the
identifier <span class="Production">x</span>, the translation is</p>

<p class="Code"><span lang="PL">( </span><span class="Production"><span lang="PL" style="font-size:11.0pt">e</span></span><span lang="PL"> ) . GroupBy ( </span><span class="Production"><span lang="PL" style="font-size:11.0pt">x</span></span><span lang="PL"> =&gt; </span><span class="Production"><span lang="PL" style="font-size:
11.0pt">k</span></span><span lang="PL"> )</span></p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
group c.Name by c.Country</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">customers.<br>
GroupBy(c =&gt; c.Country, c =&gt; c.Name)</p>

<h4><a name="_Toc251613198"></a><a name="_Toc154460654"></a><a name="_Ref131336422">7.16.2.7 Transparent identifiers</a></h4>

<p class="MsoNormal">Certain translations inject range variables with <span class="Term">transparent identifiers</span> denoted by <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>. Transparent identifiers are not a
proper language feature; they exist only as an intermediate step in the query
expression translation process.</p>

<p class="MsoNormal">When a query translation injects a transparent identifier, further translation steps propagate the transparent identifier into anonymous functions
and anonymous object initializers. In those contexts, transparent identifiers
have the following behavior:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a transparent identifier occurs as a parameter in an anonymous
function, the members of the associated anonymous type are automatically in
scope in the body of the anonymous function.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a member with a transparent identifier is in scope, the
members of that member are in scope as well.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a transparent identifier occurs as a member declarator in an
anonymous object initializer, it introduces a member with a transparent
identifier.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">In the
translation steps described above, transparent identifiers are always
introduced together with anonymous types, with the intent of capturing multiple
range variables as members of a single object. An implementation of C# is
permitted to use a different mechanism than anonymous types to group together
multiple range variables. The following translation examples assume that
anonymous types are used, and show how transparent identifiers can be
translated away.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
from o in c.Orders<br>
orderby o.Total descending<br>
select new { c.Name, o.Total }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in customers.<br>
&nbsp;&nbsp; SelectMany(c =&gt; c.Orders, (c,o) =&gt; new { c, o })<br>
orderby o.Total descending<br>
select new { c.Name, o.Total }</p>

<p class="MsoNormal">which is further translated into</p>

<p class="Code">customers.<br>
SelectMany(c =&gt; c.Orders, (c,o) =&gt; new { c, o }).<br>
OrderByDescending(* =&gt; o.Total).<br>
Select(* =&gt; new { c.Name, o.Total })</p>

<p class="MsoNormal">which, when transparent identifiers are erased, is
equivalent to</p>

<p class="Code">customers.<br>
SelectMany(c =&gt; c.Orders, (c,o) =&gt; new { c, o }).<br>
<span lang="DA">OrderByDescending(x =&gt; x.o.Total).<br>
</span>Select(x =&gt; new { x.c.Name, x.o.Total })</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is a compiler generated identifier that is otherwise invisible and
inaccessible.</p>

<p class="MsoNormal">The example</p>

<p class="Code">from c in customers<br>
join o in orders on c.CustomerID equals o.CustomerID<br>
join d in details on o.OrderID equals d.OrderID<br>
join p in products on d.ProductID equals p.ProductID<br>
select new { c.Name, o.OrderDate, p.ProductName }</p>

<p class="MsoNormal">is translated into</p>

<p class="Code">from * in customers.<br>
&nbsp;&nbsp; Join(orders, c =&gt; c.CustomerID, o =&gt; o.CustomerID, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (c, o) =&gt; new { c, o })<br>
join d in details on o.OrderID equals d.OrderID<br>
join p in products on d.ProductID equals p.ProductID<br>
select new { c.Name, o.OrderDate, p.ProductName }</p>

<p class="MsoNormal">which is further reduced to</p>

<p class="Code">customers.<br>
Join(orders, c =&gt; c.CustomerID, o =&gt; o.CustomerID, (c, o) =&gt; new { c,
o }).<br>
Join(details, * =&gt; o.OrderID, d =&gt; d.OrderID, (*, d) =&gt; new { *, d }).<br>
Join(products, * =&gt; d.ProductID, p =&gt; p.ProductID, (*, p) =&gt; new { *,
p }).<br>
Select(* =&gt; new { c.Name, o.OrderDate, p.ProductName })</p>

<p class="MsoNormal"><a name="_Ref130909184"></a><a name="_Ref112572083">the
final translation of which is</a></p>

<p class="Code">customers.<br>
Join(orders, c =&gt; c.CustomerID, o =&gt; o.CustomerID,<br>
&nbsp;&nbsp; (c, o) =&gt; new { c, o }).<br>
Join(details, x =&gt; x.o.OrderID, d =&gt; d.OrderID,<br>
&nbsp;&nbsp; (x, d) =&gt; new { x, d }).<br>
Join(products, y =&gt; y.d.ProductID, p =&gt; p.ProductID,<br>
&nbsp;&nbsp; (y, p) =&gt; new { y, p }).<br>
Select(z =&gt; new { z.y.x.c.Name, z.y.x.o.OrderDate, z.p.ProductName })</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">z</span></span> are compiler
generated identifiers that are otherwise invisible and inaccessible.</p>

<h3><a name="_Toc251613199"></a><a name="_Toc154460655"></a><a name="_Ref133144402">7.16.3 The </a>query expression pattern</h3>

<p class="MsoNormal">The <span class="Term">Query expression pattern</span>
establishes a pattern of methods that types can implement to support query
expressions. Because query expressions are translated to method invocations by
means of a syntactic mapping, types have considerable flexibility in how they
implement the query expression pattern. For example, the methods of the pattern
can be implemented as instance methods or as extension methods because the two
have the same invocation syntax, and the methods can request delegates or
expression trees because anonymous functions are convertible to both.</p>

<p class="MsoNormal">The recommended shape of a generic type <span class="Codefragment"><span style="font-size:10.0pt">C&lt;T&gt;</span></span> that
supports the query expression pattern is shown below. A generic type is used in
order to illustrate the proper relationships between parameter and result
types, but it is possible to implement the pattern for non-generic types as
well.</p>

<p class="Code">delegate R Func&lt;T1,R&gt;(T1 arg1);</p>

<p class="Code">delegate R Func&lt;T1,T2,R&gt;(T1 arg1, T2 arg2);</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public C&lt;T&gt; Cast&lt;T&gt;();<br>
}</p>

<p class="Code">class C&lt;T&gt; : C<br>
{<br>
&nbsp;&nbsp; public C&lt;T&gt; Where(Func&lt;T,bool&gt; predicate);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;U&gt; Select&lt;U&gt;(Func&lt;T,U&gt; selector);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;V&gt;
SelectMany&lt;U,V&gt;(Func&lt;T,C&lt;U&gt;&gt; selector,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Func&lt;T,U,V&gt; resultSelector);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;V&gt; Join&lt;U,K,V&gt;(C&lt;U&gt; inner,
Func&lt;T,K&gt; outerKeySelector,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Func&lt;U,K&gt; innerKeySelector, Func&lt;T,U,V&gt; resultSelector);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;V&gt; GroupJoin&lt;U,K,V&gt;(C&lt;U&gt; inner,
Func&lt;T,K&gt; outerKeySelector,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Func&lt;U,K&gt; innerKeySelector, Func&lt;T,C&lt;U&gt;,V&gt; resultSelector);</p>

<p class="Code">&nbsp;&nbsp; public O&lt;T&gt; OrderBy&lt;K&gt;(Func&lt;T,K&gt;
keySelector);</p>

<p class="Code">&nbsp;&nbsp; public O&lt;T&gt; OrderByDescending&lt;K&gt;(Func&lt;T,K&gt;
keySelector);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;G&lt;K,T&gt;&gt; GroupBy&lt;K&gt;(Func&lt;T,K&gt;
keySelector);</p>

<p class="Code">&nbsp;&nbsp; public C&lt;G&lt;K,E&gt;&gt;
GroupBy&lt;K,E&gt;(Func&lt;T,K&gt; keySelector,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Func&lt;T,E&gt; elementSelector);<br>
}</p>

<p class="Code">class O&lt;T&gt; : C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public O&lt;T&gt; ThenBy&lt;K&gt;(Func&lt;T,K&gt; keySelector);</p>

<p class="Code">&nbsp;&nbsp; public O&lt;T&gt; ThenByDescending&lt;K&gt;(Func&lt;T,K&gt;
keySelector);<br>
}</p>

<p class="Code">class G&lt;K,T&gt; : C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public K Key { get; }<br>
}</p>

<p class="MsoNormal">The methods above use the generic delegate types <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;T1,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">R&gt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Func&lt;T1,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T2,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">R&gt;</span></span>, but they
could equally well have used other delegate or expression tree types with the
same relationships in parameter and result types.</p>

<p class="MsoNormal">Notice the recommended relationship between <span class="Codefragment"><span style="font-size:10.0pt">C&lt;T&gt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">O&lt;T&gt;</span></span>
which ensures that the <span class="Codefragment"><span style="font-size:10.0pt">ThenBy</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">ThenByDescending</span></span>
methods are available only on the result of an <span class="Codefragment"><span style="font-size:10.0pt">OrderBy</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">OrderByDescending</span></span>. Also notice the
recommended shape of the result of <span class="Codefragment"><span style="font-size:10.0pt">GroupBy</span></span>—a sequence of sequences, where
each inner sequence has an additional <span class="Codefragment"><span style="font-size:10.0pt">Key</span></span> property.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">System.Linq</span></span>
namespace provides an implementation of the query operator pattern for any type
that implements the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IEnumerable&lt;T&gt;</span></span>
interface.</p>

<h2><a name="_Toc251613200"></a><a name="_Ref174230895"></a><a name="_Ref174230486"></a><a name="_Ref174228639"></a><a name="_Ref174224683"></a><a name="_Ref174223175">7.17 Assignment operators</a></h2>

<p class="MsoNormal">The assignment operators assign a new value to a variable, a
property, an event, or an indexer element.</p>

<p class="Grammar">assignment:<br>
unary-expression&nbsp;&nbsp; assignment-operator&nbsp;&nbsp; expression</p>

<p class="Grammar">assignment-operator:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">=<br>
+=<br>
-=<br>
*=<br>
/=<br>
%=<br>
&amp;=<br>
|=<br>
^=<br>
&lt;&lt;=<br>
</span></span>right-shift-assignment</p>

<p class="MsoNormal">The left operand of an assignment must be an expression
classified as a variable, a property access, an indexer access, or an event
access.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>
operator is called the <span class="Term">simple assignment operator</span>. It
assigns the value of the right operand to the variable, property, or indexer
element given by the left operand. The left operand of the simple assignment
operator may not be an event access (except as described in §10.8.1). The
simple assignment operator is described in §7.17.1.</p>

<p class="MsoNormal">The assignment operators other than the <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> operator are
called the <span class="Term">compound assignment operators</span>. These
operators perform the indicated operation on the two operands, and then assign
the resulting value to the variable, property, or indexer element given by the
left operand. The compound assignment operators are described in §7.17.2.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>
operators with an event access expression as the left operand are called the <span class="Production">event assignment operators</span>.&nbsp;No other assignment operator is valid with an event access as the left operand. The
event assignment operators are described in §7.17.3.</p>

<p class="MsoNormal">The assignment operators are right-associative, meaning that
operations are grouped from right to left. For example, an expression of the
form <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">c</span></span> is evaluated
as <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> (<span class="Codefragment"><span style="font-size:10.0pt">b</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">c)</span></span>.</p>

<h3><a name="_Toc251613201"></a><a name="_Ref466780397">7.17.1 Simple
assignment</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>
operator is called the simple assignment operator. </p>

<p class="MsoNormal">If the left operand of a simple assignment is of the form <span class="Codefragment"><span style="font-size:10.0pt">E.P</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">E[E<sub>i</sub>]</span></span>
where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> has
the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the assignment is dynamically bound (§7.2.2). In this case the
compile-time type of the assignment expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time based on the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoNormal">In a simple assignment, the right operand must be an
expression that is implicitly convertible to the type of the left operand. The
operation assigns the value of the right operand to the variable, property, or
indexer element given by the left operand.</p>

<p class="MsoNormal">The result of a simple assignment expression is the value
assigned to the left operand. The result has the same type as the left operand
and is always classified as a value.</p>

<p class="MsoNormal">If the left operand is a property or indexer access, the
property or indexer must have a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor. If this is not the case, a
binding-time error occurs.</p>

<p class="MsoNormal">The run-time processing of a simple assignment of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> consists of
the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a variable:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated
to produce the variable.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated
and, if required, converted to the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> through an implicit conversion (§6.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the variable
given by <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an array element of a <span class="Production">reference-type</span>, a
run-time check is performed to ensure that the value computed for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is compatible
with the array instance of which <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an element. The check succeeds if <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, or if an
implicit reference conversion (§6.1.6) exists from the actual type of the
instance referenced by <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
to the actual element type of the array instance containing <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. Otherwise, a
<span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span>
is thrown.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The value
resulting from the evaluation and conversion of <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is stored into the location given by
the evaluation of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is classified as a property or indexer access:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The instance
expression (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is not <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>)
and the argument list (if <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an indexer access) associated with <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are evaluated, and the results are
used in the subsequent <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor invocation.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is evaluated
and, if required, converted to the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> through an implicit conversion (§6.1).</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is
invoked with the value computed for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> as its <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> argument.</p>

<p class="MsoNormal">The array co-variance rules (§12.5) permit a value of an
array type <span class="Codefragment"><span style="font-size:10.0pt">A[]</span></span>
to be a reference to an instance of an array type <span class="Codefragment"><span style="font-size:10.0pt">B[]</span></span>, provided an implicit reference
conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
Because of these rules, assignment to an array element of a <span class="Production">reference-type</span> requires a run-time check to ensure that
the value being assigned is compatible with the array instance. In the example</p>

<p class="Code">string[] sa = new string[10];<br>
object[] oa = sa;</p>

<p class="Code">oa[0] = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
oa[1] = "Hello";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
oa[2] = new ArrayList();&nbsp;&nbsp; // ArrayTypeMismatchException</p>

<p class="MsoNormal">the last assignment causes a <span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span> to be
thrown because an instance of <span class="Codefragment"><span style="font-size:
10.0pt">ArrayList</span></span> cannot be stored in an element of a <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>.</p>

<p class="MsoNormal">When a property or indexer declared in a <span class="Production">struct-type</span> is the target of an assignment, the
instance expression associated with the property or indexer access must be
classified as a variable. If the instance expression is classified as a value,
a binding-time error occurs. Because of §7.6.4, the same rule also applies to
fields.</p>

<p class="MsoNormal">Given the declarations:</p>

<p class="Code"><span lang="FR">struct Point<br>
{<br>
&nbsp;&nbsp; int x, y;</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; </span>public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return x; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { x = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return y; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { y = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">struct Rectangle<br>
{<br>
&nbsp;&nbsp; Point a, b;</p>

<p class="Code">&nbsp;&nbsp; public Rectangle(Point a, Point b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.a = a;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.b = b;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Point A {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return a; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { a = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Point B {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return b; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { b = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">in the example</p>

<p class="Code">Point p = new Point();<br>
p.X = 100;<br>
p.Y = 100;<br>
Rectangle r = new Rectangle();<br>
r.A = new Point(10, 10);<br>
r.B = p;</p>

<p class="MsoNormal">the assignments to <span class="Codefragment"><span style="font-size:10.0pt">p.X</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">p.Y</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">r.A</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">r.B</span></span> are permitted because <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">r</span></span> are
variables. However, in the example</p>

<p class="Code">Rectangle r = new Rectangle();<br>
r.A.X = 10;<br>
r.A.Y = 10;<br>
r.B.X = 100;<br>
r.B.Y = 100;</p>

<p class="MsoNormal">the assignments are all invalid, since <span class="Codefragment"><span style="font-size:10.0pt">r.A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">r.B</span></span> are not
variables.</p>

<h3><a name="_Toc251613202"></a><a name="_Ref466965152"></a><a name="_Ref466780411">7.17.2 Compound assignment</a></h3>

<p class="MsoNormal">If the left operand of a compound assignment is of the form <span class="Codefragment"><span style="font-size:10.0pt">E.P</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">E[E<sub>i</sub>]</span></span>
where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
has the compile-time type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>,
then the assignment is dynamically bound (§7.2.2). In this case the
compile-time type of the assignment expression is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, and the resolution described
below will take place at run-time based on the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.</p>

<p class="MsoNormal">An operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is processed
by applying binary operator overload resolution (§7.3.4) as if the operation
was written <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>. Then,</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the return type of the selected operator is <em>implicitly</em>
convertible to the type of <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span>, the operation is evaluated as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:
10.0pt">y</span></span>, except that <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is evaluated only once.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the selected operator is a predefined operator, if
the return type of the selected operator is <em>explicitly</em> convertible to
the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>,
and if <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
is <em>implicitly</em> convertible to the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> or the operator is a shift operator,
then the operation is evaluated as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(T)(x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:10.0pt">y)</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the type
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>,
except that <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is evaluated only once.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the compound assignment is invalid, and a binding-time
error occurs.</p>

<p class="MsoNormal">The term “evaluated only once” means that in the evaluation
of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:
10.0pt">y</span></span>, the results of any constituent expressions of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> are
temporarily saved and then reused when performing the assignment to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>. For example,
in the assignment <span class="Codefragment"><span style="font-size:10.0pt">A()[B()]</span></span>
+<span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">C()</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a method
returning <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">C</span></span> are
methods returning <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
the methods are invoked only once, in the order <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoNormal">When the left operand of a compound assignment is a property
access or indexer access, the property or indexer must have both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor
and a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor. If this is not the case, a binding-time error occurs.</p>

<p class="MsoNormal">The second rule above permits <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> to be
evaluated as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(T)(x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:
10.0pt">y)</span></span> in certain contexts. The rule exists such that the
predefined operators can be used as compound operators when the left operand is
of type <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>. Even when
both arguments are of one of those types, the predefined operators produce a
result of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
as described in §7.3.6.2. Thus, without a cast it would not be possible to
assign the result to the left operand.</p>

<p class="MsoNormal">The intuitive effect of the rule for predefined operators is
simply that <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
<span class="Production">op</span><span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is permitted if both of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Production">op</span> <span class="Codefragment"><span style="font-size:
10.0pt">y</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">y</span></span> are
permitted. In the example</p>

<p class="Code">byte b = 0;<br>
char ch = '\0';<br>
int i = 0;</p>

<p class="Code">b += 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
b += 1000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, b = 1000 not permitted<br>
b += i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, b = i not permitted<br>
b += (byte)i;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">ch += 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, ch = 1 not permitted<br>
ch += (char)1;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="MsoNormal">the intuitive reason for each error is that a corresponding
simple assignment would also have been an error.</p>

<p class="MsoNormal">This also means that compound assignment operations support
lifted operations. In the example</p>

<p class="Code">int? i = 0;<br>
i += 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="MsoNormal">the lifted operator <span class="Codefragment"><span style="font-size:10.0pt">+(int?,int?)</span></span> is used.</p>

<h3><a name="_Toc251613203"></a><a name="_Ref466797471">7.17.3 Event assignment</a></h3>

<p class="MsoNormal"><a name="_Ref457446073"></a><a name="_Ref449414776"></a><a name="_Ref448212555"></a><a name="_Toc445783015">If the left operand of a </a><span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span> operator is
classified as an event access, then the expression is evaluated as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The instance expression, if any, of the event access is
evaluated.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The right operand of the <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span> operator is evaluated, and, if
required, converted to the type of the left operand through an implicit
conversion (§6.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An event accessor of the event is invoked, with argument list
consisting of the right operand, after evaluation and, if necessary,
conversion. If the operator was <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> accessor is invoked; if the operator
was <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>,
the <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span>
accessor is invoked.</p>

<p class="MsoNormal">An event assignment expression does not yield a value. Thus,
an event assignment expression is valid only in the context of a <span class="Production">statement-expression</span> (§8.6).</p>

<h2><a name="_Toc251613204"></a><a name="_Ref174226851">7.18 Expression</a></h2>

<p class="MsoNormal">An <span class="Production">expression</span> is either a <span class="Production">non-assignment-expression</span> or an <span class="Production">assignment</span>.</p>

<p class="Grammar">expression: <br>
non-assignment-expression<br>
assignment</p>

<p class="Grammar"><a name="_Ref461975442">non-assignment-expression:<br>
conditional-expression<br>
lambda-expression<br>
query-expression</a></p>

<h2><a name="_Toc251613205"></a><a name="_Ref174219286">7.19 Constant
expressions</a></h2>

<p class="MsoNormal">A <span class="Production">constant-expression</span> is an
expression that can be fully evaluated at compile-time.</p>

<p class="Grammar">constant-expression:<br>
expression</p>

<p class="MsoNormal">A constant expression must be the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> literal or a value with one of&nbsp; the
following types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, or any
enumeration type. Only the following constructs are permitted in constant
expressions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Literals (including the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> literal).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>References to <span class="Codefragment"><span style="font-size:
10.0pt">const</span></span> members of class and struct types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>References to members of enumeration types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>References to <span class="Codefragment"><span style="font-size:
10.0pt">const</span></span> parameters or local variables</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Parenthesized sub-expressions, which are themselves constant
expressions.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Cast expressions, provided the target type is one of the types
listed above.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span><span class="Production"> </span>expressions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Default value expressions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined <span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">–</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">!</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">~</span></span> unary
operators.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The predefined <span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">–</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">||</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> binary
operators, provided each operand is of a type listed above.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span>
conditional operator.</p>

<p class="MsoNormal">The following conversions are permitted in constant
expressions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Identity conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Numeric conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Enumeration conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constant expression conversions</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Implicit and explicit reference conversions, provided that the
source of the conversions is a constant expression that evaluates to the null
value.</p>

<p class="MsoNormal">Other conversions including boxing, unboxing and implicit
reference conversions of non-null values are not permitted in constant
expressions. For example:</p>

<p class="Code">class C {<br>
&nbsp;&nbsp;&nbsp; const object i = 5;&nbsp; // error: boxing conversion not permitted<br>
&nbsp;&nbsp;&nbsp; const object str = “hello”; // error: implicit reference conversion<br>
}</p>

<p class="MsoNormal">the initialization of <span class="CodeCharChar">i</span>is an
error because a boxing conversion is required. The initialization of <span class="CodeCharChar">str</span> is an error because an implicit reference
conversion from a non-null value is required.</p>

<p class="MsoNormal">Whenever an expression fulfills the requirements listed
above, the expression is evaluated at compile-time. This is true even if the
expression is a sub-expression of a larger expression that contains
non-constant constructs.</p>

<p class="MsoNormal">The compile-time evaluation of constant expressions uses the
same rules as run-time evaluation of non-constant expressions, except that
where run-time evaluation would have thrown an exception, compile-time
evaluation causes a compile-time error to occur.</p>

<p class="MsoNormal">Unless a constant expression is explicitly placed in an <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
context, overflows that occur in integral-type arithmetic operations and
conversions during the compile-time evaluation of the expression always cause
compile-time errors (§7.19).</p>

<p class="MsoNormal">Constant expressions occur in the contexts listed below. In
these contexts, a compile-time error occurs if an expression cannot be fully
evaluated at compile-time.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constant declarations (§10.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Enumeration member declarations (§14.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">case</span></span>
labels of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement (§8.7.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">case</span></span>
statements (§8.9.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Dimension lengths in an array creation expression (§7.6.10.4) that includes an initializer.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Attributes (§17).</p>

<p class="MsoNormal">An implicit constant expression conversion (§6.1.8) permits a constant expression of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> to be converted to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, provided
the value of the constant expression is within the range of the destination
type.</p>

<h2><a name="_Toc251613206"></a><a name="_Ref470173900">7.20 Boolean
expressions</a></h2>

<p class="MsoNormal">A <span class="Production">boolean-expression</span> is an
expression that yields a result of type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>; either directly or through
application of <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">true</span></span> in
certain contexts as specified in the following.</p>

<p class="Grammar">boolean-expression:<br>
expression</p>

<p class="MsoNormal">The controlling conditional expression of an <span class="Production">if-statement</span> (§8.7.1), <span class="Production">while-statement</span>
(§8.8.1), <span class="Production">do-statement</span> (§8.8.2), or <span class="Production">for-statement</span> (§8.8.3) is a <span class="Production">boolean-expression</span>.
The controlling conditional expression of the <span class="Codefragment"><span style="font-size:10.0pt">?:</span></span> operator (§7.14) follows the same
rules as a <span class="Production">boolean-expression</span>, but for reasons of
operator precedence is classified as a <span class="Production">conditional-or-expression</span>.</p>

<p class="MsoNormal">A <span class="Production">boolean-expression</span> is
required to be implicitly convertible to <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> or of a type that implements <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. If
neither requirement is satisfied, a binding-time error occurs.</p>

<p class="MsoNormal">When a boolean expression cannot be implicitly converted to <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span> but does
implement <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">true</span></span>,
then following evaluation of the expression, the <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> implementation provided by that
type is invoked to produce a <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span> value.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">DBBool</span></span>
struct type in §11.4.2 provides an example of a type that implements <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section9">

<h1><a name="_Toc445783016"></a><a name="_Toc251613207"></a><a name="_Ref504820942">8. Statements</a></h1>

<p class="MsoNormal">C# provides a variety of statements. Most of these
statements will be familiar to developers who have programmed in C and C++.</p>

<p class="Grammar">statement:<br>
labeled-statement<br>
declaration-statement<br>
embedded-statement</p>

<p class="Grammar">embedded-statement:<br>
block<br>
empty-statement<br>
expression-statement<br>
selection-statement<br>
iteration-statement<br>
jump-statement<br>
try-statement<br>
checked-statement<br>
unchecked-statement<br>
lock-statement<br>
using-statement <br>
yield-statement</p>

<p class="MsoNormal"><a name="_Toc445783017">The </a><span class="Production">embedded-statement</span>
nonterminal is used for statements that appear within other statements. The use
of <span class="Production">embedded-statement</span> rather than <span class="Production">statement</span> excludes the use of declaration statements
and labeled statements in these contexts. The example</p>

<p class="Code">void F(bool b) {<br>
&nbsp;&nbsp; if (b)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 44;<br>
}</p>

<p class="MsoNormal">results in a compile-time error because an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement
requires an <span class="Production">embedded-statement</span> rather than a <span class="Production">statement</span> for its if branch. If this code were
permitted, then the variable <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> would be declared, but it could never be used. Note,
however, that by placing <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>’s
declaration in a block, the example is valid.</p>

<h2><a name="_Toc251613208"></a><a name="_Ref497220067">8.1 End points and
reachability</a></h2>

<p class="MsoNormal">Every statement has an <span class="Term">end point</span>. In
intuitive terms, the end point of a statement is the location that immediately
follows the statement. The execution rules for composite statements (statements
that contain embedded statements) specify the action that is taken when control
reaches the end point of an embedded statement. For example, when control
reaches the end point of a statement in a block, control is transferred to the
next statement in the block.</p>

<p class="MsoNormal">If a statement can possibly be reached by execution, the
statement is said to be <span class="Term">reachable</span>. Conversely, if there
is no possibility that a statement will be executed, the statement is said to
be <span class="Term">unreachable</span>.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; Console.WriteLine("reachable");<br>
&nbsp;&nbsp; goto Label;<br>
&nbsp;&nbsp; Console.WriteLine("unreachable");<br>
&nbsp;&nbsp; Label:<br>
&nbsp;&nbsp; Console.WriteLine("reachable");<br>
}</p>

<p class="MsoNormal">the second invocation of <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span> is unreachable because
there is no possibility that the statement will be executed.</p>

<p class="MsoNormal">A warning is reported if the compiler determines that a
statement is unreachable. It is specifically not an error for a statement to be
unreachable.</p>

<p class="MsoNormal">To determine whether a particular statement or end point is
reachable, the compiler performs flow analysis according to the reachability
rules defined for each statement. The flow analysis takes into account the
values of constant expressions (§7.19) that control the behavior of statements,
but the possible values of non-constant expressions are not considered. In
other words, for purposes of control flow analysis, a non-constant expression
of a given type is considered to have any possible value of that type.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; const int i = 1;<br>
&nbsp;&nbsp; if (i == 2) Console.WriteLine("unreachable");<br>
}</p>

<p class="MsoNormal">the boolean expression of the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement is a constant expression
because both operands of the <span class="Codefragment"><span style="font-size:
10.0pt">==</span></span> operator are constants. As the constant expression is
evaluated at compile-time, producing the value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span> invocation is
considered unreachable. However, if <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is changed to be a local variable</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; int i = 1;<br>
&nbsp;&nbsp; if (i == 2) Console.WriteLine("reachable");<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
invocation is considered reachable, even though, in reality, it will never be
executed.</p>

<p class="MsoNormal">The <span class="Production">block</span> of a function member
is always considered reachable. By successively evaluating the reachability
rules of each statement in a block, the reachability of any given statement can
be determined.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">void F(int x) {<br>
&nbsp;&nbsp; Console.WriteLine("start");<br>
&nbsp;&nbsp; if (x &lt; 0) Console.WriteLine("negative");<br>
}</p>

<p class="MsoNormal">the reachability of the second <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span> is determined as
follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The first <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
expression statement is reachable because the block of the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method is
reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The end point of the first <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span> expression statement
is reachable because that statement is reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement is reachable because the end point of the first <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
expression statement is reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The second <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
expression statement is reachable because the boolean expression of the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement
does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">There are two situations in which it is a compile-time error
for the end point of a statement to be reachable:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Because the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement does not permit a switch section to “fall through” to the next switch
section, it is a compile-time error for the end point of the statement list of
a switch section to be reachable. If this error occurs, it is typically an
indication that a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is missing.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for the end point of the block of a
function member that computes a value to be reachable. If this error occurs, it
typically is an indication that a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement is missing.</p>

<h2><a name="_Toc251613209"></a><a name="_Ref460204110">8.2 Blocks</a></h2>

<p class="MsoNormal">A <span class="Production">block</span> permits multiple
statements to be written in contexts where a single statement is allowed.</p>

<p class="Grammar">block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
statement-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">}</span></span></p>

<p class="MsoNormal">A <span class="Production">block</span> consists of an
optional <span class="Production">statement-list</span> (§8.2.1), enclosed in braces. If the statement list is omitted, the block is said to be empty.</p>

<p class="MsoNormal">A block may contain declaration statements (§8.5). The scope of a local variable or constant declared in a block is the block.</p>

<p class="MsoNormal">Within a block, the meaning of a name used in an expression
context must always be the same (§7.6.2.1).</p>

<p class="MsoNormal">A block is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the block is empty, control is transferred to the end point of
the block.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the block is not empty, control is transferred to the
statement list. When and if control reaches the end point of the statement
list, control is transferred to the end point of the block.</p>

<p class="MsoNormal">The statement list of a block is reachable if the block
itself is reachable.</p>

<p class="MsoNormal">The end point of a block is reachable if the block is empty
or if the end point of the statement list is reachable.</p>

<p class="MsoNormal"><a name="_Ref470432618">A </a><span class="Production">block</span>
that contains one or more <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
statements (§8.14) is called an iterator block. Iterator blocks are used to
implement function members as iterators (§10.14). Some additional restrictions
apply to iterator blocks:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement to appear in an iterator
block (but <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statements are permitted).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for an iterator block to contain an
unsafe context (§18.1). An iterator block always defines a safe context, even
when its declaration is nested in an unsafe context.</p>

<h3><a name="_Toc251613210"></a><a name="_Ref174228710"></a><a name="_Ref174228547">8.2.1 Statement lists</a></h3>

<p class="MsoNormal">A <span class="Term">statement list</span> consists of one or
more statements written in sequence. Statement lists occur in <span class="Production">block</span>s (§8.2) and in <span class="Production">switch-block</span>s
(§8.7.2).</p>

<p class="Grammar">statement-list:<br>
statement<br>
statement-list&nbsp;&nbsp; statement</p>

<p class="MsoNormal">A statement list is executed by transferring control to the
first statement. When and if control reaches the end point of a statement,
control is transferred to the next statement. When and if control reaches the
end point of the last statement, control is transferred to the end point of the
statement list.</p>

<p class="MsoNormal">A statement in a statement list is reachable if at least one
of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The statement is the first statement and the statement list
itself is reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The end point of the preceding statement is reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The statement is a labeled statement and the label is referenced
by a reachable <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement.</p>

<p class="MsoNormal">The end point of a statement list is reachable if the end
point of the last statement in the list is reachable.</p>

<h2><a name="_Toc251613211"></a><a name="_Toc445783020">8.3 The empty statement</a></h2>

<p class="MsoNormal">An <span class="Production">empty-statement</span> does
nothing.</p>

<p class="Grammar">empty-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">An empty statement is used when there are no operations to
perform in a context where a statement is required.</p>

<p class="MsoNormal">Execution of an empty statement simply transfers control to
the end point of the statement. Thus, the end point of an empty statement is
reachable if the empty statement is reachable.</p>

<p class="MsoNormal">An empty statement can be used when writing a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement
with a null body:</p>

<p class="Code">bool ProcessMessage() {<span class="Codefragment">...</span>}</p>

<p class="Code">void ProcessMessages() {<br>
&nbsp;&nbsp; while (ProcessMessage())<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ;<br>
}</p>

<p class="MsoNormal">Also, an empty statement can be used to declare a label just
before the closing “<span class="Codefragment"><span style="font-size:10.0pt">}</span></span>”
of a block:</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; <span class="Codefragment">...</span></p>

<p class="Code">&nbsp;&nbsp; if (done) goto exit;<br>
&nbsp;&nbsp; <span class="Codefragment">...</span></p>

<p class="Code">&nbsp;&nbsp; exit: ;<br>
}</p>

<h2><a name="_Toc251613212"></a><a name="_Ref471972610">8.4 Labeled statements</a></h2>

<p class="MsoNormal">A <span class="Production">labeled-statement</span> permits a
statement to be prefixed by a label. Labeled statements are permitted in
blocks, but are not permitted as embedded statements.</p>

<p class="Grammar">labeled-statement:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">:</span></span>&nbsp;&nbsp; statement</p>

<p class="MsoNormal">A labeled statement declares a label with the name given by
the <span class="Production">identifier</span>. The scope of a label is the whole
block in which the label is declared, including any nested blocks. It is a
compile-time error for two labels with the same name to have overlapping
scopes.</p>

<p class="MsoNormal">A label can be referenced from <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statements (§8.9.3) within the scope of the label. This means that <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statements can transfer control within blocks and
out of blocks, but never into blocks.</p>

<p class="MsoNormal">Labels have their own declaration space and do not interfere
with other identifiers. The example</p>

<p class="Code">int F(int x) {<br>
&nbsp;&nbsp; if (x &gt;= 0) goto x;<br>
&nbsp;&nbsp; x = -x;<br>
&nbsp;&nbsp; x: return x;<br>
}</p>

<p class="MsoNormal">is valid and uses the name <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> as both a parameter and a label.<a name="_Toc445783018"></a></p>

<p class="MsoNormal">Execution of a labeled statement corresponds exactly to
execution of the statement following the label.</p>

<p class="MsoNormal">In addition to the reachability provided by normal flow of
control, a labeled statement is reachable if the label is referenced by a
reachable <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement. (Exception: If a <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statement is inside a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> that includes a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
and the labeled statement is outside the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>, and the end point of the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block
is unreachable, then the labeled statement is not reachable from that <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement.)</p>

<h2><a name="_Toc251613213"></a><a name="_Ref469305902">8.5 Declaration
statements</a></h2>

<p class="MsoNormal">A <span class="Production">declaration-statement</span>
declares a local variable or constant. Declaration statements are permitted in
blocks, but are not permitted as embedded statements.</p>

<p class="Grammar">declaration-statement:<br>
local-variable-declaration&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span><br>
local-constant-declaration&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<h3><a name="_Toc251613214"></a><a name="_Ref470933975">8.5.1 Local variable
declarations</a></h3>

<p class="MsoNormal">A <span class="Production">local-variable-declaration</span>
declares one or more local variables.</p>

<p class="Grammar">local-variable-declaration:<br>
local-variable-type &nbsp;&nbsp;local-variable-declarators</p>

<p class="Grammar">local-variable-type:<br>
type<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">var</span></span></p>

<p class="Grammar">local-variable-declarators:<br>
local-variable-declarator<br>
local-variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span> &nbsp;&nbsp;local-variable-declarator</p>

<p class="Grammar">local-variable-declarator:<br>
identifier<br>
identifier&nbsp;&nbsp; = &nbsp;&nbsp;local-variable-initializer</p>

<p class="Grammar">local-variable-initialize<a name="_Toc445783019">r:<br>
expression<br>
array-initializer</a></p>

<p class="MsoNormal">The <span class="Production">local-variable-type</span> of a <span class="Production">local-variable-declaration</span> either directly specifies
the type of the variables introduced by the declaration, or indicates with the identifier
<span class="Codefragment"><span style="font-size:10.0pt">var</span></span> that
the type should be inferred based on an initializer. The type is followed by a list
of <span class="Production">local-variable-declarator</span>s, each of which
introduces a new variable. A <span class="Production">local-variable-declarator</span>
consists of an <span class="Production">identifier</span> that names the
variable, optionally followed by an “<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>” token and a <span class="Production">local-variable-initializer</span>
that gives the initial value of the variable.</p>

<p class="MsoNormal">In the context of a local variable declaration, the
identifier var acts as a contextual keyword (§2.4.3).When the <span class="Production">local-variable-type</span> is specified as <span class="Codefragment"><span style="font-size:10.0pt">var</span></span> and no type
named <span class="Codefragment"><span style="font-size:10.0pt">var</span></span>
is in scope, the declaration is an <span class="Term">implicitly typed local
variable declaration</span>, whose type is inferred from the type of the
associated initializer expression. Implicitly typed local variable declarations
are subject to the following restrictions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">local-variable-declaration</span>
cannot include multiple <span class="Production">local-variable-declarator</span>s.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">local-variable-declarator</span> must
include a <span class="Production">local-variable-initializer</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">local-variable-initializer</span> must
be an <span class="Production">expression</span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The initializer <span class="Production">expression</span> must
have a compile-time type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The initializer <span class="Production">expression</span> cannot
refer to the declared variable itself</p>

<p class="MsoNormal">The following are examples of incorrect implicitly typed
local variable declarations:</p>

<p class="Code">var x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, no initializer to infer type from<br>
var y = {1, 2, 3};&nbsp;&nbsp; // Error, array initializer not permitted<br>
var z = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, null does not have a type<br>
var u = x =&gt; x + 1;&nbsp; // Error, anonymous functions do not have a type<br>
var v = v++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, initializer cannot refer to variable itself</p>

<p class="MsoNormal">The value of a local variable is obtained in an expression
using a <span class="Production">simple-name</span> (§7.6.2), and the value of a
local variable is modified using an <span class="Production">assignment</span> (§7.17). A local variable must be definitely assigned (§5.3) at each location where
its value is obtained.</p>

<p class="MsoNormal">The scope of a local variable declared in a <span class="Production">local-variable-declaration</span> is the block in which the
declaration occurs. It is an error to refer to a local variable in a textual
position that precedes the <span class="Production">local-variable-declarator</span>
of the local variable. Within the scope of a local variable, it is a
compile-time error to declare another local variable or constant with the same
name.</p>

<p class="MsoNormal">A local variable declaration that declares multiple
variables is equivalent to multiple declarations of single variables with the
same type. Furthermore, a variable initializer in a local variable declaration
corresponds exactly to an assignment statement that is inserted immediately
after the declaration.</p>

<p class="MsoNormal">The example</p>

<p class="Code">void F() {<br>
&nbsp;&nbsp; int x = 1, y, z = x * 2;<br>
}</p>

<p class="MsoNormal">corresponds exactly to</p>

<p class="Code"><span lang="FR">void F() {<br>
&nbsp;&nbsp; int x; x = 1;<br>
&nbsp;&nbsp; int y;<br>
&nbsp;&nbsp; int z; z = x * 2;<br>
}</span></p>

<p class="MsoNormal">In an implicitly typed local variable declaration, the type
of the local variable being declared is taken to be the same as the type of the
expression used to initialize the variable. For example:</p>

<p class="Code">var i = 5;<br>
var s = "Hello";<br>
var d = 1.0;<br>
var numbers = new int[] {1, 2, 3};<br>
var orders = new Dictionary&lt;int,Order&gt;();</p>

<p class="MsoNormal">The implicitly typed local variable declarations above are
precisely equivalent to the following explicitly typed declarations:</p>

<p class="Code">int i = 5;<br>
string s = "Hello";<br>
double d = 1.0;<br>
int[] numbers = new int[] {1, 2, 3};<br>
Dictionary&lt;int,Order&gt; orders = new Dictionary&lt;int,Order&gt;();</p>

<h3><a name="_Toc251613215"></a><a name="_Ref516035774">8.5.2 Local constant
declarations</a></h3>

<p class="MsoNormal">A <span class="Production">local-constant-declaration</span>
declares one or more local constants.</p>

<p class="Grammar">local-constant-declaration:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">const</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; constant-declarators</p>

<p class="Grammar">constant-declarators:<br>
constant-declarator<br>
constant-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constant-declarator</p>

<p class="Grammar">constant-declarator:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; constant-expression</p>

<p class="MsoNormal"><a name="_Ref450638231"></a><a name="_Toc445783021">The </a><span class="Production">type</span> of a <span class="Production">local-constant-declaration</span>
specifies the type of the constants introduced by the declaration. The type is
followed by a list of <span class="Production">constant-declarator</span>s, each
of which introduces a new constant. A <span class="Production">constant-declarator</span>
consists of an <span class="Production">identifier</span> that names the constant,
followed by an “<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>”
token, followed by a <span class="Production">constant-expression</span> (§7.19) that gives the value of the constant.</p>

<p class="MsoNormal">The <span class="Production">type</span> and <span class="Production">constant-expression</span> of a local constant declaration
must follow the same rules as those of a constant member declaration (§10.4).</p>

<p class="MsoNormal">The value of a local constant is obtained in an expression
using a <span class="Production">simple-name</span> (§7.6.2).</p>

<p class="MsoNormal">The scope of a local constant is the block in which the
declaration occurs. It is an error to refer to a local constant in a textual
position that precedes its <span class="Production">constant-declarator</span>.
Within the scope of a local constant, it is a compile-time error to declare
another local variable or constant with the same name.</p>

<p class="MsoNormal"><a name="_Ref471189708">A local constant declaration that
declares multiple constants is equivalent to multiple declarations of single
constants with the same type.</a></p>

<h2><a name="_Toc251613216"></a><a name="_Ref512082739"></a><a name="_Ref512082674">8.6 Expression statements</a></h2>

<p class="MsoNormal">An <span class="Production">expression-statement</span>
evaluates a given expression. The value computed by the expression, if any, is
discarded.</p>

<p class="Grammar">expression-statement:<br>
statement-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">statement-expression:<br>
invocation-expression<br>
object-creation-expression<br>
assignment<br>
post-increment-expression<br>
post-decrement-expression<br>
pre-increment-expression<br>
pre-decrement-expression</p>

<p class="MsoNormal">Not all expressions are permitted as statements. In
particular, expressions such as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">==</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> that merely compute a value (which
will be discarded), are not permitted as statements.</p>

<p class="MsoNormal">Execution of an <span class="Production">expression-statement</span>
evaluates the contained expression and then transfers control to the end point
of the <span class="Production">expression-statement</span>. The end point of an <span class="Production">expression-statement</span> is reachable if that <span class="Production">expression-statement</span> is reachable.</p>

<h2><a name="_Toc251613217"></a><a name="_Toc445783022">8.7 Selection
statements</a></h2>

<p class="MsoNormal">Selection statements select one of a number of possible
statements for execution based on the value of some expression.</p>

<p class="Grammar">selection-statement:<br>
if-statement<br>
switch-statement</p>

<h3><a name="_Toc251613218"></a><a name="_Ref470173217"></a><a name="_Toc445783023">8.7.1 The if statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement selects a statement for execution based on the value of a boolean
expression.</p>

<p class="Grammar">if-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">else</span></span>&nbsp;&nbsp;
embedded-statement</p>

<p class="MsoNormal"><a name="_Toc445783024">An </a><span class="Codefragment"><span style="font-size:10.0pt">else</span></span> part is associated with the
lexically nearest preceding <span class="Codefragment"><span style="font-size:
10.0pt">if</span></span> that is allowed by the syntax. Thus, an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement of
the form</p>

<p class="Code">if (x) if (y) F(); else G();</p>

<p class="MsoNormal">is equivalent to</p>

<p class="Code">if (x) {<br>
&nbsp;&nbsp; if (y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; G();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">boolean-expression</span> (§7.20) is evaluated.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the boolean expression yields <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, control is transferred to the
first embedded statement. When and if control reaches the end point of that
statement, control is transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the boolean expression yields <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> and if an <span class="Codefragment"><span style="font-size:10.0pt">else</span></span> part is
present, control is transferred to the second embedded statement. When and if
control reaches the end point of that statement, control is transferred to the
end point of the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the boolean expression yields <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> and if an <span class="Codefragment"><span style="font-size:10.0pt">else</span></span> part is
not present, control is transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement.</p>

<p class="MsoNormal">The first embedded statement of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement is reachable if the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement is
reachable and the boolean expression does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The second embedded statement of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement,
if present, is reachable if the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement is reachable and the
boolean expression does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<p class="MsoNormal">The end point of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span> statement is reachable if the end
point of at least one of its embedded statements is reachable. In addition, the
end point of an <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement with no <span class="Codefragment"><span style="font-size:10.0pt">else</span></span>
part is reachable if the <span class="Codefragment"><span style="font-size:10.0pt">if</span></span>
statement is reachable and the boolean expression does not have the constant
value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<h3><a name="_Toc251613219"></a><a name="_Ref466811765">8.7.2 The switch
statement</a></h3>

<p class="MsoNormal">The switch statement selects for execution a statement list
having an associated switch label that corresponds to the value of the switch
expression.</p>

<p class="Grammar">switch-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">switch</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span>&nbsp;&nbsp; switch-block</p>

<p class="Grammar">switch-block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
switch-sections<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">switch-sections:<br>
switch-section<br>
switch-sections&nbsp;&nbsp; switch-section</p>

<p class="Grammar">switch-section:<br>
switch-labels&nbsp;&nbsp; statement-list</p>

<p class="Grammar">switch-labels:<br>
switch-label<br>
switch-labels&nbsp;&nbsp; switch-label</p>

<p class="Grammar">switch-label:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">case</span></span>&nbsp;&nbsp;
constant-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span></p>

<p class="MsoNormal"><a name="_Toc445783025">A </a><span class="Production">switch-statement</span>
consists of the keyword <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>,
followed by a parenthesized expression (called the switch expression), followed
by a <span class="Production">switch-block</span>. The <span class="Production">switch-block</span>
consists of zero or more <span class="Production">switch-section</span>s,
enclosed in braces. Each <span class="Production">switch-section</span> consists
of one or more <span class="Production">switch-labels</span> followed by a <span class="Production">statement-list</span> (§8.2.1).</p>

<p class="MsoNormal">The <span class="Term">governing type</span> of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is established by the switch expression. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the type of the switch expression is <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, or an<span class="Production">
enum-type</span>, or if it is the nullable type corresponding to one of these
types, then that is the governing type of the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, exactly one user-defined implicit conversion (§6.4) must exist from the type of the switch expression to one of the following
possible governing types: <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, or,&nbsp; a
nullable type corresponding to one of those types. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if no such implicit conversion exists, or if more than
one such implicit conversion exists, a compile-time error occurs.</p>

<p class="MsoNormal">The constant expression of each <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label must denote a value that is
implicitly convertible (§6.1) to the governing type of the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement. A compile-time error occurs if two or more <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> labels in the same <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement specify the same constant value.</p>

<p class="MsoNormal">There can be at most one <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label in a switch statement.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The switch expression is evaluated and converted to the governing
type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If one of the constants specified in a <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label in the same <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is equal to the value of the switch expression, control is
transferred to the statement list following the matched <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If none of the constants specified in <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> labels in the same <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is equal to the value of the switch expression, and if a <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label
is present, control is transferred to the statement list following the <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If none of the constants specified in <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> labels in the same <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is equal to the value of the switch expression, and if no <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label
is present, control is transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement.</p>

<p class="MsoNormal">If the end point of the statement list of a switch section
is reachable, a compile-time error occurs. This is known as the “no fall
through” rule. The example</p>

<p class="Code">switch (i) {<br>
case 0:<br>
&nbsp;&nbsp; CaseZero();<br>
&nbsp;&nbsp; break;<br>
case 1:<br>
&nbsp;&nbsp; CaseOne();<br>
&nbsp;&nbsp; break;<br>
default:<br>
&nbsp;&nbsp; CaseOthers();<br>
&nbsp;&nbsp; break;<br>
}</p>

<p class="MsoNormal">is valid because no switch section has a reachable end
point. Unlike C and C++, execution of a switch section is not permitted to
“fall through” to the next switch section, and the example</p>

<p class="Code">switch (i) {<br>
case 0:<br>
&nbsp;&nbsp; CaseZero();<br>
case 1:<br>
&nbsp;&nbsp; CaseZeroOrOne();<br>
default:<br>
&nbsp;&nbsp; CaseAny();<br>
}</p>

<p class="MsoNormal">results in a compile-time error. When execution of a switch
section is to be followed by execution of another switch section, an explicit <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
statement must be used:</p>

<p class="Code">switch (i) {<br>
case 0:<br>
&nbsp;&nbsp; CaseZero();<br>
&nbsp;&nbsp; goto case 1;<br>
case 1:<br>
&nbsp;&nbsp; CaseZeroOrOne();<br>
&nbsp;&nbsp; goto default;<br>
default:<br>
&nbsp;&nbsp; CaseAny();<br>
&nbsp;&nbsp; break;<br>
}</p>

<p class="MsoNormal">Multiple labels are permitted in a <span class="Production">switch-section</span>.
The example</p>

<p class="Code">switch (i) {<br>
case 0:<br>
&nbsp;&nbsp; CaseZero();<br>
&nbsp;&nbsp; break;<br>
case 1:<br>
&nbsp;&nbsp; CaseOne();<br>
&nbsp;&nbsp; break;<br>
case 2:<br>
default:<br>
&nbsp;&nbsp; CaseTwo();<br>
&nbsp;&nbsp; break;<br>
}</p>

<p class="MsoNormal">is valid. The example does not violate the “no fall through”
rule because the labels <span class="Codefragment"><span style="font-size:10.0pt">case
2:</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">default:</span></span>
are part of the same <span class="Production">switch-section</span>.</p>

<p class="MsoNormal">The “no fall through” rule prevents a common class of bugs
that occur in C and C++ when <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statements are accidentally omitted. In addition,
because of this rule, the switch sections of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement can be arbitrarily
rearranged without affecting the behavior of the statement. For example, the
sections of the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement above can be reversed without affecting the behavior of the
statement:</p>

<p class="Code">switch (i) {<br>
default:<br>
&nbsp;&nbsp; CaseAny();<br>
&nbsp;&nbsp; break;<br>
case 1:<br>
&nbsp;&nbsp; CaseZeroOrOne();<br>
&nbsp;&nbsp; goto default;<br>
case 0:<br>
&nbsp;&nbsp; CaseZero();<br>
&nbsp;&nbsp; goto case 1;<br>
}</p>

<p class="MsoNormal">The statement list of a switch section typically ends in a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">case</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
statement, but any construct that renders the end point of the statement list
unreachable is permitted. For example, a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement controlled by the
boolean expression <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
is known to never reach its end point. Likewise, a <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement always transfers
control elsewhere and never reaches its end point. Thus, the following example
is valid:</p>

<p class="Code">switch (i) {<br>
case 0:<br>
&nbsp;&nbsp; while (true) F();<br>
case 1:<br>
&nbsp;&nbsp; throw new ArgumentException();<br>
case 2:<br>
&nbsp;&nbsp; return;<br>
}</p>

<p class="MsoNormal">The governing type of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement may be the type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>. For
example:</p>

<p class="Code">void DoCommand(string command) {<br>
&nbsp;&nbsp; switch (command.ToLower()) {<br>
&nbsp;&nbsp; case "run":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoRun();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp; case "save":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoSave();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp; case "quit":<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DoQuit();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp; default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InvalidCommand(command);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Like the string equality operators (§7.10.7), the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement is
case sensitive and will execute a given switch section only if the switch
expression string exactly matches a <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label constant. </p>

<p class="MsoNormal">When the governing type of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement is <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, the
value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
is permitted as a case label constant.</p>

<p class="MsoNormal">The <span class="Production">statement-list</span>s of a <span class="Production">switch-block</span> may contain declaration statements (§8.5). The scope of a local variable or constant declared in a switch block is the
switch block.</p>

<p class="MsoNormal">Within a switch block, the meaning of a name used in an
expression context must always be the same (§7.6.2.1).</p>

<p class="MsoNormal">The statement list of a given switch section is reachable if
the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is reachable and at least one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The switch expression is a non-constant value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The switch expression is a constant value that matches a <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label in
the switch section.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The switch expression is a constant value that doesn’t match any <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label, and
the switch section contains the <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A switch label of the switch section is referenced by a reachable
<span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
statement.</p>

<p class="MsoNormal">The end point of a <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement is reachable if at
least one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement contains a reachable <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement that exits the <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is reachable, the switch expression is a non-constant value, and no <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label
is present.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement is reachable, the switch expression is a constant value that doesn’t
match any <span class="Codefragment"><span style="font-size:10.0pt">case</span></span>
label, and no <span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
label is present.</p>

<h2><a name="_Toc251613220">8.8 Iteration statements</a></h2>

<p class="MsoNormal">Iteration statements repeatedly execute an embedded
statement.</p>

<p class="Grammar">iteration-statement:<br>
while-statement<br>
do-statement<br>
for-statement<br>
foreach-statement</p>

<h3><a name="_Toc251613221"></a><a name="_Ref470173230"></a><a name="_Toc445783026">8.8.1 The while statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement conditionally executes an embedded statement zero or more times.</p>

<p class="Grammar">while-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">while</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">boolean-expression</span> (§7.20) is evaluated.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the boolean expression yields <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, control is transferred to the
embedded statement. When and if control reaches the end point of the embedded
statement (possibly from execution of a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span> statement), control is
transferred to the beginning of the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the boolean expression yields <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>, control is transferred to the end
point of the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement.</p>

<p class="MsoNormal">Within the embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement, a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement
(§8.9.1) may be used to transfer control to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement
(thus ending iteration of the embedded statement), and a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement (§8.9.2) may be used to transfer control to the end point of the
embedded statement (thus performing another iteration of the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement).</p>

<p class="MsoNormal">The embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement is reachable if the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement
is reachable and the boolean expression does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The end point of a <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement is reachable if at least
one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement contains a reachable <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement that exits the <span class="Codefragment"><span style="font-size:10.0pt">while</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>
statement is reachable and the boolean expression does not have the constant
value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<h3><a name="_Toc251613222"></a><a name="_Ref470173268"></a><a name="_Toc445783027">8.8.2 The do statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>
statement conditionally executes an embedded statement one or more times.</p>

<p class="Grammar">do-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">do</span></span>&nbsp;&nbsp;
embedded-statement&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">while</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the embedded statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When and if control reaches the end point of the embedded
statement (possibly from execution of a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span> statement), the <span class="Production">boolean-expression</span> (§7.20) is evaluated. If the boolean
expression yields <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>,
control is transferred to the beginning of the <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement. Otherwise, control is
transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement.</p>

<p class="MsoNormal">Within the embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement, a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement
(§8.9.1) may be used to transfer control to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement
(thus ending iteration of the embedded statement), and a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement (§8.9.2) may be used to transfer control to the end point of the
embedded statement.</p>

<p class="MsoNormal">The embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement is reachable if the <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement is
reachable.</p>

<p class="MsoNormal"><a name="_Ref470173280"></a><a name="_Toc445783028">The end
point of a </a><span class="Codefragment"><span style="font-size:10.0pt">do</span></span>
statement is reachable if at least one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>
statement contains a reachable <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement that exits the <span class="Codefragment"><span style="font-size:10.0pt">do</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The end point of the embedded statement is reachable and the
boolean expression does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<h3><a name="_Toc251613223"></a><a name="_Ref472917235">8.8.3 The for statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement evaluates a sequence of initialization expressions and then, while a
condition is true, repeatedly executes an embedded statement and evaluates a
sequence of iteration expressions.</p>

<p class="Grammar">for-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">for</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
for-initializer<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp; for-condition<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp;
for-iterator<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">for-initializer:<br>
local-variable-declaration<br>
statement-expression-list</p>

<p class="Grammar">for-condition:<br>
boolean-expression</p>

<p class="Grammar">for-iterator:<br>
statement-expression-list</p>

<p class="Grammar">statement-expression-list:<br>
statement-expression<br>
statement-expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; statement-expression</p>

<p class="MsoNormal">The <span class="Production">for-initializer</span>, if
present, consists of either a <span class="Production">local-variable-declaration</span>
(§8.5.1) or a list of <span class="Production">statement-expression</span>s (§8.6) separated by commas. The scope of a local variable declared by a <span class="Production">for-initializer</span> starts at the <span class="Production">local-variable-declarator</span>
for the variable and extends to the end of the embedded statement. The scope
includes the <span class="Production">for-condition</span> and the <span class="Production">for-iterator</span>.</p>

<p class="MsoNormal">The <span class="Production">for-condition</span>, if present,
must be a <span class="Production">boolean-expression</span> (§7.20).</p>

<p class="MsoNormal">The <span class="Production">for-iterator</span>, if present,
consists of a list of <span class="Production">statement-expression</span>s (§8.6) separated by commas.</p>

<p class="MsoNormal">A for statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a <span class="Production">for-initializer</span> is present,
the variable initializers or statement expressions are executed in the order
they are written. This step is only performed once.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a <span class="Production">for-condition</span> is present, it
is evaluated.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Production">for-condition</span> is not present
or if the evaluation yields <span class="Codefragment"><span style="font-size:
10.0pt">true</span></span>, control is transferred to the embedded statement.
When and if control reaches the end point of the embedded statement (possibly
from execution of a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement), the expressions of the <span class="Production">for-iterator</span>,
if any, are evaluated in sequence, and then another iteration is performed,
starting with evaluation of the <span class="Production">for-condition</span> in
the step above.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Production">for-condition</span> is present and
the evaluation yields <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>,
control is transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement.</p>

<p class="MsoNormal">Within the embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement, a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement
(§8.9.1) may be used to transfer control to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement
(thus ending iteration of the embedded statement), and a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement (§8.9.2) may be used to transfer control to the end point of the
embedded statement (thus executing the <span class="Production">for-iterator</span>
and performing another iteration of the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement, starting with the <span class="Production">for-condition</span>).</p>

<p class="MsoNormal">The embedded statement of a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement is reachable if one of the
following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement is reachable and no <span class="Production">for-condition</span> is
present.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement is reachable and a <span class="Production">for-condition</span> is
present and does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">The end point of a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement is reachable if at least
one of the following is true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement contains a reachable <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement that exits the <span class="Codefragment"><span style="font-size:10.0pt">for</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
statement is reachable and a <span class="Production">for-condition</span> is
present and does not have the constant value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>.</p>

<h3><a name="_Toc251613224"></a><a name="_Ref174504189"></a><a name="_Ref5416819"></a><a name="_Ref472841558"></a><a name="_Ref462562935"></a><a name="_Toc445783029">8.8.4 The foreach statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement enumerates the elements of a collection, executing an embedded
statement for each element of the collection.</p>

<p class="Grammar">foreach-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">foreach</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
local-variable-type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="MsoNormal">The <span class="Production">type</span> and <span class="Production">identifier</span> of a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statement declare the <span class="Term">iteration variable</span> of the statement. If the <span class="Codefragment"><span style="font-size:10.0pt">var</span></span> identifier
is given as the <span class="Production">local-variable-type</span>, and no type
named <span class="Codefragment"><span style="font-size:10.0pt">var</span></span>
is in scope, the iteration variable is said to be an <span class="Term">implicitly
typed iteration variable</span>, and its type is taken to be the element type
of the <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement, as specified below. The iteration variable corresponds to a
read-only local variable with a scope that extends over the embedded statement.
During execution of a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement, the iteration variable represents the collection element for which
an iteration is currently being performed. A compile-time error occurs if the
embedded statement attempts to modify the iteration variable (via assignment or
the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span>
operators) or pass the iteration variable as a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter.</p>

<p class="MsoNormal">The compile-time processing of a foreach statement first
determines the <span class="Term">collection type</span>, <span class="Term">enumerator
type</span> and <span class="Term">element type</span> of the expression. This
determination proceeds as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
of <span class="Production">expression</span> is an array type then there is an
implicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> to the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span> interface
(since <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
implements this interface). The <span class="Term">collection type</span> is the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span>
interface, the <span class="Term">enumerator type</span> is the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerator</span></span>
interface and the <span class="Term">element type</span> is the element type of
the array type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
of <span class="Production">expression</span> is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> then there is an implicit
conversion from <span class="Production">expression</span> to the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span>
interface (§6.1.8). The <span class="Term">collection type</span> is the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span>
interface and the <span class="Term">enumerator type</span> is the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerator</span></span>
interface. If the <span class="Codefragment"><span style="font-size:10.0pt">var</span></span>
identifier is given as the <span class="Production">local-variable-type</span> then
the <span class="Term">element type</span> is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, otherwise it is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, determine whether the type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> has an appropriate <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Perform member
lookup on the type <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
with identifier <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
and no type arguments. If the member lookup does not produce a match, or it
produces an ambiguity, or produces a match that is not a method group, check
for an enumerable interface as described below. It is recommended that a
warning be issued if member lookup produces anything except a method group or
no match.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Perform
overload resolution using the resulting method group and an empty argument
list. If overload resolution results in no applicable methods, results in an
ambiguity, or results in a single best method but that method is either static
or not public, check for an enumerable interface as described below. It is
recommended that a warning be issued if overload resolution produces anything
except an unambiguous public instance method or no applicable methods.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the return
type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> of
the <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method is not a class, struct or interface type, an error is produced and no
further steps are taken.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Member lookup
is performed on <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
with the identifier <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
and no type arguments. If the member lookup produces no match, the result is an
error, or the result is anything except a public instance property that permits
reading, an error is produced and no further steps are taken.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Member lookup
is performed on <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
with the identifier <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
and no type arguments. If the member lookup produces no match, the result is an
error, or the result is anything except a method group, an error is produced
and no further steps are taken.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Overload
resolution is performed on the method group with an empty argument list. If
overload resolution results in no applicable methods, results in an ambiguity,
or results in a single best method but that method is either static or not
public, or its return type is not <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, an error is produced and no
further steps are taken.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Term">collection type</span> is <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, the <span class="Term">enumerator type</span>
is <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>, and
the <span class="Term">element type</span> is the type of the <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
property.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, check for an enumerable interface:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If there is
exactly one type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
such that there is an implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> to the interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IEnumerable&lt;T&gt;</span></span>,
then the <span class="Term">collection type</span> is this interface, the <span class="Term">enumerator type</span> is the interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IEnumerator&lt;T&gt;</span></span>,
and the <span class="Term">element type</span> is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
there is more than one such type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, then an error is produced and no
further steps are taken.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
there is an implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> to the <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span>
interface, then the <span class="Term">collection type</span> is this interface,
the <span class="Term">enumerator type</span> is the interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerator</span></span>,
and the <span class="Term">element type</span> is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, an
error is produced and no further steps are taken.</p>

<p class="MsoNormal">The above steps, if successful, unambiguously produce a
collection type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>,
enumerator type <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
and element type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
A foreach statement of the form</p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:.25in"><span class="CodeChar"><span style="font-size:10.0pt">foreach (V v in x)</span></span> <span class="Production">embedded-statement</span></p>

<p class="MsoNormal">is then expanded to:</p>

<p class="MsoNormal" style="margin-left:.5in"><span class="CodeChar"><span style="font-size:10.0pt">{<br>
&nbsp;&nbsp; E e = ((C)(x)).GetEnumerator();<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V v;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (e.MoveNext()) {<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v = (V)(T)e.Current;<br>
</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production">embedded-statement</span><br>
<span class="CodeChar"><span style="font-size:10.0pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; … // Dispose e<br>
&nbsp;&nbsp; }<br>
}</span></span></p>

<p class="MsoNormal">The variable <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> is not visible to or accessible to the
expression <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
or the embedded statement or any other source code of the program. The variable
<span class="Codefragment"><span style="font-size:10.0pt">v</span></span> is
read-only in the embedded statement. If there is not an explicit conversion (§6.2) from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
(the element type) to <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
(the <span class="Production">local-variable-type</span> in the foreach
statement), an error is produced and no further steps are taken. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> has the value
<span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown at run-time.</p>

<p class="MsoNormal">An implementation is permitted to implement a given
foreach-statement differently, e.g. for performance reasons, as long as the
behavior is consistent with the above expansion.</p>

<p class="MsoNormal">The body of the finally block is constructed according to
the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If there is an implicit conversion from <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to the <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span> interface, then </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a
non-nullable value type then the finally clause is expanded to the semantic
equivalent of:</p>

<p class="MsoNormal" style="margin-left:.5in"><span class="CodeChar"><span style="font-size:10.0pt">finally {<br>
&nbsp;&nbsp; ((System.IDisposable)e).Dispose();<br>
}</span></span></p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise the
finally clause is expanded to the semantic equivalent of:</p>

<p class="MsoNormal" style="margin-left:.5in"><span class="CodeChar"><span style="font-size:10.0pt">finally {<br>
&nbsp;&nbsp; if (e != null) ((System.IDisposable)e).Dispose();<br>
}</span></span></p>

<p class="MsoNormal" style="margin-left:.25in">except that if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a value
type, or a type parameter instantiated to a value type, then the cast of <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span>
will not cause boxing to occur.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a sealed type, the finally clause is expanded to an
empty block:</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="CodeChar"><span style="font-size:10.0pt">finally {<br>
}</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the finally clause is expanded to:</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="CodeChar"><span style="font-size:10.0pt">finally {<br>
&nbsp;&nbsp; System.IDisposable d = e as System.IDisposable;<br>
&nbsp;&nbsp; if (d != null) d.Dispose();<br>
}</span></span></p>

<p class="MsoListContinue2" style="margin-left:.25in">The local variable <span class="Codefragment"><span style="font-size:10.0pt">d</span></span> is not
visible to or accessible to any user code. In particular, it does not conflict
with any other variable whose scope includes the finally block.</p>

<p class="MsoNormal">The order in which <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> traverses the elements of an
array, is as follows: For single-dimensional arrays elements are traversed in
increasing index order, starting with index&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">0</span></span> and ending with index <span class="Codefragment"><span style="font-size:10.0pt">Length&nbsp;–&nbsp;1</span></span>.
For multi-dimensional arrays, elements are traversed such that the indices of
the rightmost dimension are increased first, then the next left dimension, and
so on to the left.</p>

<p class="MsoNormal">The following example prints out each value in a
two-dimensional array, in element order:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double[,] values = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {1.2, 2.3, 3.4, 4.5},<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {5.6, 6.7, 7.8, 8.9}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (double elementValue in values)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write("{0} ", elementValue);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The output produced is as follows:</p>

<p class="Code">1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9</p>

<p class="MsoNormal"><a name="_Toc445783030">In the example</a></p>

<p class="Code">int[] numbers = { 1, 3, 5, 7, 9 };<br>
foreach (var n in numbers) Console.WriteLine(n);</p>

<p class="MsoNormal">the type of <span class="Codefragment"><span style="font-size:
10.0pt">n</span></span> is inferred to be <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, the element type of <span class="Codefragment"><span style="font-size:10.0pt">numbers</span></span>.</p>

<h2><a name="_Toc251613225">8.9 Jump statements</a></h2>

<p class="MsoNormal">Jump statements unconditionally transfer control.</p>

<p class="Grammar">jump-statement:<br>
break-statement<br>
continue-statement<br>
goto-statement<br>
return-statement<br>
throw-statement</p>

<p class="MsoNormal"><a name="_Ref470868227"></a><a name="_Toc445783031">The
location to which a jump statement transfers control is called the <span class="Term">target</span> of the jump statement.</a></p>

<p class="MsoNormal">When a jump statement occurs within a block, and the target
of that jump statement is outside that block, the jump statement is said to <span class="Term">exit</span> the block. While a jump statement may transfer control
out of a block, it can never transfer control into a block.</p>

<p class="MsoNormal">Execution of jump statements is complicated by the presence
of intervening <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statements. In the absence of such <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements, a jump statement
unconditionally transfers control from the jump statement to its target. In the
presence of such intervening <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statements, execution is more complex. If the jump
statement exits one or more <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks, control is initially
transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
control is transferred to the <span class="Codefragment"><span style="font-size:
10.0pt">finally</span></span> block of the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks of all intervening <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements
have been executed. </p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (true) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Before break");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Innermost finally block");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Outermost finally block");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("After break");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
blocks associated with two <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statements are executed before control is transferred
to the target of the jump statement.</p>

<p class="MsoNormal"><a name="_Ref472917240"></a><a name="_Ref472917238"></a><a name="_Ref472917237"></a><a name="_Ref472917236">The output produced is as
follows:</a></p>

<p class="Code">Before break<br>
Innermost finally block<br>
Outermost finally block<br>
After break</p>

<h3><a name="_Toc251613226"></a><a name="_Ref520439149">8.9.1 The break
statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement exits the nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statement.</p>

<p class="Grammar">break-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">break</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The target of a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement is the end point of the
nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement. If a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is not enclosed by a <span class="Codefragment"><span style="font-size:
10.0pt">switch</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement, a compile-time error occurs.</p>

<p class="MsoNormal">When multiple <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statements are nested within
each other, a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement applies only to the innermost statement. To transfer control across
multiple nesting levels, a <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statement (§8.9.3) must be used.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement cannot exit a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block (§8.10). When a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement occurs within a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the target of the <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement must be within the same <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block; otherwise, a compile-time
error occurs.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><a name="_Ref470868245"></a><a name="_Toc445783032"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the </a><span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement exits one or more <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks, control is initially
transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
control is transferred to the <span class="Codefragment"><span style="font-size:
10.0pt">finally</span></span> block of the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks of all intervening <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements
have been executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the target of the <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement is never reachable.</p>

<h3><a name="_Toc251613227"></a><a name="_Ref472917239">8.9.2 The continue
statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement starts a new iteration of the nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement.</p>

<p class="Grammar">continue-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">continue</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The target of a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span> statement is the end point of
the embedded statement of the nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statement. If a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement is not enclosed by a <span class="Codefragment"><span style="font-size:
10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement, a compile-time error occurs.</p>

<p class="MsoNormal">When multiple <span class="Codefragment"><span style="font-size:10.0pt">while</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">do</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statements are nested within
each other, a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement applies only to the innermost statement. To transfer control across
multiple nesting levels, a <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statement (§8.9.3) must be used.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement cannot exit a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block (§8.10). When a <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement occurs within a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the target of the <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement must be within the same <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block; otherwise a compile-time
error occurs.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement exits one or more <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks, control is initially
transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
control is transferred to the <span class="Codefragment"><span style="font-size:
10.0pt">finally</span></span> block of the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks of all intervening <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements
have been executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the target of the <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>
statement.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">continue</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">continue</span></span> statement is never reachable.</p>

<h3><a name="_Toc251613228"></a><a name="_Ref471805017"></a><a name="_Ref469801291"></a><a name="_Ref466811778"></a><a name="_Toc445783033">8.9.3
The goto statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement transfers control to a statement that is marked by a label.</p>

<p class="Grammar">goto-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">goto</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;<br>
goto</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">case</span></span>&nbsp;&nbsp; constant-expression&nbsp;&nbsp; ;<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">goto</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The target of a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Production">identifier</span>
statement is the labeled statement with the given label. If a label with the
given name does not exist in the current function member, or if the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement
is not within the scope of the label, a compile-time error occurs. This rule
permits the use of a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement to transfer control <em>out of</em> a nested scope, but not <em>into</em>
a nested scope. In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main(string[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[,] table = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {"Red", "Blue", "Green"},<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {"Monday", "Wednesday", "Friday"}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string str in args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int row, colm;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (row = 0; row &lt;= 1; ++row)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (colm = 0; colm &lt;= 2; ++colm)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (str == table[row,colm])<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto done;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} not found", str);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;<br>
&nbsp;&nbsp; done:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Found {0} at [{1}][{2}]", str, row,
colm);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement is used to transfer control out of a nested scope.</p>

<p class="MsoNormal">The target of a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> statement is the statement list in
the immediately enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement (§8.7.2), which contains a <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label with the given constant
value. If the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">case</span></span>
statement is not enclosed by a <span class="Codefragment"><span style="font-size:
10.0pt">switch</span></span> statement, if the <span class="Production">constant-expression</span>
is not implicitly convertible (§6.1) to the governing type of the nearest
enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement, or if the nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span> statement does not contain a <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> label with
the given constant value, a compile-time error occurs.</p>

<p class="MsoNormal">The target of a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> statement is the statement list
in the immediately enclosing <span class="Codefragment"><span style="font-size:
10.0pt">switch</span></span> statement (§8.7.2), which contains a <span class="Codefragment"><span style="font-size:10.0pt">default</span></span> label.
If the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">default</span></span>
statement is not enclosed by a <span class="Codefragment"><span style="font-size:
10.0pt">switch</span></span> statement, or if the nearest enclosing <span class="Codefragment"><span style="font-size:10.0pt">switch</span></span>
statement does not contain a <span class="Codefragment"><span style="font-size:
10.0pt">default</span></span> label, a compile-time error occurs.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement cannot exit a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block (§8.10). When a <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement occurs within a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the target of the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement must be within the same <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block, or otherwise a
compile-time error occurs.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement exits one or more <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks, control is initially
transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
control is transferred to the <span class="Codefragment"><span style="font-size:
10.0pt">finally</span></span> block of the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks of all intervening <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements
have been executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the target of the <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">goto</span></span> statement is never reachable.</p>

<h3><a name="_Toc251613229"></a><a name="_Ref460205009"></a><a name="_Toc445783034">8.9.4 The return statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement returns control to the caller of the function member in which the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement
appears.</p>

<p class="Grammar">return-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return</span></span>&nbsp;&nbsp;
expression<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement with no expression can be used only in a function member that does
not compute a value, that is, a method with the return type <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of
a property or indexer, the <span class="Codefragment"><span style="font-size:
10.0pt">add</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">remove</span></span> accessors of an event, an instance constructor, a
static constructor, or a destructor.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement with an expression can only be used in a function member that
computes a value, that is, a method with a non-void return type, the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of
a property or indexer, or a user-defined operator. An implicit conversion (§6.1) must exist from the type of the expression to the return type of the
containing function member.</p>

<p class="MsoNormal">It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement to appear in a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block
(§8.10).</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement specifies an expression, the expression is evaluated and the
resulting value is converted to the return type of the containing function
member by an implicit conversion. The result of the conversion becomes the
value returned to the caller.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement is enclosed by one or more <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks,
control is initially transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block, control is transferred to
the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the next enclosing <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement. This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks
of all enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statements have been executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is returned to the caller of the containing function member.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">return</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">return</span></span> statement is never reachable.</p>

<h3><a name="_Toc251613230"></a><a name="_Ref486414653"></a><a name="_Ref472867796"></a><a name="_Ref472867618"></a><a name="_Toc445783035">8.9.5
The throw statement</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>
statement throws an exception.</p>

<p class="Grammar">throw-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">throw</span></span>&nbsp;&nbsp;
expression<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>
statement with an expression throws the value produced by evaluating the
expression. The expression must denote a value of the class type <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>,
of a class type that derives from <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span> or of a type parameter
type that has <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>
(or a subclass thereof) as its effective base class. If evaluation of the
expression produces <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>,
a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown instead.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>
statement with no expression can be used only in a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block, in which case that
statement re-throws the exception that is currently being handled by that <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">throw</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">throw</span></span> statement is never reachable.</p>

<p class="MsoNormal">When an exception is thrown, control is transferred to the
first <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause in an enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement that can handle the exception. The process that takes place from the
point of the exception being thrown to the point of transferring control to a
suitable exception handler is known as <span class="Term">exception propagation</span>.
Propagation of an exception consists of repeatedly evaluating the following
steps until a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause that matches the exception is found. In this description, the <span class="Term">throw point</span> is initially the location at which the exception
is thrown.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In the current function member, each <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement that encloses the throw
point is examined. For each statement <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>, starting with the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement
and ending with the outermost <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement, the following steps are evaluated:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> block of <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> encloses the throw
point and if S has one or more <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> clauses, the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clauses are examined in order of
appearance to locate a suitable handler for the exception. The first <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause
that specifies the exception type or a base type of the exception type is considered
a match. A general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause (§8.10) is considered a match for any exception type. If a matching <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause is
located, the exception propagation is completed by transferring control to the
block of that <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
block or a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
block of <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
encloses the throw point and if <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> has a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block, control is transferred to
the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block. If the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block throws another exception, processing of the current exception is
terminated. Otherwise, when control reaches the end point of the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
processing of the current exception is continued.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If an exception handler was not located in the current function
member invocation, the function member invocation is terminated. The steps
above are then repeated for the caller of the function member with a throw
point corresponding to the statement from which the function member was
invoked.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the exception processing terminates all function member
invocations in the current thread, indicating that the thread has no handler
for the exception, then the thread is itself terminated. The impact of such
termination is implementation-defined.</p>

<h2><a name="_Toc251613231"></a><a name="_Ref5416843"></a><a name="_Ref529351732"></a><a name="_Ref513707937"></a><a name="_Ref513539305"></a><a name="_Ref508106422"></a><a name="_Ref507586431"></a><a name="_Ref486767569"></a><a name="_Ref486414635"></a><a name="_Ref472903895"></a><a name="_Toc445783036">8.10
The try statement</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement provides a mechanism for catching exceptions that occur during
execution of a block. Furthermore, the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement provides the ability to
specify a block of code that is always executed when control leaves the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="Grammar">try-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; catch-clauses<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; finally-clause<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; catch-clauses&nbsp;&nbsp; finally-clause</p>

<p class="Grammar">catch-clauses:<br>
specific-catch-clauses&nbsp;&nbsp; general-catch-clause<sub>opt</sub><br>
specific-catch-clauses<sub>opt</sub>&nbsp;&nbsp; general-catch-clause</p>

<p class="Grammar">specific-catch-clauses:<br>
specific-catch-clause<br>
specific-catch-clauses&nbsp;&nbsp; specific-catch-clause</p>

<p class="Grammar">specific-catch-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">catch</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
class-type&nbsp;&nbsp; identifier<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; block</p>

<p class="Grammar">general-catch-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">catch</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">finally-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">finally</span></span>&nbsp;&nbsp;
block</p>

<p class="MsoNormal">There are three possible forms of <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statements:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
block followed by one or more <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> blocks.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
block followed by a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
block followed by one or more <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> blocks followed by a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block.</p>

<p class="MsoNormal">When a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause specifies a <span class="Production">class-type</span>, the type must be <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>,
a type that derives from <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>
or a type parameter type that has <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span> (or a subclass thereof)
as its effective base class.</p>

<p class="MsoNormal">When a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause specifies both a <span class="Production">class-type</span> and an <span class="Production">identifier</span>, an <span class="Term">exception variable</span>
of the given name and type is declared. The exception variable corresponds to a
local variable with a scope that extends over the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block. During execution of the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block,
the exception variable represents the exception currently being handled. For
purposes of definite assignment checking, the exception variable is considered
definitely assigned in its entire scope.</p>

<p class="MsoNormal">Unless a <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> clause includes an exception variable name, it is
impossible to access the exception object in the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause that specifies neither an exception type nor an exception variable name
is called a general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause. A <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement can only have one general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause, and if one is present it
must be the last <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause.</p>

<p class="MsoNormal">Some programming languages may support exceptions that are
not representable as an object derived from <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>, although such
exceptions could never be generated by C# code. A general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause
may be used to catch such exceptions. Thus, a general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause is semantically different
from one that specifies the type <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>, in that the former may
also catch exceptions from other languages.</p>

<p class="MsoNormal">In order to locate a handler for an exception, <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clauses
are examined in lexical order. A compile-time error occurs if a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause
specifies a type that is the same as, or is derived from, a type that was
specified in an earlier <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause for the same <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>.
Without this restriction, it would be possible to write unreachable <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clauses.</p>

<p class="MsoNormal">Within a <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> block, a <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span> statement (§8.9.5) with no expression can be used to re-throw the exception that was caught by the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block.
Assignments to an exception variable do not alter the exception that is
re-thrown.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; G();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Exception in F: " + e.Message);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e = new Exception("F");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // re-throw<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new Exception("G");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Exception in Main: " + e.Message);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the method <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> catches an exception, writes some diagnostic
information to the console, alters the exception variable, and re-throws the
exception. The exception that is re-thrown is the original exception, so the
output produced is:</p>

<p class="Code">Exception in F: G<br>
Exception in Main: G</p>

<p class="MsoNormal">If the first catch block had thrown <span class="Codefragment"><span style="font-size:10.0pt">e</span></span> instead of
rethrowing the current exception, the output produced is would be as follows:</p>

<p class="Code">Exception in F: G<br>
Exception in Main: F</p>

<p class="MsoNormal">It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> statement to transfer control out
of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block. When a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>
statement occurs in a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the target of the statement must be within the same <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block,
or otherwise a compile-time error occurs.</p>

<p class="MsoNormal">It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement to occur in a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> block.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When and if control reaches the end point of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> block:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement
has a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block is executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Control is
transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If an exception is propagated to the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement during execution of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> block:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clauses,
if any, are examined in order of appearance to locate a suitable handler for
the exception. The first <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause that specifies the exception type or a base type of the exception type
is considered a match. A general <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause is considered a match for
any exception type. If a matching <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clause is located:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the matching <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> clause declares an exception variable, the
exception object is assigned to the exception variable.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is transferred to the matching <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When and if control reaches the end point of the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block:</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement
has a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block is executed.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Control is
transferred to the end point of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If an exception is propagated to the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement during execution of the <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> block:</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement
has a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block is executed.</p>

<p class="MsoListBullet4"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The exception
is propagated to the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement
has no <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clauses or if no <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause matches the exception:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement has a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block, the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block is executed.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The exception is propagated to the next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="MsoNormal">The statements of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block are always executed when
control leaves a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. This is true whether the control transfer occurs as a result of
normal execution, as a result of executing a <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">continue</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement, or as a result of
propagating an exception out of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.</p>

<p class="MsoNormal">If an exception is thrown during execution of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block, and
is not caught within the same finally block, the exception is propagated to the
next enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement. If another exception was in the process of being propagated, that
exception is lost. The process of propagating an exception is discussed further
in the description of the <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>
statement (§8.9.5).</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
block of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement is reachable if the <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement is reachable.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
block of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement is reachable if the <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement is reachable.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement is reachable if the <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement is reachable.</p>

<p class="MsoNormal">The end point of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement is reachable if both of
the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The end point of the <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> block is reachable or the end point
of at least one <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
block is reachable.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block is present, the end point of the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block is reachable.</p>

<h2><a name="_Toc251613232"></a><a name="_Ref467235576">8.11 The checked and
unchecked statements</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
statements are used to control the <span class="Term">overflow checking context</span>
for integral-type arithmetic operations and conversions.</p>

<p class="Grammar">checked-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">checked</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">unchecked-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unchecked</span></span>&nbsp;&nbsp;
block</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
statement causes all expressions in the <span class="Production">block</span> to
be evaluated in a checked context, and the <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> statement causes all
expressions in the <span class="Production">block</span> to be evaluated in an
unchecked context.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span>
statements are precisely equivalent to the <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">unchecked</span></span> operators (§7.6.12), except that they operate on blocks instead of expressions.</p>

<h2><a name="_Toc251613233"></a><a name="_Ref513710774">8.12 The lock statement</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span>
statement obtains the mutual-exclusion lock for a given object, executes a
statement, and then releases the lock.</p>

<p class="Grammar">lock-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">lock</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="MsoNormal">The expression of a <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span> statement must denote a value of a
type known to be a <span class="Production">reference-type</span>. No implicit
boxing conversion (§6.1.7) is ever performed for the expression of a <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span> statement,
and thus it is a compile-time error for the expression to denote a value of a <span class="Production">value-type</span>.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">lock</span></span>
statement of the form</p>

<p class="Code">lock (x) <span class="Codefragment">...</span></p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
is an expression of a <span class="Production">reference-type</span>, is
precisely equivalent to</p>

<p class="Code">System.Threading.Monitor.Enter(x);<br>
try {<br>
&nbsp;&nbsp; <span class="Codefragment">...</span><br>
}<br>
finally {<br>
&nbsp;&nbsp; System.Threading.Monitor.Exit(x);<br>
}</p>

<p class="MsoNormal">except that <span class="Codefragment"><span style="font-size:
10.0pt">x</span></span> is only evaluated once.</p>

<p class="MsoNormal">While a mutual-exclusion lock is held, code executing in the
same execution thread can also obtain and release the lock. However, code
executing in other threads is blocked from obtaining the lock until the lock is
released.</p>

<p class="MsoNormal">Locking <span class="Codefragment"><span style="font-size:
10.0pt">System.Type</span></span> objects in order to synchronize access to
static data is not recommended.&nbsp; Other code might lock on the same type, which can
result in deadlock. A better approach is to synchronize access to static data
by locking a private static object. For example:</p>

<p class="Code">class Cache<br>
{<br>
&nbsp;&nbsp; private static readonly object synchronizationObject = new object();</p>

<p class="Code">&nbsp;&nbsp; public static void Add(object x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock (Cache.synchronizationObject) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Codefragment">...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static void Remove(object x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock (Cache.synchronizationObject) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Codefragment">...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h2><a name="_Toc251613234"></a><a name="_Ref174221096">8.13 The using
statement</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement obtains one or more resources, executes a statement, and then
disposes of the resource.</p>

<p class="Grammar">using-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;&nbsp;
resource-acquisition&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">resource-acquisition:<br>
local-variable-declaration<br>
expression</p>

<p class="MsoNormal">A <span class="Term">resource</span> is a class or struct that
implements <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span>,
which includes a single parameterless method named <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>. Code that is using a resource
can call <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
to indicate that the resource is no longer needed. If <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span> is not called, then automatic
disposal eventually occurs as a consequence of garbage collection.</p>

<p class="MsoNormal">If the form of <span class="Production">resource-acquisition</span>
is <span class="Production">local-variable-declaration</span> then the type of
the <span class="Production">local-variable-declaration</span> must be either <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> or a
type that can be implicitly converted to <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span>. If the form of <span class="Production">resource-acquisition</span> is <span class="Production">expression</span>
then this expression must be implicitly convertible to <span class="Codefragment"><span style="font-size:10.0pt">System.IDisposable</span></span>.</p>

<p class="MsoNormal">Local variables declared in a <span class="Production">resource-acquisition</span>
are read-only, and must include an initializer. A compile-time error occurs if
the embedded statement attempts to modify these local variables (via assignment
or the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span>
operators) , take the address of them, or pass them as <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement is translated into three parts: acquisition, usage, and disposal.
Usage of the resource is implicitly enclosed in a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement that includes a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> clause.
This <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
clause disposes of the resource. If a <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> resource is acquired, then no call
to <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
is made, and no exception is thrown. If the resource is of type <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span> it is
dynamically converted through an implicit dynamic conversion (§6.1.8) to <span class="Codefragment"><span style="font-size:10.0pt">IDisposable</span></span>
during acquisition in order to ensure that the conversion is successful before
the usage and disposal.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement of the form</p>

<p class="Code">using (ResourceType resource = expression) statement</p>

<p class="MsoNormal">corresponds to one of three possible expansions. When <span class="Codefragment"><span style="font-size:10.0pt">ResourceType</span></span> is
a non-nullable value type, the expansion is</p>

<p class="Code">{<br>
&nbsp;&nbsp; ResourceType resource = expression;<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement;<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IDisposable)resource).Dispose();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Otherwise, when <span class="Codefragment"><span style="font-size:10.0pt">ResourceType</span></span> is a nullable value type or
a reference type other than <span class="Codefragment"><span style="font-size:
10.0pt">dynamic</span></span>, the expansion is</p>

<p class="Code">{<br>
&nbsp;&nbsp; ResourceType resource = expression;<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement;<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (resource != null) ((IDisposable)resource).Dispose();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Otherwise, when <span class="Codefragment"><span style="font-size:10.0pt">ResourceType</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">dynamic</span></span>, the
expansion is</p>

<p class="Code">{<br>
&nbsp;&nbsp; ResourceType resource = expression;<br>
&nbsp;&nbsp; IDisposable d = (IDisposable)resource;<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement;<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (d != null) d.Dispose();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In either expansion, the <span class="Codefragment"><span style="font-size:10.0pt">resource</span></span> variable is read-only in the
embedded statement, and the <span class="Codefragment"><span style="font-size:
10.0pt">d</span></span> variable is inaccessible in, and invisible to, the
embedded statement.</p>

<p class="MsoNormal">An implementation is permitted to implement a given
using-statement differently, e.g. for performance reasons, as long as the
behavior is consistent with the above expansion.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statement of the form</p>

<p class="Code">using (expression) statement</p>

<p class="MsoNormal">has the same three possible expansions, but in this case <span class="Codefragment"><span style="font-size:10.0pt">ResourceType</span></span> is
implicitly the compile-time type of the <span class="Codefragment"><span style="font-size:10.0pt">expression</span></span>, and the <span class="Codefragment"><span style="font-size:10.0pt">resource</span></span>
variable is inaccessible in, and invisible to, the embedded statement.</p>

<p class="MsoNormal">When a <span class="Production">resource-acquisition</span>
takes the form of a <span class="Production">local-variable-declaration</span>,
it is possible to acquire multiple resources of a given type. A <span class="Codefragment"><span style="font-size:10.0pt">using</span></span> statement
of the form</p>

<p class="Code">using (ResourceType r1 = e1, r2 = e2, ..., rN = eN) statement</p>

<p class="MsoNormal">is precisely equivalent to a sequence of nested <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statements:</p>

<p class="Code">using (ResourceType r1 = e1)<br>
&nbsp;&nbsp; using (ResourceType r2 = e2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (ResourceType rN = eN)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; statement</p>

<p class="MsoNormal">The example below creates a file named <span class="Codefragment"><span style="font-size:10.0pt">log.txt</span></span> and
writes two lines of text to the file. The example then opens that same file for
reading and copies the contained lines of text to the console.</p>

<p class="Code">using System;<br>
using System.IO;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (TextWriter w = File.CreateText("log.txt")) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w.WriteLine("This is line one");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; w.WriteLine("This is line two");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using (TextReader r = File.OpenText("log.txt")) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while ((s = r.ReadLine()) != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Since the <span class="Codefragment"><span style="font-size:
10.0pt">TextWriter</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">TextReader</span></span> classes implement the <span class="Codefragment"><span style="font-size:10.0pt">IDisposable</span></span>
interface, the example can use <span class="Codefragment"><span style="font-size:
10.0pt">using</span></span> statements to ensure that the underlying file is
properly closed following the write or read operations.</p>

<h2><a name="_Toc251613235"></a><a name="_Ref174231426"></a><a name="_Ref174231418"></a><a name="_Ref174228587">8.14 The yield statement</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
statement is used in an iterator block (§8.2) to yield a value to the
enumerator object (§10.14.4) or enumerable object (§10.14.5) of an iterator or
to signal the end of the iteration.</p>

<p class="Grammar">yield-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">yield</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">yield</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">break</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
is not a reserved word; it has special meaning only when used immediately
before a <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
keyword. In other contexts, <span class="Codefragment"><span style="font-size:
10.0pt">yield</span></span> can be used as an identifier.</p>

<p class="MsoNormal">There are several restrictions on where a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> statement
can appear, as described in the following.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> statement (of either form) to
appear outside a <span class="Production">method-body</span>, <span class="Production">operator-body</span> or <span class="Production">accessor-body</span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> statement (of either form) to
appear inside an anonymous function.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> statement (of either form) to
appear in the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
clause of a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement to appear anywhere in a
<span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement that contains any <span class="Codefragment"><span style="font-size:
10.0pt">catch</span></span> clauses.</p>

<p class="MsoNormal">The following example shows some valid and invalid uses of <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
statements.</p>

<p class="Code">delegate IEnumerable&lt;int&gt; D();</p>

<p class="Code">IEnumerator&lt;int&gt; GetEnumerator() {<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return 2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, yield in finally<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, yield in finally<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, yield return in try...catch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; catch {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return 4;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, yield return in try...catch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; D d = delegate { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield return 5; &nbsp;&nbsp;&nbsp;&nbsp; // Error, yield in an anonymous function<br>
&nbsp;&nbsp; }; <br>
}</p>

<p class="Code">int MyMethod() {<br>
&nbsp;&nbsp; yield return 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, wrong return type for an iterator block<br>
}</p>

<p class="MsoNormal">An implicit conversion (§6.1) must exist from the type of
the expression in the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement to the yield type (§10.14.3) of the iterator.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement
is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The expression given in the statement is evaluated, implicitly
converted to the yield type, and assigned to the <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span> property of the enumerator
object.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Execution of the iterator block is suspended. If the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement
is within one or more <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
blocks, the associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
blocks are <em>not</em> executed at this time.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method of the enumerator object returns <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> to its caller, indicating that the
enumerator object successfully advanced to the next item.</p>

<p class="MsoNormal">The next call to the enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method
resumes execution of the iterator block from where it was last suspended.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is executed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is enclosed by one or more <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> blocks with associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks,
control is initially transferred to the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block of the innermost <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement.
When and if control reaches the end point of a <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> block, control is transferred to
the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
block of the next enclosing <span class="Codefragment"><span style="font-size:
10.0pt">try</span></span> statement. This process is repeated until the <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks
of all enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statements have been executed.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Control is returned to the caller of the iterator block. This is
either the <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method or <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
method of the enumerator object.</p>

<p class="MsoNormal">Because a <span class="Codefragment"><span style="font-size:
10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement unconditionally transfers control
elsewhere, the end point of a <span class="Codefragment"><span style="font-size:
10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">break</span></span> statement is never reachable.</p>

<h1><a name="_Toc251613236"></a><a name="_Ref463364503"></a><a name="_Ref461619842"></a><a name="_Toc451394290">9. Namespaces</a></h1>

<p class="MsoNormal">C# programs are organized using namespaces. Namespaces are
used both as an “internal” organization system for a program, and as an
“external” organization system—a way of presenting program elements that are
exposed to other programs.</p>

<p class="MsoNormal">Using directives (§9.4) are provided to facilitate the use
of namespaces.</p>

<h2><a name="_Toc251613237"></a><a name="_Ref465151345">9.1 Compilation units</a></h2>

<p class="MsoNormal">A <span class="Production">compilation-unit</span> defines the
overall structure of a source file. A compilation unit consists of zero or more
<span class="Production">using-directive</span>s followed by zero or more <span class="Production">global-attributes</span> followed by zero or more <span class="Production">namespace-member-declaration</span>s.</p>

<p class="Grammar">compilation-unit:<br>
extern-alias-directives<sub>opt</sub>&nbsp;&nbsp; using-directives<sub>opt</sub>&nbsp;
global-attributes<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; namespace-member-declarations<sub>opt</sub></p>

<p class="MsoNormal">A C# program consists of one or more compilation units, each
contained in a separate source file. When a C# program is compiled, all of the
compilation units are processed together. Thus, compilation units can depend on
each other, possibly in a circular fashion.</p>

<p class="MsoNormal">The <span class="Production">using-directives</span> of a
compilation unit affect the <span class="Production">global-attributes</span> and
<span class="Production">namespace-member-declarations</span> of that compilation
unit, but have no effect on other compilation units.</p>

<p class="MsoNormal">The <span class="Production">global-attributes</span> (§17) of a compilation unit permit the specification of attributes for the target
assembly and module. Assemblies and modules act as physical containers for
types. An assembly may consist of several physically separate modules.</p>

<p class="MsoNormal">The <span class="Production">namespace-member-declarations</span>
of each compilation unit of a program contribute members to a single
declaration space called the global namespace. For example:</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">A.cs</span></span>:</p>

<p class="Code">class A {}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">B.cs</span></span>:</p>

<p class="Code">class B {}</p>

<p class="MsoNormal">The two compilation units contribute to the single global
namespace, in this case declaring two classes with the fully qualified names <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>. Because the
two compilation units contribute to the same declaration space, it would have
been an error if each contained a declaration of a member with the same name.</p>

<h2><a name="_Toc251613238"></a><a name="_Ref451305536">9.2 Namespace
declarations</a></h2>

<p class="MsoNormal">A <span class="Production">namespace-declaration</span>
consists of the keyword <span class="Codefragment"><span style="font-size:10.0pt">namespace</span></span>,
followed by a namespace name and body, optionally followed by a semicolon.</p>

<p class="Grammar">namespace-declaration:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">namespace</span></span>&nbsp;&nbsp;
qualified-identifier&nbsp;&nbsp; namespace-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="Grammar">qualified-identifier:<br>
identifier<br>
qualified-identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">namespace-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
extern-alias-directives<sub>opt</sub>&nbsp;&nbsp; using-directives<sub>opt</sub>&nbsp;&nbsp;
namespace-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="MsoNormal">A <span class="Production">namespace-declaration</span> may
occur as a top-level declaration in a <span class="Production">compilation-unit</span>
or as a member declaration within another <span class="Production">namespace-declaration</span>.
When a <span class="Production">namespace-declaration</span> occurs as a top-level
declaration in a <span class="Production">compilation-unit</span>, the namespace
becomes a member of the global namespace. When a <span class="Production">namespace-declaration</span>
occurs within another <span class="Production">namespace-declaration</span>, the
inner namespace becomes a member of the outer namespace. In either case, the name
of a namespace must be unique within the containing namespace.</p>

<p class="MsoNormal">Namespaces are implicitly <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> and the declaration of a
namespace cannot include any access modifiers.</p>

<p class="MsoNormal">Within a <span class="Production">namespace-body</span>, the
optional <span class="Production">using-directives</span> import the names of
other namespaces and types, allowing them to be referenced directly instead of
through qualified names. The optional <span class="Production">namespace-member-declarations</span>
contribute members to the declaration space of the namespace. Note that all <span class="Production">using-directives</span> must appear before any member
declarations.</p>

<p class="MsoNormal">The <span class="Production">qualified-identifier</span> of a <span class="Production">namespace-declaration</span> may be a single identifier or a
sequence of identifiers separated by “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>” tokens. The latter form permits a
program to define a nested namespace without lexically nesting several
namespace declarations. For example,</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}</p>

<p class="Code">&nbsp;&nbsp; class B {}<br>
}</p>

<p class="MsoNormal">is semantically equivalent to</p>

<p class="Code">namespace N1<br>
{<br>
&nbsp;&nbsp; namespace N2<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class A {}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class B {}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Namespaces are open-ended, and two namespace declarations
with the same fully qualified name contribute to the same declaration space (§3.3). In the example</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class B {}<br>
}</p>

<p class="MsoNormal">the two namespace declarations above contribute to the same
declaration space, in this case declaring two classes with the fully qualified
names <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.B</span></span>.
Because the two declarations contribute to the same declaration space, it would
have been an error if each contained a declaration of a member with the same
name.</p>

<h2><a name="_Ref451227325"></a><a name="_Ref516035440"></a><a name="_Toc251613239"></a><a name="_Toc111395414"></a><a name="_Ref71607784">9.3
Extern aliases</a></h2>

<p class="MsoNormal">An <span class="Production">extern-alias-directive</span>
introduces an identifier that serves as an alias for a namespace. The
specification of the aliased namespace is external to the source code of the program
and applies also to nested namespaces of the aliased namespace.</p>

<p class="Grammar">extern-alias-directives:<br>
extern-alias-directive<br>
extern-alias-directives&nbsp;&nbsp; extern-alias-directive</p>

<p class="Grammar">extern-alias-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">alias</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="MsoNormal">The scope of an <span class="Production">extern-alias-directive</span>
extends over the <span class="Production">using-directives</span>, <span class="Production">global-attributes</span> and <span class="Production">namespace-member-declarations</span>
of its immediately containing compilation unit or namespace body. </p>

<p class="MsoNormal">Within a compilation unit or namespace body that contains an
<span class="Production">extern-alias-directive</span>, the identifier introduced
by the <span class="Production">extern-alias-directive</span> can be used to
reference the aliased namespace. It is a compile-time error for the <span class="Production">identifier</span> to be the word <span class="Codefragment"><span style="font-size:10.0pt">global</span></span>.</p>

<p class="MsoNormal">An <span class="Production">extern-alias-directive</span>
makes an alias available within a particular compilation unit or namespace
body, but it does not contribute any new members to the underlying declaration
space. In other words, an <span class="Production">extern-alias-directive</span> is
not transitive, but, rather, affects only the compilation unit or namespace body
in which it occurs.</p>

<p class="MsoNormal">The following program declares and uses two extern aliases, <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>, each of
which represent the root of a distinct namespace hierarchy:</p>

<p class="Code">extern alias X;<br>
extern alias Y;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; X::N.A a;<br>
&nbsp;&nbsp; X::N.B b1;<br>
&nbsp;&nbsp; Y::N.B b2;<br>
&nbsp;&nbsp; Y::N.C c;<br>
}</p>

<p class="MsoNormal">The program declares the existence of the extern aliases <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>, but the
actual definitions of the aliases are external to the program. The identically
named <span class="Codefragment"><span style="font-size:10.0pt">N.B</span></span>
classes can now be referenced as <span class="Codefragment"><span style="font-size:10.0pt">X.N.B</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Y.N.B</span></span>, or, using the namespace alias
qualifier, <span class="Codefragment"><span style="font-size:10.0pt">X::N.B</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Y::N.B</span></span>.
An error occurs if a program declares an extern alias for which no external
definition is provided.</p>

<h2><a name="_Toc251613240"></a><a name="_Ref174229881"></a><a name="_Ref174228971"></a><a name="_Ref174220479">9.4 Using directives</a></h2>

<p class="MsoNormal"><span class="Term">Using directives</span> facilitate the use
of namespaces and types defined in other namespaces. Using directives impact
the name resolution process of <span class="Production">namespace-or-type-name</span>s
(§3.8) and <span class="Production">simple-name</span>s (§7.6.2), but unlike declarations, using directives do not contribute new members to the underlying
declaration spaces of the compilation units or namespaces within which they are
used.</p>

<p class="Grammar">using-directives:<br>
using-directive<br>
using-directives&nbsp;&nbsp; using-directive</p>

<p class="Grammar">using-directive:<br>
using-alias-directive<br>
using-namespace-directive</p>

<p class="MsoNormal">A <span class="Production">using-alias-directive</span> (§9.4.1) introduces an alias for a namespace or type.</p>

<p class="MsoNormal">A <span class="Production">using-namespace-directive</span> (§9.4.2) imports the type members of a namespace.</p>

<p class="MsoNormal">The scope of a <span class="Production">using-directive</span>
extends over the <span class="Production">namespace-member-declarations</span> of
its immediately containing compilation unit or namespace body. The scope of a <span class="Production">using-directive</span> specifically does not include its peer <span class="Production">using-directive</span>s. Thus, peer <span class="Production">using-directive</span>s
do not affect each other, and the order in which they are written is
insignificant.</p>

<h3><a name="_Toc251613241"></a><a name="_Ref451254542">9.4.1 Using alias
directives</a></h3>

<p class="MsoNormal">A <span class="Production">using-alias-directive</span>
introduces an identifier that serves as an alias for a namespace or type within
the immediately enclosing compilation unit or namespace body.</p>

<p class="Grammar">using-alias-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; namespace-or-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">Within member declarations in a compilation unit or
namespace body that contains a <span class="Production">using-alias-directive</span>,
the identifier introduced by the <span class="Production">using-alias-directive</span>
can be used to reference the given namespace or type. For example:</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using A = N1.N2.A;</p>

<p class="Code">&nbsp;&nbsp; class B: A {}<br>
}</p>

<p class="MsoNormal">Above, within member declarations in the <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span> namespace, <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an alias
for <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>,
and thus class <span class="Codefragment"><span style="font-size:10.0pt">N3.B</span></span>
derives from class <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>.
The same effect can be obtained by creating an alias <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> for <span class="Codefragment"><span style="font-size:10.0pt">N1.N2</span></span> and then referencing <span class="Codefragment"><span style="font-size:10.0pt">R.A</span></span>:</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using R = N1.N2;</p>

<p class="Code">&nbsp;&nbsp; class B: R.A {}<br>
}</p>

<p class="MsoNormal">The <span class="Production">identifier</span> of a <span class="Production">using-alias-directive</span> must be unique within the
declaration space of the compilation unit or namespace that immediately
contains the <span class="Production">using-alias-directive</span>. For example:</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using A = N1.N2.A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, A already exists<br>
}</p>

<p class="MsoNormal">Above, <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span>
already contains a member <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
so it is a compile-time error for a <span class="Production">using-alias-directive</span>
to use that identifier. Likewise, it is a compile-time error for two or more <span class="Production">using-alias-directive</span>s in the same compilation unit or
namespace body to declare aliases by the same name.</p>

<p class="MsoNormal">A <span class="Production">using-alias-directive</span> makes
an alias available within a particular compilation unit or namespace body, but
it does not contribute any new members to the underlying declaration space. In
other words, a <span class="Production">using-alias-directive</span> is not
transitive but rather affects only the compilation unit or namespace body in
which it occurs. In the example</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using R = N1.N2;<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; class B: R.A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, R unknown<br>
}</p>

<p class="MsoNormal">the scope of the <span class="Production">using-alias-directive</span>
that introduces <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
only extends to member declarations in the namespace body in which it is
contained, so <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
is unknown in the second namespace declaration. However, placing the <span class="Production">using-alias-directive</span> in the containing compilation
unit causes the alias to become available within both namespace declarations:</p>

<p class="Code">using R = N1.N2;</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; class B: R.A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; class C: R.A {}<br>
}</p>

<p class="MsoNormal">Just like regular members, names introduced by <span class="Production">using-alias-directive</span>s are hidden by similarly named
members in nested scopes. In the example</p>

<p class="Code">using R = N1.N2;</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; class R {}</p>

<p class="Code">&nbsp;&nbsp; class B: R.A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, R has no member A<br>
}</p>

<p class="MsoNormal">the reference to <span class="Codefragment"><span style="font-size:10.0pt">R.A</span></span> in the declaration of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> causes a
compile-time error because <span class="Codefragment"><span style="font-size:
10.0pt">R</span></span> refers to <span class="Codefragment"><span style="font-size:10.0pt">N3.R</span></span>, not <span class="Codefragment"><span style="font-size:10.0pt">N1.N2</span></span>.</p>

<p class="MsoNormal">The order in which <span class="Production">using-alias-directive</span>s
are written has no significance, and resolution of the <span class="Production">namespace-or-type-name</span>
referenced by a <span class="Production">using-alias-directive</span> is not
affected by the <span class="Production">using-alias-directive</span> itself or
by other <span class="Production">using-directive</span>s in the immediately
containing compilation unit or namespace body. In other words, the <span class="Production">namespace-or-type-name</span> of a <span class="Production">using-alias-directive</span>
is resolved as if the immediately containing compilation unit or namespace body
had no <span class="Production">using-directive</span>s. A <span class="Production">using-alias-directive</span> may however be affected by <span class="Production">extern-alias-directives</span> in the immediately containing
compilation unit or namespace body. In the example</p>

<p class="Code">namespace N1.N2 {}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; extern alias E;</p>

<p class="Code">&nbsp;&nbsp; using R1 = E.N;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // OK</p>

<p class="Code">&nbsp;&nbsp; using R2 = N1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // OK</p>

<p class="Code">&nbsp;&nbsp; using R3 = N1.N2;&nbsp;&nbsp;&nbsp; // OK</p>

<p class="Code">&nbsp;&nbsp; using R4 = R2.N2;&nbsp;&nbsp;&nbsp; // Error, R2 unknown<br>
}</p>

<p class="MsoNormal">the last <span class="Production">using-alias-directive</span>
results in a compile-time error because it is not affected by the first <span class="Production">using-alias-directive</span>. The first <span class="Production">using-alias-directive</span> does not result in an error since
the scope of the extern alias <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> includes the <span class="Production">using-alias-directive</span>.</p>

<p class="MsoNormal">A <span class="Production">using-alias-directive</span> can
create an alias for any namespace or type, including the namespace within which
it appears and any namespace or type nested within that namespace.</p>

<p class="MsoNormal">Accessing a namespace or type through an alias yields
exactly the same result as accessing that namespace or type through its
declared name. For example, given</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using R1 = N1;<br>
&nbsp;&nbsp; using R2 = N1.N2;</p>

<p class="Code">&nbsp;&nbsp; class B<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N1.N2.A a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refers to N1.N2.A<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R1.N2.A b;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refers to N1.N2.A<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; R2.A c;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refers to N1.N2.A<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the names <span class="Codefragment"><span style="font-size:
10.0pt">N1.N2.A</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">R1.N2.A</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">R2.A</span></span> are equivalent and all refer to the
class whose fully qualified name is <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>.</p>

<p class="MsoNormal">Using aliases can name a closed constructed type, but cannot
name an unbound generic type declaration without supplying type arguments. For
example:</p>

<p class="Code">namespace N1<br>
{<br>
&nbsp;&nbsp; class A&lt;T&gt;<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class B {}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace N2<br>
{<br>
&nbsp;&nbsp; using W = N1.A;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // Error, cannot name unbound generic type</p>

<p class="Code">&nbsp;&nbsp; using X = N1.A.B;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot name unbound generic
type</p>

<p class="Code">&nbsp;&nbsp; using Y = N1.A&lt;int&gt;;&nbsp;&nbsp;&nbsp; // Ok, can name closed
constructed type</p>

<p class="Code">&nbsp;&nbsp; using Z&lt;T&gt; = N1.A&lt;T&gt;;&nbsp;&nbsp; // Error, using alias
cannot have type parameters<br>
<span lang="PL">}</span></p>

<h3><a name="_Toc251613242"></a><a name="_Ref451254556">9.4.2 Using namespace
directives</a></h3>

<p class="MsoNormal">A <span class="Production">using-namespace-directive</span>
imports the types contained in a namespace into the immediately enclosing
compilation unit or namespace body, enabling the identifier of each type to be
used without qualification.</p>

<p class="Grammar">using-namespace-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
namespace-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="MsoNormal">Within member declarations in a compilation unit or
namespace body that contains a <span class="Production">using-namespace-directive</span>,
the types contained in the given namespace can be referenced directly. For
example:</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using N1.N2;</p>

<p class="Code">&nbsp;&nbsp; class B: A {}<br>
}</p>

<p class="MsoNormal">Above, within member declarations in the <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span> namespace,
the type members of <span class="Codefragment"><span style="font-size:10.0pt">N1.N2</span></span>
are directly available, and thus class <span class="Codefragment"><span style="font-size:10.0pt">N3.B</span></span> derives from class <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>.</p>

<p class="MsoNormal">A <span class="Production">using-namespace-directive</span>
imports the types contained in the given namespace, but specifically does not
import nested namespaces. In the example</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using N1;</p>

<p class="Code">&nbsp;&nbsp; class B: N2.A {}&nbsp;&nbsp;&nbsp;&nbsp; // Error, N2 unknown<br>
}</p>

<p class="MsoNormal">the <span class="Production">using-namespace-directive</span>
imports the types contained in <span class="Codefragment"><span style="font-size:
10.0pt">N1</span></span>, but not the namespaces nested in <span class="Codefragment"><span style="font-size:10.0pt">N1</span></span>. Thus, the
reference to <span class="Codefragment"><span style="font-size:10.0pt">N2.A</span></span>
in the declaration of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
results in a compile-time error because no members named <span class="Codefragment"><span style="font-size:10.0pt">N2</span></span> are in
scope.</p>

<p class="MsoNormal">Unlike a <span class="Production">using-alias-directive</span>,
a <span class="Production">using-namespace-directive</span> may import types
whose identifiers are already defined within the enclosing compilation unit or
namespace body. In effect, names imported by a <span class="Production">using-namespace-directive</span>
are hidden by similarly named members in the enclosing compilation unit or
namespace body. For example:</p>

<p class="Code">namespace N1.N2<br>
{<br>
&nbsp;&nbsp; class A {}</p>

<p class="Code">&nbsp;&nbsp; class B {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using N1.N2;</p>

<p class="Code">&nbsp;&nbsp; class A {}<br>
}</p>

<p class="MsoNormal">Here, within member declarations in the <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span> namespace, <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> refers to <span class="Codefragment"><span style="font-size:10.0pt">N3.A</span></span> rather
than <span class="Codefragment"><span style="font-size:10.0pt">N1.N2.A</span></span>.</p>

<p class="MsoNormal">When more than one namespace imported by <span class="Production">using-namespace-directive</span>s in the same compilation unit
or namespace body contain types by the same name, references to that name are
considered ambiguous. In the example</p>

<p class="Code">namespace N1<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N2<br>
{<br>
&nbsp;&nbsp; class A {}<br>
}</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using N1;</p>

<p class="Code">&nbsp;&nbsp; using N2;</p>

<p class="Code">&nbsp;&nbsp; class B: A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, A is ambiguous<br>
}</p>

<p class="MsoNormal">both <span class="Codefragment"><span style="font-size:10.0pt">N1</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">N2</span></span>
contain a member <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
and because <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span>
imports both, referencing <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">N3</span></span> is
a compile-time error. In this situation, the conflict can be resolved either
through qualification of references to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, or by introducing a <span class="Production">using-alias-directive</span> that picks a particular <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. For example:</p>

<p class="Code">namespace N3<br>
{<br>
&nbsp;&nbsp; using N1;</p>

<p class="Code">&nbsp;&nbsp; using N2;</p>

<p class="Code">&nbsp;&nbsp; using A = N1.A;</p>

<p class="Code">&nbsp;&nbsp; class B: A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // A means N1.A<br>
}</p>

<p class="MsoNormal">Like a <span class="Production">using-alias-directive</span>,
a <span class="Production">using-namespace-directive</span> does not contribute
any new members to the underlying declaration space of the compilation unit or
namespace, but rather affects only the compilation unit or namespace body in
which it appears.</p>

<p class="MsoNormal">The <span class="Production">namespace-name</span> referenced
by a <span class="Production">using-namespace-directive</span> is resolved in the
same way as the <span class="Production">namespace-or-type-name</span> referenced
by a <span class="Production">using-alias-directive</span>. Thus, <span class="Production">using-namespace-directive</span>s in the same compilation unit
or namespace body do not affect each other and can be written in any order.</p>

<h2><a name="_Toc251613243"></a><a name="_Ref465151363">9.5 Namespace members</a></h2>

<p class="MsoNormal">A <span class="Production">namespace-member-declaration</span>
is either a <span class="Production">namespace-declaration</span> (§9.2) or a <span class="Production">type-declaration</span> (§9.6).</p>

<p class="Grammar">namespace-member-declarations:<br>
namespace-member-declaration<br>
namespace-member-declarations&nbsp;&nbsp; namespace-member-declaration</p>

<p class="Grammar">namespace-member-declaration:<br>
namespace-declaration<br>
type-declaration</p>

<p class="MsoNormal">A compilation unit or a namespace body can contain <span class="Production">namespace-member-declarations</span>, and such declarations
contribute new members to the underlying declaration space of the containing
compilation unit or namespace body.</p>

<h2><a name="_Toc251613244"></a><a name="_Ref451305549">9.6 Type declarations</a></h2>

<p class="MsoNormal">A <span class="Production">type-declaration</span> is a <span class="Production">class-declaration</span> (§10.1), a <span class="Production">struct-declaration</span>
(§11.1), an <span class="Production">interface-declaration</span> (§13.1), an <span class="Production">enum-declaration</span> (§14.1), or a <span class="Production">delegate-declaration</span> (§15.1).</p>

<p class="Grammar">type-declaration:<br>
class-declaration<br>
struct-declaration<br>
interface-declaration<br>
enum-declaration<br>
delegate-declaration</p>

<p class="MsoNormal">A <span class="Production">type-declaration</span> can occur
as a top-level declaration in a compilation unit or as a member declaration
within a namespace, class, or struct.</p>

<p class="MsoNormal">When a type declaration for a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> occurs as a top-level declaration in a
compilation unit, the fully qualified name of the newly declared type is simply
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. When a
type declaration for a type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> occurs within a namespace, class, or struct, the fully
qualified name of the newly declared type is <span class="Codefragment"><span style="font-size:10.0pt">N.T</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is the fully qualified name of the
containing namespace, class, or struct.</p>

<p class="MsoNormal">A type declared within a class or struct is called a nested
type (§10.3.8).</p>

<p class="MsoNormal">The permitted access modifiers and the default access for a
type declaration depend on the context in which the declaration takes place (§3.5.1):</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types declared in compilation units or namespaces can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
access. The default is <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
access.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types declared in classes can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> access. The default is <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> access.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types declared in structs can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> access. The default is <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> access.</p>

<h2><a name="_Toc251613245"></a><a name="_Ref174226095"></a><a name="_Ref174220893">9.7 Namespace alias qualifiers</a></h2>

<p class="MsoNormal">The <span class="Term">namespace alias qualifier</span> <span class="Codefragment"><span style="font-size:10.0pt">::</span></span> makes it
possible to guarantee that type name lookups are unaffected by the introduction
of new types and members. The namespace alias qualifier always appears between
two identifiers referred to as the left-hand and right-hand identifiers. Unlike
the regular <span class="Codefragment"><span style="font-size:10.0pt">.</span></span>
qualifier, the left-hand identifier of the <span class="Codefragment"><span style="font-size:10.0pt">::</span></span> qualifier is looked up only as an
extern or using alias.</p>

<p class="MsoNormal">A <span class="Production">qualified-alias-member</span> is
defined as follows:</p>

<p class="Grammar">qualified-alias-member:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">::</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub></p>

<p class="MsoNormal">A <span class="Production">qualified-alias-member</span> can
be used as a <span class="Production">namespace-or-type-name</span> (§3.8) or as the left operand in a <span class="Production">member-access</span> (§7.6.4).</p>

<p class="MsoNormal">A <span class="Production">qualified-alias-member</span> has
one of two forms:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">N::I&lt;A<sub>1</sub>,</span></span>
...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
represent identifiers, and <span class="Codefragment"><span style="font-size:
10.0pt">&lt;A<sub>1</sub>,</span></span> ...<span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A<sub>K</sub>&gt;</span></span> is a type argument
list. (<span class="Codefragment"><span style="font-size:10.0pt">K</span></span>
is always at least one.)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">N::I,</span></span>
where <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
represent identifiers. (In this case, <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is considered to be zero.)</p>

<p class="MsoNormal">Using this notation, the meaning of a <span class="Production">qualified-alias-member</span> is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is the identifier <span class="Codefragment"><span style="font-size:10.0pt">global</span></span>,
then the global namespace is searched for <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the global
namespace contains a namespace named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero, then the <span class="Production">qualified-alias-member</span> refers to that namespace.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the global namespace contains a non-generic type named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero, then
the <span class="Production">qualified-alias-member</span> refers to that type.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the global namespace contains a type named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> that has <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type parameters, then the <span class="Production">qualified-alias-member</span> refers to that type constructed
with the given type arguments. </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, the <span class="Production">qualified-alias-member</span> is undefined and a compile-time
error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, starting with the namespace declaration (§9.2)
immediately containing the <span class="Production">qualified-alias-member</span>
(if any), continuing with each enclosing namespace declaration (if any), and
ending with the compilation unit containing the <span class="Production">qualified-alias-member</span>,
the following steps are evaluated until an entity is located:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the
namespace declaration or compilation unit contains a <span class="Production">using-alias-directive</span>
that associates <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
with a type, then the <span class="Production">qualified-alias-member</span> is
undefined and a compile-time error occurs.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, if
the namespace declaration or compilation unit contains an <span class="Production">extern-alias-directive</span> or <span class="Production">using-alias-directive</span>
that associates <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
with a namespace, then:</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the namespace associated with <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> contains a namespace named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">K</span></span> is zero, then
the <span class="Production">qualified-alias-member</span> refers to that
namespace.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the namespace associated with <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> contains a
non-generic type named&nbsp;<span class="Codefragment"><span style="font-size:
10.0pt">I</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">K</span></span> is zero, then the <span class="Production">qualified-alias-member</span>
refers to that type.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if the namespace associated with <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> contains a
type named&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
that has <span class="Codefragment"><span style="font-size:10.0pt">K</span></span>&nbsp;type
parameters, then the <span class="Production">qualified-alias-member</span>
refers to that type constructed with the given type arguments.</p>

<p class="MsoListBullet3"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">qualified-alias-member</span>
is undefined and a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the <span class="Production">qualified-alias-member</span>
is undefined and a compile-time error occurs.</p>

<p class="MsoNormal">Note that using the namespace alias qualifier with an alias
that references a type causes a compile-time error. Also note that if the
identifier&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">global</span></span>,
then lookup is performed in the global namespace, even if there is a using
alias associating <span class="Codefragment"><span style="font-size:10.0pt">global</span></span>
with a type or namespace.</p>

<h3><a name="_Toc251613246"></a><a name="_Toc111395413"></a><a name="_Ref72830429">9.7.1 Uniqueness of aliases</a></h3>

<p class="MsoNormal">Each compilation unit and namespace body has a separate
declaration space for extern aliases and using aliases. Thus, while the name of
an extern alias or using alias must be unique within the set of extern aliases
and using aliases declared in the immediately containing compilation unit or
namespace body, an alias is permitted to have the same name as a type or
namespace as long as it is used only with the <span class="Codefragment"><span style="font-size:10.0pt">::</span></span> qualifier.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">namespace N<br>
{<br>
&nbsp;&nbsp; public class A {}</p>

<p class="Code">&nbsp;&nbsp; public class B {}<br>
}</p>

<p class="Code">namespace N<br>
{<br>
&nbsp;&nbsp; using A = System.IO;</p>

<p class="Code">&nbsp;&nbsp; class X<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.Stream s1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, A is ambiguous</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A::Stream s2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the name <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> has two possible meanings in the second namespace body
because both the class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and the using alias <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
are in scope. For this reason, use of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> in the qualified name <span class="Codefragment"><span style="font-size:10.0pt">A.Stream</span></span> is
ambiguous and causes a compile-time error to occur. However, use of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> with the <span class="Codefragment"><span style="font-size:10.0pt">::</span></span> qualifier is
not an error because <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
is looked up only as a namespace alias.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section10">

<h1><a name="_Ref461619866"></a><a name="_Toc445783046"></a><a name="_Toc251613247"></a><a name="_Ref463364564">10. Classes</a></h1>

<p class="MsoNormal">A class is a data structure that may contain data members
(constants and fields), function members (methods, properties, events,
indexers, operators, instance constructors, destructors and static
constructors), and nested types. Class types support inheritance, a mechanism
whereby a derived class can extend and specialize a base class.</p>

<h2><a name="_Toc251613248"></a><a name="_Ref174231547"></a><a name="_Ref155508939"></a><a name="_Ref495219124"></a><a name="_Ref493151462"></a><a name="_Ref451394400"></a><a name="_Toc445783047">10.1 Class declarations</a></h2>

<p class="MsoNormal">A <span class="Production">class-declaration</span> is a <span class="Production">type-declaration</span> (§9.6) that declares a new class.</p>

<p class="Grammar">class-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; class-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">class</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class-base<sub>opt</sub>&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp;
class-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><sub>opt</sub></p>

<p class="MsoNormal"><a name="_Toc445783048">A </a><span class="Production">class-declaration</span>
consists of an optional set of <span class="Production">attributes</span> (§17), followed by an optional set of <span class="Production">class-modifiers</span> (§10.1.1), followed by an optional <span class="Codefragment"><span style="font-size:
10.0pt">partial</span></span> modifier, followed by the keyword <span class="Codefragment"><span style="font-size:10.0pt">class</span></span> and an <span class="Production">identifier</span> that names the class, followed by an
optional <span class="Production">type-parameter-list </span>(§10.1.3), followed by an optional <span class="Production">class-base</span> specification (§10.1.4) , followed by an optional set of<span class="Term"> </span><span class="Production">type-parameter-constraints-clauses </span>(§10.1.5), followed by a <span class="Production">class-body</span> (§10.1.6), optionally followed by a
semicolon.</p>

<p class="MsoNormal"><a name="_Ref461975240"></a><a name="_Ref456661253">A class
declaration cannot supply </a><span class="Production">type-parameter-constraints-clauses</span>
unless it also supplies a <span class="Production">type-parameter-list</span>. </p>

<p class="MsoNormal">A class declaration that supplies a <span class="Production">type-parameter-list</span>
is a <span class="Term">generic class declaration</span>. Additionally, any class
nested inside a generic class declaration or a generic struct declaration is
itself a generic class declaration, since type parameters for the containing
type must be supplied to create a constructed type.</p>

<h3><a name="_Toc251613249"></a><a name="_Ref174235713"></a><a name="_Ref174229086">10.1.1 Class modifiers</a></h3>

<p class="MsoNormal">A <span class="Production">class-declaration</span> may
optionally include a sequence of class modifiers:</p>

<p class="Grammar">class-modifiers:<br>
class-modifier<br>
class-modifiers&nbsp;&nbsp; class-modifier</p>

<p class="Grammar">class-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">abstract</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sealed<br>
static</span></span></p>

<p class="MsoNormal">It is a compile-time error for the same modifier to appear
multiple times in a class declaration.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier is permitted on nested classes. It specifies that the class hides an
inherited member by the same name, as described in §10.3.4. It is a
compile-time error for the <span class="Codefragment"><span style="font-size:
10.0pt">new</span></span> modifier to appear on a class declaration that is not
a nested class declaration.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
modifiers control the accessibility of the class. Depending on the context in
which the class declaration occurs, some of these modifiers may not be
permitted (§3.5.1).</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifiers
are discussed in the following sections.</p>

<h4><a name="_Toc251613250"></a><a name="_Ref459682804">10.1.1.1 Abstract
classes</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
modifier is used to indicate that a class is incomplete and that it is intended
to be used only as a base class. An abstract class differs from a non-abstract
class in the following ways:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An abstract class cannot be instantiated directly, and it is a
compile-time error to use the <span class="Codefragment"><span style="font-size:
10.0pt">new</span></span> operator on an abstract class. While it is possible
to have variables and values whose compile-time types are abstract, such
variables and values will necessarily either be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> or contain references to instances
of non-abstract classes derived from the abstract types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An abstract class is permitted (but not required) to contain
abstract members.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An abstract class cannot be sealed.</p>

<p class="MsoNormal">When a non-abstract class is derived from an abstract class,
the non-abstract class must include actual implementations of all inherited
abstract members, thereby overriding those abstract members. In the example</p>

<p class="Code">abstract class A<br>
{<br>
&nbsp;&nbsp; public abstract void F();<br>
}</p>

<p class="Code">abstract class B: A<br>
{<br>
&nbsp;&nbsp; public void G() {}<br>
}</p>

<p class="Code">class C: B<br>
{<br>
&nbsp;&nbsp; public override void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // actual implementation of F<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the abstract class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> introduces an abstract method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>. Class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> introduces an
additional method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>,
but since it doesn’t provide an implementation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> must also be declared abstract. Class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> overrides <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> and provides
an actual implementation. Since there are no abstract members in <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is permitted
(but not required) to be non-abstract.</p>

<h4><a name="_Toc251613251"></a><a name="_Ref497907114">10.1.1.2 Sealed classes</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier is used to prevent derivation from a class. A compile-time error
occurs if a sealed class is specified as the base class of another class.</p>

<p class="MsoNormal">A sealed class cannot also be an abstract class.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier is primarily used to prevent unintended derivation, but it also
enables certain run-time optimizations. In particular, because a sealed class
is known to never have any derived classes, it is possible to transform virtual
function member invocations on sealed class instances into non-virtual
invocations.</p>

<h4><a name="_Toc251613252"></a><a name="_Ref174221007">10.1.1.3 Static classes</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier is used to mark the class being declared as a <span class="Term">static
class</span>.A static class cannot be instantiated, cannot be used as a type
and can contain only static members. Only a static class can contain
declarations of extension methods (§10.6.9).</p>

<p class="MsoNormal"><a name="_Ref457281887"></a><a name="_Ref154988399">A static
class declaration is subject to the following restrictions:</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static class may not include a <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> modifier. Note, however, that
since a static class cannot be instantiated or derived from, it behaves as if
it was both sealed and abstract.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static class may not include a <span class="Production">class-base</span>
specification (§10.1.4) and cannot explicitly specify a base class or a list of
implemented interfaces. A static class implicitly inherits from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static class can only contain static members (§10.3.7). Note that constants and nested types are classified as static members.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static class cannot have members with <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> declared accessibility.</p>

<p class="MsoNormal">It is a compile-time error to violate any of these
restrictions.</p>

<p class="MsoNormal">A static class has no instance constructors. It is not
possible to declare an instance constructor in a static class, and no default
instance constructor (§10.11.4) is provided for a static class.</p>

<p class="MsoNormal">The members of a static class are not automatically static,
and the member declarations must explicitly include a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier (except for constants
and nested types). When a class is nested within a static outer class, the
nested class is not a static class unless it explicitly includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier.</p>

<h5><a name="_Toc111395410"></a><a name="_Toc52083437">10.1.1.3.1 Referencing
static class types</a></h5>

<p class="MsoNormal">A <span class="Production">namespace-or-type-name</span> (§3.8) is permitted to reference a static class if</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">namespace-or-type-name</span> is the <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> in a <span class="Production">namespace-or-type-name</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">T.I</span></span>, or</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">namespace-or-type-name</span> is the <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> in a <span class="Production">typeof-expression</span> (§7.5.11) of the form <span class="Codefragment"><span style="font-size:10.0pt">typeof(T)</span></span>.</p>

<p class="MsoNormal">A <span class="Production">primary-expression</span> (§7.5) is
permitted to reference a static class if</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">primary-expression</span> is the <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> in a <span class="Production">member-access</span> (§7.5.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>.</p>

<p class="MsoNormal">In any other context it is a compile-time error to reference
a static class. For example, it is an error for a static class to be used as a
base class, a constituent type (§10.3.8) of a member, a generic type argument,
or a type parameter constraint. Likewise, a static class cannot be used in an
array type, a pointer type, a <span class="Codefragment"><span style="font-size:
10.0pt">new</span></span> expression, a cast expression, an <span class="Codefragment"><span style="font-size:10.0pt">is</span></span> expression,
an <span class="Codefragment"><span style="font-size:10.0pt">as</span></span>
expression, a <span class="Codefragment"><span style="font-size:10.0pt">sizeof</span></span>
expression, or a default value expression.</p>

<h3><a name="_Toc251613253">10.1.2 Partial modifier</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier is used to indicate that this <span class="Production">class-declaration</span>
is a partial type declaration. Multiple partial type declarations with the same
name within an enclosing namespace or type declaration combine to form one type
declaration, following the rules specified in §10.2. </p>

<p class="MsoNormal">Having the declaration of a class distributed over separate
segments of program text can be useful if these segments are produced or
maintained in different contexts. For instance, one part of a class declaration
may be machine generated, whereas the other is manually authored. Textual
separation of the two prevents updates by one from conflicting with updates by
the other. </p>

<h3><a name="_Toc251613254"></a><a name="_Ref174219147">10.1.3 Type parameters</a></h3>

<p class="MsoNormal">A type parameter is a simple identifier that denotes a
placeholder for a type argument supplied to create a constructed type. A type
parameter is a formal placeholder for a type that will be supplied later. By
constrast, a type argument (§4.4.1) is the actual type that is substituted for
the type parameter when a constructed type is created.</p>

<p class="Grammar"><span lang="DA">type-parameter-list:<br>
</span><span class="Terminal"><span lang="DA" style="font-size:10.0pt;font-style:
normal">&lt;</span></span><span lang="DA">&nbsp;&nbsp; type-parameters&nbsp;&nbsp; </span><span class="Terminal"><span lang="DA" style="font-size:10.0pt;font-style:normal">&gt;</span></span></p>

<p class="Grammar">type-parameters:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; type-parameter<br>
type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp; type-parameter</p>

<p class="Grammar">type-parameter:<br>
identifier</p>

<p class="MsoNormal">Each type parameter in a class declaration defines a name in
the declaration space (§3.3) of that class. Thus, it cannot have the same name
as another type parameter or a member declared in that class. A type parameter
cannot have the same name as the type itself.</p>

<h3><a name="_Toc251613255"></a><a name="_Ref154988673">10.1.4 Class base
specification</a></h3>

<p class="MsoNormal">A class declaration may include a <span class="Production">class-base</span>
specification, which defines the direct base class of the class and the
interfaces (§13) directly implemented by the class.</p>

<p class="Grammar">class-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
class-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
class-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; interface-type-list</p>

<p class="Grammar">interface-type-list:<br>
interface-type<br>
interface-type-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; interface-type</p>

<p class="MsoNormal">The base class specified in a class declaration can be a
constructed class type (§4.4). A base class cannot be a type parameter on its
own, though it can involve the type parameters that are in scope.</p>

<p class="Code">class Extend&lt;V&gt;: V {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, type parameter used
as base class</p>

<h4><a name="_Toc251613256"></a><a name="_Ref174230153"></a><a name="_Ref174229676">10.1.4.1 Base classes</a></h4>

<p class="MsoNormal">When a <span class="Production">class-type</span> is included
in the <span class="Production">class-base</span>, it specifies the direct base
class of the class being declared. If a class declaration has no <span class="Production">class-base</span>, or if the <span class="Production">class-base</span>
lists only interface types, the direct base class is assumed to be <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. A class
inherits members from its direct base class, as described in §10.3.3.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A {}</p>

<p class="Code">class B: A {}</p>

<p class="MsoNormal">class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
is said to be the direct base class of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> is said to be derived from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. Since <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> does not
explicitly specify a direct base class, its direct base class is implicitly <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. </p>

<p class="MsoNormal">For a constructed class type, if a base class is specified
in the generic class declaration, the base class of the constructed type is
obtained by substituting, for each <span class="Production">type-parameter</span>
in the base class declaration, the corresponding <span class="Production">type-argument</span>
of the constructed type. Given the generic class declarations</p>

<p class="Code">class B&lt;U,V&gt; {...}</p>

<p class="Code">class G&lt;T&gt;: B&lt;string,T[]&gt; {...}</p>

<p class="MsoNormal">the base class of the constructed type <span class="Codefragment"><span style="font-size:10.0pt">G&lt;int&gt;</span></span>
would be <span class="Codefragment"><span style="font-size:10.0pt">B&lt;string,int[]&gt;</span></span>.</p>

<p class="MsoNormal">The direct base class of a class type must be at least as
accessible as the class type itself (§3.5.2). For example, it is a compile-time
error for a <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>
class to derive from a <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
class.</p>

<p class="MsoNormal">The direct base class of a class type must not be any of the
following types: <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">System.MulticastDelegate</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.
Furthermore, a generic class declaration cannot use <span class="Codefragment"><span style="font-size:10.0pt">System.Attribute</span></span> as a direct or indirect
base class.</p>

<p class="MsoNormal">While determining the meaning of the direct base class
specification <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
of a class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
the direct base class of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is temporarily assumed to be <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span>. Intuitively this ensures that the meaning of a
base class specification cannot recursively depend on itself. The example:</p>

<p class="Code">class A&lt;T&gt; {</p>

<p class="Code" style="text-indent:.25in">public class B{}</p>

<p class="Code">}</p>

<p class="Code">class C : A&lt;C.B&gt; {}</p>

<p class="MsoNormal">Is in error since in the base class specification <span class="Codefragment"><span style="font-size:10.0pt">A&lt;C.B&gt;</span></span>
the direct base class of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
is considered to be <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>,
and hence (by the rules of §3.8)&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is not considered to have a member <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.</p>

<p class="MsoNormal">The base classes of a class type are the direct base class
and its base classes. In other words, the set of base classes is the transitive
closure of the direct base class relationship. Referring to the example above,
the base classes of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
are <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.
In the example</p>

<p class="Code">class A {...}</p>

<p class="Code">class B&lt;T&gt;: A {...}</p>

<p class="Code"><span lang="FR">class C&lt;T&gt;: B&lt;IComparable&lt;T&gt;&gt;
{...}</span></p>

<p class="Code">class D&lt;T&gt;: C&lt;T[]&gt; {...}</p>

<p class="MsoNormal">the base classes of <span class="Codefragment"><span style="font-size:10.0pt">D&lt;int&gt;</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">C&lt;int[]&gt;</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">B&lt;IComparable&lt;int[]&gt;&gt;</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoNormal">Except for class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, every class type has exactly one
direct base class. The <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
class has no direct base class and is the ultimate base class of all other
classes.</p>

<p class="MsoNormal">When a class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> derives from a class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, it is a
compile-time error for <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
to depend on <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.
A class <span class="Term">directly depends on</span> its direct base class (if
any) and <span class="Term">directly depends on</span> the class within which it
is immediately nested (if any). Given this definition, the complete set of
classes upon which a class depends is the reflexive and transitive closure of
the <span class="Term">directly depends on</span> relationship.</p>

<p class="MsoNormal">The example</p>

<p class="Code">class A: A {}</p>

<p class="MsoNormal">Is erroneous because the class depends on itself. Likewise,
the example</p>

<p class="Code">class A: B {}</p>

<p class="Code">class B: C {}</p>

<p class="Code">class C: A {}</p>

<p class="MsoNormal">is in error because the classes circularly depend on
themselves. Finally, the example</p>

<p class="Code">class A: B.C {}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; public class C {}<br>
}</p>

<p class="MsoNormal">results in a compile-time error because <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> depends on <span class="Codefragment"><span style="font-size:10.0pt">B.C</span></span> (its direct
base class), which depends on <span class="Codefragment"><span style="font-size:
10.0pt">B</span></span> (its immediately enclosing class), which circularly
depends on <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoNormal">Note that a class does not depend on the classes that are
nested within it. In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; class B: A {}<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
depends on <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
(because <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
is both its direct base class and its immediately enclosing class), but <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> does not
depend on <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
(since <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is neither a base class nor an enclosing class of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>). Thus, the example is valid.</p>

<p class="MsoNormal">It is not possible to derive from a <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> class.
In the example</p>

<p class="Code">sealed class A {}</p>

<p class="Code">class B: A {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot derive from a sealed class</p>

<p class="MsoNormal">class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is in error because it attempts to derive from the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<h4><a name="_Toc251613257">10.1.4.2 Interface implementations</a></h4>

<p class="MsoNormal">A <span class="Production">class-base</span> specification may
include a list of interface types, in which case the class is said to directly implement
the given interface types. Interface implementations are discussed further in §13.4.</p>

<h3><a name="_Ref516035506"></a><a name="_Ref513827321"></a><a name="_Ref496491507"></a><a name="_Ref496061112"></a><a name="_Toc445783051"></a><a name="_Toc251613258"></a><a name="_Ref155169092">10.1.5 Type parameter
constraints</a></h3>

<p class="MsoNormal">Generic type and method declarations can optionally specify
type parameter constraints by including <span class="Production">type-parameter-constraints-clause</span>s.</p>

<p class="Grammar">type-parameter-constraints-clauses:<br>
type-parameter-constraints-clause<br>
type-parameter-constraints-clauses&nbsp;&nbsp; type-parameter-constraints-clause</p>

<p class="Grammar">type-parameter-constraints-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">where</span></span>&nbsp;&nbsp;
type-parameter &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">:</span></span>&nbsp;&nbsp; type-parameter-constraints</p>

<p class="Grammar">type-parameter-constraints:<br>
primary-constraint<br>
secondary-constraints<br>
constructor-constraint<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; secondary-constraints<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constructor-constraint<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constructor-constraint<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
constructor-constraint</p>

<p class="Grammar">primary-constraint:<br>
class-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">class</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">struct</span></span></p>

<p class="Grammar">secondary-constraints:<br>
interface-type<br>
type-parameter<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; interface-type<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; type-parameter</p>

<p class="Grammar">constructor-constraint:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="MsoNormal"><a name="_Toc30482833"></a><a name="_Toc30569112"></a><a name="_Toc30569389"></a><a name="_Toc30569666"></a><a name="_Toc30482834"></a><a name="_Toc30569113"></a><a name="_Toc30569390"></a><a name="_Toc30569667"></a><a name="_Toc30482837"></a><a name="_Toc30569116"></a><a name="_Toc30569393"></a><a name="_Toc30569670"></a>Each <span class="Production">type-parameter-constraints-clause</span>
consists of the token <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>, followed by the name of a type parameter, followed by a colon and the list of constraints for that type parameter. There can be at most one <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause for each type parameter,
and the <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>
clauses can be listed in any order. Like the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> tokens in a property accessor, the <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> token is
not a keyword.</p>

<p class="MsoNormal">The list of constraints given in a <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause can include any of the
following components, in this order: a single primary constraint, one or more secondary constraints, and the constructor constraint, <span class="Codefragment"><span style="font-size:10.0pt">new()</span></span>.</p>

<p class="MsoNormal">A primary constraint can be a class type or the <span class="Term">reference type constraint</span> <span class="Codefragment"><span style="font-size:10.0pt">class</span></span> or the <span class="Term">value type
constraint</span> <span class="Codefragment"><span style="font-size:10.0pt">struct</span></span>.
A secondary constraint can be a <span class="Production">type-parameter</span> or
<span class="Production">interface-type</span>.</p>

<p class="MsoNormal">The reference type constraint specifies that a type argument
used for the type parameter must be a reference type. All class types,
interface types, delegate types, array types, and type parameters known to be a
reference type (as defined below) satisfy this constraint.</p>

<p class="MsoNormal">The value type constraint specifies that a type argument used
for the type parameter must be a non-nullable value type. All non-nullable
struct types, enum types, and type parameters having the value type constraint
satisfy this constraint. Note that although classified as a value type, a
nullable type (§4.1.10) does not satisfy the value type constraint. A type
parameter having the value type constraint cannot also have the <span class="Production">constructor-constraint</span>.</p>

<p class="MsoNormal">Pointer types are never allowed to be type arguments and are
not considered to satisfy either the reference type or value type constraints.</p>

<p class="MsoNormal">If a constraint is a class type, an interface type, or a
type parameter, that type specifies a minimal “base type” that every type
argument used for that type parameter must support. Whenever a constructed type
or generic method is used, the type argument is checked against the constraints
on the type parameter at compile-time. The type argument supplied must satisfy
the conditions described in section 4.4.4.</p>

<p class="MsoNormal">A <span class="Production">class-type</span> constraint must
satisfy the following rules:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must be a class type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must not be <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must not be one of the following types: <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must not be <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. Because all types derive from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, such a
constraint would have no effect if it were permitted.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At most one constraint for a given type parameter can be a class
type.</p>

<p class="MsoNormal">A type specified as an <span class="Production">interface-type</span>
constraint must satisfy the following rules:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must be an interface type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type must not be specified more than once in a given <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause.</p>

<p class="MsoNormal">In either case, the constraint can involve any of the type
parameters of the associated type or method declaration as part of a
constructed type, and can involve the type being declared.</p>

<p class="MsoNormal">Any class or interface type specified as a type parameter
constraint must be at least as accessible (§3.5.4) as the generic type or
method being declared.</p>

<p class="MsoNormal">A type specified as a <span class="Production">type-parameter</span>
constraint must satisfy the following rules:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type must be a type parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A type must not be specified more than once in a given <span class="Codefragment"><span style="font-size:10.0pt">where</span></span> clause.</p>

<p class="MsoNormal">In addition there must be no cycles in the dependency graph
of type parameters, where dependency is a transitive relation defined by:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is used as a constraint for type
parameter <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
then <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> <span class="Term">depends on</span> <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a type parameter <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> depends on a type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> depends on a
type parameter <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
then <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> <span class="Term">depends on</span> <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span>.</p>

<p class="MsoNormal">Given this relation, it is a compile-time error for a type
parameter to depend on itself (directly or indirectly).</p>

<p class="MsoNormal">Any constraints must be consistent among dependent type
parameters. If type parameter <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> depends on type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> then:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
must not have the value type constraint. Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is effectively sealed so <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> would be
forced to be the same type as <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>, eliminating the need for two type parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
has the value type constraint then <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> must not have a <span class="Production">class-type</span> constraint.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
has a <span class="Production">class-type</span> constraint <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> has a <span class="Production">class-type</span> constraint <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> then there must be an identity
conversion or implicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> or an implicit reference conversion
from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
also depends on type parameter <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">U</span></span> has a <span class="Production">class-type</span>
constraint <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> has
a <span class="Production">class-type</span> constraint <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> then there must be an identity
conversion or implicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> or an implicit reference conversion
from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoNormal">It is valid for <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to have the value type constraint and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to have the
reference type constraint. Effectively this limits <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to the types <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>,
and any interface type.</p>

<p class="MsoNormal">If the <span class="Codefragment"><span style="font-size:10.0pt">where</span></span>
clause for a type parameter includes a constructor constraint (which has the
form <span class="Codefragment"><span style="font-size:10.0pt">new()</span></span>),
it is possible to use the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator to create instances of the type (§7.6.10.1). Any type argument used
for a type parameter with a constructor constraint must have a public parameterless
constructor (this constructor implicitly exists for any value type) or be a
type parameter having the value type constraint or constructor constraint (see
§10.1.5 for details).</p>

<p class="MsoNormal">The following are examples of constraints:</p>

<p class="Code"><span lang="FR">interface IPrintable<br>
{<br>
&nbsp;&nbsp; void Print();<br>
}</span></p>

<p class="Code"><span lang="FR">interface IComparable&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; int CompareTo(T value);<br>
}</span></p>

<p class="Code"><span lang="FR">interface IKeyProvider&lt;T&gt;<br>
{</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; T GetKey();<br>
}</span></p>

<p class="Code"><span lang="FR">class Printer&lt;T&gt; where T: IPrintable {...}</span></p>

<p class="Code"><span lang="FR">class SortedList&lt;T&gt; where T:
IComparable&lt;T&gt; {...}</span></p>

<p class="Code"><span lang="FR">class Dictionary&lt;K,V&gt;<br>
&nbsp;&nbsp; where K: IComparable&lt;K&gt;<br>
&nbsp;&nbsp; where V: IPrintable, IKeyProvider&lt;K&gt;, new()<br>
{<br>
&nbsp;&nbsp; ...<br>
}</span></p>

<p class="MsoNormal">The following example is in error because it causes a circularity
in the dependency graph of the type parameters:</p>

<p class="Code">class Circular&lt;S,T&gt;<br>
&nbsp;&nbsp; where S: T<br>
&nbsp;&nbsp; where T: S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, circularity in dependency graph<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">The following examples illustrate additional invalid
situations:</p>

<p class="Code">class Sealed&lt;S,T&gt;<br>
&nbsp;&nbsp; where S: T<br>
&nbsp;&nbsp; where T: struct&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, T is sealed<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">class A {...}</p>

<p class="Code">class B {...}</p>

<p class="Code">class Incompat&lt;S,T&gt;<br>
&nbsp;&nbsp; where S: A, T<br>
&nbsp;&nbsp; where T: B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, incompatible class-type constraints<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">class StructWithClass&lt;S,T,U&gt;<br>
&nbsp;&nbsp; where S: struct, T<br>
&nbsp;&nbsp; where T: U<br>
&nbsp;&nbsp; where U: A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, A incompatible with struct<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">The <span class="Term">effective base class</span> of a type
parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is defined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has no primary constraints or type parameter constraints, its effective base
class is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has the value type constraint, its effective base class is <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has a <span class="Production">class-type</span> constraint <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> but no <span class="Production">type-parameter</span> constraints, its effective base class is
<span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has no <span class="Production">class-type</span> constraint but has one or more <span class="Production">type-parameter</span> constraints, its effective base class is
the most encompassed type (§6.4.2) in the set of effective base classes of its <span class="Production">type-parameter</span> constraints. The consistency rules
ensure that such a most encompassed type exists.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has both a <span class="Production">class-type</span> constraint and one or more <span class="Production">type-parameter</span> constraints, its effective base class is
the most encompassed type (§6.4.2) in the set consisting of the <span class="Production">class-type</span> constraint of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and the effective base classes of its <span class="Production">type-parameter</span> constraints. The consistency rules
ensure that such a most encompassed type exists.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has the reference type constraint but no <span class="Production">class-type</span>
constraints, its effective base class is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoNormal">For the purpose of these rules, if T has a constraint <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> that is a <span class="Production">value-type</span>, use instead the most specific base type of <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> that is a <span class="Production">class-type</span>. This can never happen in an explicitly
given constraint, but may occur when the constraints of a generic method are
implicitly inherited by an overriding method declaration or an explicit
implementation of an interface method.</p>

<p class="MsoNormal">These rules ensure that the effective base class is always a
<span class="Production">class-type</span>.</p>

<p class="MsoNormal">The <span class="Term">effective interface set</span> of a
type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is defined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has no <span class="Production">secondary-constraints</span>, its effective
interface set is empty.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has <span class="Production">interface-type</span> constraints but no <span class="Production">type-parameter</span> constraints, its effective interface set
is its set of <span class="Production">interface-type</span> constraints.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has no <span class="Production">interface-type</span> constraints but has <span class="Production">type-parameter</span> constraints, its effective interface set
is the union of the effective interface sets of its <span class="Production">type-parameter</span>
constraints.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
has both <span class="Production">interface-type</span> constraints and <span class="Production">type-parameter</span> constraints, its effective interface set
is the union of its set of <span class="Production">interface-type</span>
constraints and the effective interface sets of its <span class="Production">type-parameter</span>
constraints.</p>

<p class="MsoNormal">A type parameter is <span class="Term">known to be a reference
type</span> if it has the reference type constraint or its effective base class
is not <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<p class="MsoNormal">Values of a constrained type parameter type can be used to
access the instance members implied by the constraints. In the example</p>

<p class="Code">interface IPrintable<br>
{<br>
&nbsp;&nbsp; void Print();<br>
}</p>

<p class="Code">class Printer&lt;T&gt; where T: IPrintable<br>
{<br>
&nbsp;&nbsp; void PrintOne(T x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x.Print();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the methods of <span class="Codefragment"><span style="font-size:10.0pt">IPrintable</span></span> can be invoked directly on <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> because <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
constrained to always implement <span class="Codefragment"><span style="font-size:10.0pt">IPrintable</span></span>.</p>

<h3><a name="_Toc251613259"></a><a name="_Ref174220567"></a><a name="_Ref465151419"></a><a name="_Ref456607689"></a><a name="_Toc445783050">10.1.6
Class body</a></h3>

<p class="MsoNormal">The <span class="Production">class-body</span> of a class
defines the members of that class.</p>

<p class="Grammar">class-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
class-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<h2><a name="_Toc251613260"></a><a name="_Ref174234408"></a><a name="_Ref174231560"></a><a name="_Ref174230780"></a><a name="_Ref174229314">10.2
Partial types</a></h2>

<p class="MsoNormal">A type declaration can be split across multiple <span class="Term">partial type declarations</span>. The type declaration is
constructed from its parts by following the rules in this section, whereupon it
is treated as a single declaration during the remainder of the compile-time and
run-time processing of the program.</p>

<p class="MsoNormal">A <span class="Production">class-declaration</span>, <span class="Production">struct-declaration</span> or <span class="Production">interface-declaration</span>
represents a partial type declaration if it includes a <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier. <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
is not a keyword, and only acts as a modifier if it appears immediately before
one of the keywords <span class="Codefragment"><span style="font-size:10.0pt">class</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">struct</span></span> or
<span class="Codefragment"><span style="font-size:10.0pt">interface</span></span>
in a type declaration, or before the type <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> in a method declaration. In other
contexts it can be used as a normal identifier.</p>

<p class="MsoNormal">Each part of a partial type declaration must include a <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier. It must have the same name&nbsp; and be declared in the same namespace or
type declaration as the other parts. The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> modifier indicates that
additional parts of the type declaration may exist elsewhere, but the existence
of such additional parts is not a requirement; it is valid for a type with a
single declaration to include the <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> modifier.</p>

<p class="MsoNormal">All parts of a partial type must be compiled together such
that the parts can be merged at compile-time into a single type declaration.
Partial types specifically do not allow already compiled types to be extended.</p>

<p class="MsoNormal">Nested types may be declared in multiple parts by using the <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier. Typically, the containing type is declared using <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> as
well, and each part of the nested type is declared in a different part of the
containing type.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier is not permitted on delegate or enum declarations.</p>

<h3><a name="_Toc251613261">10.2.1 Attributes</a></h3>

<p class="MsoNormal">The attributes of a partial type are determined by
combining, in an unspecified order, the attributes of each of the parts. If an
attribute is placed on multiple parts, it is equivalent to specifying the
attribute multiple times on the type. For example, the two parts:</p>

<p class="Code">[Attr1, Attr2("hello")]<br>
partial class A {}</p>

<p class="Code">[Attr3, Attr2("goodbye")]<br>
partial class A {}</p>

<p class="MsoNormal">are equivalent to a declaration such as:</p>

<p class="Code">[Attr1, Attr2("hello"), Attr3,
Attr2("goodbye")]<br>
class A {}</p>

<p class="MsoNormal">Attributes on type parameters combine in a similar fashion.</p>

<h3><a name="_Toc251613262">10.2.2 Modifiers</a></h3>

<p class="MsoNormal">When a partial type declaration includes an accessibility
specification (the <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
modifiers) it must agree with all other parts that include an accessibility
specification. If no part of a partial type includes an accessibility
specification, the type is given the appropriate default accessibility
(§3.5.1).</p>

<p class="MsoNormal">If one or more partial declarations of a nested type include
a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier, no warning is reported if the nested type hides an inherited member
(§3.7.1.2).</p>

<p class="MsoNormal">If one or more partial declarations of a class include an <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
modifier, the class is considered abstract (§10.1.1.1). Otherwise, the class is
considered non-abstract.</p>

<p class="MsoNormal">If one or more partial declarations of a class include a <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier, the class is considered sealed (§10.1.1.2). Otherwise, the class is
considered unsealed.</p>

<p class="MsoNormal">Note that a class cannot be both abstract and sealed.</p>

<p class="MsoNormal">When the <span class="Codefragment"><span style="font-size:
10.0pt">unsafe</span></span> modifier is used on a partial type declaration,
only that particular part is considered an unsafe context (§18.1).</p>

<h3><a name="_Toc251613263">10.2.3 Type parameters and constraints</a></h3>

<p class="MsoNormal">If a generic type is declared in multiple parts, each part
must state the type parameters. Each part must have the same number of type
parameters, and the same name for each type parameter, in order.</p>

<p class="MsoNormal">When a partial generic type declaration includes constraints
(<span class="Codefragment"><span style="font-size:10.0pt">where</span></span>
clauses), the constraints must agree with all other parts that include
constraints. Specifically, each part that includes constraints must have
constraints for the same set of type parameters, and for each type parameter
the sets of primary, secondary, and constructor constraints must be equivalent.
Two sets of constraints are equivalent if they contain the same members. If no
part of a partial generic type specifies type parameter constraints, the type
parameters are considered unconstrained.</p>

<p class="MsoNormal">The example</p>

<p class="Code">partial class Dictionary&lt;K,V&gt;<br>
&nbsp;&nbsp; where K: IComparable&lt;K&gt;<br>
&nbsp;&nbsp; where V: IKeyProvider&lt;K&gt;, IPersistable<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">partial class Dictionary&lt;K,V&gt;<br>
&nbsp;&nbsp; where V: IPersistable, IKeyProvider&lt;K&gt;<br>
&nbsp;&nbsp; where K: IComparable&lt;K&gt;<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">partial class Dictionary&lt;K,V&gt;<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">is correct because those parts that include constraints (the
first two) effectively specify the same set of primary, secondary, and
constructor constraints for the same set of type parameters, respectively.</p>

<h3><a name="_Toc251613264"></a><a name="_Ref174229639"></a><a name="_Ref174222072">10.2.4 Base class</a></h3>

<p class="MsoNormal">When a partial class declaration includes a base class
specification it must agree with all other parts that include a base class
specification. If no part of a partial class includes a base class
specification, the base class becomes <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span> (§10.1.4.1).</p>

<h3><a name="_Toc251613265">10.2.5 Base interfaces</a></h3>

<p class="MsoNormal">The set of base interfaces for a type declared in multiple
parts is the union of the base interfaces specified on each part. A particular
base interface may only be named once on each part, but it is permitted for
multiple parts to name the same base interface(s). There must only be one
implementation of the members of any given base interface.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">partial class C: IA, IB {...}</p>

<p class="Code">partial class C: IC {...}</p>

<p class="Code">partial class C: IA, IB {...}</p>

<p class="MsoNormal">the set of base interfaces for class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">IA</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">IB</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">IC</span></span>.</p>

<p class="MsoNormal">Typically, each part provides an implementation of the
interface(s) declared on that part; however, this is not a requirement. A part
may provide the implementation for an interface declared on a different part:</p>

<p class="Code">partial class X<br>
{<br>
&nbsp;&nbsp; int IComparable.CompareTo(object o) {...}<br>
}</p>

<p class="Code">partial class X: IComparable<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<h3><a name="_Toc251613266">10.2.6 Members</a></h3>

<p class="MsoNormal">With the exception of partial methods (§10.2.7), the set of members of a type declared in multiple parts is simply the union of the set of members
declared in each part. The bodies of all parts of the type declaration share
the same declaration space (§3.3), and the scope of each member (§3.7) extends
to the bodies of all the parts. The accessibility domain of any member always
includes all the parts of the enclosing type; a <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> member declared in one part is
freely accessible from another part. It is a compile-time error to declare the
same member in more than one part of the type, unless that member is a type
with the <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier.</p>

<p class="Code">partial class A<br>
{<br>
&nbsp;&nbsp; int x; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot declare x more than once</p>

<p class="Code">&nbsp;&nbsp; partial class Inner&nbsp;&nbsp;&nbsp;&nbsp; // Ok, Inner is a partial type<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">partial class A<br>
{<br>
&nbsp;&nbsp; int x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot declare x more than once</p>

<p class="Code">&nbsp;&nbsp; partial class Inner&nbsp;  &nbsp; // Ok, Inner is a partial type<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int z;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The ordering of members within a type is rarely significant
to C# code, but may be significant when interfacing with other languages and
environments. In these cases, the ordering of members within a type declared in
multiple parts is undefined.</p>

<h3><a name="_Toc251613267"></a><a name="_Ref174230794"></a><a name="_Ref174230709"></a><a name="_Ref174229685">10.2.7 Partial methods</a></h3>

<p class="MsoNormal">Partial methods can be defined in one part of a type declaration
and implemented in another. The implementation is optional; if no part
implements the partial method, the partial method declaration and all calls to
it are removed from the type declaration resulting from the combination of the
parts.</p>

<p class="MsoNormal">Partial methods cannot define access modifiers, but are
implicitly <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.
Their return type must be <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>,
and their parameters cannot have the <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier. The identifier <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> is
recognized as a special keyword in a method declaration only if it appears right
before the <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
type; otherwise it can be used as a normal identifier. A partial method cannot
explicitly implement interface methods.</p>

<p class="MsoNormal">There are two kinds of partial method declarations: If the
body of the method declaration is a semicolon, the declaration is said to be a <span class="Term">defining partial method declaration</span>. If the body is given as
a <span class="Production">block</span>, the declaration is said to be an <span class="Term">implementing partial method declaration</span>. Across the parts of
a type declaration there can be only one defining partial method declaration
with a given signature, and there can be only one implementing partial method
declaration with a given signature. If an implementing partial method
declaration is given, a corresponding defining partial method declaration must
exist, and the declarations must match as specified in the following:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">The declarations must have the same modifiers (although
     not necessarily in the same order), method name, number of type parameters
     and number of parameters.</li>
 <li class="MsoNormal">Corresponding parameters in the declarations must have the
     same modifiers (although not necessarily in the same order) and the same
     types (modulo differences in type parameter names).</li>
 <li class="MsoNormal">Corresponding type parameters in the declarations must
     have the same constraints (modulo differences in type parameter names).</li>
</ul>

<p class="MsoNormal">An implementing partial method declaration can appear in the
same part as the corresponding defining partial method declaration.</p>

<p class="MsoNormal">Only a defining partial method participates in overload
resolution. Thus, whether or not an implementing declaration is given,
invocation expressions may resolve to invocations of the partial method.
Because a partial method always returns <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, such invocation expressions will
always be expression statements. Furthermore, because a partial method is
implicitly <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>,
such statements will always occur within one of the parts of the type
declaration within which the partial method is declared. </p>

<p class="MsoNormal">If no part of a partial type declaration contains an
implementing declaration for a given partial method, any expression statement
invoking it is simply removed from the combined type declaration. Thus the
invocation expression, including any constituent expressions, has no effect at run-time.
The partial method itself is also removed and will not be a member of the
combined type declaration.</p>

<p class="MsoNormal">If an implementing declaration exist for a given partial
method, the invocations of the partial methods are retained. The partial method
gives rise to a method declaration similar to the implementing partial method
declaration except for the following:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
     modifier is not included</li>
 <li class="MsoNormal">The attributes in the resulting method declaration are the
     combined attributes of the defining and the implementing partial method
     declaration in unspecified order. Duplicates are not removed.</li>
 <li class="MsoNormal">The attributes on the parameters of the resulting method
     declaration are the combined attributes of the corresponding parameters of
     the defining and the implementing partial method declaration in
     unspecified order. Duplicates are not removed.</li>
</ul>

<p class="MsoNormal">If a defining declaration but not an implementing
declaration is given for a partial method M, the following restrictions apply:</p>

<ul style="margin-top:0in" type="disc">
 <li class="MsoNormal">It is a compile-time error to create a delegate to method
     (§7.6.10.5).</li>
 <li class="MsoNormal">It is a compile-time error to refer to <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> inside
     an anonymous function that is converted to an expression tree type (§6.5.2).</li>
 <li class="MsoNormal">Expressions occurring as part of an invocation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> do not
     affect the definite assignment state (§5.3), which can potentially lead to
     compile-time errors.</li>
 <li class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
     cannot be the entry point for an application (§3.1).</li>
</ul>

<p class="MsoNormal">Partial methods are useful for allowing one part of a type
declaration to customize the behavior of another part, e.g., one that is
generated by a tool. Consider the following partial class declaration:</p>

<p class="Code">partial class Customer<br>
{<br>
&nbsp;&nbsp; string name;</p>

<p class="Code">&nbsp;&nbsp; public string Name {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnNameChanging(value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnNameChanged();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; partial void OnNameChanging(string newName);</p>

<p class="Code">&nbsp;&nbsp; partial void OnNameChanged();<br>
}</p>

<p class="MsoNormal">If this class is compiled without any other parts, the
defining partial method declarations and their invocations will be removed, and
the resulting combined class declaration will be equivalent to the following:</p>

<p class="Code">class Customer<br>
{<br>
&nbsp;&nbsp; string name;</p>

<p class="Code">&nbsp;&nbsp; public string Name {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { name = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Assume that another part is given, however, which provides implementing
declarations of the partial methods:</p>

<p class="Code">partial class Customer<br>
{<br>
&nbsp;&nbsp; partial void OnNameChanging(string newName)<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(“Changing “ + name + “ to “ + newName);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; partial void OnNameChanged()<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(“Changed to “ + name);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Then the resulting combined class declaration will be
equivalent to the following:</p>

<p class="Code">class Customer<br>
{<br>
&nbsp;&nbsp; string name;</p>

<p class="Code">&nbsp;&nbsp; public string Name {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnNameChanging(value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OnNameChanged();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void OnNameChanging(string newName)<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(“Changing “ + name + “ to “ + newName);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void OnNameChanged()<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(“Changed to “ + name);<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613268">10.2.8 Name binding</a></h3>

<p class="MsoNormal">Although each part of an extensible type must be declared
within the same namespace, the parts are typically written within different
namespace declarations. Thus, different <span class="Codefragment"><span style="font-size:10.0pt">using</span></span> directives (§9.4) may be present for each part. When interpreting simple names (§7.5.2) within one part, only the <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
directives of the namespace declaration(s) enclosing that part are considered.
This may result in the same identifier having different meanings in different
parts:</p>

<p class="Code">namespace N<br>
{<br>
&nbsp;&nbsp; using List = System.Collections.ArrayList;</p>

<p class="Code">&nbsp;&nbsp; partial class A<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // x has type System.Collections.ArrayList<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace N<br>
{<br>
&nbsp;&nbsp; using List = Widgets.LinkedList;</p>

<p class="Code">&nbsp;&nbsp; partial class A<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // y has type Widgets.LinkedList<br>
&nbsp;&nbsp; }<br>
}</p>

<h2><a name="_Toc251613269"></a><a name="_Ref174233862"></a><a name="_Ref174231603">10.3 Class members</a></h2>

<p class="MsoNormal">The members of a class consist of the members introduced by
its <span class="Production">class-member-declaration</span>s and the members
inherited from the direct base class.</p>

<p class="Grammar">class-member-declarations:<br>
class-member-declaration<br>
class-member-declarations&nbsp;&nbsp; class-member-declaration</p>

<p class="Grammar">class-member-declaration:<br>
constant-declaration<br>
field-declaration<br>
method-declaration<br>
property-declaration<br>
event-declaration<br>
indexer-declaration<br>
operator-declaration<br>
constructor-declaration<br>
destructor-declaration<br>
static-constructor-declaration<br>
type-declaration</p>

<p class="MsoNormal">The members of a class type are divided into the following
categories:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constants, which represent constant values associated with the
class (§10.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fields, which are the variables of the class (§10.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Methods, which implement the computations and actions that can be
performed by the class (§10.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Properties, which define named characteristics and the actions
associated with reading and writing those characteristics (§10.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Events, which define notifications that can be generated by the
class (§10.8).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Indexers, which permit instances of the class to be indexed in
the same way (syntactically) as arrays (§10.9).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Operators, which define the expression operators that can be
applied to instances of the class (§10.10).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance constructors, which implement the actions required to
initialize instances of the class (§10.11)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Destructors, which implement the actions to be performed before
instances of the class are permanently discarded (§10.13).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Static constructors, which implement the actions required to
initialize the class itself (§10.12).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types, which represent the types that are local to the class (§10.3.8).</p>

<p class="MsoNormal"><a name="_Toc445783052"></a><a name="_Ref456695418">Members
that can contain executable code are collectively known as the </a><span class="Production">function members</span> of the class type. The function
members of a class type are the methods, properties, events, indexers,
operators, instance constructors,&nbsp; destructors, and static constructors of that
class type.</p>

<p class="MsoNormal">A <span class="Production">class-declaration</span> creates a
new declaration space (§3.3), and the <span class="Production">class-member-declarations</span>
immediately contained by the <span class="Production">class-declaration</span>
introduce new members into this declaration space. The following rules apply to
<span class="Production">class-member-declaration</span>s:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance constructors, destructors and static constructors must
have the same name as the immediately enclosing class. All other members must
have names that differ from the name of the immediately enclosing class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The name of a constant, field, property, event, or type must
differ from the names of all other members declared in the same class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The name of a method must differ from the names of all other
non-methods declared in the same class. In addition, the signature (§3.6) of a method must differ from the signatures of all other methods declared in the
same class, and two methods declared in the same class may not have signatures
that differ solely by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an instance constructor must differ from the
signatures of all other instance constructors declared in the same class, and
two constructors declared in the same class may not have signatures that differ
solely by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an indexer must differ from the signatures of
all other indexers declared in the same class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an operator must differ from the signatures of
all other operators declared in the same class.</p>

<p class="MsoNormal">The inherited members of a class type (§10.3.3) are not part of the declaration space of a class. Thus, a derived class is allowed to
declare a member with the same name or signature as an inherited member (which
in effect hides the inherited member).</p>

<h3><a name="_Ref457118048"></a><a name="_Ref168410433"></a><a name="_Toc251613270"></a><a name="_Ref174230052"></a><a name="_Ref174226595">10.3.1
The instance type</a> </h3>

<p class="MsoNormal">Each class declaration has an associated bound type (§4.4.3), the <span class="Term">instance type</span>. For a generic class declaration,
the instance type is formed by creating a constructed type (§4.4) from the type declaration, with each of the supplied type arguments being the corresponding
type parameter. Since the instance type uses the type parameters, it can only be
used where the type parameters are in scope; that is, inside the class
declaration. The instance type is the type of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> for code written inside the class
declaration. For non-generic classes, the instance type is simply the declared
class. The following shows several class declarations along with their instance
types:&nbsp; </p>

<p class="Code">class A&lt;T&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // instance type: A&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; class B {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // instance type: A&lt;T&gt;.B</p>

<p class="Code">&nbsp;&nbsp; class C&lt;U&gt; {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // instance type:
A&lt;T&gt;.C&lt;U&gt;<br>
}</p>

<p class="Code">class D {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // instance type: D</p>

<h3><a name="_Toc251613271"></a><a name="_Ref168416262">10.3.2 Members of
constructed types</a></h3>

<p class="MsoNormal">The non-inherited members of a constructed type are obtained
by substituting, for each <span class="Production">type-parameter</span> in the
member declaration, the corresponding <span class="Production">type-argument</span>
of the constructed type. The substitution process is based on the semantic
meaning of type declarations, and is not simply textual substitution.</p>

<p class="MsoNormal">For example, given the generic class declaration</p>

<p class="Code"><span lang="DE">class Gen&lt;T,U&gt;<br>
{<br>
&nbsp;&nbsp; public T[,] a;</span></p>

<p class="Code"><span lang="DE">&nbsp;&nbsp; public void G(int i, T t, Gen&lt;U,T&gt; gt)
{...}</span></p>

<p class="Code"><span lang="DE">&nbsp;&nbsp; </span>public U Prop { get {...} set {...} }</p>

<p class="Code">&nbsp;&nbsp; public int H(double d) {...}<br>
}</p>

<p class="MsoNormal">the constructed type <span class="Codefragment"><span style="font-size:10.0pt">Gen&lt;int[],IComparable&lt;string&gt;&gt;</span></span>
has the following members:</p>

<p class="Code">public int[,][] a;</p>

<p class="Code">public void G(int i, int[] t,
Gen&lt;IComparable&lt;string&gt;,int[]&gt; gt) {...}</p>

<p class="Code">public IComparable&lt;string&gt; Prop { get {...} set {...} }</p>

<p class="Code">public int H(double d) {...}</p>

<p class="MsoNormal">The type of the member <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> in the generic class declaration <span class="Codefragment"><span style="font-size:10.0pt">Gen</span></span> is
“two-dimensional array of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>”,
so the type of the member <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
in the constructed type above is “two-dimensional array of one-dimensional
array of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>”,
or <span class="Codefragment"><span style="font-size:10.0pt">int[,][]</span></span>.</p>

<p class="MsoNormal">Within instance function members, the type of <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> is the
instance type (§10.3.1) of the containing declaration.</p>

<p class="MsoNormal">All members of a generic class can use type parameters from
any enclosing class, either directly or as part of a constructed type. When a
particular closed constructed type (§4.4.2) is used at run-time, each use of a
type parameter is replaced with the actual type argument supplied to the
constructed type. For example:</p>

<p class="Code">class C&lt;V&gt;<br>
{<br>
&nbsp;&nbsp; public V f1;<br>
&nbsp;&nbsp; public C&lt;V&gt; f2 = null;</p>

<p class="Code">&nbsp;&nbsp; public C(V x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.f1 = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.f2 = this;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Application<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp; &nbsp;&nbsp; C&lt;int&gt; x1 = new C&lt;int&gt;(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x1.f1);&nbsp;&nbsp;&nbsp;&nbsp; // Prints 1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&lt;double&gt; x2 = new C&lt;double&gt;(3.1415);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x2.f1);&nbsp;&nbsp;&nbsp;&nbsp; // Prints 3.1415<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613272"></a><a name="_Ref174230252"></a><a name="_Ref174230243"></a><a name="_Ref174229999"></a><a name="_Ref174229396">10.3.3
Inheritance</a></h3>

<p class="MsoNormal">A class <span class="Term">inherits</span> the members of its
direct base class type. Inheritance means that a class implicitly contains all
members of its direct base class type, except for the instance constructors,
destructors and static constructors of the base class. Some important aspects
of inheritance are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Inheritance is transitive. If <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> is derived from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> is derived
from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
then <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
inherits the members declared in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> as well as the members declared in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A derived class <em>extends</em> its direct base class. A derived
class can add new members to those it inherits, but it cannot remove the
definition of an inherited member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance constructors, destructors, and static constructors are
not inherited, but all other members are, regardless of their declared
accessibility (§3.5). However, depending on their declared accessibility,
inherited members might not be accessible in a derived class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A derived class can <span class="Term">hide</span> (§3.7.1.2) inherited members by declaring new members with the same name or signature.
Note however that hiding an inherited member does not remove that member—it
merely makes that member inaccessible directly through the derived class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance of a class contains a set of all instance fields
declared in the class and its base classes, and an implicit conversion (§6.1.6) exists from a derived class type to any of its base class types. Thus, a
reference to an instance of some derived class can be treated as a reference to
an instance of any of its base classes.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A class can declare virtual methods, properties, and indexers,
and derived classes can override the implementation of these function members.
This enables classes to exhibit polymorphic behavior wherein the actions
performed by a function member invocation varies depending on the run-time type
of the instance through which that function member is invoked.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">The inherited
member of a constructed class type are the members of the immediate base class
type (§10.1.4.1), which is found by substituting the type arguments of the
constructed type for each occurrence of the corresponding type parameters in
the <span class="Production">base-class-specification</span>. These members, in
turn, are transformed by substituting, for each <span class="Production">type-parameter</span>
in the member declaration, the corresponding <span class="Production">type-argument</span>
of the <span class="Production">base-class-specification</span>. </p>

<p class="Code">class B&lt;U&gt;<br>
{<br>
&nbsp;&nbsp; public U F(long index) {...}<br>
}</p>

<p class="Code">class D&lt;T&gt;: B&lt;T[]&gt;<br>
{<br>
&nbsp;&nbsp; public T G(string s) {...}<br>
}</p>

<p class="MsoNormal">In the above example, the constructed type <span class="Codefragment"><span style="font-size:10.0pt">D&lt;int&gt;</span></span>
has a non-inherited member <span class="Codefragment"><span style="font-size:
10.0pt">public</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> <span class="Codefragment"><span style="font-size:10.0pt">G(string
s)</span></span> obtained by substituting the type argument <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> for the
type parameter <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
<span class="Codefragment"><span style="font-size:10.0pt">D&lt;int&gt;</span></span>
also has an inherited member from the class declaration <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>. This
inherited member is determined by first determining the base class type <span class="Codefragment"><span style="font-size:10.0pt">B&lt;int[]&gt;</span></span>
of <span class="Codefragment"><span style="font-size:10.0pt">D&lt;int&gt;</span></span>
by substituting <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
for <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> in
the base class specification <span class="Codefragment"><span style="font-size:
10.0pt">B&lt;T[]&gt;</span></span>. Then, as a type argument to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span> is
substituted for <span class="Codefragment"><span style="font-size:10.0pt">U</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">U</span></span> <span class="Codefragment"><span style="font-size:10.0pt">F(long</span></span> <span class="Codefragment"><span style="font-size:10.0pt">index)</span></span>,
yielding the inherited member <span class="Codefragment"><span style="font-size:
10.0pt">public</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">int[]</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">F(long</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">index)</span></span>.</p>

<h3><a name="_Ref456696785"></a><a name="_Toc251613273"></a><a name="_Ref457122985">10.3.4 The new modifier</a></h3>

<p class="MsoNormal">A <span class="Production">class-member-declaration</span> is
permitted to declare a member with the same name or signature as an inherited
member. When this occurs, the derived class member is said to <span class="Term">hide</span>
the base class member. Hiding an inherited member is not considered an error,
but it does cause the compiler to issue a warning. To suppress the warning, the
declaration of the derived class member can include a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier to indicate that the
derived member is intended to hide the base member. This topic is discussed
further in §3.7.1.2.</p>

<p class="MsoNormal">If a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier is included in a declaration that doesn’t hide an inherited member, a
warning to that effect is issued. This warning is suppressed by removing the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier.</p>

<h3><a name="_Toc251613274"></a><a name="_Ref457390769">10.3.5 Access modifiers</a></h3>

<p class="MsoNormal">A <span class="Production">class-member-declaration</span> can
have any one of the five possible kinds of declared accessibility (§3.5.1): <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.
Except for the <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
combination, it is a compile-time error to specify more than one access
modifier. When a <span class="Production">class-member-declaration</span> does
not include any access modifiers, <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> is assumed.</p>

<h3><a name="_Toc251613275">10.3.6 Constituent types</a></h3>

<p class="MsoNormal">Types that are used in the declaration of a member are
called the constituent types of that member. Possible constituent types are the
type of a constant, field, property, event, or indexer, the return type of a
method or operator, and the parameter types of a method, indexer, operator, or
instance constructor. The constituent types of a member must be at least as
accessible as that member itself (§3.5.4).</p>

<h3><a name="_Toc251613276"></a><a name="_Ref457712631">10.3.7 Static and
instance members</a></h3>

<p class="MsoNormal">Members of a class are either <span class="Term">static
members</span> or <span class="Term">instance members</span>. Generally speaking,
it is useful to think of static members as belonging to class types and
instance members as belonging to objects (instances of class types).</p>

<p class="MsoNormal">When a field, method, property, event, operator, or
constructor declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier, it declares a static
member. In addition, a constant or type declaration implicitly declares a
static member. Static members have the following characteristics:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a static member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is referenced in a <span class="Production">member-access</span> (§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> must denote a
type containing <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.
It is a compile-time error for <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> to denote an instance.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static field identifies exactly one storage location to be
shared by all instances of a given closed class type. No matter how many
instances of a given closed class type are created, there is only ever one copy
of a static field.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static function member (method, property, event, operator, or
constructor) does not operate on a specific instance, and it is a compile-time
error to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in such a function member.</p>

<p class="MsoNormal">When a field, method, property, event, indexer, constructor,
or destructor declaration does not include a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier, it declares an instance
member. (An instance member is sometimes called a non-static member.) Instance
members have the following characteristics:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When an instance member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is referenced in a <span class="Production">member-access</span> (§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> must denote
an instance of a type containing <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>. It is a binding-time error for <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> to denote a
type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Every instance of a class contains a separate set of all instance
fields of the class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance function member (method, property, indexer, instance
constructor, or destructor) operates on a given instance of the class, and this
instance can be accessed as <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> (§7.6.7).</p>

<p class="MsoNormal">The following example illustrates the rules for accessing
static and instance members:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; int x;<br>
&nbsp;&nbsp; static int y;</p>

<p class="Code">&nbsp;&nbsp; void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, same as this.x = 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, same as Test.y = 1<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot access this.x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, same as Test.y = 1<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test t = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t.x = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; t.y = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cannot access static member through instance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test.x = 1;&nbsp;&nbsp;&nbsp; // Error, cannot access instance member through type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test.y = 1;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method shows that in an instance function member, a <span class="Production">simple-name</span>
(§7.6.2) can be used to access both instance members and static members. The <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> method shows
that in a static function member, it is a compile-time error to access an
instance member through a <span class="Production">simple-name</span>. The <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> method
shows that in a <span class="Production">member-access</span> (§7.6.4), instance members must be accessed through instances, and static members must be accessed
through types.</p>

<h3><a name="_Toc251613277"></a><a name="_Ref472691654">10.3.8 Nested types</a></h3>

<p class="MsoNormal">A type declared within a class or struct declaration is
called a <span class="Term">nested type</span>. A type that is declared within a
compilation unit or namespace is called a <span class="Term">non-nested type</span>.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; class B<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.B.F");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
is a nested type because it is declared within class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, and class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a non-nested type because it is
declared within a compilation unit.</p>

<h4><a name="_Toc251613278">10.3.8.1 Fully qualified name</a></h4>

<p class="MsoNormal">The fully qualified name (§3.8.1) for a nested type is <span class="Codefragment"><span style="font-size:10.0pt">S.N</span></span> where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is the fully
qualified name of the type in which type <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is declared.</p>

<h4><a name="_Toc251613279">10.3.8.2 Declared accessibility</a></h4>

<p class="MsoNormal">Non-nested types can have <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> declared accessibility and have
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
declared accessibility by default. Nested types can have these forms of
declared accessibility too, plus one or more additional forms of declared
accessibility, depending on whether the containing type is a class or struct:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A nested type that is declared in a class can have any of five forms
of declared accessibility (<span class="Codefragment"><span style="font-size:
10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">protected internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>) and, like other class members,
defaults to <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
declared accessibility.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A nested type that is declared in a struct can have any of three
forms of declared accessibility (<span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>) and, like other struct members,
defaults to <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
declared accessibility.</p>

<p class="MsoNormal">The example</p>

<p class="Code">public class List<br>
{<br>
&nbsp;&nbsp; // Private data structure<br>
&nbsp;&nbsp; private class Node<br>
&nbsp;&nbsp; { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public object Data;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Node Next;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Node(object data, Node next) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Data = data;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Next = next;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; private Node first = null;<br>
&nbsp;&nbsp; private Node last = null;</p>

<p class="Code">&nbsp;&nbsp; // Public interface</p>

<p class="Code">&nbsp;&nbsp; public void AddToFront(object o) {...}</p>

<p class="Code">&nbsp;&nbsp; public void AddToBack(object o) {...}</p>

<p class="Code">&nbsp;&nbsp; public object RemoveFromFront() {...}</p>

<p class="Code">&nbsp;&nbsp; public object RemoveFromBack() {...}</p>

<p class="Code">&nbsp;&nbsp; public int Count { get {...} }<br>
}</p>

<p class="MsoNormal">declares a private nested class <span class="Codefragment"><span style="font-size:10.0pt">Node</span></span>.</p>

<h4><a name="_Toc251613280">10.3.8.3 Hiding</a></h4>

<p class="MsoNormal">A nested type may hide (§3.7.1) a base member. The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier is
permitted on nested type declarations so that hiding can be expressed
explicitly. The example</p>

<p class="Code">using System;</p>

<p class="Code">class Base<br>
{<br>
&nbsp;&nbsp; public static void M() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Base.M");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Derived: Base <br>
{<br>
&nbsp;&nbsp; new public class M <br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Derived.M.F");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test <br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Derived.M.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">shows a nested class <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> that hides the method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> defined in <span class="Codefragment"><span style="font-size:10.0pt">Base</span></span>.</p>

<h4><a name="_Toc251613281">10.3.8.4 this access</a></h4>

<p class="MsoNormal">A nested type and its containing type do not have a special
relationship with regard to <span class="Production">this-access</span> (§7.6.7). Specifically, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
within a nested type cannot be used to refer to instance members of the
containing type. In cases where a nested type needs access to the instance
members of its containing type, access can be provided by providing the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> for the
instance of the containing type as a constructor argument for the nested type.
The following example</p>

<p class="Code">using System;</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; int i = 123;</p>

<p class="Code">&nbsp;&nbsp; public void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nested n = new Nested(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.G();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public class Nested<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C this_c;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Nested(C c) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this_c = c;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(this_c.i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C c = new C();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">shows this technique. An instance of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> creates an
instance of <span class="Codefragment"><span style="font-size:10.0pt">Nested</span></span>
and passes its own <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">Nested</span></span>’s
constructor in order to provide subsequent access to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>’s instance members.</p>

<h4><a name="_Toc251613282">10.3.8.5 Access to private and protected members of
the containing type</a></h4>

<p class="MsoNormal">A nested type has access to all of the members that are
accessible to its containing type, including members of the containing type
that have <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>
declared accessibility. The example</p>

<p class="Code">using System;</p>

<p class="Code">class C <br>
{<br>
&nbsp;&nbsp; private static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.F");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public class Nested <br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test <br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C.Nested.G();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">shows a class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> that contains a nested class <span class="Codefragment"><span style="font-size:10.0pt">Nested</span></span>. Within <span class="Codefragment"><span style="font-size:10.0pt">Nested</span></span>, the
method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
calls the static method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
defined in <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> has
private declared accessibility.</p>

<p class="MsoNormal">A nested type also may access protected members defined in a
base type of its containing type. In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Base <br>
{<br>
&nbsp;&nbsp; protected void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Base.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Derived: Base <br>
{<br>
&nbsp;&nbsp; public class Nested <br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Derived d = new Derived();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test <br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Derived.Nested n = new Derived.Nested();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.G();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the nested class <span class="Codefragment"><span style="font-size:10.0pt">Derived.Nested</span></span> accesses the protected
method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
defined in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span>’s
base class, <span class="Codefragment"><span style="font-size:10.0pt">Base</span></span>,
by calling through an instance of <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span>.</p>

<h4><a name="_Toc508360948"></a><a name="_Toc251613283"></a><a name="_Ref168410987">10.3.8.6 Nested types in generic classes</a></h4>

<p class="MsoNormal">A generic class declaration can contain nested type
declarations. The type parameters of the enclosing class can be used within the
nested types. A nested type declaration can contain additional type parameters
that apply only to the nested type.</p>

<p class="MsoNormal">Every type declaration contained within a generic class
declaration is implicitly a generic type declaration. When writing a reference
to a type nested within a generic type, the containing constructed type,
including its type arguments, must be named. However, from within the outer
class, the nested type can be used without qualification; the instance type of
the outer class can be implicitly used when constructing the nested type. The
following example shows three different correct ways to refer to a constructed
type created from <span class="Codefragment"><span style="font-size:10.0pt">Inner</span></span>;
the first two are equivalent:</p>

<p class="Code">class Outer&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; class Inner&lt;U&gt;<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void F(T t, U u) {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(T t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outer&lt;T&gt;.Inner&lt;string&gt;.F(t, "abc");&nbsp;&nbsp;&nbsp; // These two
statements have<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inner&lt;string&gt;.F(t, "abc");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // the same effect</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outer&lt;int&gt;.Inner&lt;string&gt;.F(3, "abc");&nbsp; //
This type is different</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Outer.Inner&lt;string&gt;.F(t, "abc");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Error, Outer needs type arg<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Although it is bad programming style, a type parameter in a
nested type can hide a member or type parameter declared in the outer type:</p>

<p class="Code">class Outer&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; class Inner&lt;T&gt;&nbsp;&nbsp;&nbsp; // Valid, hides Outer’s T<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public T t;&nbsp;&nbsp;&nbsp; // Refers to Inner’s T<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613284">10.3.9 Reserved member names</a></h3>

<p class="MsoNormal">To facilitate the underlying C# run-time implementation, for
each source member declaration that is a property, event, or indexer, the
implementation must reserve two method signatures based on the kind of the
member declaration, its name, and its type. It is a compile-time error for a
program to declare a member whose signature matches one of these reserved
signatures, even if the underlying run-time implementation does not make use of
these reservations.</p>

<p class="MsoNormal">The reserved names do not introduce declarations, thus they
do not participate in member lookup. However, a declaration’s associated
reserved method signatures do participate in inheritance (§10.3.3), and can be hidden with the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier (§10.3.4).</p>

<p class="MsoNormal">The reservation of these names serves three purposes:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>To allow the underlying implementation to use an ordinary
identifier as a method name for get or set access to the C# language feature.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>To allow other languages to interoperate using an ordinary
identifier as a method name for get or set access to the C# language feature.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>To help ensure that the source accepted by one conforming
compiler is accepted by another, by making the specifics of reserved member
names consistent across all C# implementations. </p>

<p class="MsoNormal">The declaration of a destructor (§10.13) also causes a
signature to be reserved (§10.3.9.4).</p>

<h4><a name="_Toc251613285"></a><a name="_Ref507052499">10.3.9.1 Member names
reserved for properties</a></h4>

<p class="MsoNormal">For a property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> (§10.7) of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, the
following signatures are reserved:</p>

<p class="Code">T get_P();<br>
void set_P(T value);</p>

<p class="MsoNormal">Both signatures are reserved, even if the property is
read-only or write-only.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public int P {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return 123; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; new public int get_P() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 456;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; new public void set_P(int value) {<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = new B();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A a = b;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(a.P);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(b.P);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(b.get_P());<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a class <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> defines a read-only property <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>, thus reserving signatures for <span class="Codefragment"><span style="font-size:10.0pt">get_P</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">set_P</span></span> methods.
A class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
derives from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and hides both of these reserved signatures. The example produces the output:</p>

<p class="Code">123<br>
123<br>
456</p>

<h4><a name="_Toc251613286"></a><a name="_Ref507052501">10.3.9.2 Member names
reserved for events</a></h4>

<p class="MsoNormal">For an event <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> (§10.8) of delegate type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, the
following signatures are reserved:</p>

<p class="Code"><span lang="DA">void add_E(T handler);<br>
void remove_E(T handler);</span></p>

<h4><a name="_Toc251613287"></a><a name="_Ref507052503">10.3.9.3 Member names
reserved for indexers</a></h4>

<p class="MsoNormal">For an indexer (§10.9) of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> with parameter-list <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>, the
following signatures are reserved:</p>

<p class="Code">T get_Item(L);<br>
void set_Item(L, T value);</p>

<p class="MsoNormal">Both signatures are reserved, even if the indexer is
read-only or write-only.</p>

<p class="MsoNormal">Furthermore the member name <span class="Codefragment"><span style="font-size:10.0pt">Item</span></span> is reserved.</p>

<h4><a name="_Toc251613288"></a><a name="_Ref507055175">10.3.9.4 Member names
reserved for destructors</a></h4>

<p class="MsoNormal">For a class containing a destructor (§10.13), the following signature is reserved:</p>

<p class="Code">void Finalize();<a name="_Ref449414866"></a></p>

<h2><a name="_Toc251613289"></a><a name="_Ref519497948"></a><a name="_Ref519497863"></a><a name="_Ref519497826"></a><a name="_Ref519497236"></a><a name="_Ref519497217"></a><a name="_Toc39739448"></a><a name="_Toc40539347"></a><a name="_Toc40539379"></a><a name="_Toc39739450"></a><a name="_Toc40539349"></a><a name="_Toc40539381"></a><a name="_Toc39739454"></a><a name="_Toc40539353"></a><a name="_Toc40539385"></a><a name="_Toc39739457"></a><a name="_Toc40539356"></a><a name="_Toc40539388"></a><a name="_Toc39739460"></a><a name="_Toc40539359"></a><a name="_Toc40539391"></a>10.4 Constants</h2>

<p class="MsoNormal">A <span class="Term">constant</span> is a class member that
represents a constant value: a value that can be computed at compile-time. A <span class="Production">constant-declaration</span> introduces one or more constants
of a given type.</p>

<p class="Grammar"><span lang="FR">constant-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; constant-modifiers<sub>opt</sub>&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">const</span></span><span lang="FR">&nbsp;&nbsp; type&nbsp;&nbsp; constant-declarators&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar"><span lang="FR">constant-modifiers:<br>
constant-modifier<br>
constant-modifiers&nbsp;&nbsp; constant-modifier</span></p>

<p class="Grammar">constant-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Grammar">constant-declarators:<br>
constant-declarator<br>
constant-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constant-declarator</p>

<p class="Grammar">constant-declarator:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; constant-expression</p>

<p class="MsoNormal">A <span class="Production">constant-declaration</span> may
include a set of <span class="Production">attributes</span> (§17), a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier (§10.3.4), and a valid combination of the four access modifiers (§10.3.5). The attributes and modifiers apply to all of the members declared by the <span class="Production">constant-declaration</span>. Even though constants are
considered static members, a <span class="Production">constant-declaration</span>
neither requires nor allows a <span class="Codefragment"><span style="font-size:
10.0pt">static</span></span> modifier. It is an error for the same modifier to
appear multiple times in a constant declaration.</p>

<p class="MsoNormal">The <span class="Production">type</span> of a <span class="Production">constant-declaration</span> specifies the type of the members
introduced by the declaration. The type is followed by a list of <span class="Production">constant-declarator</span>s, each of which introduces a new
member. A <span class="Production">constant-declarator</span> consists of an <span class="Production">identifier</span> that names the member, followed by an “<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>” token,
followed by a <span class="Production">constant-expression</span> (§7.19) that gives the value of the member.</p>

<p class="MsoNormal">The <span class="Production">type</span> specified in a
constant declaration must be <span class="Codefragment"><span style="font-size:
10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">decimal</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:
10.0pt">string</span></span>, an<span class="Production"> enum-type</span>, or a <span class="Production">reference-type</span>. Each <span class="Production">constant-expression</span>
must yield a value of the target type or of a type that can be converted to the
target type by an implicit conversion (§6.1).</p>

<p class="MsoNormal">The <span class="Production">type</span> of a constant must be
at least as accessible as the constant itself (§3.5.4).</p>

<p class="MsoNormal">The value of a constant is obtained in an expression using a
<span class="Production">simple-name</span> (§7.6.2) or a <span class="Production">member-access</span>
(§7.6.4). </p>

<p class="MsoNormal">A constant can itself participate in a <span class="Production">constant-expression</span>. Thus, a constant may be used in
any construct that requires a <span class="Production">constant-expression</span>.
Examples of such constructs include <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> labels, <span class="Codefragment"><span style="font-size:10.0pt">goto</span></span> <span class="Codefragment"><span style="font-size:10.0pt">case</span></span> statements, <span class="Codefragment"><span style="font-size:10.0pt">enum</span></span> member
declarations, attributes, and other constant declarations.</p>

<p class="MsoNormal">As described in §7.19, a <span class="Production">constant-expression</span>
is an expression that can be fully evaluated at compile-time. Since the only
way to create a non-null value of a <span class="Production">reference-type</span>
other than <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
is to apply the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator, and since the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
operator is not permitted in a <span class="Production">constant-expression</span>,
the only possible value for constants of <span class="Production">reference-types</span>
other than <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">When a symbolic name for a constant value is desired, but
when the type of that value is not permitted in a constant declaration, or when
the value cannot be computed at compile-time by a <span class="Production">constant-expression</span>,
a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
field (§10.5.2) may be used instead.</p>

<p class="MsoNormal">A constant declaration that declares multiple constants is
equivalent to multiple declarations of single constants with the same
attributes, modifiers, and type. For example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public const double X = 1.0, Y = 2.0, Z = 3.0;<br>
}</p>

<p class="MsoNormal">is equivalent to</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public const double X = 1.0;<br>
&nbsp;&nbsp; public const double Y = 2.0;<br>
&nbsp;&nbsp; public const double Z = 3.0;<br>
}</p>

<p class="MsoNormal">Constants are permitted to depend on other constants within
the same program as long as the dependencies are not of a circular nature. The
compiler automatically arranges to evaluate the constant declarations in the
appropriate order. In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public const int X = B.Z + 1;<br>
&nbsp;&nbsp; public const int Y = 10;<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public const int Z = A.Y + 1;<br>
}</p>

<p class="MsoNormal">the compiler first evaluates <span class="Codefragment"><span style="font-size:10.0pt">A.Y</span></span>, then evaluates <span class="Codefragment"><span style="font-size:10.0pt">B.Z</span></span>, and
finally evaluates <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span>,
producing the values <span class="Codefragment"><span style="font-size:10.0pt">10</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">11</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">12</span></span>. Constant
declarations may depend on constants from other programs, but such dependencies
are only possible in one direction. Referring to the example above, if <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> were declared
in separate programs, it would be possible for <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span> to depend on <span class="Codefragment"><span style="font-size:10.0pt">B.Z</span></span>, but <span class="Codefragment"><span style="font-size:10.0pt">B.Z</span></span> could then
not simultaneously depend on <span class="Codefragment"><span style="font-size:
10.0pt">A.Y</span></span>.</p>

<h2><a name="_Toc251613290"></a><a name="_Ref174219481"></a><a name="_Ref495219389"></a><a name="_Ref495219282"></a><a name="_Ref485473945"></a><a name="_Ref485190209"></a><a name="_Ref464376824"></a><a name="_Ref463513604"></a><a name="_Ref461620044"></a><a name="_Ref456697660"></a><a name="_Toc445783053">10.5
Fields</a></h2>

<p class="MsoNormal">A <span class="Term">field</span> is a member that represents
a variable associated with an object or class. A <span class="Production">field-declaration</span>
introduces one or more fields of a given type.</p>

<p class="Grammar">field-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; field-modifiers<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp;
variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">field-modifiers:<br>
field-modifier<br>
field-modifiers&nbsp;&nbsp; field-modifier</p>

<p class="Grammar">field-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
static<a name="_Toc445783054"><br>
readonly<br>
volatile</a></span></span></p>

<p class="Grammar">variable-declarators:<br>
variable-declarator<br>
variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; variable-declarator</p>

<p class="Grammar">variable-declarator:<br>
identifier<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; variable-initializer</p>

<p class="Grammar">variable-initializer:<br>
expression<br>
array-initializer</p>

<p class="MsoNormal">A <span class="Production">field-declaration</span> may
include a set of <span class="Production">attributes</span> (§17), a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier (§10.3.4), a valid combination of the four access modifiers (§10.3.5), and a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier
(§10.5.1). In addition, a <span class="Production">field-declaration</span> may
include a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
modifier (§10.5.2) or a <span class="Codefragment"><span style="font-size:10.0pt">volatile</span></span>
modifier (§10.5.3) but not both. The attributes and modifiers apply to all of
the members declared by the <span class="Production">field-declaration</span>. It
is an error for the same modifier to appear multiple times in a field
declaration.</p>

<p class="MsoNormal">The <span class="Production">type</span> of a <span class="Production">field-declaration</span> specifies the type of the members
introduced by the declaration. The type is followed by a list of <span class="Production">variable-declarator</span>s, each of which introduces a new
member. A <span class="Production">variable-declarator</span> consists of an <span class="Production">identifier</span> that names that member, optionally followed
by an “<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>”
token and a <span class="Production">variable-initializer</span> (§10.5.5) that gives the initial value of that member.</p>

<p class="MsoNormal">The <span class="Production">type</span> of a field must be at
least as accessible as the field itself (§3.5.4).</p>

<p class="MsoNormal">The value of a field is obtained in an expression using a <span class="Production">simple-name</span> (§7.6.2) or a <span class="Production">member-access</span>
(§7.6.4). The value of a non-readonly field is modified using an <span class="Production">assignment</span> (§7.17). The value of a non-readonly field
can be both obtained and modified using postfix increment and decrement
operators (§7.6.9) and prefix increment and decrement operators (§7.7.5).</p>

<p class="MsoNormal"><a name="_Ref457725385">A field declaration that declares
multiple fields is equivalent to multiple declarations of single fields with
the same attributes, modifiers, and type. For example</a></p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int X = 1, Y, Z = 100;<br>
}</p>

<p class="MsoNormal">is equivalent to</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int X = 1;<br>
&nbsp;&nbsp; public static int Y;<br>
&nbsp;&nbsp; public static int Z = 100;<br>
}</p>

<h3><a name="_Toc251613291"></a><a name="_Ref458831848">10.5.1 Static and
instance fields</a></h3>

<p class="MsoNormal">When a field declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier,
the fields introduced by the declaration are <span class="Term">static fields</span>.
When no <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier is present, the fields introduced by the declaration are <span class="Production">instance fields</span>. Static fields and instance fields are
two of the several kinds of variables (§5) supported by C#, and at times they
are referred to as <span class="Term">static variables</span> and <span class="Term">instance variables</span>, respectively.</p>

<p class="MsoNormal"><a name="_Ref457459568">A static field is not part of a
specific instance; instead, it is shared amongst all instances of a closed type
(§</a>4.4.2). No matter how many instances of a closed class type are created,
there is only ever one copy of a static field for the associated application
domain. </p>

<p class="MsoNormal">For example:</p>

<p class="Code">class C&lt;V&gt;<br>
{<br>
&nbsp;&nbsp; static int count = 0;</p>

<p class="Code">&nbsp;&nbsp; public C() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static int Count {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return count; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">&nbsp;</p>

<p class="Code">class Application<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&lt;int&gt; x1 = new C&lt;int&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(C&lt;int&gt;.Count);&nbsp;&nbsp;&nbsp; // Prints 1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&lt;double&gt; x2 = new C&lt;double&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(C&lt;int&gt;.Count);&nbsp;&nbsp;&nbsp; // Prints 1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&lt;int&gt; x3 = new C&lt;int&gt;();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(C&lt;int&gt;.Count);&nbsp;&nbsp;&nbsp; // Prints 2<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An instance field belongs to an instance. Specifically,
every instance of a class contains a separate set of all the instance fields of
that class.</p>

<p class="MsoNormal"><a name="_Ref457725395">When a field is referenced in a </a><span class="Production">member-access</span> (§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>, if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a static
field, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
must denote a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>, and if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an instance field, E must denote an
instance of a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>.</p>

<p class="MsoNormal">The differences between static and instance members are
discussed further in §10.3.7.</p>

<h3><a name="_Toc251613292"></a><a name="_Ref463497371">10.5.2 Readonly fields</a></h3>

<p class="MsoNormal">When a <span class="Production">field-declaration</span>
includes a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
modifier, the fields introduced by the declaration are <span class="Term">readonly
fields</span>. Direct assignments to readonly fields can only occur as part of
that declaration or in an instance constructor or static constructor in the
same class. (A readonly field can be assigned to multiple times in these
contexts.) Specifically, direct assignments to a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> field are permitted only in the
following contexts:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In the <span class="Production">variable-declarator</span> that
introduces the field (by including a <span class="Production">variable-initializer</span>
in the declaration).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For an instance field, in the instance constructors of the class
that contains the field declaration; for a static field, in the static
constructor of the class that contains the field declaration. These are also
the only contexts in which it is valid to pass a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> field as an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> parameter.</p>

<p class="MsoNormal">Attempting to assign to a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span> field or pass it as an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> parameter
in any other context is a compile-time error.</p>

<h4><a name="_Toc251613293">10.5.2.1 Using static readonly fields for constants</a></h4>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
field is useful when a symbolic name for a constant value is desired, but when
the type of the value is not permitted in a <span class="Codefragment"><span style="font-size:10.0pt">const</span></span> declaration, or when the value
cannot be computed at compile-time. In the example</p>

<p class="Code">public class Color<br>
{<br>
&nbsp;&nbsp; public static readonly Color Black = new Color(0, 0, 0);<br>
&nbsp;&nbsp; public static readonly Color White = new Color(255, 255, 255);<br>
&nbsp;&nbsp; public static readonly Color Red = new Color(255, 0, 0);<br>
&nbsp;&nbsp; public static readonly Color Green = new Color(0, 255, 0);<br>
&nbsp;&nbsp; public static readonly Color Blue = new Color(0, 0, 255);</p>

<p class="Code">&nbsp;&nbsp; private byte red, green, blue;</p>

<p class="Code">&nbsp;&nbsp; public Color(byte r, byte g, byte b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; red = r;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; green = g;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blue = b;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Black</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">White</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Red</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Green</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span> members
cannot be declared as <span class="Codefragment"><span style="font-size:10.0pt">const</span></span>
members because their values cannot be computed at compile-time. However,
declaring them <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
instead has much the same effect.</p>

<h4><a name="_Toc251613294">10.5.2.2 Versioning of constants and static
readonly fields</a></h4>

<p class="MsoNormal">Constants and readonly fields have different binary
versioning semantics. When an expression references a constant, the value of
the constant is obtained at compile-time, but when an expression references a
readonly field, the value of the field is not obtained until run-time. Consider
an application that consists of two separate programs:</p>

<p class="Code">using System;</p>

<p class="Code">namespace Program1<br>
{<br>
&nbsp;&nbsp; public class Utils<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static readonly int X = 1;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">namespace Program2<br>
{<br>
&nbsp;&nbsp; class Test<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(Program1.Utils.X);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Program1</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Program2</span></span>
namespaces denote two programs that are compiled separately. Because <span class="Codefragment"><span style="font-size:10.0pt">Program1.Utils.X</span></span>
is declared as a static readonly field, the value output by the <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
statement is not known at compile-time, but rather is obtained at run-time.
Thus, if the value of <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is changed and <span class="Codefragment"><span style="font-size:10.0pt">Program1</span></span>
is recompiled, the <span class="Codefragment"><span style="font-size:10.0pt">Console.WriteLine</span></span>
statement will output the new value even if <span class="Codefragment"><span style="font-size:10.0pt">Program2</span></span> isn’t recompiled. However, had <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> been a
constant, the value of <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
would have been obtained at the time <span class="Codefragment"><span style="font-size:10.0pt">Program2</span></span> was compiled, and would remain
unaffected by changes in <span class="Codefragment"><span style="font-size:10.0pt">Program1</span></span>
until <span class="Codefragment"><span style="font-size:10.0pt">Program2</span></span>
is recompiled.</p>

<h3><a name="_Toc251613295"></a><a name="_Ref513708616">10.5.3 Volatile fields</a></h3>

<p class="MsoNormal">When a <span class="Production">field-declaration</span>
includes a <span class="Codefragment"><span style="font-size:10.0pt">volatile</span></span>
modifier, the fields introduced by that declaration are <span class="Term">volatile
fields</span>. </p>

<p class="MsoNormal">For non-volatile fields, optimization techniques that
reorder instructions can lead to unexpected and unpredictable results in
multi-threaded programs that access fields without synchronization such as that
provided by the <span class="Production">lock-statement</span> (§8.12). These optimizations can be performed by the compiler, by the run-time system,
or by hardware. For volatile fields, such reordering optimizations are
restricted: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A read of a volatile field is called a <span class="Term">volatile
read</span>. A volatile read has “acquire semantics”; that is, it is guaranteed
to occur prior to any references to memory that occur after it in the
instruction sequence. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A write of a volatile field is called a <span class="Term">volatile
write</span>. A volatile write has “release semantics”; that is, it is
guaranteed to happen after any memory references prior to the write instruction
in the instruction sequence.</p>

<p class="MsoNormal">These restrictions ensure that all threads will observe
volatile writes performed by any other thread in the order in which they were
performed. A conforming implementation is not required to provide a single
total ordering of volatile writes as seen from all threads of execution. The
type of a volatile field must be one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">reference-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">System.IntPtr</span></span>,
or<span class="Codefragment"><span style="font-size:10.0pt"> System.UIntPtr</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An <span class="Production">enum-type</span> having an enum base
type of <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;<br>
using System.Threading;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; public static int result;&nbsp;&nbsp; <br>
&nbsp;&nbsp; public static volatile bool finished;</p>

<p class="Code">&nbsp;&nbsp; static void Thread2() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = 143;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finished = true; <br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finished = false;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Run Thread2() in a new thread<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Thread(new ThreadStart(Thread2)).Start();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Wait for Thread2 to signal that it has a result by
setting<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // finished to true.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (;;) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (finished) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("result = {0}", result);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output:</p>

<p class="Code">result = 143</p>

<p class="MsoNormal">In this example, the method <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> starts a new thread that runs the
method <span class="Codefragment"><span style="font-size:10.0pt">Thread2</span></span>.
This method stores a value into a non-volatile field called <span class="Codefragment"><span style="font-size:10.0pt">result</span></span>, then
stores <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
in the volatile field <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span>.
The main thread waits for the field <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span> to be set to <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, then
reads the field <span class="Codefragment"><span style="font-size:10.0pt">result</span></span>.
Since <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span>
has been declared <span class="Codefragment"><span style="font-size:10.0pt">volatile</span></span>,
the main thread must read the value <span class="Codefragment"><span style="font-size:10.0pt">143</span></span> from the field <span class="Codefragment"><span style="font-size:10.0pt">result</span></span>. If the
field <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span>
had not been declared <span class="Codefragment"><span style="font-size:10.0pt">volatile</span></span>,
then it would be permissible for the store to <span class="Codefragment"><span style="font-size:10.0pt">result</span></span> to be visible to the main thread <em>after</em>
the store to <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span>,
and hence for the main thread to read the value <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> from the field <span class="Codefragment"><span style="font-size:10.0pt">result</span></span>.
Declaring <span class="Codefragment"><span style="font-size:10.0pt">finished</span></span>
as a <span class="Codefragment"><span style="font-size:10.0pt">volatile</span></span>
field prevents any such inconsistency.</p>

<h3><a name="_Toc251613296"></a><a name="_Ref458319647">10.5.4 Field
initialization</a></h3>

<p class="MsoNormal">The initial value of a field, whether it be a static field
or an instance field, is the default value (§5.2) of the field’s type. It is
not possible to observe the value of a field before this default initialization
has occurred, and a field is thus never “uninitialized”. The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static bool b;<br>
&nbsp;&nbsp; int i;</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test t = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("b = {0}, i = {1}", b, t.i);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">b = False, i = 0</p>

<p class="MsoNormal">because <span class="Codefragment"><span style="font-size:
10.0pt">b</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> are both automatically initialized to default values.</p>

<h3><a name="_Toc251613297"></a><a name="_Ref458680759">10.5.5 Variable
initializers</a></h3>

<p class="MsoNormal">Field declarations may include <span class="Production">variable-initializer</span>s.
For static fields, variable initializers correspond to assignment statements
that are executed during class initialization. For instance fields, variable
initializers correspond to assignment statements that are executed when an
instance of the class is created.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static double x = Math.Sqrt(2.0);<br>
&nbsp;&nbsp; int i = 100;<br>
&nbsp;&nbsp; string s = "Hello";</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test a = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("x = {0}, i = {1}, s = {2}", x, a.i, a.s);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">x = 1.4142135623731, i = 100, s = Hello</p>

<p class="MsoNormal">because an assignment to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> occurs when static field initializers
execute and assignments to <span class="Codefragment"><span style="font-size:
10.0pt">i</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">s</span></span> occur when the instance field initializers execute.</p>

<p class="MsoNormal">The default value initialization described in §10.5.4 occurs for all fields, including fields that have variable initializers. Thus,
when a class is initialized, all static fields in that class are first
initialized to their default values, and then the static field initializers are
executed in textual order. Likewise, when an instance of a class is created,
all instance fields in that instance are first initialized to their default
values, and then the instance field initializers are executed in textual order.</p>

<p class="MsoNormal">It is possible for static fields with variable initializers
to be observed in their default value state. However, this is strongly
discouraged as a matter of style. The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static int a = b + 1;<br>
&nbsp;&nbsp; static int b = a + 1;</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("a = {0}, b = {1}", a, b);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">exhibits this behavior. Despite the circular definitions of
a and b, the program is valid. It results in the output</p>

<p class="Code">a = 1, b = 2</p>

<p class="MsoNormal">because the static fields <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> are initialized to <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> (the default
value for <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>)
before their initializers are executed. When the initializer for <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> runs, the
value of <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is zero, and so <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is initialized to <span class="Codefragment"><span style="font-size:10.0pt">1</span></span>.
When the initializer for <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
runs, the value of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is already <span class="Codefragment"><span style="font-size:10.0pt">1</span></span>,
and so <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is initialized to <span class="Codefragment"><span style="font-size:10.0pt">2</span></span>.</p>

<h4><a name="_Toc251613298"></a><a name="_Ref506725548">10.5.5.1 Static field
initialization</a></h4>

<p class="MsoNormal">The static field variable initializers&nbsp;of a class correspond to a sequence of assignments that are executed in the textual
order in which they appear in the class declaration. If a static constructor (§10.12) exists in the class,&nbsp;execution of the static field initializers occurs
immediately prior to executing that static constructor. Otherwise, the static
field initializers are executed at an implementation-dependent time prior to
the first use of a static field of that class. The example </p>

<p class="Code">using System;</p>

<p class="Code">class Test <br>
{ <br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1}", B.Y, A.X);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static int F(string s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int X = Test.F("Init A");<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public static int Y = Test.F("Init B");<br>
}</p>

<p class="MsoNormal">might produce either the output:</p>

<p class="Code">Init A<br>
Init B<br>
1 1</p>

<p class="MsoNormal">or the output:</p>

<p class="Code">Init B<br>
Init A<br>
1 1</p>

<p class="MsoNormal">because the execution of <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>’s initializer and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>’s initializer
could occur in either order; they are only constrained to occur before the
references to those fields. However, in the example: </p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1}", B.Y, A.X);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static int F(string s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; static A() {}</p>

<p class="Code">&nbsp;&nbsp; public static int X = Test.F("Init A");<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; static B() {}</p>

<p class="Code">&nbsp;&nbsp; public static int Y = Test.F("Init B");<br>
}</p>

<p class="MsoNormal">the output must be:</p>

<p class="Code">Init B<br>
Init A<br>
1 1</p>

<p class="MsoNormal">because the rules for when static constructors execute (as defined
in §10.12) provide that <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s
static constructor (and hence <span class="Codefragment"><span style="font-size:
10.0pt">B</span></span>’s static field initializers) must run before <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>’s static
constructor and field initializers.</p>

<h4><a name="_Toc251613299"></a><a name="_Ref506725594">10.5.5.2 Instance field
initialization</a></h4>

<p class="MsoNormal">The instance field variable initializers of a class
correspond to a sequence of assignments that are executed immediately upon
entry to any one of the instance constructors (§10.11.1) of that class. The
variable initializers are executed in the textual order in which they appear in
the class declaration. The class instance creation and initialization process
is described further in §10.11.</p>

<p class="MsoNormal">A variable initializer for an instance field cannot
reference the instance being created. Thus, it is a compile-time error to
reference <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in a variable initializer, as it is a compile-time error for a variable
initializer to reference any instance member through a <span class="Production">simple-name</span>.
In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int x = 1;<br>
&nbsp;&nbsp; int y = x + 1;&nbsp;&nbsp;&nbsp; // Error, reference to instance member of this<br>
}</p>

<p class="MsoNormal">the variable initializer for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> results in a compile-time error
because it references a member of the instance being created.</p>

<h2><a name="_Toc251613300"></a><a name="_Ref456697668">10.6 Methods</a></h2>

<p class="MsoNormal">A <span class="Term">method</span> is a member that implements
a computation or action that can be performed by an object or class. Methods
are declared using <span class="Production">method-declaration</span>s:</p>

<p class="Grammar">method-declaration:<br>
method-header&nbsp;&nbsp; method-body</p>

<p class="Grammar">method-header:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; method-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
return-type&nbsp;&nbsp; member-name&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub></p>

<p class="Grammar">method-modifiers:<br>
method-modifier<br>
method-modifiers&nbsp;&nbsp; method-modifier</p>

<p class="Grammar">method-modifier:<br>
<a name="OLE_LINK1"><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></a></p>

<p class="Grammar">return-type:<br>
type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">void</span></span></p>

<p class="Grammar">member-name:<br>
identifier<br>
interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">method-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Production">method-declaration</span> may
include a set of <span class="Production">attributes</span> (§17) and a valid combination of the four access modifiers (§10.3.5), the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> (§10.3.4),&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> (§10.6.2), <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
(§10.6.3), <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
(§10.6.4), <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
(§10.6.5), <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
(§10.6.6), and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
(§10.6.7) modifiers.</p>

<p class="MsoNormal">A declaration has a valid combination of modifiers if all of
the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The declaration includes a valid combination of access modifiers
(§10.3.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The declaration does not include the same modifier multiple
times.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The declaration includes at most one of the following modifiers: <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The declaration includes at most one of the following modifiers: <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declaration includes the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> modifier, then the declaration
does not include any of the following modifiers: <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declaration includes the <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> modifier, then the declaration
does not include any of the following modifiers: <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declaration includes the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> modifier, then the declaration
also includes the <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the declaration includes the <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> modifier, then it does not
include any of the following modifiers: <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>.</p>

<p class="MsoNormal">The <span class="Production">return-type</span> of a method
declaration specifies the type of the value computed and returned by the
method. The <span class="Production">return-type</span> is <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> if the
method does not return a value. If the declaration includes the <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier, then the return type must be <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>.</p>

<p class="MsoNormal">The <span class="Production">member-name</span> specifies the
name of the method. Unless the method is an explicit interface member
implementation (§13.4.1), the <span class="Production">member-name</span> is
simply an <span class="Production">identifier</span>. For an explicit interface
member implementation, the <span class="Production">member-name</span> consists
of an <span class="Production">interface-type</span> followed by a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>” and an <span class="Production">identifier</span>.</p>

<p class="MsoNormal">The optional <span class="Production">type-parameter-list</span>
specifies the type parameters of the method (§10.1.3). If a <span class="Production">type-parameter-list</span> is specified the method is a <span class="Term">generic method</span>. If the method has an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, a <span class="Production">type-parameter-list </span>cannot be
specified.</p>

<p class="MsoNormal">The optional <span class="Production">formal-parameter-list</span>
specifies the parameters of the method (§10.6.1).</p>

<p class="MsoNormal">The optional <span class="Production">type-parameter-constraints-clauses</span>
specify constraints on individual type parameters (§10.1.5) and may only be
specified if a <span class="Production">type-parameter-list</span> is also
supplied, and the method does not have an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> modifier.</p>

<p class="MsoNormal">The <span class="Production">return-type</span> and each of
the types referenced in the <span class="Production">formal-parameter-list</span>
of a method must be at least as accessible as the method itself (§3.5.4).</p>

<p class="MsoNormal">For <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
methods, the <span class="Production">method-body</span> consists simply of a
semicolon. For <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
methods the <span class="Production">method-body</span> may consist of either a
semicolon or a <span class="Production">block</span>. For all other methods, the <span class="Production">method-body</span> consists of a <span class="Production">block</span>,
which specifies the statements to execute when the method is invoked.</p>

<p class="MsoNormal">The name, the type parameter list and the formal parameter
list of a method define the signature (§3.6) of the method. Specifically, the
signature of a method consists of its name, the number of type parameters and
the number, modifiers, and types of its formal parameters. For these purposes, any
type parameter of the method that occurs in the type of a formal parameter is
identified not by its name, but by its ordinal position in the type argument
list of the method.The return type is not part of a method’s signature, nor are
the names of the type parameters or the formal parameters.</p>

<p class="MsoNormal">The name of a method must differ from the names of all other
non-methods declared in the same class. In addition, the signature of a method
must differ from the signatures of all other methods declared in the same class,
and two methods declared in the same class may not have signatures that differ
solely by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.</p>

<p class="MsoNormal">The method’s <span class="Production">type-parameter</span>s
are in scope throughout the <span class="Production">method-declaration</span>,
and can be used to form types throughout that scope in <span class="Production">return-type</span>,
<span class="Production">method-body</span>, and <span class="Production">type-parameter-constraints-clauses</span>
but not in <span class="Production">attributes</span>.</p>

<p class="MsoNormal">All formal parameters and type parameters must have
different names.</p>

<h3><a name="_Toc251613301"></a><a name="_Ref458932106"></a><a name="_Ref458833300">10.6.1 Method parameters</a></h3>

<p class="MsoNormal">The parameters of a method, if any, are declared by the
method’s <span class="Production">formal-parameter-list</span>.</p>

<p class="Grammar">formal-parameter-list:<br>
fixed-parameters<br>
fixed-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; parameter-array<br>
parameter-array</p>

<p class="Grammar">fixed-parameters:<br>
fixed-parameter<br>
fixed-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; fixed-parameter</p>

<p class="Grammar">fixed-parameter:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; parameter-modifier<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp;
default-argument<sub>opt</sub> </p>

<p class="Grammar">default-argument:<br>
<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>&nbsp;
expression </p>

<p class="Grammar">parameter-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ref<br>
out<br>
this</span></span></p>

<p class="Grammar">parameter-array:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">params</span></span>&nbsp;&nbsp; array-type&nbsp;&nbsp; identifier</p>

<p class="MsoNormal">The formal parameter list consists of one or more
comma-separated parameters of which only the last may be a <span class="Production">parameter-array</span>.</p>

<p class="MsoNormal">A <span class="Production">fixed-parameter</span> consists of
an optional set of <span class="Production">attributes</span> (§17), an optional <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> modifier,
a <span class="Production">type</span>, an <span class="Production">identifier</span>
and an optional <span class="Production">default-argument</span>. Each <span class="Production">fixed-parameter</span> declares a parameter of the given type
with the given name. The <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
modifier designates the method as an extension method and is only allowed on
the first parameter of a static method. Extension methods are further described
in §10.6.9.</p>

<p class="MsoNormal">A <span class="Production">fixed-parameter</span> with a <span class="Production">default-argument</span> is known as an <span class="Term">optional
parameter</span>, whereas a <span class="Production">fixed-parameter</span>
without a <span class="Production">default-argument</span> is a <span class="Term">required
parameter</span>. A required parameter may not appear after an optional
parameter in a <span class="Production">formal-parameter-list</span>.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter cannot have a <span class="Production">default-argument</span>. The <span class="Production">expression</span> in a <span class="Production">default-argument</span>
must be one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>a <span class="Production">constant-expression</span> </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>an expression of the form <span class="Codefragment"><span style="font-size:10.0pt">new S()</span></span> where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is a value type</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>an expression of the form <span class="Codefragment"><span style="font-size:10.0pt">default(S)</span></span> where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is a value
type</p>

<p class="MsoNormal">The <span class="Production">expression</span> must be
implicitly convertible by an identity or nullable conversion to the type of the
parameter.</p>

<p class="MsoNormal">If optional parameters occur in an implementing partial
method declaration (§10.2.7) , an explicit interface member implementation (§13.4.1) or in a single-parameter indexer declaration (§10.9) the compiler should
give a warning, since these members can never be invoked in a way that permits
arguments to be omitted.</p>

<p class="MsoNormal">A <span class="Production">parameter-array</span> consists of
an optional set of <span class="Production">attributes</span> (§17), a <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
modifier, an <span class="Production">array-type</span>, and an <span class="Production">identifier</span>. A parameter array declares a single
parameter of the given array type with the given name. The <span class="Production">array-type</span> of a parameter array must be a
single-dimensional array type (§12.1). In a method invocation, a parameter
array permits either a single argument of the given array type to be specified,
or it permits zero or more arguments of the array element type to be specified.
Parameter arrays are described further in §10.6.1.4.</p>

<p class="MsoNormal">A <span class="Production">parameter-array</span> may occur
after an optional parameter, but cannot have a default value – the omission of
arguments for a <span class="Production">parameter-array</span> would instead
result in the creation of an empty array.</p>

<p class="MsoNormal">The following example illustrates different kinds of
parameters:</p>

<p class="Code">public void M(<br>
&nbsp;&nbsp; ref int &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,<br>
&nbsp;&nbsp; decimal &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d,<br>
&nbsp;&nbsp; bool &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = false,<br>
&nbsp;&nbsp; bool? &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = false,<br>
&nbsp;&nbsp; string &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = "Hello",<br>
&nbsp;&nbsp; object &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o = null,<br>
&nbsp;&nbsp; T &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = default(T),<br>
&nbsp;&nbsp; params int[] a<br>
) { }</p>

<p class="MsoNormal">In the <span class="Production">formal-parameter-list</span>
for <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is a required
ref parameter, <span class="Codefragment"><span style="font-size:10.0pt">d</span></span>
is a required value parameter, <span class="Codefragment"><span style="font-size:
10.0pt">b</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">o</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">t</span></span> are optional
value parameters and <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
is a parameter array.</p>

<p class="MsoNormal">A method declaration creates a separate declaration space
for parameters, type parameters and local variables. Names are introduced into
this declaration space by the type parameter list and the formal parameter list
of the method and by local variable declarations in the <span class="Production">block</span>
of the method. It is an error for two members of a method declaration space to
have the same name. It is an error for the method declaration space and the
local variable declaration space of a nested declaration space to contain
elements with the same name.</p>

<p class="MsoNormal">A method invocation (§7.6.5.1) creates a copy, specific to
that invocation, of the formal parameters and local variables of the method,
and the argument list of the invocation assigns values or variable references
to the newly created formal parameters. Within the <span class="Production">block</span>
of a method, formal parameters can be referenced by their identifiers in <span class="Production">simple-name</span> expressions (§7.6.2).</p>

<p class="MsoNormal">There are four kinds of formal parameters:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Value parameters, which are declared without any modifiers.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Reference parameters, which are declared with the <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> modifier.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Output parameters, which are declared with the <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Parameter arrays, which are declared with the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
modifier.</p>

<p class="MsoNormal">As described in §3.6, the <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifiers are part of a method’s
signature, but the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span>
modifier is not.</p>

<h4><a name="_Toc251613302"></a><a name="_Ref469481370">10.6.1.1 Value
parameters</a></h4>

<p class="MsoNormal">A parameter declared with no modifiers is a value parameter.
A value parameter corresponds to a local variable that gets its initial value
from the corresponding argument supplied in the method invocation.</p>

<p class="MsoNormal">When a formal parameter is a value parameter, the
corresponding argument in a method invocation must be an expression that is
implicitly convertible (§6.1) to the formal parameter type.</p>

<p class="MsoNormal">A method is permitted to assign new values to a value
parameter. Such assignments only affect the local storage location represented
by the value parameter—they have no effect on the actual argument given in the
method invocation.</p>

<h4><a name="_Toc251613303"></a><a name="_Ref469545785">10.6.1.2 Reference
parameters</a></h4>

<p class="MsoNormal">A parameter declared with a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> modifier is a reference parameter.
Unlike a value parameter, a reference parameter does not create a new storage
location. Instead, a reference parameter represents the same storage location
as the variable given as the argument in the method invocation.</p>

<p class="MsoNormal">When a formal parameter is a reference parameter, the
corresponding argument in a method invocation must consist of the keyword <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> followed by
a <span class="Production">variable-reference</span> (§5.3.3) of the same type as
the formal parameter. A variable must be definitely assigned before it can be
passed as a reference parameter.</p>

<p class="MsoNormal">Within a method, a reference parameter is always considered
definitely assigned.</p>

<p class="MsoNormal">A method declared as an iterator (§10.14) cannot have
reference parameters.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Swap(ref int x, ref int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int temp = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = temp;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 1, j = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Swap(ref i, ref j);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("i = {0}, j = {1}", i, j);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">i = 2, j = 1</p>

<p class="MsoNormal">For the invocation of <span class="Codefragment"><span style="font-size:10.0pt">Swap</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> represents <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> represents <span class="Codefragment"><span style="font-size:10.0pt">j</span></span>. Thus, the invocation has the effect
of swapping the values of <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">j</span></span>.</p>

<p class="MsoNormal">In a method that takes reference parameters it is possible
for multiple names to represent the same storage location. In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; string s;</p>

<p class="Code">&nbsp;&nbsp; void F(ref string a, ref string b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = "One";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a = "Two";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = "Three";<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(ref s, ref s);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the invocation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> passes a reference to <span class="Codefragment"><span style="font-size:10.0pt">s</span></span> for both <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>. Thus, for
that invocation, the names <span class="Codefragment"><span style="font-size:
10.0pt">s</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> all
refer to the same storage location, and the three assignments all modify the
instance field <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>.</p>

<h4><a name="_Toc251613304"></a><a name="_Ref469545856">10.6.1.3 Output
parameters</a></h4>

<p class="MsoNormal">A parameter declared with an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier is an output parameter.
Similar to a reference parameter, an output parameter does not create a new
storage location. Instead, an output parameter represents the same storage
location as the variable given as the argument in the method invocation.</p>

<p class="MsoNormal">When a formal parameter is an output parameter, the
corresponding argument in a method invocation must consist of the keyword <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> followed by
a <span class="Production">variable-reference</span> (§5.3.3) of the same type as
the formal parameter. A variable need not be definitely assigned before it can
be passed as an output parameter, but following an invocation where a variable
was passed as an output parameter, the variable is considered definitely
assigned.</p>

<p class="MsoNormal">Within a method, just like a local variable, an output
parameter is initially considered unassigned and must be definitely assigned
before its value is used.</p>

<p class="MsoNormal">Every output parameter of a method must be definitely
assigned before the method returns.</p>

<p class="MsoNormal">A method declared as a partial method (§10.2.7) or an iterator (§10.14) cannot have output parameters.</p>

<p class="MsoNormal">Output parameters are typically used in methods that produce
multiple return values. For example:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void SplitPath(string path, out string dir, out string name) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = path.Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (i &gt; 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char ch = path[i – 1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ch == '\\' || ch == '/' || ch == ':') break;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i--;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dir = path.Substring(0, i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = path.Substring(i);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string dir, name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SplitPath("c:\\Windows\\System\\hello.txt", out dir, out name);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(dir);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(name);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The example produces the output:</p>

<p class="Code">c:\Windows\System\<br>
hello.txt</p>

<p class="MsoNormal">Note that the <span class="Codefragment"><span style="font-size:10.0pt">dir</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">name</span></span> variables can be unassigned before
they are passed to <span class="Codefragment"><span style="font-size:10.0pt">SplitPath</span></span>,
and that they are considered definitely assigned following the call.</p>

<h4><a name="_Toc251613305"></a><a name="_Ref491514416"></a><a name="_Ref486077532">10.6.1.4 Param</a>eter arrays</h4>

<p class="MsoNormal">A parameter declared with a <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> modifier is a parameter array. If
a formal parameter list includes a parameter array, it must be the last
parameter in the list and it must be of a single-dimensional array type. For
example, the types <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">string[][]</span></span>
can be used as the type of a parameter array, but the type <span class="Codefragment"><span style="font-size:10.0pt">string[,]</span></span> can
not. It is not possible to combine the <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> modifier with the modifiers <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.</p>

<p class="MsoNormal">A parameter array permits arguments to be specified in one
of two ways in a method invocation:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The argument given for a parameter array can be a single
expression that is implicitly convertible (§6.1) to the parameter array type.
In this case, the parameter array acts precisely like a value parameter. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Alternatively, the invocation can specify zero or more arguments
for the parameter array, where each argument is an expression that is
implicitly convertible (§6.1) to the element type of the parameter array. In
this case, the invocation creates an instance of the parameter array type with
a length corresponding to the number of arguments, initializes the elements of
the array instance with the given argument values, and uses the newly created
array instance as the actual argument.</p>

<p class="MsoNormal">Except for allowing a variable number of arguments in an
invocation, a parameter array is precisely equivalent to a value parameter (§10.6.1.1) of the same type.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F(params int[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write("Array contains {0} elements:", args.Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (int i in args) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write(" {0}", i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] arr = {1, 2, 3};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(arr);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(10, 20, 30, 40);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">Array contains 3 elements: 1 2 3<br>
Array contains 4 elements: 10 20 30 40<br>
Array contains 0 elements:</p>

<p class="MsoNormal">The first invocation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> simply passes the array <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> as a value
parameter. The second invocation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> automatically creates a four-element <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span> with the
given element values and passes that array instance as a value parameter.
Likewise, the third invocation of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> creates a zero-element <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span> and
passes that instance as a value parameter. The second and third invocations are
precisely equivalent to writing:</p>

<p class="Code">F(new int[] {10, 20, 30, 40});<br>
F(new int[] {});</p>

<p class="MsoNormal">When performing overload resolution, a method with a
parameter array may be applicable either in its normal form or in its expanded
form (§7.5.3.1). The expanded form of a method is available only if the normal
form of the method is not applicable and only if a method with the same
signature as the expanded form is not already declared in the same type.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F(params object[] a) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(object[])");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F()");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void F(object a0, object a1) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("F(object,object)");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1, 2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1, 2, 3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(1, 2, 3, 4);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">F();<br>
F(object[]);<br>
F(object,object);<br>
F(object[]);<br>
F(object[]);</p>

<p class="MsoNormal">In the example, two of the possible expanded forms of the
method with a parameter array are already included in the class as regular
methods. These expanded forms are therefore not considered when performing
overload resolution, and the first and third method invocations thus select the
regular methods. When a class declares a method with a parameter array, it is
not uncommon to also include some of the expanded forms as regular methods. By
doing so it is possible to avoid the allocation of an array instance that
occurs when an expanded form of a method with a parameter array is invoked.</p>

<p class="MsoNormal">When the type of a parameter array is <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>, a
potential ambiguity arises between the normal form of the method and the
expended form for a single <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> parameter. The reason for the ambiguity is that an
<span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>
is itself implicitly convertible to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. The ambiguity presents no
problem, however, since it can be resolved by inserting a cast if needed.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void F(params object[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (object o in args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Console.Write(o.GetType().FullName);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write(" ");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] a = {1, "Hello", 123.456};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object o = a;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(a);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F((object)a);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(o);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F((object[])o);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">System.Int32 System.String System.Double<br>
System.Object[]<br>
System.Object[]<br>
System.Int32 System.String System.Double</p>

<p class="MsoNormal">In the first and last invocations of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>, the normal
form of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
is applicable because an implicit conversion exists from the argument type to
the parameter type (both are of type <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>). Thus, overload resolution
selects the normal form of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span>, and the argument is passed as a regular value
parameter. In the second and third invocations, the normal form of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is not
applicable because no implicit conversion exists from the argument type to the
parameter type (type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
cannot be implicitly converted to type <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>). However, the expanded form of
<span class="Codefragment"><span style="font-size:10.0pt">F</span></span> is
applicable, so it is selected by overload resolution. As a result, a
one-element <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>
is created by the invocation, and the single element of the array is
initialized with the given argument value (which itself is a reference to an <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>).</p>

<h3><a name="_Toc251613306"></a><a name="_Ref458831933">10.6.2 Static and
instance methods</a></h3>

<p class="MsoNormal">When a method declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier, that method is said to be a static method. When no <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier
is present, the method is said to be an instance method.</p>

<p class="MsoNormal">A static method does not operate on a specific instance, and
it is a compile-time error to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> in a static method.</p>

<p class="MsoNormal">An instance method operates on a given instance of a class,
and that instance can be accessed as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> (§7.6.7).</p>

<p class="MsoNormal">When a method is referenced in a <span class="Production">member-access</span>
(§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>,
if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a
static method, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
must denote a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>, and if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an instance method, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> must denote
an instance of a type containing <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoNormal">The differences between static and instance members are
discussed further in §10.3.7.</p>

<h3><a name="_Toc251613307"></a><a name="_Ref458831944">10.6.3 Virtual methods</a></h3>

<p class="MsoNormal">When an instance method declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier, that method is said to be a virtual method. When no <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier is present, the method is said to be a non-virtual method.</p>

<p class="MsoNormal">The implementation of a non-virtual method is invariant: The
implementation is the same whether the method is invoked on an instance of the
class in which it is declared or an instance of a derived class. In contrast,
the implementation of a virtual method can be superseded by derived classes.
The process of superseding the implementation of an inherited virtual method is
known as <span class="Term">overriding</span> that method (§10.6.4).</p>

<p class="MsoNormal">In a virtual method invocation, the <span class="Term">run-time
type</span> of the instance for which that invocation takes place determines
the actual method implementation to invoke. In a non-virtual method invocation,
the <span class="Term">compile-time type</span> of the instance is the
determining factor. In precise terms, when a method named <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> is invoked
with an argument list <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
on an instance with a compile-time type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> and a run-time type <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> (where <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> is either <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> or a class
derived from <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>),
the invocation is processed as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>First, overload resolution is applied to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, to select a
specific method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
from the set of methods declared in and inherited by <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>. This is described in §7.6.5.1.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Then, if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a non-virtual method, <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is invoked.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a virtual method, and the most derived implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> with respect
to <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> is
invoked.</p>

<p class="MsoNormal">For every virtual method declared in or inherited by a
class, there exists a <span class="Term">most derived implementation</span> of
the method with respect to that class. The most derived implementation of a
virtual method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
with respect to a class <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
is determined as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
contains the introducing <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
declaration of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>,
then this is the most derived implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">R</span></span> contains an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>, then this is the most derived
implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the most derived implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> with respect
to <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> is
the same as the most derived implementation of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> with respect to the direct base class
of <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>.</p>

<p class="MsoNormal">The following example illustrates the differences between
virtual and non-virtual methods:</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public void F() { Console.WriteLine("A.F"); }</p>

<p class="Code">&nbsp;&nbsp; public virtual void G() { Console.WriteLine("A.G");
}<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; new public void F() { Console.WriteLine("B.F"); }</p>

<p class="Code">&nbsp;&nbsp; public override void G() { Console.WriteLine("B.G");
}<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = new B();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A a = b;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.G();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.G();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the example, <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> introduces a non-virtual method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> and a virtual
method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>.
The class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
introduces a <em>new</em> non-virtual method <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>, thus <em>hiding</em> the inherited <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>, and also <em>overrides</em>
the inherited method <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>.
The example produces the output:</p>

<p class="Code">A.F<br>
B.F<br>
B.G<br>
B.G</p>

<p class="MsoNormal">Notice that the statement <span class="Codefragment"><span style="font-size:10.0pt">a.G()</span></span> invokes <span class="Codefragment"><span style="font-size:10.0pt">B.G</span></span>, not <span class="Codefragment"><span style="font-size:10.0pt">A.G</span></span>. This is because the run-time type
of the instance (which is <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>),
not the compile-time type of the instance (which is <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>), determines the actual method
implementation to invoke.</p>

<p class="MsoNormal"><a name="_Ref458831966"></a><a name="_Ref458831978">Because
methods are allowed to hide inherited methods, it is possible for a class to
contain several virtual methods with the same signature. This does not present
an ambiguity problem, since all but the most derived method are hidden. In the
example</a></p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public virtual void F() { Console.WriteLine("A.F"); }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; public override void F() { Console.WriteLine("B.F"); }<br>
}</p>

<p class="Code">class C: B<br>
{<br>
&nbsp;&nbsp; new public virtual void F() { Console.WriteLine("C.F"); }<br>
}</p>

<p class="Code">class D: C<br>
{<br>
&nbsp;&nbsp; public override void F() { Console.WriteLine("D.F"); }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D d = new D();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A a = d;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = d;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C c = d;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
classes contain two virtual methods with the same signature: The one introduced
by <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and
the one introduced by <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.
The method introduced by <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
hides the method inherited from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. Thus, the override declaration in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> overrides the
method introduced by <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>,
and it is not possible for <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> to override the method introduced by <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. The example
produces the output:</p>

<p class="Code">B.F<br>
B.F<br>
D.F<br>
D.F</p>

<p class="MsoNormal">Note that it is possible to invoke the hidden virtual method
by accessing an instance of <span class="Codefragment"><span style="font-size:
10.0pt">D</span></span> through a less derived type in which the method is not
hidden.</p>

<h3><a name="_Toc251613308"></a><a name="_Ref459600522">10.6.4 Override methods</a></h3>

<p class="MsoNormal">When an instance method declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier, the method is said to be an <span class="Term">override method</span>.
An override method overrides an inherited virtual method with the same
signature. Whereas a virtual method declaration <em>introduces</em> a new
method, an override method declaration <em>specializes</em> an existing
inherited virtual method by providing a new implementation of that method.</p>

<p class="MsoNormal">The method overridden by an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> declaration is known as the <span class="Term">overridden base method</span>. For an override method <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> declared in a
class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>,
the overridden base method is determined by examining each base class type of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, starting
with the direct base class type of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> and continuing with each successive
direct base class type, until in a given base class type at least one accessible
method is located which has the same signature as <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> after substitution of type arguments.
For the purposes of locating the overridden base method, a method is considered
accessible if it is <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
if it is <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
if it is <span class="Codefragment"><span style="font-size:10.0pt">protected
internal</span></span>, or if it is <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> and declared in the same
program as <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoNormal">A compile-time error occurs unless all of the following are
true for an override declaration:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An overridden base method can be located as described above.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>There is exactly one such overridden base method. This
restriction has effect only if the base class type is a constructed type where
the substitution of type arguments makes the signature of two methods the same.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The overridden base method is a virtual, abstract, or override
method. In other words, the overridden base method cannot be static or
non-virtual.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The overridden base method is not a sealed method.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The override method and the overridden base method have the same
return type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The override declaration and the overridden base method have the
same declared accessibility. In other words, an override declaration cannot
change the accessibility of the virtual method. However, if the overridden base
method is protected internal and it is declared in a different assembly than
the assembly containing the override method then the override method’s declared
accessibility must be protected.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The override declaration does not specify
type-parameter-constraints-clauses. Instead the constraints are inherited from
the overridden base method. Note that constraints that are type parameters in
the overridden method may be replaced by type arguments in the inherited
constraint. This can lead to constraints that are not legal when explicitly
specified, such as value types or sealed types.</p>

<p class="MsoNormal">The following example demonstrates how the overriding rules
work for generic classes:</p>

<p class="Code">abstract class C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public virtual T F() {...}</p>

<p class="Code">&nbsp;&nbsp; public virtual C&lt;T&gt; G() {...}</p>

<p class="Code">&nbsp;&nbsp; public virtual void H(C&lt;T&gt; x) {...}<br>
}</p>

<p class="Code">class D: C&lt;string&gt;<br>
{<br>
&nbsp;&nbsp; public override string F() {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">&nbsp;&nbsp; public override C&lt;string&gt; G() {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">&nbsp;&nbsp; public override void H(C&lt;T&gt; x) {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error,
should be C&lt;string&gt;<br>
}</p>

<p class="Code"><span lang="NL">class E&lt;T,U&gt;: C&lt;U&gt;<br>
{<br>
&nbsp;&nbsp; public override U F() {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Ok</p>

<p class="Code">&nbsp;&nbsp; public override C&lt;U&gt; G() {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">&nbsp;&nbsp; public override void H(C&lt;T&gt; x) {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error,
should be C&lt;U&gt;<br>
}</p>

<p class="MsoNormal">An override declaration can access the overridden base
method using a <span class="Production">base-access</span> (§7.6.8). In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int x;</p>

<p class="Code">&nbsp;&nbsp; public virtual void PrintFields() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("x = {0}", x);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; int y;</p>

<p class="Code">&nbsp;&nbsp; public override void PrintFields() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.PrintFields();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("y = {0}", y);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">base.PrintFields()</span></span>
invocation in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
invokes the <span class="Codefragment"><span style="font-size:10.0pt">PrintFields</span></span>
method declared in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
A <span class="Production">base-access</span> disables the virtual invocation
mechanism and simply treats the base method as a non-virtual method. Had the
invocation in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
been written <span class="Codefragment"><span style="font-size:10.0pt">((A)this).PrintFields()</span></span>,
it would recursively invoke the <span class="Codefragment"><span style="font-size:10.0pt">PrintFields</span></span> method declared in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, not the one
declared in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>,
since <span class="Codefragment"><span style="font-size:10.0pt">PrintFields</span></span>
is virtual and the run-time type of <span class="Codefragment"><span style="font-size:10.0pt">((A)this)</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.</p>

<p class="MsoNormal">Only by including an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> modifier can a method override
another method. In all other cases, a method with the same signature as an
inherited method simply hides the inherited method. In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public virtual void F() {}<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; public virtual void F() {}&nbsp;&nbsp;&nbsp; // Warning, hiding inherited F()<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
does not include an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier and therefore does not override the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. Rather, the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> hides the method in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, and a
warning is reported because the declaration does not include a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public virtual void F() {}<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; new private void F() {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Hides A.F within body of B<br>
}</p>

<p class="Code">class C: B<br>
{<br>
&nbsp;&nbsp; public override void F() {}&nbsp;&nbsp; // Ok, overrides A.F<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
hides the virtual <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method inherited from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.
Since the new <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> has
private access, its scope only includes the class body of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> and does not
extend to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.
Therefore, the declaration of <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">C</span></span> is permitted to override the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> inherited from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<h3><a name="_Toc251613309"></a><a name="_Ref497214085">10.6.5 Sealed methods</a></h3>

<p class="MsoNormal">When an instance method declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier, that method is said to be a <span class="Term">sealed method</span>. If
an instance method declaration includes the&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span> modifier, it must also include
the <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier. Use of the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier prevents a derived class from further overriding the method.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public virtual void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.F");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public virtual void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.G");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; sealed override public void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("B.F");<br>
&nbsp;&nbsp; } </p>

<p class="Code">&nbsp;&nbsp; override public void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("B.G");<br>
&nbsp;&nbsp; } <br>
}</p>

<p class="Code">class C: B<br>
{<br>
&nbsp;&nbsp; override public void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.G");<br>
&nbsp;&nbsp; } <br>
}</p>

<p class="MsoNormal">the class <span class="Codefragment"><span style="font-size:
10.0pt">B</span></span> provides two override methods: an <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method that
has the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier and a <span class="Codefragment"><span style="font-size:10.0pt">G</span></span>
method that does not. <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s
use of the sealed <span class="Codefragment"><span style="font-size:10.0pt">modifier</span></span>
prevents <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
from further overriding <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>.<a name="_Ref459600504"></a></p>

<h3><a name="_Toc251613310"></a><a name="_Ref508600752"></a><a name="_Ref508600735"></a><a name="_Ref508188515"></a><a name="_Ref508188482"></a><a name="_Ref508188217"></a><a name="_Ref508188105">10.6.6 Abstract methods</a></h3>

<p class="MsoNormal">When an instance method declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
modifier, that method is said to be an <span class="Term">abstract method</span>.
Although an abstract method is implicitly also a virtual method, it cannot have
the modifier <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>.</p>

<p class="MsoNormal">An abstract method declaration introduces a new virtual
method but does not provide an implementation of that method. Instead,
non-abstract derived classes are required to provide their own implementation
by overriding that method. Because an abstract method provides no actual
implementation, the <span class="Production">method-body</span> of an abstract
method simply consists of a semicolon.</p>

<p class="MsoNormal">Abstract method declarations are only permitted in abstract
classes (§10.1.1.1).</p>

<p class="MsoNormal">In the example</p>

<p class="Code"><a name="_Ref458831992">public abstract class Shape<br>
{<br>
&nbsp;&nbsp; public abstract void Paint(Graphics g, Rectangle r);<br>
}</a></p>

<p class="Code">public class Ellipse: Shape<br>
{<br>
&nbsp;&nbsp; public override void Paint(Graphics g, Rectangle r) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.DrawEllipse(r);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class Box: Shape<br>
{<br>
&nbsp;&nbsp; public override void Paint(Graphics g, Rectangle r) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.DrawRect(r);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Shape</span></span>
class defines the abstract notion of a geometrical shape object that can paint
itself. The <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>
method is abstract because there is no meaningful default implementation. The <span class="Codefragment"><span style="font-size:10.0pt">Ellipse</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Box</span></span> classes are
concrete <span class="Codefragment"><span style="font-size:10.0pt">Shape</span></span>
implementations. Because these classes are non-abstract, they are required to
override the <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>
method and provide an actual implementation.</p>

<p class="MsoNormal">It is a compile-time error for a <span class="Production">base-access</span>
(§7.6.8) to reference an abstract method. In the example</p>

<p class="Code">abstract class A<br>
{<br>
&nbsp;&nbsp; public abstract void F();<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; public override void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, base.F is abstract<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a compile-time error is reported for the <span class="Codefragment"><span style="font-size:10.0pt">base.F()</span></span>
invocation because it references an abstract method.</p>

<p class="MsoNormal">An abstract method declaration is permitted to override a
virtual method. This allows an abstract class to force re-implementation of the
method in derived classes, and makes the original implementation of the method
unavailable. In the example </p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public virtual void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">abstract class B: A<br>
{<br>
&nbsp;&nbsp; public abstract override void F();<br>
}</p>

<p class="Code">class C: B<br>
{<br>
&nbsp;&nbsp; public override void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
declares a virtual method, class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> overrides this method with an abstract
method, and class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
overrides the abstract method to provide its own implementation.</p>

<h3><a name="_Toc251613311"></a><a name="_Ref462622820">10.6.7 External methods</a></h3>

<p class="MsoNormal">When a method declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, that method is said to be an <span class="Term">external method</span>.
External methods are implemented externally, typically using a language other
than C#. Because an external method declaration provides no actual
implementation, the <span class="Production">method-body</span> of an external
method simply consists of a semicolon. An external method may not be generic.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier is typically used in conjunction with a <span class="Codefragment"><span style="font-size:10.0pt">DllImport</span></span> attribute (§17.5.1), allowing external methods to be implemented by DLLs (Dynamic Link Libraries). The
execution environment may support other mechanisms whereby implementations of
external methods can be provided.</p>

<p class="MsoNormal">When an external method includes a <span class="Codefragment"><span style="font-size:10.0pt">DllImport</span></span> attribute, the method
declaration must also include a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> modifier. This example demonstrates
the use of the <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier and the <span class="Codefragment"><span style="font-size:10.0pt">DllImport</span></span>
attribute:</p>

<p class="Code">using System.Text;<br>
using System.Security.Permissions;<br>
using System.Runtime.InteropServices;</p>

<p class="Code">class Path<br>
{<br>
&nbsp;&nbsp; [DllImport("kernel32", SetLastError=true)]<br>
&nbsp;&nbsp; static extern bool CreateDirectory(string name, SecurityAttribute sa);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32", SetLastError=true)]<br>
&nbsp;&nbsp; static extern bool RemoveDirectory(string name);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32", SetLastError=true)]<br>
&nbsp;&nbsp; static extern int GetCurrentDirectory(int bufSize, StringBuilder buf);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32", SetLastError=true)]<br>
&nbsp;&nbsp; static extern bool SetCurrentDirectory(string name);<br>
}</p>

<h3><a name="_Ref171814693"></a><a name="_Toc251613312">10.6.8 Partial methods</a></h3>

<p class="MsoNormal">When a method declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier, that method is said to be a <span class="Term">partial method</span>.
Partial methods can only be declared as members of partial types (§10.2), and are subject to a number of restrictions. Partial methods are further
described in §10.2.7.</p>

<h3><a name="_Toc251613313"></a><a name="_Ref174230661"></a><a name="_Ref174229155">10.6.9 Extension methods</a></h3>

<p class="MsoNormal">When the first parameter of a method includes the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> modifier,
that method is said to be an <span class="Term">extension method</span>. Extension
methods can only be declared in non-generic, non-nested static classes. The
first parameter of an extension method can have no modifiers other than <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>, and the
parameter type cannot be a pointer type.</p>

<p class="MsoNormal">The following is an example of a static class that declares
two extension methods:</p>

<p class="Code">public static class Extensions<br>
{<br>
&nbsp;&nbsp; public static int ToInt32(this string s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Int32.Parse(s);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static T[] Slice&lt;T&gt;(this T[] source, int index,
int count) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &lt; 0 || count &lt; 0 || source.Length – index &lt; count)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T[] result = new T[count];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Array.Copy(source, index, result, 0, count);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An extension method is a regular static method. In addition,
where its enclosing static class is in scope, an extension method can be
invoked using instance method invocation syntax (§7.6.5.2), using the receiver
expression as the first argument.</p>

<p class="MsoNormal">The following program uses the extension methods declared
above:</p>

<p class="Code">static class Program<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] strings = { "1", "22", "333",
"4444" };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string s in strings.Slice(1, 2)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(s.ToInt32());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The Slice method is available on the string[], and the
ToInt32 method is available on string, because they have been declared as
extension methods. The meaning of the program is the same as the following,
using ordinary static method calls:</p>

<p class="Code">static class Program<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] strings = { "1", "22", "333",
"4444" };<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string s in Extensions.Slice(strings, 1, 2)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(Extensions.ToInt32(s));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613314"></a><a name="_Ref458503251">10.6.10 Method body</a></h3>

<p class="MsoNormal">The <span class="Production">method-body</span> of a method
declaration consists of either a <span class="Production">block</span> or a
semicolon.</p>

<p class="MsoNormal">Abstract and external method declarations do not provide a
method implementation, so their method bodies simply consist of a semicolon.
For any other method, the method body is a block (§8.2) that contains the
statements to execute when that method is invoked.</p>

<p class="MsoNormal">When the return type of a method is <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statements (§8.9.4) in that method’s body are not permitted to specify an
expression. If execution of the method body of a void method completes normally
(that is, control flows off the end of the method body), that method simply
returns to its caller.</p>

<p class="MsoNormal">When the return type of a method is not <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, each <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement in that method’s body must specify an expression that is implicitly
convertible to the return type. The endpoint of the method body of a
value-returning method must not be reachable. In other words, in a
value-returning method, control is not permitted to flow off the end of the
method body.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public int F() {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, return value required</p>

<p class="Code">&nbsp;&nbsp; public int G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int H(bool b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the value-returning <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method results in a compile-time error
because control can flow off the end of the method body. The <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">H</span></span> methods are
correct because all possible execution paths end in a return statement that
specifies a return value.</p>

<h3><a name="_Toc251613315">10.6.11 Method overloading</a></h3>

<p class="MsoNormal">The method overload resolution rules are described in §7.5.2.</p>

<h2><a name="_Ref456697690"></a><a name="_Toc251613316"></a><a name="_Ref174219512"></a><a name="_Ref513790608"></a><a name="_Ref513709172"></a><a name="_Ref495219409"></a><a name="_Ref465580584"></a><a name="_Ref464377045"></a><a name="_Ref463513613"></a><a name="_Ref462986749"></a><a name="_Ref461974711"></a><a name="_Ref456697676"></a><a name="_Toc445783055">10.7 Properties</a></h2>

<p class="MsoNormal">A <span class="Term">property</span> is a member that provides
access to a characteristic of an object or a class. Examples of properties
include the length of a string, the size of a font, the caption of a window,
the name of a customer, and so on. Properties are a natural extension of
fields—both are named members with associated types, and the syntax for
accessing fields and properties is the same. However, unlike fields, properties
do not denote storage locations. Instead, properties have <span class="Term">accessors</span>
that specify the statements to be executed when their values are read or
written. Properties thus provide a mechanism for associating actions with the
reading and writing of an object’s attributes; furthermore, they permit such
attributes to be computed.</p>

<p class="MsoNormal">Properties are declared using <span class="Production">property-declaration</span>s:</p>

<p class="Grammar">property-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; property-modifiers<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp;
member-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">{</span></span>&nbsp;&nbsp; accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">property-modifiers:<br>
property-modifier<br>
property-modifiers&nbsp;&nbsp; property-modifier</p>

<p class="Grammar">property-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">member-name:<br>
identifier<br>
interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="MsoNormal">A <span class="Production">property-declaration</span> may
include a set of <span class="Production">attributes</span> (§17) and a valid combination of the four access modifiers (§10.3.5), the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> (§10.3.4),&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> (§10.6.2), <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
(§10.6.3), <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
(§10.6.4), <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
(§10.6.5), <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
(§10.6.6), and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
(§10.6.7) modifiers.</p>

<p class="MsoNormal">Property declarations are subject to the same rules as
method declarations (§10.6) with regard to valid combinations of modifiers.</p>

<p class="MsoNormal">The <span class="Production">type</span> of a property
declaration specifies the type of the property introduced by the declaration,
and the <span class="Production">member-name</span> specifies the name of the
property. Unless the property is an explicit interface member implementation,
the <span class="Production">member-name</span> is simply an <span class="Production">identifier</span>. For an explicit interface member implementation
(§13.4.1), the <span class="Production">member-name</span> consists of an <span class="Production">interface-type</span> followed by a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>” and an <span class="Production">identifier</span>.</p>

<p class="MsoNormal">The <span class="Production">type</span> of a property must be
at least as accessible as the property itself (§3.5.4).</p>

<p class="MsoNormal">The <span class="Production">accessor-declarations</span>,
which must be enclosed in “<span class="Codefragment"><span style="font-size:
10.0pt">{</span></span>” and “<span class="Codefragment"><span style="font-size:
10.0pt">}</span></span>” tokens, declare the accessors (§10.7.2) of the property. The accessors specify the executable statements associated with reading and
writing the property.</p>

<p class="MsoNormal"><a name="_Ref460549912">Even though the syntax for accessing
a property is the same as that for a field, a property is not classified as a
variable. Thus, it is not possible to pass a property as a </a><span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> argument.</p>

<p class="MsoNormal"><a name="_Ref486410517">When a property declaration includes
an </a><span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the property is said to be an <span class="Term">external property</span>.
Because an external property declaration provides no actual implementation,
each of its <span class="Production">accessor-declarations</span> consists of a
semicolon.</p>

<h3><a name="_Toc251613317">10.7.1 Static and instance properties</a></h3>

<p class="MsoNormal"><a name="_Ref460498060">When a property declaration includes
a </a><span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier, the property is said to be a <span class="Term">static property</span>.
When no <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier is present, the property is said to be an <span class="Term">instance
property</span>.</p>

<p class="MsoNormal">A static property is not associated with a specific
instance, and it is a compile-time error to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> in the accessors of a static property.</p>

<p class="MsoNormal">An instance property is associated with a given instance of
a class, and that instance can be accessed as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> (§7.6.7) in the accessors of that
property.</p>

<p class="MsoNormal">When a property is referenced in a <span class="Production">member-access</span>
(§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>,
if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a
static property, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
must denote a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>, and if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an instance property, E must denote
an instance of a type containing <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoNormal">The differences between static and instance members are
discussed further in §10.3.7.</p>

<h3><a name="_Toc251613318"></a><a name="_Ref462024327">10.7.2 Accessors</a></h3>

<p class="MsoNormal">The <span class="Production">accessor-declarations</span> of a
property specify the executable statements associated with reading and writing
that property.</p>

<p class="Grammar">accessor-declarations:<br>
get-accessor-declaration&nbsp;&nbsp; set-accessor-declaration<sub>opt</sub><br>
set-accessor-declaration&nbsp;&nbsp; get-accessor-declaration<sub>opt</sub></p>

<p class="Grammar">get-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; accessor-modifier<sub>opt </sub>&nbsp;&nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp;
accessor-body</p>

<p class="Grammar">set-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; accessor-modifier<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">set</span></span>&nbsp;&nbsp;
accessor-body</p>

<p class="Grammar">accessor-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal<br>
private<br>
protected</span></span> &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">internal<br>
internal</span></span> &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">protected</span></span></p>

<p class="Grammar">accessor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The accessor declarations consist of a <span class="Production">get-accessor-declaration</span>, a <span class="Production">set-accessor-declaration</span>,
or both. Each accessor declaration consists of the token <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> followed by
an optional <span class="Production">accessor-modifier</span> and an <span class="Production">accessor-body</span>. </p>

<p class="MsoNormal">The use of <span class="Production">accessor-modifier</span>s
is governed by the following restrictions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An <span class="Production">accessor-modifier</span> may not be
used in an interface or in an explicit interface member implementation.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a property or indexer that has no <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> modifer, an <span class="Production">accessor-modifier</span> is permitted only if the property or
indexer has both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor, and then is permitted only on one of those accessors.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For a property or indexer that includes an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifer, an accessor must match the <span class="Production">accessor-modifier</span>,
if any, of the accessor being overridden.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Production">accessor-modifier</span> must declare
an accessibility that is strictly more restrictive than the declared
accessibility of the property or indexer itself. To be precise:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the property
or indexer has a declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, the <span class="Production">accessor-modifier</span>
may be either <span class="Codefragment"><span style="font-size:10.0pt">protected
internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the property
or indexer has a declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">protected internal</span></span>, the <span class="Production">accessor-modifier</span> may be either <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.</p>

<p class="MsoListBullet2"><span class="Codefragment"><span style="font-size:10.0pt;
font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;
</span></span></span>If the property or indexer has a declared accessibility of
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
the <span class="Production">accessor-modifier</span> must be <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the property
or indexer has a declared accessibility of <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>, no <span class="Production">accessor-modifier</span>
may be used.</p>

<p class="MsoNormal">For <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
properties, the <span class="Production">accessor-body</span> for each accessor
specified is simply a semicolon. A non-abstract, non-extern property may be an <span class="Term">automatically implemented property</span>, in which case both get
and set accessors must be given, both with a semicolon body (§10.7.3). For the accessors of any other non-abstract, non-extern property, the <span class="Production">accessor-body</span> is a <span class="Production">block</span>
which specifies the statements to be executed when the corresponding accessor
is invoked.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor corresponds to a parameterless method with a return value of the
property type. Except as the target of an assignment, when a property is
referenced in an expression, the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of the property is invoked
to compute the value of the property (§7.1.1). The body of a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor
must conform to the rules for value-returning methods described in §10.6.10. In particular, all <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statements in the body of a <span class="Codefragment"><span style="font-size:
10.0pt">get</span></span> accessor must specify an expression that is
implicitly convertible to the property type. Furthermore, the endpoint of a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor
must not be reachable.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor corresponds to a method with a single value parameter of the property
type and a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
return type. The implicit parameter of a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor is always named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>. When a
property is referenced as the target of an assignment (§7.17), or as the operand of <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">--</span></span> (§7.6.9, §7.7.5), the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor is invoked with an argument (whose value is that of the right-hand
side of the assignment or the operand of the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">--</span></span> operator) that provides the new value
(§7.17.1). The body of a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor must conform to the rules for <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> methods described in §10.6.10. In particular, <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statements in the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor body are not permitted to specify an expression. Since a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor
implicitly has a parameter named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>, it is a compile-time error for a
local variable or constant declaration in a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor to have that name.</p>

<p class="MsoNormal">Based on the presence or absence of the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessors,
a property is classified as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property that includes both a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor and a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor is
said to be a <span class="Term">read-write</span> property.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property that has only a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor is said to be a <span class="Term">read-only</span> property. It is a compile-time error for a
read-only property to be the target of an assignment.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property that has only a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor is said to be a <span class="Term">write-only</span> property. Except as the target of an assignment,
it is a compile-time error to reference a write-only property in an expression.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">public class Button: Control<br>
{<br>
&nbsp;&nbsp; private string caption;</p>

<p class="Code">&nbsp;&nbsp; public string Caption {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return caption;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (caption != value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; caption = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Repaint();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override void Paint(Graphics g, Rectangle r) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Painting code goes here<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span>
control declares a public <span class="Codefragment"><span style="font-size:10.0pt">Caption</span></span>
property. The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor of the <span class="Codefragment"><span style="font-size:10.0pt">Caption</span></span>
property returns the string stored in the private <span class="Codefragment"><span style="font-size:10.0pt">caption</span></span> field. The <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor
checks if the new value is different from the current value, and if so, it
stores the new value and repaints the control. Properties often follow the
pattern shown above: The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor simply returns a value stored in a private field, and the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor
modifies that private field and then performs any additional actions required
to fully update the state of the object.</p>

<p class="MsoNormal">Given the <span class="Codefragment"><span style="font-size:
10.0pt">Button</span></span> class above, the following is an example of use of
the <span class="Codefragment"><span style="font-size:10.0pt">Caption</span></span>
property:</p>

<p class="Code">Button okButton = new Button();<br>
okButton.Caption = "OK";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes set accessor<br>
string s = okButton.Caption;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes get accessor</p>

<p class="MsoNormal">Here, the <span class="Codefragment"><span style="font-size:
10.0pt">set</span></span> accessor is invoked by assigning a value to the
property, and the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor is invoked by referencing the property in an expression.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessors of a property are not distinct members, and it is not possible to
declare the accessors of a property separately. As such, it is not possible for
the two accessors of a read-write property to have different accessibility. The
example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; private string name;</p>

<p class="Code">&nbsp;&nbsp; public string Name {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, duplicate member name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Name {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, duplicate member name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { name = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">does not declare a single read-write property. Rather, it
declares two properties with the same name, one read-only and one write-only.
Since two members declared in the same class cannot have the same name, the
example causes a compile-time error to occur.</p>

<p class="MsoNormal">When a derived class declares a property by the same name as
an inherited property, the derived property hides the inherited property with
respect to both reading and writing. In the example</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public int P {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<span class="Codefragment">...</span>}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; new public int P {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<span class="Codefragment">...</span>}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
property in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
hides the <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
property in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
with respect to both reading and writing. Thus, in the statements</p>

<p class="Code">B b = new B();<br>
b.P = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, B.P is read-only<br>
((A)b).P = 1;&nbsp; // Ok, reference to A.P</p>

<p class="MsoNormal">the assignment to <span class="Codefragment"><span style="font-size:10.0pt">b.P</span></span> causes a compile-time error to be
reported, since the read-only <span class="Codefragment"><span style="font-size:
10.0pt">P</span></span> property in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> hides the write-only <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> property in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>. Note,
however, that a cast can be used to access the hidden <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> property.</p>

<p class="MsoNormal">Unlike public fields, properties provide a separation
between an object’s internal state and its public interface. Consider the
example:</p>

<p class="Code">class Label<br>
{<br>
&nbsp;&nbsp; private int x, y;<br>
&nbsp;&nbsp; private string caption;</p>

<p class="Code">&nbsp;&nbsp; public Label(int x, int y, string caption) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.caption = caption;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return x; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return y; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Point Location {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return new Point(x, y); }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Caption {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return caption; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Here, the <span class="Codefragment"><span style="font-size:
10.0pt">Label</span></span> class uses two <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> fields, <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, to store its location. The location
is publicly exposed both as an <span class="Codefragment"><span style="font-size:
10.0pt">X</span></span> and a <span class="Codefragment"><span style="font-size:
10.0pt">Y</span></span> property and as a <span class="Codefragment"><span style="font-size:10.0pt">Location</span></span> property of type <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>. If, in a
future version of <span class="Codefragment"><span style="font-size:10.0pt">Label</span></span>,
it becomes more convenient to store the location as a <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> internally, the change can be made
without affecting the public interface of the class:</p>

<p class="Code">class Label<br>
{<br>
&nbsp;&nbsp; private Point location;<br>
&nbsp;&nbsp; private string caption;</p>

<p class="Code">&nbsp;&nbsp; public Label(int x, int y, string caption) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.location = new Point(x, y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.caption = caption;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return location.x; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return location.y; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Point Location {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return location; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Caption {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return caption; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Had <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
instead been <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
fields, it would have been impossible to make such a change to the <span class="Codefragment"><span style="font-size:10.0pt">Label</span></span> class.</p>

<p class="MsoNormal">Exposing state through properties is not necessarily any
less efficient than exposing fields directly. In particular, when a property is
non-virtual and contains only a small amount of code, the execution environment
may replace calls to accessors with the actual code of the accessors. This
process is known as <span class="Term">inlining</span>, and it makes property
access as efficient as field access, yet preserves the increased flexibility of
properties.</p>

<p class="MsoNormal">Since invoking a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor is conceptually equivalent
to reading the value of a field, it is considered bad programming style for <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessors
to have observable side-effects. In the example</p>

<p class="Code">class Counter<br>
{<br>
&nbsp;&nbsp; private int next;</p>

<p class="Code">&nbsp;&nbsp; public int Next {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return next++; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the value of the <span class="Codefragment"><span style="font-size:10.0pt">Next</span></span> property depends on the number of
times the property has previously been accessed. Thus, accessing the property
produces an observable side-effect, and the property should be implemented as a
method instead.</p>

<p class="MsoNormal">The “no side-effects” convention for <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessors
doesn’t mean that <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessors should always be written to simply return values stored in fields.
Indeed, <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessors often compute the value of a property by accessing multiple fields or
invoking methods. However, a properly designed <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor performs no actions that
cause observable changes in the state of the object.</p>

<p class="MsoNormal">Properties can be used to delay initialization of a resource
until the moment it is first referenced. For example:</p>

<p class="Code">using System.IO;</p>

<p class="Code">public class Console<br>
{<br>
&nbsp;&nbsp; private static TextReader reader;<br>
&nbsp;&nbsp; private static TextWriter writer;<br>
&nbsp;&nbsp; private static TextWriter error;</p>

<p class="Code">&nbsp;&nbsp; public static TextReader In {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (reader == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reader = new StreamReader(Console.OpenStandardInput());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return reader;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static TextWriter Out {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (writer == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writer = new StreamWriter(Console.OpenStandardOutput());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return writer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static TextWriter Error {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (error == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; error = new StreamWriter(Console.OpenStandardError());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return error;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Console</span></span>
class contains three properties, <span class="Codefragment"><span style="font-size:10.0pt">In</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Out</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Error</span></span>, that represent the standard
input, output, and error devices, respectively. By exposing these members as
properties, the <span class="Codefragment"><span style="font-size:10.0pt">Console</span></span>
class can delay their initialization until they are actually used. For example,
upon first referencing the <span class="Codefragment"><span style="font-size:
10.0pt">Out</span></span> property, as in</p>

<p class="Code">Console.Out.WriteLine("hello, world");</p>

<p class="MsoNormal">the underlying <span class="Codefragment"><span style="font-size:10.0pt">TextWriter</span></span> for the output device is
created. But if the application makes no reference to the <span class="Codefragment"><span style="font-size:10.0pt">In</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Error</span></span>
properties, then no objects are created for those devices.</p>

<h3><a name="_Ref496181042"></a><a name="_Toc251613319"></a><a name="_Ref173841257">10.7.3 Automatically implemented properties</a></h3>

<p class="MsoNormal">When a property is specified as an automatically implemented
property, a hidden backing field is automatically available for the property,
and the accessors are implemented to read from and write to that backing field.</p>

<p class="MsoNormal">The following example:</p>

<p class="Code">&nbsp;public class Point {<br>
&nbsp;&nbsp; public int X { get; set; } // automatically implemented<br>
&nbsp;&nbsp; public int Y { get; set; } // automatically implemented<br>
}</p>

<p class="MsoNormal">is equivalent to the following declaration:</p>

<p class="Code">public class Point {<br>
&nbsp;&nbsp; private int x;<br>
&nbsp;&nbsp; private int y;<br>
&nbsp;&nbsp; public int X { get { return x; } set { x = value; } }<br>
&nbsp;&nbsp; public int Y { get { return y; } set { y = value; } }<br>
}</p>

<p class="MsoNormal">Because the backing field is inaccessible, it can be read
and written only through the property accessors, even within the containing
type. This means that automatically implemented read-only or write-only
properties do not make sense, and are disallowed. It is however possible to set
the access level of each accessor differently. Thus, the effect of a read-only
property with a private backing field can be mimicked like this:</p>

<p class="Code">public class ReadOnlyPoint {<br>
&nbsp;&nbsp; public int X { get; private set; }<br>
&nbsp;&nbsp; public int Y { get; private set; }<br>
&nbsp;&nbsp; public ReadOnlyPoint(int x, int y) { X = x; Y = y; }<br>
}</p>

<p class="MsoNormal">This restriction also means that definite assignment of
struct types with auto-implemented properties can only be achieved using the
standard constructor of the struct, since assigning to the property itself
requires the struct to be definitely assigned. This means that user-defined
constructors must call the default constructor.</p>

<h3><a name="_Toc251613320">10.7.4 Accessibility</a></h3>

<p class="MsoNormal">If an accessor has an <span class="Production">accessor-modifier</span>,
the accessibility domain (§3.5.2) of the accessor is determined using the
declared accessibility of the <span class="Production">accessor-modifier</span>.
If an accessor does not have an <span class="Production">accessor-modifier</span>,
the accessibility domain of the accessor is determined from the declared
accessibility of the property or indexer.</p>

<p class="MsoNormal">The presence of an <span class="Production">accessor-modifier</span>
  never affects member lookup (§7.3) or overload resolution (§7.5.3). The modifiers on the property or indexer always determine which property or
indexer is bound to, regardless of the context of the access.</p>

<p class="MsoNormal">Once a particular property or indexer has been selected, the
accessibility domains of the specific accessors involved are used to determine
if that usage is valid:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the usage is as a value (§7.1.1), the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor
must exist and be accessible.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the usage is as the target of a simple assignment (§7.17.1), the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor must exist and be accessible.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the usage is as the target of compound assignment (§7.17.2), or as the target of the <span class="Codefragment"><span style="font-size:
10.0pt">++</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">--</span></span> operators (§7.5.9, §7.6.5), both the <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessors
and the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor must exist and be accessible.</p>

<p class="MsoNormal">In the following example, the property <span class="Codefragment"><span style="font-size:10.0pt">A.Text</span></span> is
hidden by the property <span class="Codefragment"><span style="font-size:10.0pt">B.Text</span></span>,
even in contexts where only the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor is called. In contrast, the
property <span class="Codefragment"><span style="font-size:10.0pt">B.Count</span></span>
is not accessible to class <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>, so the accessible property <span class="Codefragment"><span style="font-size:10.0pt">A.Count</span></span> is used instead.</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public string Text {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return "hello"; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Count {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return 5; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; private string text = "goodbye"; <br>
&nbsp;&nbsp; private int count = 0;</p>

<p class="Code">&nbsp;&nbsp; new public string Text {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return text; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected set { text = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; new protected int Count { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return count; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { count = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class M<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = new B();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Count = 12;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls A.Count set accessor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = b.Count;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls A.Count get accessor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b.Text = "howdy";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, B.Text set accessor not
accessible<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s = b.Text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Calls B.Text get accessor<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An accessor that is used to implement an interface may not
have an <span class="Production">accessor-modifier</span>. If only one accessor
is used to implement an interface, the other accessor may be declared with an <span class="Production">accessor-modifier</span>:</p>

<p class="Code">public interface I<br>
{<br>
&nbsp;&nbsp; string Prop { get; }<br>
}</p>

<p class="Code">public class C: I<br>
{<br>
&nbsp;&nbsp; public Prop {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return "April"; }&nbsp;&nbsp;&nbsp; // Must not have a modifier here<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; internal set {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, because I.Prop has no set accessor<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613321">10.7.5 Virtual, sealed, override, and abstract
accessors</a></h3>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
property declaration specifies that the accessors of the property are virtual.
The <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier applies to both accessors of a read-write property—it is not possible
for only one accessor of a read-write property to be virtual.</p>

<p class="MsoNormal">An <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
property declaration specifies that the accessors of the property are virtual,
but does not provide an actual implementation of the accessors. Instead,
non-abstract derived classes are required to provide their own implementation
for the accessors by overriding the property. Because an accessor for an
abstract property declaration provides no actual implementation, its <span class="Production">accessor-body</span> simply consists of a semicolon.</p>

<p class="MsoNormal">A property declaration that includes both the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifiers specifies that the property is abstract and overrides a base
property. The accessors of such a property are also abstract.</p>

<p class="MsoNormal">Abstract property declarations are only permitted in
abstract classes (§10.1.1.1).The accessors of an inherited virtual property can
be overridden in a derived class by including a property declaration that
specifies an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
directive. This is known as an <span class="Term">overriding property declaration</span>.
An overriding property declaration does not declare a new property. Instead, it
simply specializes the implementations of the accessors of an existing virtual
property.</p>

<p class="MsoNormal">An overriding property declaration must specify the exact
same accessibility modifiers, type, and name as the inherited property. If the
inherited property has only a single accessor (i.e., if the inherited property
is read-only or write-only), the overriding property must include only that
accessor. If the inherited property includes both accessors (i.e., if the
inherited property is read-write), the overriding property can include either a
single accessor or both accessors.</p>

<p class="MsoNormal">An overriding property declaration may include the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier. Use of this modifier prevents a derived class from further overriding
the property. The accessors of a sealed property are also sealed.</p>

<p class="MsoNormal">Except for differences in declaration and invocation syntax,
virtual, sealed, override, and abstract accessors behave exactly like virtual,
sealed, override and abstract methods. Specifically, the rules described in §10.6.3, §10.6.4, §10.6.5, and §10.6.6 apply as if accessors were methods of a
corresponding form:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor corresponds to a parameterless method with a return value of the
property type and the same modifiers as the containing property.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor corresponds to a method with a single value parameter of the property
type, a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
return type, and the same modifiers as the containing property.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">abstract class A<br>
{<br>
&nbsp;&nbsp; int y;</p>

<p class="Code">&nbsp;&nbsp; public virtual int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return 0; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public virtual int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return y; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { y = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public abstract int Z { get; set; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is a virtual read-only property, <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> is a virtual read-write property, and <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span> is an
abstract read-write property. Because <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span> is abstract, the containing class <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> must also be
declared abstract.</p>

<p class="MsoNormal">A class that derives from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is show below:</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; int z;</p>

<p class="Code">&nbsp;&nbsp; public override int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return base.X + 1; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { base.Y = value &lt; 0? 0: value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override int Z {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return z; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { z = value; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Here, the declarations of <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span> are overriding property declarations.
Each property declaration exactly matches the accessibility modifiers, type,
and name of the corresponding inherited property. The <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and the <span class="Codefragment"><span style="font-size:10.0pt">set</span></span> accessor of
<span class="Codefragment"><span style="font-size:10.0pt">Y</span></span> use the
<span class="Codefragment"><span style="font-size:10.0pt">base</span></span>
keyword to access the inherited accessors. The declaration of <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span> overrides
both abstract accessors—thus, there are no outstanding abstract function
members in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> is
permitted to be a non-abstract class.</p>

<p class="MsoNormal"><a name="_Ref463497734"></a><a name="_Ref513790718">When a
property is declared as an </a><span class="Codefragment"><span style="font-size:
10.0pt">override</span></span>, any overridden accessors must be accessible to
the overriding code. In addition, the declared accessibility of both the
property or indexer itself, and of the accessors, must match that of the
overridden member and accessors. For example:</p>

<p class="Code">public class B<br>
{<br>
&nbsp;&nbsp; public virtual int P {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected set {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class D: B<br>
{<br>
&nbsp;&nbsp; public override int P {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected set {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Must specify protected here<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Must not have a modifier here<br>
&nbsp;&nbsp; }<br>
}</p>

<h2><a name="_Toc251613322"></a><a name="_Ref174219523">10.8 Events</a></h2>

<p class="MsoNormal">An <span class="Term">event</span> is a member that enables an
object or class to provide notifications. Clients can attach executable code
for events by supplying <span class="Term">event handlers</span>.</p>

<p class="MsoNormal">Events are declared using <span class="Production">event-declaration</span>s:</p>

<p class="Grammar">event-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; event-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; event-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; member-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">{</span></span>&nbsp;&nbsp; event-accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">event-modifiers:<br>
event-modifier<br>
event-modifiers&nbsp;&nbsp; event-modifier</p>

<p class="Grammar">event-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">event-accessor-declarations:<br>
add-accessor-declaration&nbsp; &nbsp;remove-accessor-declaration<br>
remove-accessor-declaration&nbsp;&nbsp; add-accessor-declaration</p>

<p class="Grammar">add-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">add</span></span>&nbsp;&nbsp; block</p>

<p class="Grammar">remove-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">remove</span></span>&nbsp;&nbsp; block</p>

<p class="MsoNormal">An <span class="Production">event-declaration</span> may
include a set of <span class="Production">attributes</span> (§17) and a valid combination of the four access modifiers (§10.3.5), the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> (§10.3.4),&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> (§10.6.2), <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
(§10.6.3), <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
(§10.6.4), <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
(§10.6.5), <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
(§10.6.6), and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
(§10.6.7) modifiers.</p>

<p class="MsoNormal">Event declarations are subject to the same rules as method
declarations (§10.6) with regard to valid combinations of modifiers.</p>

<p class="MsoNormal">The <span class="Production">type</span> of an event
declaration must be a <span class="Production">delegate-type</span> (§4.2), and that <span class="Production">delegate-type</span> must be at least as
accessible as the event itself (§3.5.4).</p>

<p class="MsoNormal">An event declaration may include <span class="Production">event-accessor-declaration</span>s.
However, if it does not, for non-extern, non-abstract events, the compiler
supplies them automatically (§10.8.1); for extern events, the accessors are
provided externally.</p>

<p class="MsoNormal">An event declaration that omits <span class="Production">event-accessor-declaration</span>s
defines one or more events—one for each of the <span class="Production">variable-declarator</span>s.
The attributes and modifiers apply to all of the members declared by such an <span class="Production">event-declaration</span>.</p>

<p class="MsoNormal">It is a compile-time error for an <span class="Production">event-declaration</span>
to include both the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
modifier and brace-delimited <span class="Production">event-accessor-declaration</span>s.</p>

<p class="MsoNormal">When an event declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the event is said to be an <span class="Term">external event</span>.
Because an external event declaration provides no actual implementation, it is
an error for it to include both the <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span> modifier and <span class="Production">event-accessor-declaration</span>s.</p>

<p class="MsoNormal">An event can be used as the left-hand operand of the <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span> operators (§7.17.3). These operators are used, respectively, to attach event handlers to or
to remove event handlers from an event, and the access modifiers of the event
control the contexts in which such operations are permitted.</p>

<p class="MsoNormal">Since <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>
are the only operations that are permitted on an event outside the type that
declares the event, external code can add and remove handlers for an event, but
cannot in any other way obtain or modify the underlying list of event handlers.</p>

<p class="MsoNormal">In an operation of the form <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>, when <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is an event and the reference takes
place outside the type that contains the declaration of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, the result
of the operation has type <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
(as opposed to having the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>, with the value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> after the
assignment). This rule prohibits external code from indirectly examining the
underlying delegate of an event.</p>

<p class="MsoNormal">The following example shows how event handlers are attached
to instances of the <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span>
class:</p>

<p class="Code">public delegate void EventHandler(object sender, EventArgs e);</p>

<p class="Code">public class Button: Control<br>
{<br>
&nbsp;&nbsp; public event EventHandler Click;<br>
}</p>

<p class="Code">public class LoginDialog: Form<br>
{<br>
&nbsp;&nbsp; Button OkButton;<br>
&nbsp;&nbsp; Button CancelButton;</p>

<p class="Code">&nbsp;&nbsp; public LoginDialog() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OkButton = new Button(...);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OkButton.Click += new EventHandler(OkButtonClick);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CancelButton = new Button(...);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CancelButton.Click += new EventHandler(CancelButtonClick);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void OkButtonClick(object sender, EventArgs e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Handle OkButton.Click event<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void CancelButtonClick(object sender, EventArgs e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Handle CancelButton.Click event<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Here, the <span class="Codefragment"><span style="font-size:
10.0pt">LoginDialog</span></span> instance constructor creates two <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span>
instances and attaches event handlers to the <span class="Codefragment"><span style="font-size:10.0pt">Click</span></span> events.</p>

<h3><a name="_Ref513827619"></a><a name="_Toc251613323"></a><a name="_Toc525095771"></a><a name="_Ref522950525">10.8.1 Field-like events</a></h3>

<p class="MsoNormal">Within the program text of the class or struct that contains
the declaration of an event, certain events can be used like fields. To be used
in this way, an event must not be <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>, and must not explicitly include <span class="Production">event-accessor-declaration</span>s. Such an event can be used
in any context that permits a field. The field contains a delegate (§15) which refers to the list of event handlers that have been added to the event. If
no event handlers have been added, the field contains <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">public delegate void EventHandler(object sender, EventArgs e);</p>

<p class="Code">public class Button: Control<br>
{<br>
&nbsp;&nbsp; public event EventHandler Click;</p>

<p class="Code">&nbsp;&nbsp; protected void OnClick(EventArgs e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Click != null) Click(this, e);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public void Reset() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Click = null;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">Click</span></span>
is used as a field within the <span class="Codefragment"><span style="font-size:
10.0pt">Button</span></span> class. As the example demonstrates, the field can
be examined, modified, and used in delegate invocation expressions. The <span class="Codefragment"><span style="font-size:10.0pt">OnClick</span></span> method
in the <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span>
class “raises” the <span class="Codefragment"><span style="font-size:10.0pt">Click</span></span>
event. The notion of raising an event is precisely equivalent to invoking the
delegate represented by the event—thus, there are no special language
constructs for raising events. Note that the delegate invocation is preceded by
a check that ensures the delegate is non-null. </p>

<p class="MsoNormal">Outside the declaration of the <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span> class, the <span class="Codefragment"><span style="font-size:10.0pt">Click</span></span> member
can only be used on the left-hand side of the <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">–=</span></span> operators, as in</p>

<p class="Code">b.Click += new EventHandler(<span class="Codefragment">…</span>);</p>

<p class="MsoNormal">which appends a delegate to the invocation list of the <span class="Codefragment"><span style="font-size:10.0pt">Click</span></span> event,
and</p>

<p class="Code">b.Click –= new EventHandler(<span class="Codefragment">…</span>);</p>

<p class="MsoNormal">which removes a delegate from the invocation list of the <span class="Codefragment"><span style="font-size:10.0pt">Click</span></span> event.</p>

<p class="MsoNormal">When compiling a field-like event, the compiler
automatically creates storage to hold the delegate, and creates accessors for
the event that add or remove event handlers to the delegate field. In order to
be thread-safe, the addition or removal operations are done while holding the
lock (§8.12) on the containing object for an instance event, or the type object
(§7.6.10.6) for a static event.</p>

<p class="MsoNormal">Thus, an instance event declaration of the form:</p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; public event D Ev;<br>
}</p>

<p class="MsoNormal">could be compiled to something equivalent to: </p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; private D __Ev;&nbsp; // field to hold the delegate</p>

<p class="Code">&nbsp;&nbsp; public event D Ev {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock(this) { __Ev = __Ev + value; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock(this) { __Ev = __Ev - value; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Within the class <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, references to <span class="Codefragment"><span style="font-size:10.0pt">Ev</span></span> are compiled
to reference the hidden field <span class="Codefragment"><span style="font-size:
10.0pt">__Ev</span></span> instead. The name “<span class="Codefragment"><span style="font-size:10.0pt">__Ev</span></span>” is arbitrary; the hidden field
could have any name or no name at all.</p>

<p class="MsoNormal">Similarly, a static event declaration of the form:</p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; public static event D Ev;<br>
}</p>

<p class="MsoNormal">could be compiled to something equivalent to: </p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; private static D __Ev;&nbsp; // field to hold the delegate</p>

<p class="Code">&nbsp;&nbsp; public static event D Ev {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock(typeof(X)) { __Ev = __Ev + value; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock(typeof(X)) { __Ev = __Ev - value; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613324">10.8.2 Event accessors</a></h3>

<p class="MsoNormal">Event declarations typically omit <span class="Production">event-accessor-declaration</span>s,
as in the <span class="Codefragment"><span style="font-size:10.0pt">Button</span></span>
example above. One situation for doing so involves the case in which the
storage cost of one field per event is not acceptable. In such cases, a class
can include <span class="Production">event-accessor-declaration</span>s and use a
private mechanism for storing the list of event handlers.</p>

<p class="MsoNormal">The <span class="Production">event-accessor-declarations</span>
of an event specify the executable statements associated with adding and
removing event handlers.</p>

<p class="MsoNormal">The accessor declarations consist of an <span class="Production">add-accessor-declaration</span> and a <span class="Production">remove-accessor-declaration</span>.
Each accessor declaration consists of the token <span class="Codefragment"><span style="font-size:10.0pt">add</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">remove</span></span> followed by a <span class="Production">block</span>. The <span class="Production">block</span>
associated with an <span class="Production">add-accessor-declaration</span>
specifies the statements to execute when an event handler is added, and the <span class="Production">block</span> associated with a <span class="Production">remove-accessor-declaration</span>
specifies the statements to execute when an event handler is removed.</p>

<p class="MsoNormal">Each <span class="Production">add-accessor-declaration</span>
and <span class="Production">remove-accessor-declaration</span> corresponds to a
method with a single value parameter of the event type and a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> return
type. The implicit parameter of an event accessor is named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>. When an
event is used in an event assignment, the appropriate event accessor is used.
Specifically, if the assignment operator is <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span> then the add accessor is used, and if
the assignment operator is <span class="Codefragment"><span style="font-size:
10.0pt">-=</span></span> then the remove accessor is used. In either case, the
right-hand operand of the assignment operator is used as the argument to the
event accessor. The block of an <span class="Production">add-accessor-declaration</span>
or a <span class="Production">remove-accessor-declaration</span> must conform to
the rules for <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
methods described in §10.6.10. In particular, <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statements in such a block are
not permitted to specify an expression.</p>

<p class="MsoNormal">Since an event accessor implicitly has a parameter named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>, it is a
compile-time error for a local variable or constant declared in an event
accessor to have that name.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Control: Component<br>
{<br>
&nbsp;&nbsp; // Unique keys for events<br>
&nbsp;&nbsp; static readonly object mouseDownEventKey = new object();<br>
&nbsp;&nbsp; static readonly object mouseUpEventKey = new object();</p>

<p class="Code">&nbsp;&nbsp; // Return event handler associated with key<br>
&nbsp;&nbsp; protected Delegate GetEventHandler(object key) {...}</p>

<p class="Code">&nbsp;&nbsp; // Add event handler associated with key<br>
&nbsp;&nbsp; protected void AddEventHandler(object key, Delegate handler) {...}</p>

<p class="Code">&nbsp;&nbsp; // Remove event handler associated with key<br>
&nbsp;&nbsp; protected void RemoveEventHandler(object key, Delegate handler) {...}</p>

<p class="Code">&nbsp;&nbsp; // MouseDown event<br>
&nbsp;&nbsp; public event MouseEventHandler MouseDown {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add { AddEventHandler(mouseDownEventKey, value); }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove { RemoveEventHandler(mouseDownEventKey, value); }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // MouseUp event<br>
&nbsp;&nbsp; public event MouseEventHandler MouseUp {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add { AddEventHandler(mouseUpEventKey, value); }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; remove { RemoveEventHandler(mouseUpEventKey, value); }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Invoke the MouseUp event<br>
&nbsp;&nbsp; protected void OnMouseUp(MouseEventArgs args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MouseEventHandler handler; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler = (MouseEventHandler)GetEventHandler(mouseUpEventKey);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (handler != null)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handler(this, args);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Control</span></span>
class implements an internal storage mechanism for events. The <span class="Codefragment"><span style="font-size:10.0pt">AddEventHandler</span></span>
method associates a delegate value with a key, the <span class="Codefragment"><span style="font-size:10.0pt">GetEventHandler</span></span> method returns the
delegate currently associated with a key, and the <span class="Codefragment"><span style="font-size:10.0pt">RemoveEventHandler</span></span> method removes a
delegate as an event handler for the specified event. Presumably, the
underlying storage mechanism is designed such that there is no cost for
associating a <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
delegate value with a key, and thus unhandled events consume no storage.</p>

<h3><a name="_Toc486688506"></a><a name="_Toc251613325"></a><a name="_Toc486688502">10.8.3 Static and instance events</a></h3>

<p class="MsoNormal">When an event declaration includes a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier, the event is said to be a <span class="Term">static event</span>. When
no <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier is present, the event is said to be an <span class="Term">instance event</span>.</p>

<p class="MsoNormal">A static event is not associated with a specific instance,
and it is a compile-time error to refer to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> in the accessors of a static event.</p>

<p class="MsoNormal">An instance event is associated with a given instance of a
class, and this instance can be accessed as <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> (§7.6.7) in the accessors of that
event.</p>

<p class="MsoNormal">When an event is referenced in a <span class="Production">member-access</span>
(§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">E.M</span></span>,
if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is a
static event, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
must denote a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>, and if <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is an instance event, E must denote an
instance of a type containing <span class="Codefragment"><span style="font-size:
10.0pt">M</span></span>.</p>

<p class="MsoNormal">The differences between static and instance members are
discussed further in §10.3.7.</p>

<h3><a name="_Toc251613326">10.8.4 Virtual, sealed, override, and abstract
accessors</a></h3>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
event declaration specifies that the accessors of that event are virtual. The <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>
modifier applies to both accessors of an event.</p>

<p class="MsoNormal">An <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
event declaration specifies that the accessors of the event are virtual, but
does not provide an actual implementation of the accessors. Instead,
non-abstract derived classes are required to provide their own implementation for
the accessors by overriding the event. Because an abstract event declaration
provides no actual implementation, it cannot provide brace-delimited <span class="Production">event-accessor-declaration</span>s.</p>

<p class="MsoNormal">An event declaration that includes both the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifiers specifies that the event is abstract and overrides a base event. The
accessors of such an event are also abstract.</p>

<p class="MsoNormal">Abstract event declarations are only permitted in abstract
classes (§10.1.1.1).</p>

<p class="MsoNormal">The accessors of an inherited virtual event can be
overridden in a derived class by including an event declaration that specifies
an <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier. This is known as an <span class="Term">overriding event declaration</span>.
An overriding event declaration does not declare a new event. Instead, it
simply specializes the implementations of the accessors of an existing virtual
event.</p>

<p class="MsoNormal">An overriding event declaration must specify the exact same
accessibility modifiers, type, and name as the overridden event.</p>

<p class="MsoNormal">An overriding event declaration may include the <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifier. Use of this modifier prevents a derived class from further overriding
the event. The accessors of a sealed event are also sealed.</p>

<p class="MsoNormal">It is a compile-time error for an overriding event declaration
to include a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier.</p>

<p class="MsoNormal">Except for differences in declaration and invocation syntax,
virtual, sealed, override, and abstract accessors behave exactly like virtual,
sealed, override and abstract methods. Specifically, the rules described in §10.6.3, §10.6.4, §10.6.5, and §10.6.6 apply as if accessors were methods of a
corresponding form. Each accessor corresponds to a method with a single value
parameter of the event type, a <span class="Codefragment"><span style="font-size:
10.0pt">void</span></span> return type, and the same modifiers as the
containing event.</p>

<h2><a name="_Toc251613327"></a><a name="_Ref461974722">10.9 Indexers</a></h2>

<p class="MsoNormal">An <span class="Term">indexer</span> is a member that enables
an object to be indexed in the same way as an array. Indexers are declared
using <span class="Production">indexer-declaration</span>s:</p>

<p class="Grammar">indexer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; indexer-modifiers<sub>opt</sub>&nbsp;&nbsp;
indexer-declarator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">{</span></span>&nbsp;&nbsp; accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar"><span lang="FR">indexer-modifiers:<br>
indexer-modifier<br>
indexer-modifiers&nbsp;&nbsp; indexer-modifier</span></p>

<p class="Grammar">indexer-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private <br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">indexer-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span><br>
type&nbsp;&nbsp; interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span></p>

<p class="MsoNormal">An <span class="Production">indexer-declaration</span> may
include a set of <span class="Production">attributes</span> (§17) and a valid combination of the four access modifiers (§10.3.5), the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> (§10.3.4), <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span> (§10.6.3), <span class="Codefragment"><span style="font-size:10.0pt">override</span></span> (§10.6.4), <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
(§10.6.5), <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
(§10.6.6), and <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
(§10.6.7) modifiers.</p>

<p class="MsoNormal">Indexer declarations are subject to the same rules as method
declarations (§10.6) with regard to valid combinations of modifiers, with the
one exception being that the static modifier is not permitted on an indexer
declaration.</p>

<p class="MsoNormal">The modifiers <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>&nbsp;are mutually exclusive except in one case. The <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifiers may be used together so that an abstract indexer can override a
virtual one.</p>

<p class="MsoNormal">The <span class="Production">type</span> of an indexer
declaration specifies the element type of the indexer introduced by the
declaration. Unless the indexer is an explicit interface member implementation,
the <span class="Production">type</span> is followed by the keyword <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>. For an
explicit interface member implementation, the <span class="Production">type</span>
is followed by an <span class="Production">interface-type</span>, a “<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>”, and the
keyword <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>.
Unlike other members, indexers do not have user-defined names.</p>

<p class="MsoNormal">The <span class="Production">formal-parameter-list</span>
specifies the parameters of the indexer. The formal parameter list of an
indexer corresponds to that of a method (§10.6.1), except that at least one
parameter must be specified, and that the <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter modifiers are not
permitted.</p>

<p class="MsoNormal">The <span class="Production">type</span> of an indexer and
each of the types referenced in the <span class="Production">formal-parameter-list</span>
must be at least as accessible as the indexer itself (§3.5.4).</p>

<p class="MsoNormal">The <span class="Production">accessor-declarations</span> (§<span class="Production"><span style="font-style:normal">10.7.2</span></span>), which
must be enclosed in “<span class="Codefragment"><span style="font-size:10.0pt">{</span></span>”
and “<span class="Codefragment"><span style="font-size:10.0pt">}</span></span>”
tokens, declare the accessors of the indexer. The accessors specify the
executable statements associated with reading and writing indexer elements.</p>

<p class="MsoNormal">Even though the syntax for accessing an indexer element is
the same as that for an array element, an indexer element is not classified as
a variable. Thus, it is not possible to pass an indexer element as a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> argument.</p>

<p class="MsoNormal">The formal parameter list of an indexer defines the
signature (§3.6) of the indexer. Specifically, the signature of an indexer
consists of the number and types of its formal parameters. The element type and
names of the formal parameters are not part of an indexer’s signature.</p>

<p class="MsoNormal">The signature of an indexer must differ from the signatures
of all other indexers declared in the same class.</p>

<p class="MsoNormal">Indexers and properties are very similar in concept, but
differ in the following ways:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property is identified by its name, whereas an indexer is
identified by its signature.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property is accessed through a <span class="Production">simple-name</span>
(§7.6.2) or a <span class="Production">member-access</span> (§7.6.4), whereas an indexer element is accessed through an <span class="Production">element-access</span>
(§7.6.6.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A property can be a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span> member, whereas an indexer is
always an instance member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">get</span></span>
accessor of a property corresponds to a method with no parameters, whereas a <span class="Codefragment"><span style="font-size:10.0pt">get</span></span> accessor of
an indexer corresponds to a method with the same formal parameter list as the
indexer.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor of a property corresponds to a method with a single parameter named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>, whereas
a <span class="Codefragment"><span style="font-size:10.0pt">set</span></span>
accessor of an indexer corresponds to a method with the same formal parameter
list as the indexer, plus an additional parameter named <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is a compile-time error for an indexer accessor to declare a
local variable with the same name as an indexer parameter.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In an overriding property declaration, the inherited property is
accessed using the syntax <span class="Codefragment"><span style="font-size:10.0pt">base.P</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
is the property name. In an overriding indexer declaration, the inherited
indexer is accessed using the syntax <span class="Codefragment"><span style="font-size:10.0pt">base[E]</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a comma separated list of
expressions.</p>

<p class="MsoNormal">Aside from these differences, all rules defined in §10.7.2 and §10.7.3 apply to indexer accessors as well as to property accessors.</p>

<p class="MsoNormal">When an indexer declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the indexer is said to be an <span class="Term">external indexer</span>.
Because an external indexer declaration provides no actual implementation, each
of its <span class="Production">accessor-declarations</span> consists of a
semicolon.</p>

<p class="MsoNormal">The example below declares a <span class="Codefragment"><span style="font-size:10.0pt">BitArray</span></span> class that implements an
indexer for accessing the individual bits in the bit array.</p>

<p class="Code">using System;</p>

<p class="Code">class BitArray<br>
{<br>
&nbsp;&nbsp; int[] bits;<br>
&nbsp;&nbsp; int length;</p>

<p class="Code">&nbsp;&nbsp; public BitArray(int length) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (length &lt; 0) throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits = new int[((length - 1) &gt;&gt; 5) + 1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.length = length;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Length {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return length; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public bool this[int index] {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &lt; 0 || index &gt;= length) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new IndexOutOfRangeException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (bits[index &gt;&gt; 5] &amp; 1 &lt;&lt; index) != 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &lt; 0 || index &gt;= length) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new IndexOutOfRangeException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits[index &gt;&gt; 5] |= 1 &lt;&lt; index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bits[index &gt;&gt; 5] &amp;= ~(1 &lt;&lt; index);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">An instance of the <span class="Codefragment"><span style="font-size:10.0pt">BitArray</span></span> class consumes substantially
less memory than a corresponding <span class="Codefragment"><span style="font-size:10.0pt">bool[]</span></span> (since each value of the former
occupies only one bit instead of the latter’s one byte), but it permits the
same operations as a <span class="Codefragment"><span style="font-size:10.0pt">bool[]</span></span>.</p>

<p class="MsoNormal">The following <span class="Codefragment"><span style="font-size:10.0pt">CountPrimes</span></span> class uses a <span class="Codefragment"><span style="font-size:10.0pt">BitArray</span></span> and
the classical “sieve” algorithm to compute the number of primes between 1 and a
given maximum:</p>

<p class="Code">class CountPrimes<br>
{<br>
&nbsp;&nbsp; static int Count(int max) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BitArray flags = new BitArray(max + 1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 2; i &lt;= max; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!flags[i]) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = i * 2; j &lt;= max; j += i) flags[j] = true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return count;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main(string[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int max = int.Parse(args[0]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int count = Count(max);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Found {0} primes between 1 and {1}", count,
max);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Note that the syntax for accessing elements of the <span class="Codefragment"><span style="font-size:10.0pt">BitArray</span></span> is
precisely the same as for a <span class="Codefragment"><span style="font-size:
10.0pt">bool[]</span></span>.</p>

<p class="MsoNormal">The following example shows a 26 <span style="font-family:
Symbol">´</span> 10 grid class that has an indexer with two parameters. The
first parameter is required to be an upper- or lowercase letter in the range
A–Z, and the second is required to be an integer in the range 0–9.</p>

<p class="Code">using System;</p>

<p class="Code">class Grid<br>
{<br>
&nbsp;&nbsp; const int NumRows = 26;<br>
&nbsp;&nbsp; const int NumCols = 10;</p>

<p class="Code">&nbsp;&nbsp; int[,] cells = new int[NumRows, NumCols];</p>

<p class="Code">&nbsp;&nbsp; public int this[char c, int col] {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = Char.ToUpper(c);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (c &lt; 'A' || c &gt; 'Z') {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (col &lt; 0 || col &gt;= NumCols) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new IndexOutOfRangeException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return cells[c - 'A', col];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c = Char.ToUpper(c);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (c &lt; 'A' || c &gt; 'Z') {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (col &lt; 0 || col &gt;= NumCols) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new IndexOutOfRangeException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cells[c - 'A', col] = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613328">10.9.1 Indexer overloading</a></h3>

<p class="MsoNormal">The indexer overload resolution rules are described in §7.5.2.</p>

<h2><a name="_Toc251613329"></a><a name="_Ref174219550"></a><a name="_Ref516035675"></a><a name="_Ref513709208"></a><a name="_Ref495219445"></a><a name="_Ref462546305"></a><a name="_Ref461975048"></a><a name="_Ref461974695"></a><a name="_Ref461620107"></a><a name="_Ref456697704"></a><a name="_Ref446428491"></a><a name="_Toc445783056">10.10 Operators</a></h2>

<p class="MsoNormal">An <span class="Term">operator</span> is a member that defines
the meaning of an expression operator that can be applied to instances of the
class. Operators are declared using <span class="Production">operator-declaration</span>s:</p>

<p class="Grammar"><a name="_Ref458680662"></a><a name="_Ref457133884"></a><a name="_Ref456697761"></a><a name="_Ref456697439"></a><a name="_Toc445783058">operator-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; operator-modifiers&nbsp;&nbsp; operator-declarator&nbsp;&nbsp;
operator-body</a></p>

<p class="Grammar">operator-modifiers:<br>
operator-modifier<br>
operator-modifiers&nbsp;&nbsp; operator-modifier</p>

<p class="Grammar">operator-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
static<br>
extern</span></span></p>

<p class="Grammar">operator-declarator:<br>
unary-operator-declarator<br>
binary-operator-declarator<br>
conversion-operator-declarator</p>

<p class="Grammar">unary-operator-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
overloadable-unary-operator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">overloadable-unary-operator:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+&nbsp;&nbsp; -&nbsp;&nbsp;
!&nbsp;&nbsp; ~&nbsp;&nbsp; ++&nbsp;&nbsp; --&nbsp;&nbsp; true&nbsp;&nbsp; false</span></span></p>

<p class="Grammar">binary-operator-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
overloadable-binary-operator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span></p>

<p class="Grammar">overloadable-binary-operator:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+<br>
-<br>
*<br>
/<br>
%<br>
&amp;<br>
|<br>
^<br>
&lt;&lt;<br>
</span></span>right-shift<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal"><br>
==<br>
!=<br>
&gt;<br>
&lt;<br>
&gt;=<br>
&lt;=</span></span></p>

<p class="Grammar">conversion-operator-declarator:<span class="Terminal"><span style="font-size:10.0pt;font-style:normal"><br>
implicit</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">operator</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">explicit</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span></p>

<p class="Grammar"><a name="_Toc445783057">operator-body:<br>
block<br>
</a><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">There are three categories of overloadable operators: Unary
operators (§10.10.1), binary operators (§10.10.2), and conversion operators (§10.10.3).</p>

<p class="MsoNormal">When an operator declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the operator is said to be an <span class="Term">external operator</span>.
Because an external operator provides no actual implementation, its <span class="Production">operator-body</span> consists of a semi-colon. For all other
operators, the <span class="Production">operator-body</span> consists of a <span class="Production">block</span>, which specifies the statements to execute when
the operator is invoked. The <span class="Production">block</span> of an operator
must conform to the rules for value-returning methods described in §10.6.10.</p>

<p class="MsoNormal">The following rules apply to all operator declarations:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An operator declaration must include both a <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> and a <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The parameter(s) of an operator must be value parameters. It is a
compile-time error for an operator declaration to specify <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an operator (§10.10.1, §10.10.2, §10.10.3) must differ from the signatures of all other operators declared in the same class.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>All types referenced in an operator declaration must be at least
as accessible as the operator itself (§3.5.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is an error for the same modifier to appear multiple times in
an operator declaration.</p>

<p class="MsoNormal">Each operator category imposes additional restrictions, as
described in the following sections.</p>

<p class="MsoNormal">Like other members, operators declared in a base class are
inherited by derived classes. Because operator declarations always require the
class or struct in which the operator is declared to participate in the
signature of the operator, it is not possible for an operator declared in a
derived class to hide an operator declared in a base class. Thus, the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier is
never required, and therefore never permitted, in an operator declaration.</p>

<p class="MsoNormal">Additional information on unary and binary operators can be
found in §7.3.</p>

<p class="MsoNormal">Additional information on conversion operators can be found
in §6.4.</p>

<h3><a name="_Toc251613330"></a><a name="_Ref465588853">10.10.1 Unary operators</a></h3>

<p class="MsoNormal">The following rules apply to unary operator declarations,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
denotes the instance type of the class or struct that contains the operator
declaration:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A unary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">~</span></span> operator must
take a single parameter of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> and can return any type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A unary <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
operator must take a single parameter of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> and must return that same type or a
type derived from it.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A unary <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
operator must take a single parameter of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> and must return type <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.</p>

<p class="MsoNormal">The signature of a unary operator consists of the operator
token (<span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">~</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>) and the
type of the single formal parameter. The return type is not part of a unary
operator’s signature, nor is the name of the formal parameter.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
unary operators require pair-wise declaration. A compile-time error occurs if a
class declares one of these operators without also declaring the other. The <span class="Codefragment"><span style="font-size:10.0pt">true</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">false</span></span> operators
are described further in §7.12.2 and §7.20.</p>

<p class="MsoNormal">The following example shows an implementation and subsequent
usage of <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">++</span></span> for an
integer vector class:</p>

<p class="Code">public class IntVector<br>
{<br>
&nbsp;&nbsp; public IntVector(int length) {...}</p>

<p class="Code">&nbsp;&nbsp; public int Length {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // read-only property</p>

<p class="Code">&nbsp;&nbsp; public int this[int index] {...}&nbsp;&nbsp;&nbsp; // read-write indexer</p>

<p class="Code">&nbsp;&nbsp; public static IntVector operator ++(IntVector iv) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntVector temp = new IntVector(iv.Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; iv.Length; i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; temp[i] = iv[i] + 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return temp;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntVector iv1 = new IntVector(4);&nbsp;&nbsp; // vector of 4 x 0<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IntVector iv2;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span lang="FR">iv2 = iv1++;&nbsp;&nbsp; // iv2 contains 4 x 0, iv1
contains 4 x 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iv2 = ++iv1;&nbsp;&nbsp; // iv2 contains 4 x 2, iv1 contains 4 x 2<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">Note how the operator method returns the value produced by
adding 1 to the operand, just like the&nbsp; postfix increment and decrement
operators (§7.6.9), and the prefix increment and decrement operators (§7.7.5). Unlike in C++, this method need not modify the value of its operand directly.
In fact, modifying the operand value would violate the standard semantics of
the postfix increment operator.</p>

<h3><a name="_Toc251613331"></a><a name="_Ref465761350"></a><a name="_Ref465588863">10.10.2 Binary operators</a></h3>

<p class="MsoNormal">The following rules apply to binary operator declarations,
where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
denotes the instance type of the class or struct that contains the operator
declaration:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A binary non-shift operator must take two parameters, at least
one of which must have type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">T?</span></span>, and can return any type.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A binary <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>
operator must take two parameters, the first of which must have type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T?</span></span> and the
second of which must have type <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">int?</span></span>, and can return any type.</p>

<p class="MsoNormal">The signature of a binary operator consists of the operator
token (<span class="Codefragment"><span style="font-size:10.0pt">+</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">/</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">%</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>) and the
types of the two formal parameters. The return type and the names of the formal
parameters are not part of a binary operator’s signature.</p>

<p class="MsoNormal"><a name="_Ref465588874">Certain binary operators require
pair-wise declaration. For every declaration of either operator of a pair,
there must be a matching declaration of the other operator of the pair. Two
operator declarations match when they have the same return type and the same
type for each parameter. The following operators require pair-wise declaration:</a></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">operator</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">operator</span></span> <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span></p>

<h3><a name="_Toc251613332"></a><a name="_Ref465761359">10.10.3 Conversion
operators</a></h3>

<p class="MsoNormal">A conversion operator declaration introduces a <span class="Term">user-defined conversion</span> (§6.4) which augments the pre-defined
implicit and explicit conversions.</p>

<p class="MsoNormal">A conversion operator declaration that includes the <span class="Codefragment"><span style="font-size:10.0pt">implicit</span></span>
keyword introduces a user-defined implicit conversion. Implicit conversions can
occur in a variety of situations, including function member invocations, cast
expressions, and assignments. This is described further in §6.1.</p>

<p class="MsoNormal">A conversion operator declaration that includes the <span class="Codefragment"><span style="font-size:10.0pt">explicit</span></span>
keyword introduces a user-defined explicit conversion. Explicit conversions can
occur in cast expressions, and are described further in §6.2.</p>

<p class="MsoNormal">A conversion operator converts from a source type, indicated
by the parameter type of the conversion operator, to a target type, indicated
by the return type of the conversion operator. </p>

<p class="MsoNormal">For a given source type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> and target type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, if <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are nullable
types, let <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
refer to their underlying types, otherwise <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span> and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are equal to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
respectively. A class or struct is permitted to declare a conversion from a
source type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to a target type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
only if all of the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
are different types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Either <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is the class or struct type in which the operator declaration takes place.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Neither <span class="Codefragment"><span style="font-size:10.0pt">S<sub>0</sub></span></span>
nor <span class="Codefragment"><span style="font-size:10.0pt">T<sub>0</sub></span></span>
is an <span class="Production">interface-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Excluding user-defined conversions, a conversion does not exist
from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or from
<span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>.</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">For the purposes of these rules, any type parameters
associated with <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are
considered to be unique types that have no inheritance relationship with other
types, and any constraints on those type parameters are ignored.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class C&lt;T&gt; {...}</p>

<p class="Code">class D&lt;T&gt;: C&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public static implicit operator C&lt;int&gt;(D&lt;T&gt; value) {...}&nbsp;&nbsp;&nbsp; //
Ok</p>

<p class="Code">&nbsp;&nbsp; public static implicit operator C&lt;string&gt;(D&lt;T&gt;
value) {...} // Ok</p>

<p class="Code">&nbsp;&nbsp; public static implicit operator C&lt;T&gt;(D&lt;T&gt; value)
{...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error<br>
}</p>

<p class="MsoNormal">the first two operator declarations are permitted because,
for the purposes of §10.9.3, <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span> and <span class="Codefragment"><span style="font-size:
10.0pt">string</span></span> respectively are considered unique types with no
relationship. However, the third operator is an error because <span class="Codefragment"><span style="font-size:10.0pt">C&lt;T&gt;</span></span> is
the base class of <span class="Codefragment"><span style="font-size:10.0pt">D&lt;T&gt;</span></span>.</p>

<p class="MsoNormal">From the second rule it follows that a conversion operator
must convert either to or from the class or struct type in which the operator
is declared. For example, it is possible for a class or struct type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> to define a
conversion from <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
and from <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, but
not from <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.</p>

<p class="MsoNormal"><a name="_Ref461619987">It is not possible to directly redefine
a pre-defined conversion. Thus, conversion operators are not allowed to convert
from or to </a><span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
because implicit and explicit conversions already exist between <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and all
other types. Likewise, neither the source nor the target types of a conversion
can be a base type of the other, since a conversion would then already exist.</p>

<p class="MsoNormal">However, it <em>is</em> possible to declare operators on
generic types that, for particular type arguments, specify conversions that
already exist as pre-defined conversions. In the example</p>

<p class="Code">struct Convertible&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; public static implicit operator Convertible&lt;T&gt;(T value) {...}</p>

<p class="Code">&nbsp;&nbsp; public static explicit operator T(Convertible&lt;T&gt; value)
{...}<br>
}</p>

<p class="MsoNormal">when type <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> is specified as a type argument for <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, the second
operator declares a conversion that already exists (an implicit, and therefore
also an explicit, conversion exists from any type to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>).</p>

<p class="MsoNormal">In cases where a pre-defined conversion exists between two
types, any user-defined conversions between those types are ignored.
Specifically:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a pre-defined implicit conversion (§6.1) exists from type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, all
user-defined conversions (implicit or explicit) from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are ignored.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If a pre-defined explicit conversion (§6.2) exists from type <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, any
user-defined explicit conversions from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are ignored. Furthermore:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is an
interface type, user-defined implicit conversions from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are ignored.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, user-defined
implicit conversions from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> are
still considered.</p>

<p class="MsoNormal">For all types but <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, the operators declared by the <span class="Codefragment"><span style="font-size:10.0pt">Convertible&lt;T&gt;</span></span>
type above do not conflict with pre-defined conversions. For example:</p>

<p class="Code">void F(int i, Convertible&lt;int&gt; n) {<br>
&nbsp;&nbsp; i = n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error<br>
&nbsp;&nbsp; i = (int)n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // User-defined explicit conversion<br>
&nbsp;&nbsp; n = i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // User-defined implicit conversion<br>
&nbsp;&nbsp; n = (Convertible&lt;int&gt;)i;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // User-defined implicit conversion<br>
}</p>

<p class="MsoNormal">However, for type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, pre-defined conversions hide the
user-defined conversions in all cases but one:</p>

<p class="Code">void F(object o, Convertible&lt;object&gt; n) {<br>
&nbsp;&nbsp; o = n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Pre-defined boxing conversion<br>
&nbsp;&nbsp; o = (object)n;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Pre-defined boxing conversion<br>
&nbsp;&nbsp; n = o;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // User-defined implicit conversion<br>
&nbsp;&nbsp; n = (Convertible&lt;object&gt;)o;&nbsp;&nbsp; // Pre-defined unboxing conversion<br>
}</p>

<p class="MsoNormal">User-defined conversions are not allowed to convert from or
to <span class="Production">interface-type</span>s. In particular, this
restriction ensures that no user-defined transformations occur when converting
to an <span class="Production">interface-type</span>, and that a conversion to an
<span class="Production">interface-type</span> succeeds only if the object being
converted actually implements the specified <span class="Production">interface-type</span>.</p>

<p class="MsoNormal">The signature of a conversion operator consists of the
source type and the target type. (Note that this is the only form of member for
which the return type participates in the signature.) The <span class="Codefragment"><span style="font-size:10.0pt">implicit</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">explicit</span></span>
classification of a conversion operator is not part of the operator’s
signature. Thus, a class or struct cannot declare both an <span class="Codefragment"><span style="font-size:10.0pt">implicit</span></span> and an
<span class="Codefragment"><span style="font-size:10.0pt">explicit</span></span>
conversion operator with the same source and target types.</p>

<p class="MsoNormal">In general, user-defined implicit conversions should be
designed to never throw exceptions and never lose information. If a
user-defined conversion can give rise to exceptions (for example, because the
source argument is out of range) or loss of information (such as discarding
high-order bits), then that conversion should be defined as an explicit
conversion.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">public struct Digit<br>
{<br>
&nbsp;&nbsp; byte value;</p>

<p class="Code">&nbsp;&nbsp; public Digit(byte value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; 0 || value &gt; 9) throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static implicit operator byte(Digit d) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return d.value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static explicit operator Digit(byte b) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Digit(b);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the conversion from <span class="Codefragment"><span style="font-size:10.0pt">Digit</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span> is implicit because it never throws
exceptions or loses information, but the conversion from <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">Digit</span></span> is
explicit since <span class="Codefragment"><span style="font-size:10.0pt">Digit</span></span>
can only represent a subset of the possible values of a <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>.</p>

<h2><a name="_Toc251613333"></a><a name="_Ref465821094">10.11 Instance
constructors</a></h2>

<p class="MsoNormal">An <span class="Term">instance constructor</span> is a member
that implements the actions required to initialize an instance of a class.
Instance constructors are declared using <span class="Production">constructor-declaration</span>s:</p>

<p class="Grammar">constructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; constructor-modifiers<sub>opt</sub>&nbsp;&nbsp;
constructor-declarator&nbsp;&nbsp; constructor-body</p>

<p class="Grammar">constructor-modifiers:<br>
constructor-modifier<br>
constructor-modifiers&nbsp;&nbsp; constructor-modifier</p>

<p class="Grammar">constructor-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
extern</span></span></p>

<p class="Grammar">constructor-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
constructor-initializer<sub>opt</sub></p>

<p class="Grammar">constructor-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)<br>
:</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">this</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; argument-list<sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">constructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Production">constructor-declaration</span> may
include a set of <span class="Production">attributes</span> (§17), a valid combination of the four access modifiers (§10.3.5), and an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span> (§10.6.7) modifier. A constructor
declaration is not permitted to include the same modifier multiple times.</p>

<p class="MsoNormal">The <span class="Production">identifier</span> of a <span class="Production">constructor-declarator</span> must name the class in which the
instance constructor is declared. If any other name is specified, a
compile-time error occurs.</p>

<p class="MsoNormal">The optional <span class="Production">formal-parameter-list</span>
of an instance constructor is subject to the same rules as the <span class="Production">formal-parameter-list</span> of a method (§10.6). The formal parameter list defines the signature (§3.6) of an instance constructor and
governs the process whereby overload resolution (§7.5.2) selects a particular
instance constructor in an invocation.</p>

<p class="MsoNormal">Each of the types referenced in the <span class="Production">formal-parameter-list</span>
of an instance constructor must be at least as accessible as the constructor
itself (§3.5.4).</p>

<p class="MsoNormal">The optional <span class="Production">constructor-initializer</span>
specifies another instance constructor to invoke before executing the
statements given in the <span class="Production">constructor-body</span> of this
instance constructor. This is described further in §10.11.1.</p>

<p class="MsoNormal">When a constructor declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the constructor is said to be an <span class="Term">external
constructor</span>. Because an external constructor declaration provides no
actual implementation, its <span class="Production">constructor-body</span>
consists of a semicolon. For all other constructors, the <span class="Production">constructor-body</span> consists of a <span class="Production">block</span>
which specifies the statements to initialize a new instance of the class. This
corresponds exactly to the <span class="Production">block</span> of an instance
method with a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
return type (§10.6.10).</p>

<p class="MsoNormal">Instance constructors are not inherited. Thus, a class has
no instance constructors other than those actually declared in the class. If a
class contains no instance constructor declarations, a default instance constructor
is automatically provided (§10.11.4).</p>

<p class="MsoNormal">Instance constructors are invoked by <span class="Production">object-creation-expression</span>s
(§7.6.10.1) and through <span class="Production">constructor-initializer</span>s.</p>

<h3><a name="_Toc251613334"></a><a name="_Ref458503115">10.11.1 Constructor
initializers</a></h3>

<p class="MsoNormal">All instance constructors (except those for class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>)
implicitly include an invocation of another instance constructor immediately
before the <span class="Production">constructor-body</span>. The constructor to
implicitly invoke is determined by the <span class="Production">constructor-initializer</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance constructor initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">base(</span></span><span class="Production">argument-list<sub>opt</sub></span><span class="Codefragment"><span style="font-size:10.0pt">)</span></span> causes an instance constructor from
the direct base class to be invoked. That constructor is selected using <span class="Production">argument-list</span> and the overload resolution rules of §7.5.3. The set of candidate instance constructors consists of all accessible
instance constructors contained in the direct base class, or the default
constructor (§10.11.4), if no instance constructors are declared in the direct
base class. If this set is empty, or if a single best instance constructor
cannot be identified, a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance constructor initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">this(</span></span><span class="Production">argument-list<sub>opt</sub></span><span class="Codefragment"><span style="font-size:10.0pt">)</span></span> causes an instance constructor from
the class itself to be invoked. The constructor is selected using <span class="Production">argument-list</span> and the overload resolution rules of §7.5.3. The set of candidate instance constructors consists of all accessible
instance constructors declared in the class itself. If this set is empty, or if
a single best instance constructor cannot be identified, a compile-time error
occurs. If an instance constructor declaration includes a constructor
initializer that invokes the constructor itself, a compile-time error occurs.</p>

<p class="MsoNormal">If an instance constructor has no constructor initializer, a
constructor initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">base()</span></span> is implicitly provided. Thus, an
instance constructor declaration of the form</p>

<p class="Code">C(...) {...}</p>

<p class="MsoNormal">is exactly equivalent to</p>

<p class="Code">C(...): base() {...}</p>

<p class="MsoNormal">The scope of the parameters given by the <span class="Production">formal-parameter-list</span> of an instance constructor
declaration includes the constructor initializer of that declaration. Thus, a
constructor initializer is permitted to access the parameters of the
constructor. For example:</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public A(int x, int y) {}<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; public B(int x, int y): base(x + y, x - y) {}<br>
}</p>

<p class="MsoNormal">An instance constructor initializer cannot access the
instance being created. Therefore it is a compile-time error to reference <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> in an
argument expression of the constructor initializer, as is it a compile-time
error for an argument expression to reference any instance member through a <span class="Production">simple-name</span>.</p>

<h3><a name="_Toc251613335">10.11.2 Instance variable initializers</a></h3>

<p class="MsoNormal">When an instance constructor has no constructor initializer,
or it has a constructor initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">base(...)</span></span>, that constructor implicitly
performs the initializations specified by the <span class="Production">variable-initializer</span>s
of the instance fields declared in its class. This corresponds to a sequence of
assignments that are executed immediately upon entry to the constructor and
before the implicit invocation of the direct base class constructor. The
variable initializers are executed in the textual order in which they appear in
the class declaration.</p>

<h3><a name="_Toc251613336">10.11.3 Constructor execution</a></h3>

<p class="MsoNormal">Variable initializers are transformed into assignment
statements, and these assignment statements are executed before the invocation
of the base class instance constructor. This ordering ensures that all instance
fields are initialized by their variable initializers before any statements
that have access to that instance are executed.</p>

<p class="MsoNormal">Given the example</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintFields();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public virtual void PrintFields() {}</p>

<p class="Code">}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; int x = 1;<br>
&nbsp;&nbsp; int y;</p>

<p class="Code">&nbsp;&nbsp; <span lang="FR">public B() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = -1;<br>
&nbsp;&nbsp; }</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; public override void PrintFields() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("x = {0}, y = {1}", x, y);<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">when <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">B()</span></span> is
used to create an instance of <span class="Codefragment"><span style="font-size:
10.0pt">B</span></span>, the following output is produced:</p>

<p class="Code">x = 1, y = 0</p>

<p class="MsoNormal">The value of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> is 1 because the variable initializer
is executed before the base class instance constructor is invoked. However, the
value of <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
is 0 (the default value of an <span class="Codefragment"><span style="font-size:
10.0pt">int</span></span>) because the assignment to <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> is not executed until after the base
class constructor returns.</p>

<p class="MsoNormal">It is useful to think of instance variable initializers and
constructor initializers as statements that are automatically inserted before
the <span class="Production">constructor-body</span>. The example</p>

<p class="Code">using System;<br>
using System.Collections;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int x = 1, y = -1, count;</p>

<p class="Code">&nbsp;&nbsp; public A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count = 0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public A(int n) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count = n;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; double sqrt2 = Math.Sqrt(2.0);<br>
&nbsp;&nbsp; ArrayList items = new ArrayList(100);<br>
&nbsp;&nbsp; int max;</p>

<p class="Code">&nbsp;&nbsp; public B(): this(100) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items.Add("default");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public B(int n): base(n – 1) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max = n;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">contains several variable initializers; it also contains
constructor initializers of both forms (<span class="Codefragment"><span style="font-size:10.0pt">base</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>). The example corresponds to the
code shown below, where each comment indicates an automatically inserted
statement (the syntax used for the automatically inserted constructor
invocations isn’t valid, but merely serves to illustrate the mechanism).</p>

<p class="Code">using System.Collections;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; int x, y, count;</p>

<p class="Code">&nbsp;&nbsp; public A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = -1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invoke object() constructor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count = 0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public A(int n) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y = -1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invoke object() constructor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; count = n;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; double sqrt2;<br>
&nbsp;&nbsp; ArrayList items;<br>
&nbsp;&nbsp; int max;</p>

<p class="Code">&nbsp;&nbsp; public B(): this(100) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B(100);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invoke B(int) constructor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items.Add("default");<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public B(int n): base(n – 1) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sqrt2 = Math.Sqrt(2.0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items = new ArrayList(100);&nbsp;&nbsp; // Variable initializer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A(n – 1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invoke A(int) constructor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; max = n;<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613337"></a><a name="_Ref458504602">10.11.4 Default
constructors</a></h3>

<p class="MsoNormal">If a class contains no instance constructor declarations, a
default instance constructor is automatically provided. That default
constructor simply invokes the parameterless constructor of the direct base
class. If the direct base class does not have an accessible parameterless
instance constructor, a compile-time error occurs. If the class is abstract
then the declared accessibility for the default constructor is protected.
Otherwise, the declared accessibility for the default constructor is public.
Thus, the default constructor is always of the form</p>

<p class="Code">protected C(): base() {}</p>

<p class="MsoNormal">or</p>

<p class="Code">public C(): base() {}</p>

<p class="MsoNormal">where <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
is the name of the class. </p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Message<br>
{<br>
&nbsp;&nbsp; object sender;<br>
&nbsp;&nbsp; string text;<br>
}</p>

<p class="MsoNormal">a default constructor is provided because the class contains
no instance constructor declarations. Thus, the example is precisely equivalent
to</p>

<p class="Code">class Message<br>
{<br>
&nbsp;&nbsp; object sender;<br>
&nbsp;&nbsp; string text;</p>

<p class="Code">&nbsp;&nbsp; public Message(): base() {}<br>
}</p>

<h3><a name="_Toc251613338">10.11.5 Private constructors</a></h3>

<p class="MsoNormal">When a class <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> declares only private instance
constructors, it is not possible for classes outside the program text of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to derive
from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or
to directly create instances of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. Thus, if a class contains only static
members and isn’t intended to be instantiated, adding an empty private instance
constructor will prevent instantiation. For example:</p>

<p class="Code">public class Trig<br>
{<br>
&nbsp;&nbsp; private Trig() {}&nbsp;&nbsp;&nbsp; // Prevent instantiation</p>

<p class="Code">&nbsp;&nbsp; public const double PI = 3.14159265358979323846;</p>

<p class="Code">&nbsp;&nbsp; public static double Sin(double x) {...}<br>
&nbsp;&nbsp; public static double Cos(double x) {...}<br>
&nbsp;&nbsp; public static double Tan(double x) {...}<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Trig</span></span>
class groups related methods and constants, but is not intended to be
instantiated. Therefore it declares a single empty private instance
constructor. At least one instance constructor must be declared to suppress the
automatic generation of a default constructor.</p>

<h3><a name="_Toc251613339">10.11.6 Optional instance constructor parameters</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">this(...)</span></span>
form of constructor initializer is commonly used in conjunction with
overloading to implement optional instance constructor parameters. In the
example</p>

<p class="Code">class Text<br>
{<br>
&nbsp;&nbsp; public Text(): this(0, 0, null) {}</p>

<p class="Code">&nbsp;&nbsp; public Text(int x, int y): this(x, y, null) {}</p>

<p class="Code">&nbsp;&nbsp; public Text(int x, int y, string s) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Actual constructor implementation<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the first two instance constructors merely provide the
default values for the missing arguments. Both use a <span class="Codefragment"><span style="font-size:10.0pt">this(...)</span></span> constructor initializer to
invoke the third instance constructor, which actually does the work of initializing
the new instance. The effect is that of optional constructor parameters:</p>

<p class="Code">Text t1 = new Text();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Same as Text(0, 0, null)<br>
Text t2 = new Text(5, 10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Same as Text(5, 10, null)<br>
Text t3 = new Text(5, 20, "Hello");</p>

<h2><a name="_Ref451397123"></a><a name="_Ref449412210"></a><a name="_Toc445783060"></a><a name="_Toc251613340"></a><a name="_Ref174219581"></a><a name="_Ref12430255"></a><a name="_Ref529257846"></a><a name="_Ref497294894"></a><a name="_Ref496491523"></a><a name="_Ref486414759"></a><a name="_Ref461620027"></a><a name="_Ref458680690"></a><a name="_Ref456697737"></a><a name="_Toc445783059">10.12
Static constructors</a></h2>

<p class="MsoNormal">A <span class="Term">static constructor</span> is a member
that implements the actions required to initialize a closed class type. Static
constructors are declared using <span class="Production">static-constructor-declaration</span>s:</p>

<p class="Grammar">static-constructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; static-constructor-modifiers&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
static-constructor-body</p>

<p class="Grammar">static-constructor-modifiers:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub></p>

<p class="Grammar">static-constructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Production">static-constructor-declaration</span>
may include a set of <span class="Production">attributes</span> (§17) and an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier (§10.6.7).</p>

<p class="MsoNormal">The <span class="Production">identifier</span> of a <span class="Production">static-constructor-declaration</span> must name the class in
which the static constructor is declared. If any other name is specified, a
compile-time error occurs.</p>

<p class="MsoNormal">When a static constructor declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the static constructor is said to be an <span class="Term">external
static constructor</span>. Because an external static constructor declaration
provides no actual implementation, its <span class="Production">static-constructor-body</span>
consists of a semicolon. For all other static constructor declarations, the <span class="Production">static-constructor-body</span> consists of a <span class="Production">block</span> which specifies the statements to execute in
order to initialize the class. This corresponds exactly to the <span class="Production">method-body</span> of a static method with a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> return
type (§10.6.10).</p>

<p class="MsoNormal">Static constructors are not inherited, and cannot be called
directly. </p>

<p class="MsoNormal">The static constructor for a closed class type executes at
most once in a given application domain. The execution of a static constructor
is triggered by the first of the following events to occur within an
application domain:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An instance of the class type is created.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any of the static members of the class type are referenced.</p>

<p class="MsoNormal">If a class contains the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> method (§3.1) in which execution
begins, the static constructor for that class executes before the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> method is
called. </p>

<p class="MsoNormal">To initialize a new closed class type, first a new set of
static fields (§10.5.1) for that particular closed type is created. Each of the
static fields is initialized to its default value (§5.2). Next, the static
field initializers (§10.4.5.1) are executed for those static fields. Finally,
the static constructor is executed.</p>

<p class="MsoNormal">&nbsp;</p>

<p class="MsoNormal">The example </p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; static A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Init A");<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; public static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; static B() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Init B");<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; public static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("B.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">must produce the output: </p>

<p class="Code">Init A<br>
A.F<br>
Init B<br>
B.F</p>

<p class="MsoNormal">because the execution of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>’s static constructor is triggered by
the call to <span class="Codefragment"><span style="font-size:10.0pt">A.F</span></span>,
and the execution of <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s
static constructor is triggered by the call to <span class="Codefragment"><span style="font-size:10.0pt">B.F</span></span>.</p>

<p class="MsoNormal">It is possible to construct circular dependencies that allow
static fields with variable initializers to be observed in their default value
state.</p>

<p class="MsoNormal">The example </p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int X;</p>

<p class="Code">&nbsp;&nbsp; static A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = B.Y + 1;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public static int Y = A.X + 1;</p>

<p class="Code">&nbsp;&nbsp; static B() {}</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("X = {0}, Y = {1}", A.X, B.Y);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">produces the output</p>

<p class="Code">X = 1, Y = 2</p>

<p class="MsoNormal">To execute the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> method, the system first runs the
initializer for <span class="Codefragment"><span style="font-size:10.0pt">B.Y</span></span>,
prior to class <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>’s
static constructor. <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>’s
initializer causes <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>’s
static constructor to be run because the value of <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span> is referenced. The static
constructor of&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
in turn proceeds to compute the value of&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">X</span></span>, and in doing so fetches the default
value of&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>,
which is zero. <span class="Codefragment"><span style="font-size:10.0pt">A.X</span></span>
is thus initialized to&nbsp;1. The process of running <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>’s static field initializers and static
constructor then completes, returning to the calculation of the initial value
of&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>,
the result of which becomes&nbsp;2.</p>

<p class="MsoNormal"><a name="_Ref456697771">Because the static constructor is
executed exactly once for each closed constructed class type, it is a
convenient place to enforce run-time checks on the type parameter that cannot
be checked at compile-time via constraints (§</a>10.1.5). For example, the
following type uses a static constructor to enforce that the type argument is
an enum:</p>

<p class="Code">class Gen&lt;T&gt; where T: struct<br>
{<br>
&nbsp;&nbsp; static Gen() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!typeof(T).IsEnum) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ArgumentException("T must be an enum");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h2><a name="_Toc251613341"></a><a name="_Ref174219594">10.13 Destructors</a></h2>

<p class="MsoNormal">A <span class="Term">destructor</span> is a member that
implements the actions required to destruct an instance of a class. A
destructor is declared using a <span class="Production">destructor-declaration</span>:</p>

<p class="Grammar">destructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp;
destructor-body</p>

<p class="Grammar">destructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">A <span class="Production">destructor-declaration</span> may
include a set of <span class="Production">attributes</span> (§17).</p>

<p class="MsoNormal">The <span class="Production">identifier</span> of a <span class="Production">destructor-declarator</span> must name the class in which the
destructor is declared. If any other name is specified, a compile-time error
occurs.</p>

<p class="MsoNormal">When a destructor declaration includes an <span class="Codefragment"><span style="font-size:10.0pt">extern</span></span>
modifier, the destructor is said to be an <span class="Term">external destructor</span>.
Because an external destructor declaration provides no actual implementation,
its <span class="Production">destructor-body</span> consists of a semicolon. For
all other destructors, the <span class="Production">destructor-body</span> consists
of a <span class="Production">block</span> which specifies the statements to
execute in order to destruct an instance of the class. A <span class="Production">destructor-body</span> corresponds exactly to the <span class="Production">method-body</span> of an instance method with a <span class="Codefragment"><span style="font-size:10.0pt">void</span></span> return
type (§10.6.10).</p>

<p class="MsoNormal">Destructors are not inherited. Thus, a class has no
destructors other than the one which may be declared in that class.</p>

<p class="MsoNormal">Since a destructor is required to have no parameters, it
cannot be overloaded, so a class can have, at most, one destructor.</p>

<p class="MsoNormal">Destructors are invoked automatically, and cannot be invoked
explicitly. An instance becomes eligible for destruction when it is no longer
possible for any code to use that instance. Execution of the destructor for the
instance may occur at any time after the instance becomes eligible for
destruction. When an instance is destructed, the destructors in that instance’s
inheritance chain are called, in order, from most derived to least derived. A
destructor may be executed on any thread. For further discussion of the rules
that govern when and how a destructor is executed, see §3.9.</p>

<p class="MsoNormal">The output of the example</p>

<p class="Code">using System;</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; ~A() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("A's destructor");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class B: A<br>
{<br>
&nbsp;&nbsp; ~B() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("B's destructor");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B b = new B();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; b = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.Collect();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GC.WaitForPendingFinalizers();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">is</p>

<p class="Code">B’s destructor<br>
A’s destructor</p>

<p class="MsoNormal">since destructors in an inheritance chain are called in
order, from most derived to least derived.</p>

<p class="MsoNormal"><a name="_Ref461619890">Destructors are implemented by
overriding the virtual method </a><span class="Codefragment"><span style="font-size:10.0pt">Finalize</span></span> on <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>. C# programs are not
permitted to override this method or call it (or overrides of it) directly. For
instance, the program</p>

<p class="Code">class A <br>
{<br>
&nbsp;&nbsp; override protected void Finalize() {}&nbsp; // error</p>

<p class="Code">&nbsp;&nbsp; public void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.Finalize();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">contains two errors.</p>

<p class="MsoNormal">The compiler behaves as if this method, and overrides of it,
do not exist at all. Thus, this program:</p>

<p class="Code">class A <br>
{<br>
&nbsp;&nbsp; void Finalize() {}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // permitted<br>
}</p>

<p class="MsoNormal">is valid, and the method shown hides <span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span>’s
<span class="Codefragment"><span style="font-size:10.0pt">Finalize</span></span>
method.</p>

<p class="MsoNormal">For a discussion of the behavior when an exception is thrown
from a destructor, see §16.3.</p>

<h2><a name="_Ref463364572"></a><a name="_Toc251613342"></a><a name="_Ref174231618"></a><a name="_Ref174230719"></a><a name="_Ref174230692"></a><a name="_Ref174228602"></a><a name="_Ref174226632">10.14 Iterators</a></h2>

<p class="MsoNormal">A function member (§7.5) implemented using an iterator block
(§8.2) is called an <span class="Term">iterator</span>.</p>

<p class="MsoNormal">An iterator block may be used as the body of a function
member as long as the return type of the corresponding function member is one
of the enumerator interfaces (§10.14.1) or one of the enumerable interfaces (§10.14.2). It can occur as a <span class="Production">method-body</span>, <span class="Production">operator-body</span> or <span class="Production">accessor-body</span>,
whereas events, instance constructors, static constructors and destructors
cannot be implemented as iterators.</p>

<p class="MsoNormal">When a function member is implemented using an iterator
block, it is a compile-time error for the formal parameter list of the function
member to specify any <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameters.</p>

<h3><a name="_Toc251613343"></a><a name="_Ref174231387">10.14.1 Enumerator
interfaces</a></h3>

<p class="MsoNormal">The <span class="Term">enumerator interfaces</span> are the
non-generic interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerator</span></span>
and all instantiations of the generic interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IEnumerator&lt;T&gt;</span></span>.
For the sake of brevity, in this chapter these interfaces are referenced as <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">IEnumerator&lt;T&gt;</span></span>,
respectively.</p>

<h3><a name="_Toc251613344"></a><a name="_Ref174231394">10.14.2 Enumerable
interfaces</a></h3>

<p class="MsoNormal">The <span class="Term">enumerable interfaces</span> are the
non-generic interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.IEnumerable</span></span>
and all instantiations of the generic interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IEnumerable&lt;T&gt;</span></span>.
For the sake of brevity, in this chapter these interfaces are referenced as <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>,
respectively.</p>

<h3><a name="_Toc251613345"></a><a name="_Ref174228948">10.14.3 Yield type</a></h3>

<p class="MsoNormal">An iterator produces a sequence of values, all of the same
type. This type is called the <span class="Term">yield type</span> of the
iterator.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The yield type of an iterator that returns <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The yield type of an iterator that returns <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator&lt;T&gt;</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<h3><a name="_Toc251613346"></a><a name="_Ref174231462"></a><a name="_Ref174228922">10.14.4 Enumerator objects</a></h3>

<p class="MsoNormal">When a function member returning an enumerator interface
type is implemented using an iterator block, invoking the function member does
not immediately execute the code in the iterator block. Instead, an <span class="Term">enumerator object</span> is created and returned. This object
encapsulates the code specified in the iterator block, and execution of the
code in the iterator block occurs when the enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method
is invoked. An enumerator object has the following characteristics:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It implements <span class="Codefragment"><span style="font-size:
10.0pt">IEnumerator</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator&lt;T&gt;</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the yield
type of the iterator.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It implements <span class="Codefragment"><span style="font-size:
10.0pt">System.IDisposable</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is initialized with a copy of the argument values (if any) and
instance value passed to the function member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It has four potential states, <span class="Term">before</span>, <span class="Term">running</span>, <span class="Term">suspended</span>, and <span class="Term">after</span>, and is initially in the <span class="Term">before</span>
state.</p>

<p class="MsoNormal">An enumerator object is typically an instance of a
compiler-generated enumerator class that encapsulates the code in the iterator
block and implements the enumerator interfaces, but other methods of
implementation are possible. If an enumerator class is generated by the compiler,
that class will be nested, directly or indirectly, in the class containing the
function member, it will have private accessibility, and it will have a name
reserved for compiler use (§2.4.2).</p>

<p class="MsoNormal">An enumerator object may implement more interfaces than those
specified above.</p>

<p class="MsoNormal">The following sections describe the exact behavior of the <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span> members
of the <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>
interface implementations provided by an enumerator object.</p>

<p class="MsoNormal">Note that enumerator objects do not support the <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator.Reset</span></span>
method. Invoking this method causes a <span class="Codefragment"><span style="font-size:10.0pt">System.NotSupportedException</span></span> to be
thrown.</p>

<h4><a name="_Toc251613347">10.14.4.1 The MoveNext method</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method of an enumerator object encapsulates the code of an iterator block.
Invoking the <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method executes code in the iterator block and sets the <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
property of the enumerator object as appropriate. The precise action performed
by <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
depends on the state of the enumerator object when <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> is invoked:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">before</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Changes the
state to <span class="Term">running</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Initializes the
parameters (including <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>)
of the iterator block to the argument values and instance value saved when the
enumerator object was initialized.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Executes the
iterator block from the beginning until execution is interrupted (as described
below).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">running</span>,
the result of invoking <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
is unspecified.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">suspended</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Changes the
state to <span class="Term">running</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Restores the
values of all local variables and parameters (including this) to the values
saved when execution of the iterator block was last suspended. Note that the
contents of any objects referenced by these variables may have changed since
the previous call to MoveNext.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Resumes
execution of the iterator block immediately following the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement that caused the suspension of execution and continues until execution
is interrupted (as described below).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">after</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
returns <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>.</p>

<p class="MsoNormal">When <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
executes the iterator block, execution can be interrupted in four ways: By a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement,
by a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement, by encountering the end of the iterator block, and by an exception
being thrown and propagated out of the iterator block.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement is encountered (§8.14):</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The expression
given in the statement is evaluated, implicitly converted to the yield type,
and assigned to the <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
property of the enumerator object.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Execution of
the iterator body is suspended. The values of all local variables and
parameters (including <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>)
are saved, as is the location of this <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement. If the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statement is within one or more <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> blocks, the associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks
are <em>not</em> executed at this time.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The state of
the enumerator object is changed to <span class="Term">suspended</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method
returns <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>
to its caller, indicating that the iteration successfully advanced to the next
value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement is encountered (§8.14):</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If the <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">break</span></span> statement
is within one or more <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
blocks, the associated <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span>
blocks are executed.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The state of
the enumerator object is changed to <span class="Term">after</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method
returns <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
to its caller, indicating that the iteration is complete.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When the end of the iterator body is encountered:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The state of
the enumerator object is changed to <span class="Term">after</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method
returns <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>
to its caller, indicating that the iteration is complete.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>When an exception is thrown and propagated out of the iterator
block:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Appropriate <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks
in the iterator body will have been executed by the exception propagation.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The state of
the enumerator object is changed to <span class="Term">after</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The exception
propagation continues to the caller of the <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method.</p>

<h4><a name="_Toc251613348">10.14.4.2 The Current property</a></h4>

<p class="MsoNormal">An enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span> property is affected by <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span>
statements in the iterator block.</p>

<p class="MsoNormal">When an enumerator object is in the <span class="Term">suspended</span>
state, the value of <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
is the value set by the previous call to <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>. When an enumerator object is
in the <span class="Term">before</span>, <span class="Term">running</span>, or <span class="Term">after</span> states, the result of accessing <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span> is
unspecified.</p>

<p class="MsoNormal">For an iterator with a yield type other than <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>, the
result of accessing <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
through the enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span> implementation corresponds
to accessing <span class="Codefragment"><span style="font-size:10.0pt">Current</span></span>
through the enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator&lt;T&gt;</span></span> implementation and
casting the result to <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<h4><a name="_Toc251613349">10.14.4.3 The Dispose method</a></h4>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
method is used to clean up the iteration by bringing the enumerator object to
the <span class="Term">after</span> state.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">before</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
changes the state to <span class="Term">after</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">running</span>,
the result of invoking <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
is unspecified.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">suspended</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Changes the
state to <span class="Term">running</span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Executes any
finally blocks as if the last executed <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> statement were a <span class="Codefragment"><span style="font-size:10.0pt">yield</span></span> <span class="Codefragment"><span style="font-size:10.0pt">break</span></span>
statement. If this causes an exception to be thrown and propagated out of the
iterator body, the state of the enumerator object is set to <span class="Term">after</span>
and the exception is propagated to the caller of the <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span> method.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Changes the
state to <span class="Term">after</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the state of the enumerator object is <span class="Term">after</span>,
invoking <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span>
has no affect.</p>

<h3><a name="_Toc251613350"></a><a name="_Ref174228930">10.14.5 Enumerable
objects</a></h3>

<p class="MsoNormal">When a function member returning an enumerable interface
type is implemented using an iterator block, invoking the function member does
not immediately execute the code in the iterator block. Instead, an <span class="Term">enumerable object</span> is created and returned. The enumerable
object’s <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method returns an enumerator object that encapsulates the code specified in the
iterator block, and execution of the code in the iterator block occurs when the
enumerator object’s <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method is invoked. An enumerable object has the following characteristics:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It implements <span class="Codefragment"><span style="font-size:
10.0pt">IEnumerable</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is the yield
type of the iterator.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>It is initialized with a copy of the argument values (if any) and
instance value passed to the function member.</p>

<p class="MsoNormal">An enumerable object is typically an instance of a
compiler-generated enumerable class that encapsulates the code in the iterator
block and implements the enumerable interfaces, but other methods of
implementation are possible. If an enumerable class is generated by the
compiler, that class will be nested, directly or indirectly, in the class
containing the function member, it will have private accessibility, and it will
have a name reserved for compiler use (§2.4.2).</p>

<p class="MsoNormal">An enumerable object may implement more interfaces than
those specified above. In particular, an enumerable object may also implement <span class="Codefragment"><span style="font-size:10.0pt">IEnumerator</span></span> and
<span class="Codefragment"><span style="font-size:10.0pt">IEnumerator&lt;T&gt;</span></span>,
enabling it to serve as both an enumerable and an enumerator. In that type of
implementation, the first time an enumerable object’s <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span> method is invoked, the
enumerable object itself is returned. Subsequent invocations of the enumerable
object’s <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>,
if any, return a copy of the enumerable object. Thus, each returned enumerator
has its own state and changes in one enumerator will not affect another.</p>

<h4><a name="_Toc251613351">10.14.5.1 The GetEnumerator method</a></h4>

<p class="MsoNormal">An enumerable object provides an implementation of the <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
methods of the <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">IEnumerable&lt;T&gt;</span></span>
interfaces. The two <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
methods share a common implementation that acquires and returns an available
enumerator object. The enumerator object is initialized with the argument
values and instance value saved when the enumerable object was initialized, but
otherwise the enumerator object functions as described in §10.14.4.</p>

<h3><a name="_Toc251613352">10.14.6 Implementation example</a></h3>

<p class="MsoNormal">This section describes a possible implementation of
iterators in terms of standard C# constructs. The implementation described here
is based on the same principles used by the Microsoft C# compiler, but it is by
no means a mandated implementation or the only one possible.</p>

<p class="MsoNormal">The following <span class="Codefragment"><span style="font-size:10.0pt">Stack&lt;T&gt;</span></span> class implements its <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method using an iterator. The iterator enumerates the elements of the stack in
top to bottom order.</p>

<p class="Code">using System;<br>
using System.Collections;<br>
using System.Collections.Generic;</p>

<p class="Code">class Stack&lt;T&gt;: IEnumerable&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; T[] items;<br>
&nbsp;&nbsp; int count;</p>

<p class="Code">&nbsp;&nbsp; public void Push(T item) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (items == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items = new T[4];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (items.Length == count) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T[] newItems = new T[count * 2];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Array.Copy(items, 0, newItems, 0, count);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items = newItems;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items[count++] = item;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public T Pop() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T result = items[--count];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items[count] = default(T);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public IEnumerator&lt;T&gt; GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = count - 1; i &gt;= 0; --i) yield return items[i];<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method can be translated into an instantiation of a compiler-generated
enumerator class that encapsulates the code in the iterator block, as shown in
the following.</p>

<p class="Code">class Stack&lt;T&gt;: IEnumerable&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; ...</p>

<p class="Code">&nbsp;&nbsp; public IEnumerator&lt;T&gt; GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new __Enumerator1(this);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Enumerator1: IEnumerator&lt;T&gt;, IEnumerator<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int __state;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T __current;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stack&lt;T&gt; __this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public __Enumerator1(Stack&lt;T&gt; __this) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.__this = __this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public T Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object IEnumerator.Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool MoveNext() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (__state) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1: goto __state1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 2: goto __state2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i = __this.count - 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __loop:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i &lt; 0) goto __state2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __current = __this.items[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto __loop;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state2:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Dispose() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void IEnumerator.Reset() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new NotSupportedException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In the preceding translation, the code in the iterator block
is turned into a state machine and placed in the <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span> method of the enumerator class.
Furthermore, the local variable <span class="Codefragment"><span style="font-size:10.0pt">i</span></span> is turned into a field in the
enumerator object so it can continue to exist across invocations of <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>.</p>

<p class="MsoNormal">The following example prints a simple multiplication table
of the integers 1 through 10. The <span class="Codefragment"><span style="font-size:10.0pt">FromTo</span></span> method in the example returns an
enumerable object and is implemented using an iterator.</p>

<p class="Code">using System;<br>
using System.Collections.Generic;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static IEnumerable&lt;int&gt; FromTo(int from, int to) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while (from &lt;= to) yield return from++;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEnumerable&lt;int&gt; e = FromTo(1, 10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (int x in e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (int y in e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write("{0,3} ", x * y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">FromTo</span></span>
method can be translated into an instantiation of a compiler-generated
enumerable class that encapsulates the code in the iterator block, as shown in
the following.</p>

<p class="Code">using System;<br>
using System.Threading;<br>
using System.Collections;<br>
using System.Collections.Generic;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; ...</p>

<p class="Code">&nbsp;&nbsp; static IEnumerable&lt;int&gt; FromTo(int from, int to) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new __Enumerable1(from, to);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Enumerable1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEnumerable&lt;int&gt;, IEnumerable,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEnumerator&lt;int&gt;, IEnumerator<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int __state;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int __current;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int __from;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int from;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int to;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public __Enumerable1(int __from, int to) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.__from = __from;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.to = to;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IEnumerator&lt;int&gt; GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __Enumerable1 result = this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (Interlocked.CompareExchange(ref __state, 1, 0) != 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result = new __Enumerable1(__from, to);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.__state = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.from = result.__from;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEnumerator IEnumerable.GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (IEnumerator)GetEnumerator();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object IEnumerator.Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool MoveNext() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (__state) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (from &gt; to) goto case 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __current = from++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 2:<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new InvalidOperationException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Dispose() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void IEnumerator.Reset() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new NotSupportedException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The enumerable class implements both the enumerable
interfaces and the enumerator interfaces, enabling it to serve as both an
enumerable and an enumerator. The first time the <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span> method is invoked, the
enumerable object itself is returned. Subsequent invocations of the enumerable
object’s <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>,
if any, return a copy of the enumerable object. Thus, each returned enumerator
has its own state and changes in one enumerator will not affect another. The <span class="Codefragment"><span style="font-size:10.0pt">Interlocked.CompareExchange</span></span>
method is used to ensure thread-safe operation.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">to</span></span>
parameters are turned into fields in the enumerable class. Because <span class="Codefragment"><span style="font-size:10.0pt">from</span></span> is
modified in the iterator block, an additional <span class="Codefragment"><span style="font-size:10.0pt">__from</span></span> field is introduced to hold the
initial value given to <span class="Codefragment"><span style="font-size:10.0pt">from</span></span>
in each enumerator.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">MoveNext</span></span>
method throws an <span class="Codefragment"><span style="font-size:10.0pt">InvalidOperationException</span></span>
if it is called when <span class="Codefragment"><span style="font-size:10.0pt">__state</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>.
This protects against use of the enumerable object as an enumerator object
without first calling <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>.</p>

<p class="MsoNormal">The following example shows a simple tree class. The <span class="Codefragment"><span style="font-size:10.0pt">Tree&lt;T&gt;</span></span>
class implements its <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method using an iterator. The iterator enumerates the elements of the tree in
infix order.</p>

<p class="Code">using System;<br>
using System.Collections.Generic;</p>

<p class="Code">class Tree&lt;T&gt;: IEnumerable&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; T value;<br>
&nbsp;&nbsp; Tree&lt;T&gt; left;<br>
&nbsp;&nbsp; Tree&lt;T&gt; right;</p>

<p class="Code">&nbsp;&nbsp; public Tree(T value, Tree&lt;T&gt; left, Tree&lt;T&gt; right)
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.left = left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.right = right;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public IEnumerator&lt;T&gt; GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (left != null) foreach (T x in left) yield x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; yield value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (right != null) foreach (T x in right) yield x;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Program<br>
{<br>
&nbsp;&nbsp; static Tree&lt;T&gt; MakeTree&lt;T&gt;(T[] items, int left, int right) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (left &gt; right) return null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = (left + right) / 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Tree&lt;T&gt;(items[i], <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MakeTree(items, left, i - 1),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MakeTree(items, i + 1, right));<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static Tree&lt;T&gt; MakeTree&lt;T&gt;(params T[] items) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return MakeTree(items, 0, items.Length - 1);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // The output of the program is:<br>
&nbsp;&nbsp; // 1 2 3 4 5 6 7 8 9<br>
&nbsp;&nbsp; // Mon Tue Wed Thu Fri Sat Sun</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tree&lt;int&gt; ints = MakeTree(1, 2, 3, 4, 5, 6, 7, 8, 9);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (int i in ints) Console.Write("{0} ", i);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tree&lt;string&gt; strings = MakeTree(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Mon", "Tue", "Wed", "Thu", "Fri",
"Sat", "Sun");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach (string s in strings) Console.Write("{0} ", s);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">GetEnumerator</span></span>
method can be translated into an instantiation of a compiler-generated
enumerator class that encapsulates the code in the iterator block, as shown in
the following.</p>

<p class="Code">class Tree&lt;T&gt;: IEnumerable&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; ...</p>

<p class="Code">&nbsp;&nbsp; public IEnumerator&lt;T&gt; GetEnumerator() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new __Enumerator1(this);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class __Enumerator1 : IEnumerator&lt;T&gt;, IEnumerator<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Node&lt;T&gt; __this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IEnumerator&lt;T&gt; __left, __right;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int __state;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T __current;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public __Enumerator1(Node&lt;T&gt; __this) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.__this = __this;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public T Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object IEnumerator.Current {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return __current; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool MoveNext() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (__state) {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (__this.left == null) goto __yield_value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __left = __this.left.GetEnumerator();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto case 1;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!__left.MoveNext()) goto __left_dispose;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __current = __left.Current;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __left_dispose:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __left.Dispose();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __yield_value:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __current = __this.value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 2:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (__this.right == null) goto __end;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __right = __this.right.GetEnumerator();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto case 3;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 3:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; if (!__right.MoveNext()) goto __right_dispose;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __current = __right.Current;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __right_dispose:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = -1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __right.Dispose();</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __end:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 4;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (__state &lt; 0) Dispose();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Dispose() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (__state) {</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case -2:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __left.Dispose();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 3:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case -3:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __right.Dispose();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __state = 4;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void IEnumerator.Reset() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new NotSupportedException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The compiler generated temporaries used in the <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statements are lifted into the <span class="Codefragment"><span style="font-size:
10.0pt">__left</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">__right</span></span> fields of the enumerator object.
The <span class="Codefragment"><span style="font-size:10.0pt">__state</span></span>
field of the enumerator object is carefully updated so that the correct <span class="Codefragment"><span style="font-size:10.0pt">Dispose()</span></span>
method will be called correctly if an exception is thrown. Note that it is not
possible to write the translated code with simple <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span> statements.</p>

<h1><a name="_Toc251613353">11. Structs</a></h1>

<p class="MsoNormal"><a name="_Ref451394422"></a><a name="_Toc445783061">Structs
are similar to classes in that they represent data structures that can contain
data members and function members. However, unlike classes, structs are value
types and do not require heap allocation. A variable of a struct type directly
contains the data of the struct, whereas a variable of a class type contains a
reference to the data, the latter known as an object.</a></p>

<p class="MsoNormal">Structs are particularly useful for small data structures
that have value semantics. Complex numbers, points in a coordinate system, or
key-value pairs in a dictionary are all good examples of structs. Key to these
data structures is that they have few data members, that they do not require
use of inheritance or referential identity, and that they can be conveniently
implemented using value semantics where assignment copies the value instead of
the reference.</p>

<p class="MsoNormal">As described in §4.1.4, the simple types provided by C#,
such as <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">double</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>,
are in fact all struct types. Just as these predefined types are structs, it is
also possible to use structs and operator overloading to implement new
“primitive” types in the C# language. Two examples of such types are given at
the end of this chapter (§11.4).</p>

<h2><a name="_Toc251613354"></a><a name="_Ref493151471">11.1 Struct
declarations</a></h2>

<p class="MsoNormal">A <span class="Production">struct-declaration</span> is a <span class="Production">type-declaration</span> (§9.6) that declares a new struct:</p>

<p class="Grammar">struct-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; struct-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">struct</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct-interfaces<sub>opt</sub>&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp;
struct-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><sub>opt</sub></p>

<p class="MsoNormal">A <span class="Production">struct-declaration</span> consists
of an optional set of <span class="Production">attributes</span> (§17), followed by an optional set of <span class="Production">struct-modifiers</span> (§11.1.1), followed by an optional <span class="Codefragment"><span style="font-size:
10.0pt">partial</span></span> modifier, followed by the keyword <span class="Codefragment"><span style="font-size:10.0pt">struct</span></span> and an <span class="Production">identifier</span> that names the struct, followed by an
optional <span class="Production">type-parameter-list</span> specification (§10.1.3), followed by an optional <span class="Production">struct-interfaces</span>
specification (§11.1.2) ), followed by an optional <span class="Production">type-parameters-constraints-clauses</span>
specification (§10.1.5), followed by a <span class="Production">struct-body</span>
(§11.1.4), optionally followed by a semicolon.</p>

<h3><a name="_Toc251613355"></a><a name="_Ref496060149"></a><a name="_Toc445783062">11.1.1 Struct modifiers</a></h3>

<p class="MsoNormal">A <span class="Production">struct-declaration</span> may
optionally include a sequence of struct modifiers:</p>

<p class="Grammar">struct-modifiers:<br>
struct-modifier<br>
struct-modifiers&nbsp;&nbsp; struct-modifier</p>

<p class="Grammar">struct-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="MsoNormal">It is a compile-time error for the same modifier to appear
multiple times in a struct declaration.</p>

<p class="MsoNormal">The modifiers of a struct declaration have the same meaning
as those of a class declaration (§10.1).</p>

<h3><a name="_Ref496060203"></a><a name="_Toc251613356">11.1.2 Partial modifier</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier indicates that this <span class="Production">struct-declaration</span>
is a partial type declaration. Multiple partial struct declarations with the
same name within an enclosing namespace or type declaration combine to form one
struct declaration, following the rules specified in §10.2.</p>

<h3><a name="_Toc251613357">11.1.3 Struct interfaces</a></h3>

<p class="MsoNormal">A struct declaration may include a <span class="Production">struct-interfaces</span>
specification, in which case the struct is said to directly implement the given
interface types.</p>

<p class="Grammar">struct-interfaces:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list</p>

<p class="MsoNormal">Interface implementations are discussed further in §13.4.</p>

<h3><a name="_Toc251613358"></a><a name="_Ref496060225"></a><a name="_Ref465151440"></a><a name="_Toc445783064">11.1.4 Struct body</a></h3>

<p class="MsoNormal">The <span class="Production">struct-body</span> of a struct
defines the members of the struct.</p>

<p class="Grammar">struct-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
struct-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<h2><a name="_Toc251613359"></a><a name="_Ref11228246"></a><a name="_Ref516035535"></a><a name="_Toc445783065">11.2 Struct members</a></h2>

<p class="MsoNormal">The members of a struct consist of the members introduced by
its <span class="Production">struct-member-declaration</span>s and the members
inherited from the type <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<p class="Grammar">struct-member-declarations:<br>
struct-member-declaration<br>
struct-member-declarations&nbsp;&nbsp; struct-member-declaration</p>

<p class="Grammar">struct-member-declaration:<br>
constant-declaration<br>
field-declaration<br>
method-declaration<br>
property-declaration<br>
event-declaration<br>
indexer-declaration<br>
operator-declaration<br>
constructor-declaration<br>
static-constructor-declaration<br>
type-declaration</p>

<p class="MsoNormal">Except for the differences noted in §11.3, the descriptions of class members provided in §10.3 through §10.14 apply to struct members as
well.</p>

<h2><a name="_Toc251613360"></a><a name="_Ref496070953">11.3 Class and struct
differences</a></h2>

<p class="MsoNormal">Structs differ from classes in several important ways:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Structs are value types (§11.3.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>All struct types implicitly inherit from the class <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
(§11.3.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Assignment to a variable of a struct type creates a <em>copy</em>
of the value being assigned (§11.3.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The default value of a struct is the value produced by setting
all value type fields to their default value and all reference type fields to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> (§11.3.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Boxing and unboxing operations are used to convert between a
struct type and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
(§11.3.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The meaning of <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> is different for structs (§7.6.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Instance field declarations for a struct are not permitted to
include variable initializers (§11.3.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A struct is not permitted to declare a parameterless instance
constructor (§11.3.8).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A struct is not permitted to declare a destructor (§11.3.9).</p>

<h3><a name="_Toc251613361"></a><a name="_Ref520451066">11.3.1 Value semantics</a></h3>

<p class="MsoNormal">Structs are value types (§4.1) and are said to have value
semantics. Classes, on the other hand, are reference types (§4.2) and are said to have reference semantics.</p>

<p class="MsoNormal">A variable of a struct type directly contains the data of
the struct, whereas a variable of a class type contains a reference to the
data, the latter known as an object. When a struct <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> contains an instance field of type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is a struct
type, it is a compile-time error for <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> to depend on <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>. A struct <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> <span class="Term">directly depends on</span>
a struct <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>
if <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
contains an instance field of type <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>. Given this definition, the complete
set of structs upon which a struct depends is the transitive closure of the <span class="Term">directly depends on</span> relationship.&nbsp; For example</p>

<p class="Code"><span lang="FR">struct Node<br>
{<br>
&nbsp;&nbsp; int data;</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; Node next; // error, Node directly depends on
itself</span></p>

<p class="Code">}</p>

<p class="MsoNormal">is an error because <span class="Codefragment"><span style="font-size:10.0pt">Node</span></span> contains an instance field of its
own type.&nbsp; Another example</p>

<p class="Code"><span lang="FR">struct A { B b; }</span></p>

<p class="Code" style="margin-left:.25in;text-indent:.25in"><span lang="FR">struct
B { C c; }</span></p>

<p class="Code"><span lang="FR">struct C { A a; }</span></p>

<p class="MsoNormal"><span lang="FR">is an error because each of the types </span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span><span lang="FR">,
</span><span class="Codefragment"><span style="font-size:10.0pt">B</span></span><span lang="FR">, and </span><span class="Codefragment"><span style="font-size:10.0pt">C</span></span><span lang="FR"> depend on each other.</span></p>

<p class="MsoNormal">With classes, it is possible for two variables to reference
the same object, and thus possible for operations on one variable to affect the
object referenced by the other variable. With structs, the variables each have
their own copy of the data (except in the case of <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter variables), and it is not
possible for operations on one to affect the other. Furthermore, because
structs are not reference types, it is not possible for values of a struct type
to be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">Given the declaration</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; public int x, y;</p>

<p class="Code">&nbsp;&nbsp; <span lang="FR">public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal"><span lang="FR">the code fragment</span></p>

<p class="Code">Point a = new Point(10, 10);<br>
Point b = a;<br>
a.x = 100;<br>
System.Console.WriteLine(b.x);</p>

<p class="MsoNormal">outputs the value <span class="Codefragment"><span style="font-size:10.0pt">10</span></span>. The assignment of <span class="Codefragment"><span style="font-size:10.0pt">a</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">b</span></span> creates a
copy of the value, and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
is thus unaffected by the assignment to <span class="Codefragment"><span style="font-size:10.0pt">a.x</span></span>. Had <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> instead been declared as a class,
the output would be <span class="Codefragment"><span style="font-size:10.0pt">100</span></span>
because <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">b</span></span>
would reference the same object.</p>

<h3><a name="_Toc251613362"></a><a name="_Ref520451111">11.3.2 Inheritance</a></h3>

<p class="MsoNormal">All struct types implicitly inherit from the class <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>,
which, in turn, inherits from class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. A struct declaration may specify
a list of implemented interfaces, but it is not possible for a struct
declaration to specify a base class.</p>

<p class="MsoNormal">Struct types are never abstract and are always implicitly
sealed. The <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifiers are therefore not permitted in a struct declaration.</p>

<p class="MsoNormal">Since inheritance isn’t supported for structs, the declared
accessibility of a struct member cannot be <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span> <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>.</p>

<p class="MsoNormal">Function members in a struct cannot be <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, and
the <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier is allowed only to override methods inherited from <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>.</p>

<h3><a name="_Toc251613363"></a><a name="_Ref520451155">11.3.3 Assignment</a></h3>

<p class="MsoNormal">Assignment to a variable of a struct type creates a <em>copy</em>
of the value being assigned. This differs from assignment to a variable of a
class type, which copies the reference but not the object identified by the
reference.</p>

<p class="MsoNormal">Similar to an assignment, when a struct is passed as a value
parameter or returned as the result of a function member, a copy of the struct
is created. A struct may be passed by reference to a function member using a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter.</p>

<p class="MsoNormal">When a property or indexer of a struct is the target of an
assignment, the instance expression associated with the property or indexer
access must be classified as a variable. If the instance expression is
classified as a value, a compile-time error occurs. This is described in
further detail in §7.17.1.</p>

<h3><a name="_Toc251613364"></a><a name="_Ref496604848">11.3.4 Default values</a></h3>

<p class="MsoNormal">As described in §5.2, several kinds of variables are
automatically initialized to their default value when they are created. For
variables of class types and other reference types, this default value is <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. However,
since structs are value types that cannot be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, the default value of a struct is
the value produced by setting all value type fields to their default value and
all reference type fields to <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span>.</p>

<p class="MsoNormal">Referring to the <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> struct declared above, the example</p>

<p class="Code">Point[] a = new Point[100];</p>

<p class="MsoNormal">initializes each <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> in the array to the value produced
by setting the <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span>
fields to zero.</p>

<p class="MsoNormal">The default value of a struct corresponds to the value
returned by the default constructor of the struct (§4.1.2). Unlike a class, a
struct is not permitted to declare a parameterless instance constructor.
Instead, every struct implicitly has a parameterless instance constructor which
always returns the value that results from setting all value type fields to
their default value and all reference type fields to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>.</p>

<p class="MsoNormal">Structs should be designed to consider the default
initialization state a valid state. In the example</p>

<p class="Code">using System;</p>

<p class="Code">struct KeyValuePair<br>
{<br>
&nbsp;&nbsp; string key;<br>
&nbsp;&nbsp; string value;</p>

<p class="Code">&nbsp;&nbsp; public KeyValuePair(string key, string value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (key == null || value == null) throw new ArgumentException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.key = key;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the user-defined instance constructor protects against null
values only where it is explicitly called. In cases where a <span class="Codefragment"><span style="font-size:10.0pt">KeyValuePair</span></span>
variable is subject to default value initialization, the <span class="Codefragment"><span style="font-size:10.0pt">key</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">value</span></span> fields
will be null, and the struct must be prepared to handle this state.</p>

<h3><a name="_Toc251613365"></a><a name="_Ref520451310">11.3.5 Boxing and
unboxing</a></h3>

<p class="MsoNormal">A value of a class type can be converted to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> or to an
interface type that is implemented by the class simply by treating the
reference as another type at compile-time. Likewise, a value of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> or a
value of an interface type can be converted back to a class type without
changing the reference (but of course a run-time type check is required in this
case).</p>

<p class="MsoNormal">Since structs are not reference types, these operations are
implemented differently for struct types. When a value of a struct type is
converted to type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>
or to an interface type that is implemented by the struct, a boxing operation
takes place. Likewise, when a value of type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> or a value of an interface type
is converted back to a struct type, an unboxing operation takes place. A key
difference from the same operations on class types is that boxing and unboxing <em>copies</em>
the struct value either into or out of the boxed instance. Thus, following a
boxing or unboxing operation, changes made to the unboxed struct are not
reflected in the boxed struct.</p>

<p class="MsoNormal"><a name="_Ref520451365">When a struct type overrides a
virtual method inherited from </a><span class="Codefragment"><span style="font-size:10.0pt">System.Object</span></span> (such as <span class="Codefragment"><span style="font-size:10.0pt">Equals</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">GetHashCode</span></span>, or
<span class="Codefragment"><span style="font-size:10.0pt">ToString</span></span>),
invocation of the virtual method through an instance of the struct type does
not cause boxing to occur. This is true even when the struct is used as a type
parameter and the invocation occurs through an instance of the type parameter
type. For example:</p>

<p class="Code">using System;</p>

<p class="Code">struct Counter<br>
{<br>
&nbsp;&nbsp; int value;</p>

<p class="Code">&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value.ToString();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Program<br>
{<br>
&nbsp;&nbsp; static void Test&lt;T&gt;() where T: new() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T x = new T();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x.ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x.ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x.ToString());<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test&lt;Counter&gt;();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The output of the program is:</p>

<p class="Code">1<br>
2<br>
3</p>

<p class="MsoNormal">Although it is bad style for <span class="Codefragment"><span style="font-size:10.0pt">ToString</span></span> to have side effects, the
example demonstrates that no boxing occurred for the three invocations of <span class="Codefragment"><span style="font-size:10.0pt">x.ToString()</span></span>.</p>

<p class="MsoNormal">Similarly, boxing never implicitly occurs when accessing a
member on a constrained type parameter. For example, suppose an interface <span class="Codefragment"><span style="font-size:10.0pt">ICounter</span></span>
contains a method <span class="Codefragment"><span style="font-size:10.0pt">Increment</span></span>
which can be used to modify a value. If <span class="Codefragment"><span style="font-size:10.0pt">ICounter</span></span> is used as a constraint, the
implementation of the <span class="Codefragment"><span style="font-size:10.0pt">Increment</span></span>
method is called with a reference to the variable that <span class="Codefragment"><span style="font-size:10.0pt">Increment</span></span> was
called on, never a boxed copy.</p>

<p class="Code">using System;</p>

<p class="Code">interface ICounter<br>
{<br>
&nbsp;&nbsp; void Increment();<br>
}</p>

<p class="Code">struct Counter: ICounter<br>
{<br>
&nbsp;&nbsp; int value;</p>

<p class="Code">&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value.ToString();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; void ICounter.Increment() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value++;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Program<br>
{<br>
&nbsp;&nbsp; static void Test&lt;T&gt;() where T: ICounter, new() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T x = new T();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x.Increment();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Modify x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((ICounter)x).Increment();&nbsp;&nbsp;&nbsp; // Modify boxed copy of x<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(x);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test&lt;Counter&gt;();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The first call to <span class="Codefragment"><span style="font-size:10.0pt">Increment</span></span> modifies the value in the
variable <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.
This is not equivalent to the second call to <span class="Codefragment"><span style="font-size:10.0pt">Increment</span></span>, which modifies the value in a
boxed copy of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span>.
Thus, the output of the program is:</p>

<p class="Code">0<br>
1<br>
1</p>

<p class="MsoNormal">For further details on boxing and unboxing, see §4.3.</p>

<h3><a name="_Toc251613366">11.3.6 Meaning of this</a></h3>

<p class="MsoNormal">Within an instance constructor or instance function member
of a class, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
is classified as a value. Thus, while <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> can be used to refer to the
instance for which the function member was invoked, it is not possible to
assign to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
in a function member of a class.</p>

<p class="MsoNormal">Within an instance constructor of a struct, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
corresponds to an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter of the struct type, and within an instance function member of a
struct, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
corresponds to a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
parameter of the struct type. In both cases, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> is classified as a variable, and it
is possible to modify the entire struct for which the function member was
invoked by assigning to <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
or by passing this as a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter.</p>

<h3><a name="_Toc251613367"></a><a name="_Ref520451448">11.3.7 Field
initializers</a></h3>

<p class="MsoNormal">As described in §11.3.4, the default value of a struct
consists of the value that results from setting all value type fields to their
default value and all reference type fields to <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. For this reason, a struct does not
permit instance field declarations to include variable initializers. This
restriction applies only to instance fields. Static fields of a struct are
permitted to include variable initializers.</p>

<p class="MsoNormal">The example</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; public int x = 1;&nbsp; // Error, initializer not permitted<br>
&nbsp;&nbsp; public int y = 1;&nbsp; // Error, initializer not permitted<br>
}</p>

<p class="MsoNormal">is in error because the instance field declarations include
variable initializers.</p>

<h3><a name="_Toc251613368"></a><a name="_Ref507585922">11.3.8 Constructors</a></h3>

<p class="MsoNormal">Unlike a class, a struct is not permitted to declare a
parameterless instance constructor. Instead, every struct implicitly has a
parameterless instance constructor which always returns the value that results
from setting all value type fields to their default value and all reference
type fields to null (§4.1.2). A struct can declare instance constructors having
parameters. For example</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; int x, y;</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.x = x;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.y = y;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Given the above declaration, the statements</p>

<p class="Code">Point p1 = new Point();</p>

<p class="Code">Point p2 = new Point(0, 0);</p>

<p class="MsoNormal">both create a <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> with <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> initialized to zero.</p>

<p class="MsoNormal">A struct instance constructor is not permitted to include a
constructor initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">base(...)</span></span>.</p>

<p class="MsoNormal">If the struct instance constructor doesn’t specify a
constructor initializer, the <span class="Codefragment"><span style="font-size:
10.0pt">this</span></span> variable corresponds to an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameter of the struct type, and
similar to an <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
must be definitely assigned (§5.3) at every location where the constructor
returns. If the struct instance constructor specifies a constructor
initializer, the <span class="Codefragment"><span style="font-size:10.0pt">this</span></span>
variable corresponds to a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
parameter of the struct type, and similar to a <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> parameter, <span class="Codefragment"><span style="font-size:10.0pt">this</span></span> is considered definitely assigned
on entry to the constructor body. Consider the instance constructor
implementation below:</p>

<p class="Code"><span lang="FR">struct Point<br>
{<br>
&nbsp;&nbsp; int x, y;</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; </span>public int X {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { x = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public int Y {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { y = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Point(int x, int y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error, this is not yet definitely assigned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y = y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // error, this is not yet definitely assigned<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">No instance member function (including the set accessors for
the properties <span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>)
can be called until all fields of the struct being constructed have been
definitely assigned. Note, however, that if <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> were a class instead of a struct,
the instance constructor implementation would be permitted.</p>

<h3><a name="_Toc251613369"></a><a name="_Ref520451518">11.3.9 Destructors</a></h3>

<p class="MsoNormal">A struct is not permitted to declare a destructor.</p>

<h3><a name="_Ref496612091"></a><a name="_Toc251613370">11.3.10 Static
constructors</a></h3>

<p class="MsoNormal">Static constructors for structs follow most of the same
rules as for classes. The execution of a static constructor for a struct type is
triggered by the first of the following events to occur within an application
domain:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A static member of the struct type is referenced.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An explicitly declared constructor of the struct type is called.</p>

<p class="MsoNormal">The creation of default values (§11.3.4) of struct types
does not trigger the static constructor. (An example of this is the initial
value of elements in an array.)</p>

<h2><a name="_Toc251613371"></a><a name="_Ref22018983">11.4 Struct examples</a></h2>

<p class="MsoNormal">The following shows two significant examples of using <span class="Codefragment"><span style="font-size:10.0pt">struct</span></span> types to
create types that can be used similarly to the built-in types of the language,
but with modified semantics.</p>

<h3><a name="_Toc251613372">11.4.1 Database integer type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">DBInt</span></span>
struct below implements an integer type that can represent the complete set of
values of the <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
type, plus an additional state that indicates an unknown value. A type with
these characteristics is commonly used in databases.</p>

<p class="Code">using System;</p>

<p class="Code">public struct DBInt<br>
{<br>
&nbsp;&nbsp; // The Null member represents an unknown DBInt value.</p>

<p class="Code">&nbsp;&nbsp; public static readonly DBInt Null = new DBInt();</p>

<p class="Code">&nbsp;&nbsp; // When the defined field is true, this DBInt represents a
known value<br>
&nbsp;&nbsp; // which is stored in the value field. When the defined field is false,<br>
&nbsp;&nbsp; // this DBInt represents an unknown value, and the value field is 0.</p>

<p class="Code">&nbsp;&nbsp; int value;<br>
&nbsp;&nbsp; bool defined;</p>

<p class="Code">&nbsp;&nbsp; // Private instance constructor. Creates a DBInt with a known
value.</p>

<p class="Code">&nbsp;&nbsp; DBInt(int value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.defined = true;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // The IsNull property is true if this DBInt represents an
unknown value.</p>

<p class="Code">&nbsp;&nbsp; public bool IsNull { get { return !defined; } }</p>

<p class="Code">&nbsp;&nbsp; // The Value property is the known value of this DBInt, or 0
if this<br>
&nbsp;&nbsp; // DBInt represents an unknown value.</p>

<p class="Code">&nbsp;&nbsp; public int Value { get { return value; } }</p>

<p class="Code">&nbsp;&nbsp; // Implicit conversion from int to DBInt.</p>

<p class="Code">&nbsp;&nbsp; public static implicit operator DBInt(int x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new DBInt(x);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Explicit conversion from DBInt to int. Throws an exception
if the<br>
&nbsp;&nbsp; // given DBInt represents an unknown value.</p>

<p class="Code">&nbsp;&nbsp; public static explicit operator int(DBInt x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!x.defined) throw new InvalidOperationException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator +(DBInt x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator -(DBInt x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined ? -x.value : Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator +(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value + y.value: Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator -(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value - y.value: Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator *(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value * y.value: Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator /(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value / y.value: Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBInt operator %(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value % y.value: Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator ==(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value == y.value: DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator !=(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value != y.value: DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator &gt;(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value &gt; y.value: DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator &lt;(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value &lt; y.value: DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator &gt;=(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value &gt;= y.value:
DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator &lt;=(DBInt x, DBInt y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.defined &amp;&amp; y.defined? x.value &lt;= y.value:
DBBool.Null;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override bool Equals(object obj) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(obj is DBInt)) return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DBInt x = (DBInt)obj;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value == x.value &amp;&amp; defined == x.defined;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override int GetHashCode() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return defined? value.ToString(): “DBInt.Null”;<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613373"></a><a name="_Ref463585603">11.4.2 Database boolean
type</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">DBBool</span></span>
struct below implements a three-valued logical type. The possible values of
this type are <span class="Codefragment"><span style="font-size:10.0pt">DBBool.True</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">DBBool.False</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">DBBool.Null</span></span>,
where the <span class="Codefragment"><span style="font-size:10.0pt">Null</span></span>
member indicates an unknown value. Such three-valued logical types are commonly
used in databases.</p>

<p class="Code">using System;</p>

<p class="Code">public struct DBBool<br>
{<br>
&nbsp;&nbsp; // The three possible DBBool values.</p>

<p class="Code">&nbsp;&nbsp; public static readonly DBBool Null = new DBBool(0);<br>
&nbsp;&nbsp; public static readonly DBBool False = new DBBool(-1);<br>
&nbsp;&nbsp; public static readonly DBBool True = new DBBool(1);</p>

<p class="Code">&nbsp;&nbsp; // Private field that stores –1, 0, 1 for False, Null, True.</p>

<p class="Code">&nbsp;&nbsp; sbyte value;</p>

<p class="Code">&nbsp;&nbsp; // Private instance constructor. The value parameter must be
–1, 0, or 1.</p>

<p class="Code">&nbsp;&nbsp; DBBool(int value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = (sbyte)value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Properties to examine the value of a DBBool. Return true if
this<br>
&nbsp;&nbsp; // DBBool has the given value, false otherwise.</p>

<p class="Code">&nbsp;&nbsp; public bool IsNull { get { return value == 0; } }</p>

<p class="Code">&nbsp;&nbsp; public bool IsFalse { get { return value &lt; 0; } }</p>

<p class="Code">&nbsp;&nbsp; public bool IsTrue { get { return value &gt; 0; } }</p>

<p class="Code">&nbsp;&nbsp; // Implicit conversion from bool to DBBool. Maps true to
DBBool.True and<br>
&nbsp;&nbsp; // false to DBBool.False.</p>

<p class="Code">&nbsp;&nbsp; public static implicit operator DBBool(bool x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x? True: False;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Explicit conversion from DBBool to bool. Throws an
exception if the<br>
&nbsp;&nbsp; // given DBBool is Null, otherwise returns true or false.</p>

<p class="Code">&nbsp;&nbsp; public static explicit operator bool(DBBool x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x.value == 0) throw new InvalidOperationException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value &gt; 0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Equality operator. Returns Null if either operand is Null,
otherwise<br>
&nbsp;&nbsp; // returns True or False.</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator ==(DBBool x, DBBool y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x.value == 0 || y.value == 0) return Null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value == y.value? True: False;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Inequality operator. Returns Null if either operand is
Null, otherwise<br>
&nbsp;&nbsp; // returns True or False.</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator !=(DBBool x, DBBool y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (x.value == 0 || y.value == 0) return Null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value != y.value? True: False;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Logical negation operator. Returns True if the operand is
False, Null<br>
&nbsp;&nbsp; // if the operand is Null, or False if the operand is True.</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator !(DBBool x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new DBBool(-x.value);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Logical AND operator. Returns False if either operand is
False,<br>
&nbsp;&nbsp; // otherwise Null if either operand is Null, otherwise True.</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator &amp;(DBBool x, DBBool y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new DBBool(x.value &lt; y.value? x.value: y.value);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Logical OR operator. Returns True if either operand is
True, otherwise<br>
&nbsp;&nbsp; // Null if either operand is Null, otherwise False.</p>

<p class="Code">&nbsp;&nbsp; public static DBBool operator |(DBBool x, DBBool y) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new DBBool(x.value &gt; y.value? x.value: y.value);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Definitely true operator. Returns true if the operand is
True, false<br>
&nbsp;&nbsp; // otherwise.</p>

<p class="Code">&nbsp;&nbsp; public static bool operator true(DBBool x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value &gt; 0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Definitely false operator. Returns true if the operand is
False, false<br>
&nbsp;&nbsp; // otherwise.</p>

<p class="Code">&nbsp;&nbsp; public static bool operator false(DBBool x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.value &lt; 0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override bool Equals(object obj) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(obj is DBBool)) return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value == ((DBBool)obj).value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override int GetHashCode() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &gt; 0) return "DBBool.True";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; 0) return "DBBool.False";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "DBBool.Null";<br>
&nbsp;&nbsp; }<br>
}</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section11">

<h1><a name="_Ref451675312"></a><a name="_Toc445783066"></a><a name="_Toc251613374"></a><a name="_Ref463497420">12. Arrays</a></h1>

<p class="MsoNormal">An array is a data structure that contains a number of
variables which are accessed through computed indices. The variables contained
in an array, also called the elements of the array, are all of the same type,
and this type is called the element type of the array.</p>

<p class="MsoNormal">An array has a rank which determines the number of indices
associated with each array element. The rank of an array is also referred to as
the dimensions of the array. An array with a rank of one is called a <span class="Term">single-dimensional array</span>. An array with a rank greater than
one is called a <span class="Term">multi-dimensional array</span>. Specific sized
multi-dimensional arrays are often referred to as two-dimensional arrays,
three-dimensional arrays, and so on.</p>

<p class="MsoNormal">Each dimension of an array has an associated length which is
an integral number greater than or equal to zero. The dimension lengths are not
part of the type of the array, but rather are established when an instance of
the array type is created at run-time. The length of a dimension determines the
valid range of indices for that dimension: For a dimension of length <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, indices can
range from <span class="Codefragment"><span style="font-size:10.0pt">0</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> <span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> inclusive.
The total number of elements in an array is the product of the lengths of each
dimension in the array. If one or more of the dimensions of an array have a
length of zero, the array is said to be empty.</p>

<p class="MsoNormal">The element type of an array can be any type, including an
array type.</p>

<h2><a name="_Toc251613375"></a><a name="_Ref485188753">12.1 Array types</a></h2>

<p class="MsoNormal">An array type is written as a <span class="Production">non-array-type</span>
followed by one or more <span class="Production">rank-specifier</span>s:</p>

<p class="Grammar">array-type:<br>
non-array-type&nbsp;&nbsp; rank-specifiers</p>

<p class="Grammar">non-array-type:<br>
type</p>

<p class="Grammar">rank-specifiers:<br>
rank-specifier<br>
rank-specifiers&nbsp;&nbsp; rank-specifier</p>

<p class="Grammar">rank-specifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
dim-separators<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">dim-separators:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
dim-separators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span></p>

<p class="MsoNormal">A <span class="Production">non-array-type</span> is any <span class="Production">type</span> that is not itself an <span class="Production">array-type</span>.</p>

<p class="MsoNormal">The rank of an array type is given by the leftmost <span class="Production">rank-specifier</span> in the <span class="Production">array-type</span>:
A <span class="Production">rank-specifier</span> indicates that the array is an
array with a rank of one plus the number of “<span class="Codefragment"><span style="font-size:10.0pt">,</span></span>” tokens in the <span class="Production">rank-specifier</span>.</p>

<p class="MsoNormal">The element type of an array type is the type that results
from deleting the leftmost <span class="Production">rank-specifier</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An array type of the form <span class="Codefragment"><span style="font-size:10.0pt">T[R]</span></span> is an array with rank <span class="Codefragment"><span style="font-size:10.0pt">R</span></span> and a
non-array element type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An array type of the form <span class="Codefragment"><span style="font-size:10.0pt">T[R][R<sub>1</sub>]...[R<sub>N</sub>]</span></span> is
an array with rank <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
and an element type <span class="Codefragment"><span style="font-size:10.0pt">T[R<sub>1</sub>]...[R<sub>N</sub>]</span></span>.</p>

<p class="MsoNormal">In effect, the <span class="Production">rank-specifier</span>s
are read from left to right <em>before</em> the final non-array element type.
The type <span class="Codefragment"><span style="font-size:10.0pt">int[][,,][,]</span></span>
is a single-dimensional array of three-dimensional arrays of two-dimensional
arrays of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<p class="MsoNormal">At run-time, a value of an array type can be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> or a
reference to an instance of that array type.</p>

<h3><a name="_Toc251613376"></a><a name="_Ref472844677">12.1.1 The System.Array
type</a></h3>

<p class="MsoNormal">The type <span class="Codefragment"><span style="font-size:
10.0pt">System.Array</span></span> is the abstract base type of all array
types. An implicit reference conversion (§6.1.6) exists from any array type to <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>,
and an explicit reference conversion (§6.2.4) exists from <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span> to
any array type. Note that <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
is not itself an <span class="Production">array-type</span>. Rather, it is a <span class="Production">class-type</span> from which all <span class="Production">array-type</span>s
are derived.</p>

<p class="MsoNormal">At run-time, a value of type <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span> can be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> or a
reference to an instance of any array type.</p>

<h3><a name="_Toc251613377">12.1.2 Arrays and the generic </a>IList interface</h3>

<p class="MsoNormal">A one-dimensional array <span class="Codefragment"><span style="font-size:10.0pt">T[]</span></span> implements the interface <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;T&gt;</span></span>
(<span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span>
for short) and its base interfaces. Accordingly, there is an implicit
conversion from <span class="Codefragment"><span style="font-size:10.0pt">T[]</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span>
and its base interfaces. In addition, if there is an implicit reference
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> then
<span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span>
implements <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span>
and there is an implicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span> and its base interfaces (§6.1.6). If there is an explicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> then there is
an explicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span> and its base interfaces
(§6.2.4). For example:</p>

<p class="Code">using System.Collections.Generic;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] sa = new string[5];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] oa1 = new object[5];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object[] oa2 = sa;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList&lt;string&gt; lst1 = sa;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList&lt;string&gt; lst2 = oa1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, cast needed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList&lt;object&gt; lst3 = sa;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList&lt;object&gt; lst4 = oa1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span lang="DA">IList&lt;string&gt; lst5 =
(IList&lt;string&gt;)oa1;&nbsp; // Exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IList&lt;string&gt; lst6 = (IList&lt;string&gt;)oa2;&nbsp; // Ok<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">The assignment <span class="Codefragment"><span style="font-size:10.0pt">lst2</span></span> <span class="Codefragment"><span style="font-size:10.0pt">=</span></span> <span class="Codefragment"><span style="font-size:10.0pt">oa1</span></span> generates a compile-time error since
the conversion from <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;string&gt;</span></span>
is an explicit conversion, not implicit. The cast <span class="Codefragment"><span style="font-size:10.0pt">(IList&lt;string&gt;)oa1</span></span> will cause an
exception to be thrown at run-time since <span class="Codefragment"><span style="font-size:10.0pt">oa1</span></span> references an <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span> and
not a <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>.
However the cast <span class="Codefragment"><span style="font-size:10.0pt">(IList&lt;string&gt;)oa2</span></span>
will not cause an exception to be thrown since <span class="Codefragment"><span style="font-size:10.0pt">oa2</span></span> references a <span class="Codefragment"><span style="font-size:10.0pt">string[]</span></span>.</p>

<p class="MsoNormal">Whenever there is an implicit or explicit reference
conversion from <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span>,
there is also an explicit reference conversion from <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span> and its base interfaces
to <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> (§6.2.4).</p>

<p class="MsoNormal">When an array type <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> implements <span class="Codefragment"><span style="font-size:10.0pt">IList&lt;T&gt;</span></span>, some of the members of
the implemented interface may throw exceptions. The precise behavior of the
implementation of the interface is beyond the scope of this specification.</p>

<h2><a name="_Toc251613378">12.2 Array creation</a></h2>

<p class="MsoNormal">Array instances are created by <span class="Production">array-creation-expression</span>s
(§7.6.10.4) or by field or local variable declarations that include an <span class="Production">array-initializer</span> (§12.6).</p>

<p class="MsoNormal">When an array instance is created, the rank and length of
each dimension are established and then remain constant for the entire lifetime
of the instance. In other words, it is not possible to change the rank of an
existing array instance, nor is it possible to resize its dimensions.</p>

<p class="MsoNormal">An array instance is always of an array type. The <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
type is an abstract type that cannot be instantiated.</p>

<p class="MsoNormal">Elements of arrays created by <span class="Production">array-creation-expression</span>s
are always initialized to their default value (§5.2).</p>

<h2><a name="_Toc251613379">12.3 Array element access</a></h2>

<p class="MsoNormal">Array elements are accessed using <span class="Production">element-access</span>
expressions (§7.6.6.1) of the form <span class="Codefragment"><span style="font-size:10.0pt">A[I<sub>1</sub>,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">I<sub>2</sub>,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">...,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">I<sub>N</sub>]</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
is an expression of an array type and each <span class="Codefragment"><span style="font-size:10.0pt">I<sub>X</sub></span></span> is an expression of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, or can
be implicitly converted to one or more of these types. The result of an array
element access is a variable, namely the array element selected by the indices.</p>

<p class="MsoNormal">The elements of an array can be enumerated using a <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement (§8.8.4).</p>

<h2><a name="_Toc251613380">12.4 Array members</a></h2>

<p class="MsoNormal">Every array type inherits the members declared by the <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
type.</p>

<h2><a name="_Ref451688256"></a><a name="_Toc251613381"></a><a name="_Ref466602092">12.5 Array covariance</a></h2>

<p class="MsoNormal">For any two <span class="Production">reference-type</span>s <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, if an
implicit reference conversion (§6.1.6) or explicit reference conversion (§6.2.4) exists from <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>,
then the same reference conversion also exists from the array type <span class="Codefragment"><span style="font-size:10.0pt">A[R]</span></span> to the
array type <span class="Codefragment"><span style="font-size:10.0pt">B[R]</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">R</span></span>
is any given <span class="Production">rank-specifier</span> (but the same for
both array types). This relationship is known as <span class="Term">array
covariance</span>. Array covariance in particular means that a value of an
array type <span class="Codefragment"><span style="font-size:10.0pt">A[R]</span></span>
may actually be a reference to an instance of an array type <span class="Codefragment"><span style="font-size:10.0pt">B[R]</span></span>, provided
an implicit reference conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>.</p>

<p class="MsoNormal">Because of array covariance, assignments to elements of
reference type arrays include a run-time check which ensures that the value
being assigned to the array element is actually of a permitted type (§7.17.1). For example:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Fill(object[] array, int index, int count, object value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = index; i &lt; index + count; i++) array[i] = value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string[] strings = new string[100];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fill(strings, 0, 100, "Undefined");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fill(strings, 0, 10, null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Fill(strings, 90, 10, 0);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The assignment to <span class="Codefragment"><span style="font-size:10.0pt">array[i]</span></span> in the <span class="Codefragment"><span style="font-size:10.0pt">Fill</span></span> method
implicitly includes a run-time check which ensures that the object referenced
by <span class="Codefragment"><span style="font-size:10.0pt">value</span></span>
is either <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
or an instance that is compatible with the actual element type of <span class="Codefragment"><span style="font-size:10.0pt">array</span></span>. In <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span>, the first two
invocations of <span class="Codefragment"><span style="font-size:10.0pt">Fill</span></span>
succeed, but the third invocation causes a <span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span> to be
thrown upon executing the first assignment to <span class="Codefragment"><span style="font-size:10.0pt">array[i]</span></span>. The exception occurs because a
boxed <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>
cannot be stored in a <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>
array.</p>

<p class="MsoNormal">Array covariance specifically does not extend to arrays of <span class="Production">value-type</span>s. For example, no conversion exists that
permits an <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span>
to be treated as an <span class="Codefragment"><span style="font-size:10.0pt">object[]</span></span>.</p>

<h2><a name="_Toc251613382"></a><a name="_Ref452277092">12.6 Array initializers</a></h2>

<p class="MsoNormal">Array initializers may be specified in field declarations (§10.5), local variable declarations (§8.5.1), and array creation expressions (§7.6.10.4):</p>

<p class="Grammar">array-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
variable-initializer-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
variable-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">variable-initializer-list:<br>
variable-initializer<br>
variable-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span><a name="_Toc445783067">&nbsp;&nbsp;
variable-initializer</a></p>

<p class="Grammar">variable-initializer:<br>
expression<br>
array-initializer</p>

<p class="MsoNormal">An array initializer consists of a sequence of variable
initializers, enclosed by “<span class="Codefragment"><span style="font-size:
10.0pt">{</span></span>”and “<span class="Codefragment"><span style="font-size:
10.0pt">}</span></span>” tokens and separated by “<span class="Codefragment"><span style="font-size:10.0pt">,</span></span>” tokens. Each variable initializer is
an expression or, in the case of a multi-dimensional array, a nested array
initializer.</p>

<p class="MsoNormal">The context in which an array initializer is used determines
the type of the array being initialized. In an array creation expression, the
array type immediately precedes the initializer, or is inferred from the
expressions in the array initializer. In a field or variable declaration, the
array type is the type of the field or variable being declared. When an array
initializer is used in a field or variable declaration, such as:</p>

<p class="Code">int[] a = {0, 2, 4, 6, 8};</p>

<p class="MsoNormal">it is simply shorthand for an equivalent array creation
expression:</p>

<p class="Code">int[] a = new int[] {0, 2, 4, 6, 8};</p>

<p class="MsoNormal">For a single-dimensional array, the array initializer must
consist of a sequence of expressions that are assignment compatible with the
element type of the array. The expressions initialize array elements in
increasing order, starting with the element at index zero. The number of
expressions in the array initializer determines the length of the array
instance being created. For example, the array initializer above creates an <span class="Codefragment"><span style="font-size:10.0pt">int[]</span></span> instance
of length 5 and then initializes the instance with the following values:</p>

<p class="Code">a[0] = 0; a[1] = 2; a[2] = 4; a[3] = 6; a[4] = 8;</p>

<p class="MsoNormal">For a multi-dimensional array, the array initializer must
have as many levels of nesting as there are dimensions in the array. The
outermost nesting level corresponds to the leftmost dimension and the innermost
nesting level corresponds to the rightmost dimension. The length of each
dimension of the array is determined by the number of elements at the
corresponding nesting level in the array initializer. For each nested array
initializer, the number of elements must be the same as the other array
initializers at the same level. The example:</p>

<p class="Code">int[,] b = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}};</p>

<p class="MsoNormal">creates a two-dimensional array with a length of five for
the leftmost dimension and a length of two for the rightmost dimension:</p>

<p class="Code">int[,] b = new int[5, 2];</p>

<p class="MsoNormal">and then initializes the array instance with the following
values:</p>

<p class="Code">b[0, 0] = 0; b[0, 1] = 1;<br>
b[1, 0] = 2; b[1, 1] = 3;<br>
b[2, 0] = 4; b[2, 1] = 5;<br>
b[3, 0] = 6; b[3, 1] = 7;<br>
b[4, 0] = 8; b[4, 1] = 9;</p>

<p class="MsoNormal">If a dimension other than the rightmost is given with length
zero, the subsequent dimensions are assumed to also have length zero. The
example:</p>

<p class="Code">int[,] c = {};</p>

<p class="MsoNormal">creates a two-dimensional array with a length of zero for
both the leftmost and the rightmost dimension:</p>

<p class="Code">int[,] c = new int[0, 0];</p>

<p class="MsoNormal">When an array creation expression includes both explicit
dimension lengths and an array initializer, the lengths must be constant
expressions and the number of elements at each nesting level must match the
corresponding dimension length. Here are some examples:</p>

<p class="Code">int i = 3;<br>
int[] x = new int[3] {0, 1, 2};&nbsp;&nbsp;&nbsp;&nbsp; // OK<br>
int[] y = new int[i] {0, 1, 2};&nbsp;&nbsp;&nbsp;&nbsp; // Error, i not a constant<br>
int[] z = new int[3] {0, 1, 2, 3};&nbsp; // Error, length/initializer mismatch</p>

<p class="MsoNormal">Here, the initializer for <span class="Codefragment"><span style="font-size:10.0pt">y</span></span> results in a compile-time error
because the dimension length expression is not a constant, and the initializer
for <span class="Codefragment"><span style="font-size:10.0pt">z</span></span>
results in a compile-time error because the length and the number of elements
in the initializer do not agree.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section12">

<h1><a name="_Ref461619912"></a><a name="_Toc251613383"></a><a name="_Ref463364581">13. Interfaces</a></h1>

<p class="MsoNormal">An interface defines a contract. A class or struct that
implements an interface must adhere to its contract. An interface may inherit
from multiple base interfaces, and a class or struct may implement multiple
interfaces.</p>

<p class="MsoNormal">Interfaces can contain methods, properties, events, and
indexers. The interface itself does not provide implementations for the members
that it defines. The interface merely specifies the members that must be
supplied by classes or structs that implement the interface.</p>

<h2><a name="_Toc251613384"></a><a name="_Ref155509122"></a><a name="_Ref495219188"></a><a name="_Ref493151483"></a><a name="_Ref451394443"></a><a name="_Toc445783068">13.1 Interface declarations</a></h2>

<p class="MsoNormal">An <span class="Production">interface-declaration</span> is a <span class="Production">type-declaration</span> (§9.6) that declares a new interface
type.</p>

<p class="Grammar">interface-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; interface-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">interface</span></span>&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identifier&nbsp;&nbsp; variant-type-parameter-list<sub>opt</sub> &nbsp;&nbsp;interface-base<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; interface-body&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="MsoNormal"><a name="_Toc445783069">An </a><span class="Production">interface-declaration</span>
consists of an optional set of <span class="Production">attributes</span> (§17), followed by an optional set of <span class="Production">interface-modifiers</span>
(§13.1.1), followed by an optional <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span> modifier, followed by the
keyword <span class="Codefragment"><span style="font-size:10.0pt">interface</span></span>
and an <span class="Production">identifier</span> that names the interface, followed
by an optional <span class="Production">variant-</span><i>type-parameter-list</i>
specification (§13.1.3), followed by an optional <span class="Production">interface-base</span>
specification (§13.1.4), followed by an optional <span class="Production">type-parameter-constraints-clauses</span>
specification (§10.1.5), followed by an <span class="Production">interface-body</span>
(§13.1.5), optionally followed by a semicolon.</p>

<h3><a name="_Toc251613385"></a><a name="_Ref456661590">13.1.1 Interface
modifiers</a></h3>

<p class="MsoNormal">An <span class="Production">interface-declaration</span> may
optionally include a sequence of interface modifiers:</p>

<p class="Grammar"><span lang="FR">interface-modifiers:<br>
interface-modifier<br>
interface-modifiers&nbsp;&nbsp; interface-modifier</span></p>

<p class="Grammar">interface-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="MsoNormal"><a name="_Ref456661617"></a><a name="_Toc445783070">It is a
compile-time error for the same modifier to appear multiple times in an
interface declaration.</a></p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier is only permitted on interfaces defined within a class. It specifies
that the interface hides an inherited member by the same name, as described in
§10.3.4.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
modifiers control the accessibility of the interface. Depending on the context
in which the interface declaration occurs, only some of these modifiers may be
permitted (§3.5.1).</p>

<h3><a name="_Ref462024376"></a><a name="_Toc251613386">13.1.2 Partial modifier</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">partial</span></span>
modifier indicates that this <span class="Production">interface-declaration</span>
is a partial type declaration. Multiple partial interface declarations with the
same name within an enclosing namespace or type declaration combine to form one
interface declaration, following the rules specified in §10.2.</p>

<h3><a name="_Ref174222093"></a><a name="_Toc251613387"></a><a name="_Ref248221788">13.1.3 Variant type parameter lists</a></h3>

<p class="MsoNormal">Variant type parameter lists can only occur on interface and
delegate types. The difference from ordinary <span class="Production">type-parameter-list</span>s
is the optional <span class="Production">variance-annotation</span> on each type
parameter.</p>

<p class="Grammar">variant-type-parameter-list:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
variant-type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span></p>

<p class="Grammar">variant-type-parameters:<br>
attributes<sub>opt</sub>&nbsp; variance-annotation<sub>opt </sub>&nbsp;type-parameter<br>
variant-type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp;
variance-annotation<sub>opt</sub>&nbsp; type-parameter</p>

<p class="Grammar">variance-annotation:<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">in<br>
out</span></span></p>

<p class="MsoNormal"><a name="_Ref248221881">If the variance annotation is </a><span class="Codefragment"><span style="font-size:10.0pt">out</span></span>, the type
parameter is said to be <span class="Term">covariant</span>. If the variance
annotation is <span class="Codefragment"><span style="font-size:10.0pt">in</span></span>,
the type parameter is said to be <span class="Term">contravariant</span>. If
there is no variance annotation, the type parameter is said to be <span class="Term">invariant</span>.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">interface C&lt;out X, in Y, Z&gt; <br>
{<br>
&nbsp; X M(Y y);</p>

<p class="Code">&nbsp; Z P { get; set; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">X</span></span>
is covariant, <span class="Codefragment"><span style="font-size:10.0pt">Y</span></span>
is contravariant and <span class="Codefragment"><span style="font-size:10.0pt">Z</span></span>
is invariant.</p>

<h4><a name="_Toc251613388"></a><a name="_Ref248225336"></a><a name="_Ref248224545"></a><a name="_Toc225846657">13.1.3.1 Variance safety</a></h4>

<p class="MsoNormal">The occurrence of variance annotations in the type parameter
list of a type restricts the places where types can occur within the type
declaration.</p>

<p class="MsoNormal">A type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is <span class="Term">output-unsafe</span> if one of the following holds:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a contravariant type parameter</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an array type with an output-unsafe element type</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">S&lt;A<sub>1</sub>,… A<sub>K</sub>&gt;</span></span>
constructed from a generic type <span class="Codefragment"><span style="font-size:10.0pt">S&lt;X<sub>1</sub>, .. X<sub>K</sub>&gt;</span></span>
where for at least one <span class="Codefragment"><span style="font-size:10.0pt">A<sub>i</sub></span></span>
one of the following holds:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub> </span></span>is
covariant or invariant and <span class="Codefragment"><span style="font-size:
10.0pt">A<sub>i</sub></span></span> is output-unsafe.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub> </span></span>is
contravariant or invariant and <span class="Codefragment"><span style="font-size:
10.0pt">A<sub>i</sub></span></span> is input-safe.</p>

<p class="MsoNormal">A type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is <span class="Term">input-unsafe</span> if one of the following holds:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is a covariant type parameter</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an array type with an input-unsafe element type</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
is an interface or delegate type <span class="Codefragment"><span style="font-size:10.0pt">S&lt;A<sub>1</sub>,… A<sub>K</sub>&gt;</span></span>
constructed from a generic type <span class="Codefragment"><span style="font-size:10.0pt">S&lt;X<sub>1</sub>, .. X<sub>K</sub>&gt;</span></span>
where for at least one <span class="Codefragment"><span style="font-size:10.0pt">A<sub>i</sub></span></span>
one of the following holds:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub> </span></span>is
covariant or invariant and <span class="Codefragment"><span style="font-size:
10.0pt">A<sub>i</sub></span></span> is input-unsafe.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub> </span></span>is
contravariant or invariant and <span class="Codefragment"><span style="font-size:
10.0pt">A<sub>i</sub></span></span> is output-unsafe.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">Intuitively, an
output-unsafe type is prohibited in an output position, and an input-unsafe
type is prohibited in an input position.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">A type is <span class="Term">output-safe</span> if it is not output-unsafe, and <span class="Term">input-safe</span>
if it is not input-unsafe.</p>

<h4><a name="_Toc251613389"></a><a name="_Ref248226201">13.1.3.2 Variance
conversion</a></h4>

<p class="MsoNormal">The purpose of variance annotations is to provide for more
lenient (but still type safe) conversions to interface and delegate types. To
this end the definitions of implicit (§6.1) and explicit conversions (§6.2) make use of the notion of variance-convertibility, which is defined as follows:</p>

<p class="MsoNormal">A type <span class="Codefragment"><span style="font-size:10.0pt">T&lt;A<sub>1</sub>,
…, A<sub>n</sub>&gt;</span></span> is variance-convertible to a type <span class="Codefragment"><span style="font-size:10.0pt">T&lt;B<sub>1</sub>, …, B<sub>n</sub>&gt;</span></span>
if <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> is
either an interface or a delegate type declared with the variant type
parameters <span class="Codefragment"><span style="font-size:10.0pt">T&lt;X<sub>1</sub>,
…, X<sub>n</sub>&gt;</span></span>, and for each variant type parameter <span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
one of the following holds:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is covariant and an implicit reference or identity conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">A<sub>i</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">B<sub>i</sub></span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is contravariant and an implicit reference or identity conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">B<sub>i</sub></span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">A<sub>i</sub></span></span></p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">X<sub>i</sub></span></span>
is invariant and an identity conversion exists from <span class="Codefragment"><span style="font-size:10.0pt">A<sub>i</sub></span></span> to <span class="Codefragment"><span style="font-size:10.0pt">B<sub>i</sub></span></span></p>

<h3><a name="_Toc251613390"></a><a name="_Ref248245836">13.1.4 Base interfaces</a></h3>

<p class="MsoNormal">An interface can inherit from zero or more interface types,
which are called the <span class="Term">explicit base interfaces</span> of the
interface. When an interface has one or more explicit base interfaces, then in
the declaration of that interface, the interface identifier is followed by a
colon and a comma separated list of base interface types.</p>

<p class="Grammar">interface-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list</p>

<p class="MsoNormal">For a constructed interface type, the explicit base
interfaces are formed by taking the explicit base interface declarations on the
generic type declaration, and substituting, for each <span class="Production">type-parameter</span>
in the base interface declaration, the corresponding <span class="Production">type-argument</span>
of the constructed type.</p>

<p class="MsoNormal">The explicit base interfaces of an interface must be at
least as accessible as the interface itself (§3.5.4). For example, it is a
compile-time error to specify a <span class="Codefragment"><span style="font-size:10.0pt">private</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span> interface in the <span class="Production">interface-base</span> of a <span class="Codefragment"><span style="font-size:10.0pt">public</span></span> interface.</p>

<p class="MsoNormal">It is a compile-time error for an interface to directly or
indirectly inherit from itself.</p>

<p class="MsoNormal">The <span class="Term">base interfaces</span> of an interface
are the explicit base interfaces and their base interfaces. In other words, the
set of base interfaces is the complete transitive closure of the explicit base
interfaces, their explicit base interfaces, and so on. An interface inherits all
members of its base interfaces. In the example</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="Code">interface IListBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetItems(string[] items);<br>
}</p>

<p class="Code">interface IComboBox: ITextBox, IListBox {}</p>

<p class="MsoNormal">the base interfaces of <span class="Codefragment"><span style="font-size:10.0pt">IComboBox</span></span> are <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">IListBox</span></span>.</p>

<p class="MsoNormal">In other words, the <span class="Codefragment"><span style="font-size:10.0pt">IComboBox</span></span> interface above inherits
members <span class="Codefragment"><span style="font-size:10.0pt">SetText</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">SetItems</span></span>
as well as <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>.</p>

<p class="MsoNormal">Every base interface of an interface must be output-safe (§13.1.3.1). A class or struct that implements an interface also implicitly
implements all of the interface’s base interfaces.</p>

<h3><a name="_Toc251613391"></a><a name="_Ref465151456"></a><a name="_Ref456661645"></a><a name="_Toc445783071">13.1.5 Interface body</a></h3>

<p class="MsoNormal">The <span class="Production">interface-body</span> of an
interface defines the members of the interface.</p>

<p class="Grammar">interface-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<h2><a name="_Toc251613392"></a><a name="_Ref21883095"></a><a name="_Ref21882395"></a><a name="_Ref513827550"></a><a name="_Toc445783072">13.2
Interface members</a></h2>

<p class="MsoNormal">The members of an interface are the members inherited from
the base interfaces and the members declared by the interface itself.</p>

<p class="Grammar">interface-member-declarations:<br>
interface-member-declaration<br>
interface-member-declarations&nbsp;&nbsp; interface-member-declaration</p>

<p class="Grammar">interface-member-declaration:<br>
interface-method-declaration<br>
interface-property-declaration<br>
interface-event-declaration<br>
interface-indexer-declaration</p>

<p class="MsoNormal">An interface declaration may declare zero or more members.
The members of an interface must be methods, properties, events, or indexers.
An interface cannot contain constants, fields, operators, instance
constructors, destructors, or types, nor can an interface contain static
members of any kind.</p>

<p class="MsoNormal">All interface members implicitly have public access. It is a
compile-time error for interface member declarations to include any modifiers.
In particular, interfaces members cannot be declared with the modifiers <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>.</p>

<p class="MsoNormal">The example</p>

<p class="Code">public delegate void StringListEvent(IStringList sender);</p>

<p class="Code">public interface IStringList<br>
{<br>
&nbsp;&nbsp; void Add(string s);</p>

<p class="Code">&nbsp;&nbsp; int Count { get; }</p>

<p class="Code">&nbsp;&nbsp; event StringListEvent Changed;</p>

<p class="Code">&nbsp;&nbsp; string this[int index] { get; set; }<br>
}</p>

<p class="MsoNormal">declares an interface that contains one each of the possible
kinds of members: A method, a property, an event, and an indexer.</p>

<p class="MsoNormal">An <span class="Production">interface-declaration</span>
creates a new declaration space (§3.3), and the <span class="Production">interface-member-declarations</span>
immediately contained by the <span class="Production">interface-declaration</span>
introduce new members into this declaration space. The following rules apply to
<span class="Production">interface-member-declaration</span>s:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The name of a method must differ from the names of all properties
and events declared in the same interface. In addition, the signature (§3.6) of a method must differ from the signatures of all other methods declared in the
same interface, and two methods declared in the same interface may not have
signatures that differ solely by <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The name of a property or event must differ from the names of all
other members declared in the same interface.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The signature of an indexer must differ from the signatures of
all other indexers declared in the same interface.</p>

<p class="MsoNormal">The inherited members of an interface are specifically not
part of the declaration space of the interface. Thus, an interface is allowed
to declare a member with the same name or signature as an inherited member.<a name="_Toc445783073"> When this occurs, the derived interface member is said to
<em>hide</em> the base interface member. Hiding an inherited member is not
considered an error, but it does cause the compiler to issue a warning. To
suppress the warning, the declaration of the derived interface member must
include a </a><span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier to indicate that the derived member is intended to hide the base
member. This topic is discussed further in §3.7.1.2.</p>

<p class="MsoNormal">If a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier is included in a declaration that doesn’t hide an inherited member, a
warning is issued to that effect. This warning is suppressed by removing the <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> modifier.</p>

<p class="MsoNormal">Note that the members in class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> are not, strictly speaking,
members of any interface (§13.2). However, the members in class <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> are available
via member lookup in any interface type (§7.4).</p>

<h3><a name="_Toc251613393">13.2.1 Interface methods</a></h3>

<p class="MsoNormal">Interface methods are declared using <span class="Production">interface-method-declaration</span>s:</p>

<p class="Grammar">interface-method-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; return-type&nbsp;&nbsp; identifier&nbsp;&nbsp;
type-parameter-list<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The <span class="Production">attributes</span>, <span class="Production">return-type</span>, <span class="Production">identifier</span>,
and <span class="Production">formal-parameter-list</span> of an interface method
declaration have the same meaning as those of a method declaration in a class
(§10.6). An interface method declaration is not permitted to specify a method
body, and the declaration therefore always ends with a semicolon.</p>

<p class="MsoNormal"><a name="_Toc445783074">Each formal parameter type of an
interface method must be input-safe (§</a>13.1.3.1), and the return type must
be either <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>
or output-safe. Furthermore, each class type constraint, interface type
constraint and type parameter constraint on any type parameter of the method
must be input-safe.</p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">These rules
ensure that any covariant or contravariant usage of the interface remains
typesafe. For example, </p>

<p class="MsoListBullet"><span class="Codefragment"><span style="font-size:10.0pt">interface
I&lt;out T&gt; { void M&lt;U&gt;() where U : T; }</span></span></p>

<p class="MsoNormal">is illegal because the usage of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> as a type parameter constraint on <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> is not
input-safe. </p>

<p class="MsoNormal">Were this restriction not in place it would be possible to
violate type safety in the following manner:</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">class
B {}<br>
class D : B {}<br>
class E : B {}<br>
class C : I&lt;D&gt; { public void M&lt;U&gt;() {…} }<br>
…<br>
I&lt;B&gt; b = new C();<br>
b.M&lt;E&gt;(); </span></span></p>

<p class="MsoNormal">This is actually a call to <span class="Codefragment"><span style="font-size:10.0pt">C.M&lt;E&gt;. </span></span>But that call requires
that<span class="Codefragment"><span style="font-size:10.0pt"> E</span></span>
derive from<span class="Codefragment"><span style="font-size:10.0pt"> D</span></span>,
so type safety would be violated here.</p>

<h3><a name="_Toc251613394">13.2.2 Interface properties</a></h3>

<p class="MsoNormal">Interface properties are declared using <span class="Production">interface-property-declaration</span>s:</p>

<p class="Grammar">interface-property-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-accessors&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="Grammar">interface-accessors:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">get</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp;
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="MsoNormal">The <span class="Production">attributes</span>, <span class="Production">type</span>, and <span class="Production">identifier</span> of
an interface property declaration have the same meaning as those of a property
declaration in a class (§10.7).</p>

<p class="MsoNormal">The accessors of an interface property declaration
correspond to the accessors of a class property declaration (§10.7.2), except that the accessor body must always be a semicolon. Thus, the
accessors simply indicate whether the property is read-write, read-only, or
write-only.</p>

<p class="MsoNormal">The type of an interface property must be output-safe if
there is a get accessor, and must be input-safe if there is a set accessor. </p>

<h3><a name="_Toc251613395">13.2.3 Interface events</a></h3>

<p class="MsoNormal">Interface events are declared using <span class="Production">interface-event-declarations</span>:</p>

<p class="Grammar">interface-event-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp; type&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="MsoNormal">The <span class="Production">attributes</span>, <span class="Production">type</span>, and <span class="Production">identifier</span> of
an interface event declaration have the same meaning as those of an event
declaration in a class (§10.8).</p>

<p class="MsoNormal">The type of an interface event must be input-safe. </p>

<h3><a name="_Toc251613396">13.2.4 Interface indexers</a></h3>

<p class="MsoNormal">Interface indexers are declared using <span class="Production">interface-indexer-declaration</span>s:</p>

<p class="Grammar">interface-indexer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-accessors&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="MsoNormal">The <span class="Production">attributes</span>, <span class="Production">type</span>, and <span class="Production">formal-parameter-list</span>
of an interface indexer declaration have the same meaning as those of an
indexer declaration in a class (§10.9).</p>

<p class="MsoNormal">The accessors of an interface indexer declaration correspond
to the accessors of a class indexer declaration (§10.9), except that the
accessor body must always be a semicolon. Thus, the accessors simply indicate
whether the indexer is read-write, read-only, or write-only.</p>

<p class="MsoNormal"><a name="_Ref463177195">All the formal parameter types of an
interface indexer must be input-safe . In addition, any </a><span class="Codefragment"><span style="font-size:10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> formal
parameter types must also be output-safe. Note that even <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters
are required to be input-safe, due to a limitiation of the underlying execution
platform.</p>

<p class="MsoNormal">The type of an interface indexer must be output-safe if
there is a get accessor, and must be input-safe if there is a set accessor.</p>

<h3><a name="_Toc251613397">13.2.5 Interface member access</a></h3>

<p class="MsoNormal">Interface members are accessed through member access (§7.6.4) and indexer access (§7.6.6.2) expressions of the form <span class="Codefragment"><span style="font-size:10.0pt">I.M</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I[A]</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is an
interface type, <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
is a method, property, or event of that interface type, and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is an indexer
argument list.</p>

<p class="MsoNormal">For interfaces that are strictly single-inheritance (each
interface in the inheritance chain has exactly zero or one direct base
interface), the effects of the member lookup (§7.4), method invocation (§7.6.5.1), and indexer access (§7.6.6.2) rules are exactly the same as for classes and
structs: More derived members hide less derived members with the same name or
signature. However, for multiple-inheritance interfaces, ambiguities can occur
when two or more unrelated base interfaces declare members with the same name
or signature. This section shows several examples of such situations. In all
cases, explicit casts can be used to resolve the ambiguities.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">interface IList<br>
{<br>
&nbsp;&nbsp; int Count { get; set; }<br>
}</p>

<p class="Code">interface ICounter<br>
{<br>
&nbsp;&nbsp; void Count(int i);<br>
}</p>

<p class="Code">interface IListCounter: IList, ICounter {}</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; void Test(IListCounter x) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x.Count(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x.Count = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error<br>
&nbsp;&nbsp; &nbsp;&nbsp; ((IList)x).Count = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, invokes IList.Count.set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((ICounter)x).Count(1);&nbsp;&nbsp;&nbsp; // Ok, invokes ICounter.Count<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the first two statements cause compile-time errors because
the member lookup (§7.4) of <span class="Codefragment"><span style="font-size:
10.0pt">Count</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">IListCounter</span></span> is ambiguous. As illustrated by the example,
the ambiguity is resolved by casting <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> to the appropriate base interface
type. Such casts have no run-time costs—they merely consist of viewing the instance
as a less derived type at compile-time.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">interface IInteger<br>
{<br>
&nbsp;&nbsp; void Add(int i);<br>
}</p>

<p class="Code">interface IDouble<br>
{<br>
&nbsp;&nbsp; void Add(double d);<br>
}</p>

<p class="Code">interface INumber: IInteger, IDouble {}</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; void Test(INumber n) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.Add(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes IInteger.Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n.Add(1.0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Only IDouble.Add is applicable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IInteger)n).Add(1);&nbsp;&nbsp; // Only IInteger.Add is a candidate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IDouble)n).Add(1);&nbsp;&nbsp;&nbsp; // Only IDouble.Add is a candidate<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the invocation <span class="Codefragment"><span style="font-size:10.0pt">n.Add(1)</span></span> selects <span class="Codefragment"><span style="font-size:10.0pt">IInteger.Add</span></span> by
applying the overload resolution rules of §7.5.3. Similarly the invocation <span class="Codefragment"><span style="font-size:10.0pt">n.Add(1.0)</span></span> selects
<span class="Codefragment"><span style="font-size:10.0pt">IDouble.Add</span></span>.
When explicit casts are inserted, there is only one candidate method, and thus no
ambiguity.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">interface IBase<br>
{<br>
&nbsp;&nbsp; void F(int i);<br>
}</p>

<p class="Code">interface ILeft: IBase<br>
{<br>
&nbsp;&nbsp; new void F(int i);<br>
}</p>

<p class="Code">interface IRight: IBase<br>
{<br>
&nbsp;&nbsp; void G();<br>
}</p>

<p class="Code">interface IDerived: ILeft, IRight {}</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; void Test(IDerived d) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d.F(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Invokes ILeft.F<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IBase)d).F(1);&nbsp;&nbsp;&nbsp;&nbsp; // Invokes IBase.F<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((ILeft)d).F(1);&nbsp;&nbsp;&nbsp;&nbsp; // Invokes ILeft.F<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((IRight)d).F(1);&nbsp;&nbsp;&nbsp; // Invokes IBase.F<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">IBase.F</span></span>
member is hidden by the <span class="Codefragment"><span style="font-size:10.0pt">ILeft.F</span></span>
member. The invocation <span class="Codefragment"><span style="font-size:10.0pt">d.F(1)</span></span>
thus selects <span class="Codefragment"><span style="font-size:10.0pt">ILeft.F</span></span>,
even though <span class="Codefragment"><span style="font-size:10.0pt">IBase.F</span></span>
appears to not be hidden in the access path that leads through <span class="Codefragment"><span style="font-size:10.0pt">IRight</span></span>.</p>

<p class="MsoNormal">The intuitive rule for hiding in multiple-inheritance
interfaces is simply this: If a member is hidden in any access path, it is
hidden in all access paths. Because the access path from <span class="Codefragment"><span style="font-size:10.0pt">IDerived</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">ILeft</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">IBase</span></span> hides <span class="Codefragment"><span style="font-size:10.0pt">IBase.F</span></span>, the
member is also hidden in the access path from <span class="Codefragment"><span style="font-size:10.0pt">IDerived</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">IRight</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">IBase</span></span>.</p>

<h2><a name="_Toc251613398"></a><a name="_Toc445783075">13.3 Fully qualified
interface member names</a></h2>

<p class="MsoNormal">An interface member is sometimes referred to by its <span class="Term">fully qualified name</span>. The fully qualified name of an interface
member consists of the name of the interface in which the member is declared,
followed by a dot, followed by the name of the member. The fully qualified name
of a member references the interface in which the member is declared. For
example, given the declarations</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="MsoNormal">the fully qualified name of <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span> and the fully qualified
name of <span class="Codefragment"><span style="font-size:10.0pt">SetText</span></span>
is <span class="Codefragment"><span style="font-size:10.0pt">ITextBox.SetText</span></span>.</p>

<p class="MsoNormal">In the example above, it is not possible to refer to <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span> as <span class="Codefragment"><span style="font-size:10.0pt">ITextBox.Paint</span></span>.</p>

<p class="MsoNormal">When an interface is part of a namespace, the fully
qualified name of an interface member includes the namespace name. For example</p>

<p class="Code">namespace System<br>
{<br>
&nbsp;&nbsp; public interface ICloneable<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object Clone();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Here, the fully qualified name of the <span class="Codefragment"><span style="font-size:10.0pt">Clone</span></span> method is
<span class="Codefragment"><span style="font-size:10.0pt">System.ICloneable.Clone</span></span>.</p>

<h2><a name="_Toc251613399"></a><a name="_Ref496060837"></a><a name="_Ref456696450"></a><a name="_Toc445783076">13.4 Interface implementations</a></h2>

<p class="MsoNormal">Interfaces may be implemented by classes and structs. To
indicate that a class or struct directly implements an interface, the interface
identifier is included in the base class list of the class or struct. For
example:</p>

<p class="Code">interface ICloneable<br>
{<br>
&nbsp;&nbsp; object Clone();<br>
}</p>

<p class="Code">interface IComparable<br>
{<br>
&nbsp;&nbsp; int CompareTo(object other);<br>
}</p>

<p class="Code">class ListEntry: ICloneable, IComparable<br>
{<br>
&nbsp;&nbsp; public object Clone() {...}</p>

<p class="Code">&nbsp;&nbsp; public int CompareTo(object other) {...}<br>
}</p>

<p class="MsoNormal">A class or struct that directly implements an interface also
directly implements all of the interface’s base interfaces implicitly. This is
true even if the class or struct doesn’t explicitly list all base interfaces in
the base class list. For example:</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="Code">class TextBox: ITextBox<br>
{<br>
&nbsp;&nbsp; public void Paint() {...}</p>

<p class="Code">&nbsp;&nbsp; public void SetText(string text) {...}<br>
}</p>

<p class="MsoNormal">Here, class <span class="Codefragment"><span style="font-size:
10.0pt">TextBox</span></span> implements both <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span>.</p>

<p class="MsoNormal">When a class <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> directly implements an interface, all
classes derived from C also implement the interface implicitly. The base
interfaces specified in a class declaration can be constructed interface types
(§4.4). A base interface cannot be a type parameter on its own, though it can
involve the type parameters that are in scope. The following code illustrates
how a class can implement and extend constructed types:</p>

<p class="Code">class C&lt;U,V&gt; {}</p>

<p class="Code">interface I1&lt;V&gt; {}</p>

<p class="Code">class D: C&lt;string,int&gt;, I1&lt;string&gt; {}</p>

<p class="Code">class E&lt;T&gt;: C&lt;int,T&gt;, I1&lt;T&gt; {}</p>

<p class="MsoNormal">The base interfaces of a generic class declaration must satisfy
the uniqueness rule described in §13.4.2.</p>

<h3><a name="_Toc251613400"></a><a name="_Ref248215300"></a><a name="_Ref248215288"></a><a name="_Ref12427409"></a><a name="_Ref508195234"></a><a name="_Ref458832533"></a><a name="_Toc445783077">13.4.1 Explicit interface
member implementations</a></h3>

<p class="MsoNormal">For purposes of implementing interfaces, a class or struct
may declare <span class="Term">explicit interface member implementations</span>.
An explicit interface member implementation is a method, property, event, or
indexer declaration that references a fully qualified interface member name.
For example</p>

<p class="Code"><span lang="FR">interface IList&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; T[] GetElements();<br>
}</span></p>

<p class="Code">interface IDictionary&lt;K,V&gt;<br>
{<br>
&nbsp;&nbsp; V this[K key];</p>

<p class="Code">&nbsp;&nbsp; void Add(K key, V value);<br>
}</p>

<p class="Code"><span lang="FR">class List&lt;T&gt;: IList&lt;T&gt;,
IDictionary&lt;int,T&gt;<br>
{<br>
&nbsp;&nbsp; T[] IList&lt;T&gt;.GetElements() {...}</span></p>

<p class="Code"><span lang="FR">&nbsp;&nbsp; </span>T IDictionary&lt;int,T&gt;.this[int
index] {...}</p>

<p class="Code">&nbsp;&nbsp; void IDictionary&lt;int,T&gt;.Add(int index, T value) {...}<br>
}</p>

<p class="MsoNormal">Here <span class="Codefragment"><span style="font-size:10.0pt">IDictionary&lt;int,T&gt;.this</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">IDictionary&lt;int,T&gt;.Add</span></span>
are explicit interface member implementations.</p>

<p class="MsoNormal">In some cases, the name of an interface member may not be
appropriate for the implementing class, in which case the interface member may
be implemented using explicit interface member implementation. A class implementing
a file abstraction, for example, would likely implement a <span class="Codefragment"><span style="font-size:10.0pt">Close</span></span> member
function that has the effect of releasing the file resource, and implement the <span class="Codefragment"><span style="font-size:10.0pt">Dispose</span></span> method
of the <span class="Codefragment"><span style="font-size:10.0pt">IDisposable</span></span>
interface using explicit interface member implementation:</p>

<p class="Code"><span class="Codefragment">interface IDisposable<br>
{<br>
&nbsp;&nbsp; void Dispose();<br>
}</span></p>

<p class="Code"><span class="Codefragment">class MyFile: IDisposable<br>
{<br>
&nbsp;&nbsp; void IDisposable.Dispose() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Close();<br>
&nbsp;&nbsp; }</span></p>

<p class="Code"><span class="Codefragment">&nbsp;&nbsp; public void Close() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Do what's necessary to close the file<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.GC.SuppressFinalize(this);<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">It is not possible to access an explicit interface member
implementation through its fully qualified name in a method invocation,
property access, or indexer access. An explicit interface member implementation
can only be accessed through an interface instance, and is in that case referenced
simply by its member name.</p>

<p class="MsoNormal">It is a compile-time error for an explicit interface member
implementation to include access modifiers, and it is a compile-time error to
include the modifiers <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>.</p>

<p class="MsoNormal">Explicit interface member implementations have different
accessibility characteristics than other members. Because explicit interface
member implementations are never accessible through their fully qualified name
in a method invocation or a property access, they are in a sense private.
However, since they can be accessed through an interface instance, they are in
a sense also public.</p>

<p class="MsoNormal">Explicit interface member implementations serve two primary
purposes:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Because explicit interface member implementations are not
accessible through class or struct instances, they allow interface
implementations to be excluded from the public interface of a class or struct.
This is particularly useful when a class or struct implements an internal
interface that is of no interest to a consumer of that class or struct.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit interface member implementations allow disambiguation of
interface members with the same signature. Without explicit interface member
implementations it would be impossible for a class or struct to have different
implementations of interface members with the same signature and return type,
as would it be impossible for a class or struct to have any implementation at
all of interface members with the same signature but with different return
types.</p>

<p class="MsoNormal">For an explicit interface member implementation to be valid,
the class or struct must name an interface in its base class list that contains
a member whose fully qualified name, type, and parameter types exactly match
those of the explicit interface member implementation. Thus, in the following class</p>

<p class="Code">class Shape: ICloneable<br>
{<br>
&nbsp;&nbsp; object ICloneable.Clone() {...}</p>

<p class="Code">&nbsp;&nbsp; int IComparable.CompareTo(object other) {...}&nbsp;&nbsp; // invalid<br>
}</p>

<p class="MsoNormal">the declaration of <span class="Codefragment"><span style="font-size:10.0pt">IComparable.CompareTo</span></span> results in a
compile-time error because <span class="Codefragment"><span style="font-size:
10.0pt">IComparable</span></span> is not listed in the base class list of <span class="Codefragment"><span style="font-size:10.0pt">Shape</span></span> and is
not a base interface of <span class="Codefragment"><span style="font-size:10.0pt">ICloneable</span></span>.
Likewise, in the declarations</p>

<p class="Code">class Shape: ICloneable<br>
{<br>
&nbsp;&nbsp; object ICloneable.Clone() {...}<br>
}</p>

<p class="Code">class Ellipse: Shape<br>
{<br>
&nbsp;&nbsp; object ICloneable.Clone() {...}&nbsp; // invalid<br>
}</p>

<p class="MsoNormal">the declaration of <span class="Codefragment"><span style="font-size:10.0pt">ICloneable.Clone</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Ellipse</span></span> results
in a compile-time error because <span class="Codefragment"><span style="font-size:10.0pt">ICloneable</span></span> is not explicitly listed in
the base class list of <span class="Codefragment"><span style="font-size:10.0pt">Ellipse</span></span>.</p>

<p class="MsoNormal">The fully qualified name of an interface member must
reference the interface in which the member was declared. Thus, in the
declarations</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="Code">class TextBox: ITextBox<br>
{<br>
&nbsp;&nbsp; void IControl.Paint() {...}</p>

<p class="Code">&nbsp;&nbsp; void ITextBox.SetText(string text) {...}<br>
}</p>

<p class="MsoNormal">the explicit interface member implementation of <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span> must be
written as <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span>.</p>

<h3><a name="_Ref529352862"></a><a name="_Toc445783078"></a><a name="_Toc251613401"></a><a name="_Toc111395295"></a><a name="_Toc35074094"></a><a name="_Toc30840771"></a><a name="_Ref23664734">13.4.2 Uniqueness of implemented
interfaces</a></h3>

<p class="MsoNormal">The interfaces implemented by a generic type declaration
must remain unique for all possible constructed types. Without this rule, it
would be impossible to determine the correct method to call for certain constructed
types. For example, suppose a generic class declaration were permitted to be
written as follows:</p>

<p class="Code">interface I&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; void F();<br>
}</p>

<p class="Code">class X&lt;U,V&gt;: I&lt;U&gt;, I&lt;V&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Error: I&lt;U&gt; and I&lt;V&gt; conflict<br>
{<br>
&nbsp;&nbsp; void I&lt;U&gt;.F() {...}<br>
&nbsp;&nbsp; void I&lt;V&gt;.F() {...}<br>
}</p>

<p class="MsoNormal">Were this permitted, it would be impossible to determine
which code to execute in the following case:</p>

<p class="Code">I&lt;int&gt; x = new X&lt;int,int&gt;();<br>
x.F();</p>

<p class="MsoNormal">To determine if the interface list of a generic type
declaration is valid, the following steps are performed:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Let <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>
be the list of interfaces directly specified in a generic class, struct, or
interface declaration <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Add to <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>
any base interfaces of the interfaces already in <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Remove any duplicates from <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If any possible constructed type created from <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> would, after
type arguments are substituted into <span class="Codefragment"><span style="font-size:10.0pt">L</span></span>, cause two interfaces in <span class="Codefragment"><span style="font-size:10.0pt">L</span></span> to be identical,
then the declaration of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
is invalid. Constraint declarations are not considered when determining all
possible constructed types.</p>

<p class="MsoNormal">In the class declaration <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> above, the interface list <span class="Codefragment"><span style="font-size:10.0pt">L</span></span> consists of <span class="Codefragment"><span style="font-size:10.0pt">I&lt;U&gt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I&lt;V&gt;</span></span>. The
declaration is invalid because any constructed type with <span class="Codefragment"><span style="font-size:10.0pt">U</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> being the
same type would cause these two interfaces to be identical types.</p>

<p class="MsoNormal">It is possible for interfaces specified at different inheritance
levels to unify:</p>

<p class="Code">interface I&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; void F();<br>
}</p>

<p class="Code">class Base&lt;U&gt;: I&lt;U&gt;<br>
{<br>
&nbsp;&nbsp; void I&lt;U&gt;.F() {…}<br>
}</p>

<p class="Code">class Derived&lt;U,V&gt;: Base&lt;U&gt;, I&lt;V&gt;&nbsp;&nbsp; // Ok<br>
{<br>
&nbsp;&nbsp; void I&lt;V&gt;.F() {…}<br>
}</p>

<p class="MsoNormal">This code is valid even though <span class="Codefragment"><span style="font-size:10.0pt">Derived&lt;U,V&gt;</span></span> implements both <span class="Codefragment"><span style="font-size:10.0pt">I&lt;U&gt;</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">I&lt;V&gt;</span></span>. The
code</p>

<p class="Code">I&lt;int&gt; x = new Derived&lt;int,int&gt;();<br>
x.F();</p>

<p class="MsoNormal">invokes the method in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span>, since <span class="Codefragment"><span style="font-size:10.0pt">Derived&lt;int,int&gt;</span></span> effectively
re-implements <span class="Codefragment"><span style="font-size:10.0pt">I&lt;int&gt;</span></span>
(§13.4.6).</p>

<h3><a name="_Toc251613402">13.4.3 Implementation of generic methods</a></h3>

<p class="MsoNormal">When a generic method implicitly implements an interface
method, the constraints given for each method type parameter must be equivalent
in both declarations (after any interface type parameters are replaced with the
appropriate type arguments), where method type parameters are identified by ordinal
positions, left to right.</p>

<p class="MsoNormal">When a generic method explicitly implements an interface
method, however, no constraints are allowed on the implementing method.
Instead, the constraints are inherited from the interface method</p>

<p class="Code"><span lang="FR">interface I&lt;A,B,C&gt;<br>
{<br>
&nbsp;&nbsp; void F&lt;T&gt;(T t) where T: A;<br>
&nbsp;&nbsp; void G&lt;T&gt;(T t) where T: B;<br>
&nbsp;&nbsp; void H&lt;T&gt;(T t) where T: C;<br>
}</span></p>

<p class="Code"><span lang="FR">class C: I&lt;object,C,string&gt;<br>
{<br>
&nbsp;&nbsp; public void F&lt;T&gt;(T t) {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; public void G&lt;T&gt;(T t) where T: C {...}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok<br>
&nbsp;&nbsp; public void H&lt;T&gt;(T t) where T: string {...}&nbsp; // Error<br>
}</span></p>

<p class="MsoNormal">The method <span class="Codefragment"><span style="font-size:
10.0pt">C.F&lt;T&gt;</span></span> implicitly implements <span class="Codefragment"><span style="font-size:10.0pt">I&lt;object,C,string&gt;.F&lt;T&gt;</span></span>.
In this case, <span class="Codefragment"><span style="font-size:10.0pt">C.F&lt;T&gt;</span></span>
is not required (nor permitted) to specify the constraint <span class="Codefragment"><span style="font-size:10.0pt">T:</span></span> <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> since <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> is an
implicit constraint on all type parameters. The method <span class="Codefragment"><span style="font-size:10.0pt">C.G&lt;T&gt;</span></span>
implicitly implements <span class="Codefragment"><span style="font-size:10.0pt">I&lt;object,C,string&gt;.G&lt;T&gt;</span></span>
because the constraints match those in the interface, after the interface type
parameters are replaced with the corresponding type arguments. The constraint
for method <span class="Codefragment"><span style="font-size:10.0pt">C.H&lt;T&gt;</span></span>
is an error because sealed types (<span class="Codefragment"><span style="font-size:10.0pt">string</span></span> in this case) cannot be used as
constraints. Omitting the constraint would also be an error since constraints
of implicit interface method implementations are required to match. Thus, it is
impossible to implicitly implement <span class="Codefragment"><span style="font-size:10.0pt">I&lt;object,C,string&gt;.H&lt;T&gt;</span></span>.
This interface method can only be implemented using an explicit interface
member implementation:</p>

<p class="Code">class C: I&lt;object,C,string&gt;<br>
{<br>
&nbsp;&nbsp; ...</p>

<p class="Code">&nbsp;&nbsp; public void H&lt;U&gt;(U u) where U: class {...}</p>

<p class="Code">&nbsp;&nbsp; <span lang="FR">void I&lt;object,C,string&gt;.H&lt;T&gt;(T t) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string s = t;&nbsp; // Ok<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H&lt;T&gt;(t);<br>
&nbsp;&nbsp; }<br>
}</span></p>

<p class="MsoNormal">In this example, the explicit interface member
implementation invokes a public method having strictly weaker constraints. Note
that the assignment from <span class="Codefragment"><span style="font-size:10.0pt">t</span></span>
to <span class="Codefragment"><span style="font-size:10.0pt">s</span></span> is
valid since <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
inherits a constraint of <span class="Codefragment"><span style="font-size:10.0pt">T:</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">string</span></span>,
even though this constraint is not expressible in source code.</p>

<h3><a name="_Toc251613403"></a><a name="_Ref174225954">13.4.4 Interface
mapping</a></h3>

<p class="MsoNormal">A class or struct must provide implementations of all
members of the interfaces that are listed in the base class list of the class
or struct. The process of locating implementations of interface members in an
implementing class or struct is known as <span class="Term">interface mapping</span>.</p>

<p class="MsoNormal">Interface mapping for a class or struct <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> locates an
implementation for each member of each interface specified in the base class
list of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.
The implementation of a particular interface member <span class="Codefragment"><span style="font-size:10.0pt">I.M</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is the interface in which the member <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is declared,
is determined by examining each class or struct <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>, starting with <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> and repeating
for each successive base class of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>, until a match is located:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">S</span></span>
contains a declaration of an explicit interface member implementation that
matches <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>,
then this member is the implementation of <span class="Codefragment"><span style="font-size:10.0pt">I.M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">S</span></span> contains a declaration of a non-static public member
that matches <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>,
then this member is the implementation of <span class="Codefragment"><span style="font-size:10.0pt">I.M</span></span>. If more than one member matches, it
is unspecified which member is the implementation of <span class="Codefragment"><span style="font-size:10.0pt">I.M</span></span>. This situation can only occur if <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is a
constructed type where the two members as declared in the generic type have
different signatures, but the type arguments make their signatures identical.</p>

<p class="MsoNormal">A compile-time error occurs if implementations cannot be
located for all members of all interfaces specified in the base class list of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>. Note that
the members of an interface include those members that are inherited from base
interfaces.</p>

<p class="MsoNormal">For purposes of interface mapping, a class member <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> matches an
interface member <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
when:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
methods, and the name, type, and formal parameter lists of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
identical.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
properties, the name and type of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are identical, and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> has the same
accessors as <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
(<span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
permitted to have additional accessors if it is not an explicit interface
member implementation).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
events, and the name and type of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are identical.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are
indexers, the type and formal parameter lists of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are identical, and <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> has the same
accessors as <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
(<span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is
permitted to have additional accessors if it is not an explicit interface
member implementation).</p>

<p class="MsoNormal">Notable implications of the interface mapping algorithm are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Explicit interface member implementations take precedence over
other members in the same class or struct when determining the class or struct
member that implements an interface member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Neither non-public nor static members participate in interface
mapping.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">interface ICloneable<br>
{<br>
&nbsp;&nbsp; object Clone();<br>
}</p>

<p class="Code">class C: ICloneable<br>
{<br>
&nbsp;&nbsp; object ICloneable.Clone() {...}</p>

<p class="Code">&nbsp;&nbsp; public object Clone() {...}<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">ICloneable.Clone</span></span>
member of <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
becomes the implementation of <span class="Codefragment"><span style="font-size:
10.0pt">Clone</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">ICloneable</span></span> because explicit interface member
implementations take precedence over other members.</p>

<p class="MsoNormal">If a class or struct implements two or more interfaces
containing a member with the same name, type, and parameter types, it is
possible to map each of those interface members onto a single class or struct
member. For example</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface IForm<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">class Page: IControl, IForm<br>
{<br>
&nbsp;&nbsp; public void Paint() {...}<br>
}</p>

<p class="MsoNormal">Here, the <span class="Codefragment"><span style="font-size:
10.0pt">Paint</span></span> methods of both <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">IForm</span></span> are mapped onto the <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span> method in
<span class="Codefragment"><span style="font-size:10.0pt">Page</span></span>. It
is of course also possible to have separate explicit interface member
implementations for the two methods.</p>

<p class="MsoNormal">If a class or struct implements an interface that contains
hidden members, then some members must necessarily be implemented through
explicit interface member implementations. For example</p>

<p class="Code">interface IBase<br>
{<br>
&nbsp;&nbsp; int P { get; }<br>
}</p>

<p class="Code">interface IDerived: IBase<br>
{<br>
&nbsp;&nbsp; new int P();<br>
}</p>

<p class="MsoNormal">An implementation of this interface would require at least
one explicit interface member implementation, and would take one of the
following forms</p>

<p class="Code">class C: IDerived<br>
{<br>
&nbsp;&nbsp; int IBase.P { get {...} }</p>

<p class="Code">&nbsp;&nbsp; int IDerived.P() {...}<br>
}</p>

<p class="Code">class C: IDerived<br>
{<br>
&nbsp;&nbsp; public int P { get {...} }</p>

<p class="Code">&nbsp;&nbsp; int IDerived.P() {...}<br>
}</p>

<p class="Code">class C: IDerived<br>
{<br>
&nbsp;&nbsp; int IBase.P { get {...} }</p>

<p class="Code">&nbsp;&nbsp; public int P() {...}<br>
}</p>

<p class="MsoNormal">When a class implements multiple interfaces that have the
same base interface, there can be only one implementation of the base
interface. In the example</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">interface ITextBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetText(string text);<br>
}</p>

<p class="Code">interface IListBox: IControl<br>
{<br>
&nbsp;&nbsp; void SetItems(string[] items);<br>
}</p>

<p class="Code">class ComboBox: IControl, ITextBox, IListBox<br>
{<br>
&nbsp;&nbsp; void IControl.Paint() {...}</p>

<p class="Code">&nbsp;&nbsp; void ITextBox.SetText(string text) {...}</p>

<p class="Code">&nbsp;&nbsp; void IListBox.SetItems(string[] items) {...}<br>
}</p>

<p class="MsoNormal">it is not possible to have separate implementations for the <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span> named
in the base class list, the <span class="Codefragment"><span style="font-size:
10.0pt">IControl</span></span> inherited by <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span>, and the <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span>
inherited by <span class="Codefragment"><span style="font-size:10.0pt">IListBox</span></span>.
Indeed, there is no notion of a separate identity for these interfaces. Rather,
the implementations of <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">IListBox</span></span>
share the same implementation of <span class="Codefragment"><span style="font-size:10.0pt">IControl</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">ComboBox</span></span> is simply considered to
implement three interfaces, <span class="Codefragment"><span style="font-size:
10.0pt">IControl</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ITextBox</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">IListBox</span></span>.</p>

<p class="MsoNormal">The members of a base class participate in interface
mapping. In the example</p>

<p class="Code">interface Interface1<br>
{<br>
&nbsp;&nbsp; void F();<br>
}</p>

<p class="Code">class Class1<br>
{<br>
&nbsp;&nbsp; public void F() {}</p>

<p class="Code">&nbsp;&nbsp; public void G() {}<br>
}</p>

<p class="Code">class Class2: Class1, Interface1<br>
{<br>
&nbsp;&nbsp; new public void G() {}<br>
}</p>

<p class="MsoNormal">the method <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">Class1</span></span> is used in <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>'s implementation of <span class="Codefragment"><span style="font-size:10.0pt">Interface1</span></span>.</p>

<h3><a name="_Toc251613404"></a><a name="_Toc445783079">13.4.5 Interface
implementation inheritance</a></h3>

<p class="MsoNormal">A class inherits all interface implementations provided by
its base classes.</p>

<p class="MsoNormal">Without explicitly <span class="Term">re-implementing</span>
an interface, a derived class cannot in any way alter the interface mappings it
inherits from its base classes. For example, in the declarations</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">class Control: IControl<br>
{<br>
&nbsp;&nbsp; public void Paint() {...}<br>
}</p>

<p class="Code">class TextBox: Control<br>
{<br>
&nbsp;&nbsp; new public void Paint() {...}<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">TextBox</span></span>
hides the <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">Control</span></span>,
but it does not alter the mapping of <span class="Codefragment"><span style="font-size:10.0pt">Control.Paint</span></span> onto <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span>,
and calls to <span class="Codefragment"><span style="font-size:10.0pt">Paint</span></span>
through class instances and interface instances will have the following effects</p>

<p class="Code">Control c = new Control();<br>
TextBox t = new TextBox();<br>
IControl ic = c;<br>
IControl it = t;<br>
c.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes Control.Paint();<br>
t.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes TextBox.Paint();<br>
ic.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes Control.Paint();<br>
it.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes Control.Paint();</p>

<p class="MsoNormal">However, when an interface method is mapped onto a virtual
method in a class, it is possible for derived classes to override the virtual
method and alter the implementation of the interface. For example, rewriting
the declarations above to</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">class Control: IControl<br>
{<br>
&nbsp;&nbsp; public virtual void Paint() {...}<br>
}</p>

<p class="Code">class TextBox: Control<br>
{<br>
&nbsp;&nbsp; public override void Paint() {...}<br>
}</p>

<p class="MsoNormal">the following effects will now be observed</p>

<p class="Code">Control c = new Control();<br>
TextBox t = new TextBox();<br>
IControl ic = c;<br>
IControl it = t;<br>
c.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes Control.Paint();<br>
t.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes TextBox.Paint();<br>
ic.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes Control.Paint();<br>
it.Paint();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes TextBox.Paint();</p>

<p class="MsoNormal">Since explicit interface member implementations cannot be
declared virtual, it is not possible to override an explicit interface member
implementation. However, it is perfectly valid for an explicit interface member
implementation to call another method, and that other method can be declared
virtual to allow derived classes to override it. For example</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">class Control: IControl<br>
{<br>
&nbsp;&nbsp; void IControl.Paint() { PaintControl(); }</p>

<p class="Code">&nbsp;&nbsp; protected virtual void PaintControl() {...}<br>
}</p>

<p class="Code">class TextBox: Control<br>
{<br>
&nbsp;&nbsp; protected override void PaintControl() {...}<br>
}</p>

<p class="MsoNormal">Here, classes derived from <span class="Codefragment"><span style="font-size:10.0pt">Control</span></span> can specialize the
implementation of <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span>
by overriding the <span class="Codefragment"><span style="font-size:10.0pt">PaintControl</span></span>
method.</p>

<h3><a name="_Toc251613405"></a><a name="_Ref155510188"></a><a name="_Toc445783080">13.4.6 Interface re-implementation</a></h3>

<p class="MsoNormal">A class that inherits an interface implementation is
permitted to <span class="Term">re-implement</span> the interface by including it
in the base class list.</p>

<p class="MsoNormal">A re-implementation of an interface follows exactly the same
interface mapping rules as an initial implementation of an interface. Thus, the
inherited interface mapping has no effect whatsoever on the interface mapping
established for the re-implementation of the interface. For example, in the
declarations</p>

<p class="Code">interface IControl<br>
{<br>
&nbsp;&nbsp; void Paint();<br>
}</p>

<p class="Code">class Control: IControl<br>
{<br>
&nbsp;&nbsp; void IControl.Paint() {...}<br>
}</p>

<p class="Code">class MyControl: Control, IControl<br>
{<br>
&nbsp;&nbsp; public void Paint() {}<br>
}</p>

<p class="MsoNormal">the fact that <span class="Codefragment"><span style="font-size:10.0pt">Control</span></span> maps <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span> onto <span class="Codefragment"><span style="font-size:10.0pt">Control.IControl.Paint</span></span>
doesn’t affect the re-implementation in <span class="Codefragment"><span style="font-size:10.0pt">MyControl</span></span>, which maps <span class="Codefragment"><span style="font-size:10.0pt">IControl.Paint</span></span>
onto <span class="Codefragment"><span style="font-size:10.0pt">MyControl.Paint</span></span>.</p>

<p class="MsoNormal">Inherited public member declarations and inherited explicit
interface member declarations participate in the interface mapping process for
re-implemented interfaces. For example</p>

<p class="Code">interface IMethods<br>
{<br>
&nbsp;&nbsp; void F();<br>
&nbsp;&nbsp; void G();<br>
&nbsp;&nbsp; void H();<br>
&nbsp;&nbsp; void I();<br>
}</p>

<p class="Code">class Base: IMethods<br>
{<br>
&nbsp;&nbsp; void IMethods.F() {}<br>
&nbsp;&nbsp; void IMethods.G() {}<br>
&nbsp;&nbsp; public void H() {}<br>
&nbsp;&nbsp; public void I() {}<br>
}</p>

<p class="Code">class Derived: Base, IMethods<br>
{<br>
&nbsp;&nbsp; public void F() {}<br>
&nbsp;&nbsp; void IMethods.H() {}<br>
}</p>

<p class="MsoNormal">Here, the implementation of <span class="Codefragment"><span style="font-size:10.0pt">IMethods</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Derived</span></span> maps the interface methods onto <span class="Codefragment"><span style="font-size:10.0pt">Derived.F</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Base.IMethods.G</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">Derived.IMethods.H</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">Base.I</span></span>.</p>

<p class="MsoNormal">When a class implements an interface, it implicitly also
implements all of that interface’s base interfaces. Likewise, a
re-implementation of an interface is also implicitly a re-implementation of all
of the interface’s base interfaces. For example</p>

<p class="Code">interface IBase<br>
{<br>
&nbsp;&nbsp; void F();<br>
}</p>

<p class="Code">interface IDerived: IBase<br>
{<br>
&nbsp;&nbsp; void G();<br>
}</p>

<p class="Code">class C: IDerived<br>
{<br>
&nbsp;&nbsp; void IBase.F() {...}</p>

<p class="Code">&nbsp;&nbsp; void IDerived.G() {...}<br>
}</p>

<p class="Code">class D: C, IDerived<br>
{<br>
&nbsp;&nbsp; public void F() {...}</p>

<p class="Code">&nbsp;&nbsp; public void G() {...}<br>
}</p>

<p class="MsoNormal">Here, the re-implementation of <span class="Codefragment"><span style="font-size:10.0pt">IDerived</span></span> also re-implements <span class="Codefragment"><span style="font-size:10.0pt">IBase</span></span>, mapping <span class="Codefragment"><span style="font-size:10.0pt">IBase.F</span></span> onto <span class="Codefragment"><span style="font-size:10.0pt">D.F</span></span>.</p>

<h3><a name="_Toc251613406"></a><a name="_Toc445783081">13.4.7 Abstract classes
and interfaces</a></h3>

<p class="MsoNormal">Like a non-abstract class, an abstract class must provide
implementations of all members of the interfaces that are listed in the base
class list of the class. However, an abstract class is permitted to map
interface methods onto abstract methods. For example</p>

<p class="Code">interface IMethods<br>
{<br>
&nbsp;&nbsp; void F();<br>
&nbsp;&nbsp; void G();<br>
}</p>

<p class="Code">abstract class C: IMethods<br>
{<br>
&nbsp;&nbsp; public abstract void F();<br>
&nbsp;&nbsp; public abstract void G();<br>
}</p>

<p class="MsoNormal">Here, the implementation of <span class="Codefragment"><span style="font-size:10.0pt">IMethods</span></span> maps <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">G</span></span> onto abstract methods, which must be
overridden in non-abstract classes that derive from <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoNormal">Note that explicit interface member implementations cannot
be abstract, but explicit interface member implementations are of course
permitted to call abstract methods. For example</p>

<p class="Code">interface IMethods<br>
{<br>
&nbsp;&nbsp; void F();<br>
&nbsp;&nbsp; void G();<br>
}</p>

<p class="Code">abstract class C: IMethods<br>
{<br>
&nbsp;&nbsp; void IMethods.F() { FF(); }</p>

<p class="Code">&nbsp;&nbsp; void IMethods.G() { GG(); }</p>

<p class="Code">&nbsp;&nbsp; protected abstract void FF();</p>

<p class="Code">&nbsp;&nbsp; protected abstract void GG();<br>
}</p>

<p class="MsoNormal">Here, non-abstract classes that derive from <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> would be
required to override <span class="Codefragment"><span style="font-size:10.0pt">FF</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">GG</span></span>,
thus providing the actual implementation of <span class="Codefragment"><span style="font-size:10.0pt">IMethods</span></span>.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section13">

<h1><a name="_Toc445783082"></a><a name="_Ref461620357"></a><a name="_Ref461619929"></a><a name="_Toc251613407"></a><a name="_Ref463364591">14.
Enums</a></h1>

<p class="MsoNormal">An <span class="Term">enum type</span> is a distinct value
type (§4.1) that declares a set of named constants.</p>

<p class="MsoNormal">The example</p>

<p class="Code">enum Color<br>
{<br>
&nbsp;&nbsp; Red,<br>
&nbsp;&nbsp; Green,<br>
&nbsp;&nbsp; Blue<br>
}</p>

<p class="MsoNormal">declares an enum type named <span class="Codefragment"><span style="font-size:10.0pt">Color</span></span> with members <span class="Codefragment"><span style="font-size:10.0pt">Red</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">Green</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span>.</p>

<h2><a name="_Toc251613408"></a><a name="_Ref446328810">14.1 Enum declarations</a></h2>

<p class="MsoNormal">An enum declaration declares a new enum type. An enum
declaration begins with the keyword <span class="Codefragment"><span style="font-size:10.0pt">enum</span></span>, and defines the name,
accessibility, underlying type, and members of the enum.</p>

<p class="Grammar">enum-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; enum-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">enum</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp;
enum-base<sub>opt</sub>&nbsp;&nbsp; enum-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="Grammar">enum-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
integral-type</p>

<p class="Grammar">enum-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
enum-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
enum-member-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="MsoNormal">Each enum type has a corresponding integral type called the <span class="Term">underlying type</span> of the enum type. This underlying type must
be able to represent all the enumerator values defined in the enumeration. An
enum declaration may explicitly declare an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>. Note
that <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>
cannot be used as an underlying type. An enum declaration that does not
explicitly declare an underlying type has an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>.</p>

<p class="MsoNormal">The example</p>

<p class="Code">enum Color: long<br>
{<br>
&nbsp;&nbsp; Red,<br>
&nbsp;&nbsp; Green,<br>
&nbsp;&nbsp; Blue<br>
}</p>

<p class="MsoNormal">declares an enum with an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>. A
developer might choose to use an underlying type of <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, as in the example, to enable the
use of values that are in the range of <span class="Codefragment"><span style="font-size:10.0pt">long</span></span> but not in the range of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, or to
preserve this option for the future.</p>

<h2><a name="_Toc251613409">14.2 Enum modifiers</a></h2>

<p class="MsoNormal">An <span class="Production">enum-declaration</span> may
optionally include a sequence of enum modifiers:</p>

<p class="Grammar"><span lang="FR">enum-modifiers:<br>
enum-modifier<br>
enum-modifiers&nbsp;&nbsp; enum-modifier</span></p>

<p class="Grammar">enum-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="MsoNormal"><a name="_Ref485188801"></a><a name="_Ref485188649"></a><a name="_Ref483210964">It is a compile-time error for the same modifier to appear
multiple times in an enum declaration.</a></p>

<p class="MsoNormal">The modifiers of an enum declaration have the same meaning
as those of a class declaration (§10.1.1). Note, however, that the <span class="Codefragment"><span style="font-size:10.0pt">abstract</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">sealed</span></span>
modifiers are not permitted in an enum declaration. Enums cannot be abstract
and do not permit derivation.</p>

<h2><a name="_Toc251613410"></a><a name="_Ref508600719"></a><a name="_Ref508190430"></a><a name="_Ref507584006">14.3 Enum</a> members</h2>

<p class="MsoNormal">The body of an enum type declaration defines zero or more
enum members, which are the named constants of the enum type. No two enum
members can have the same name.</p>

<p class="Grammar">enum-member-declarations:<br>
enum-member-declaration<br>
enum-member-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; enum-member-declaration</p>

<p class="Grammar"><span lang="FR">enum-member-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; identifier<br>
attributes<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">=</span></span><span lang="FR">&nbsp;&nbsp; constant-expression</span></p>

<p class="MsoNormal">Each enum member has an associated constant value. The type
of this value is the underlying type for the containing enum. The constant
value for each enum member must be in the range of the underlying type for the
enum. The example</p>

<p class="Code">enum Color: uint<br>
{<br>
&nbsp;&nbsp; Red = -1,<br>
&nbsp;&nbsp; Green = -2,<br>
&nbsp;&nbsp; Blue = -3<br>
}</p>

<p class="MsoNormal">results in a compile-time error because the constant values <span class="Codefragment"><span style="font-size:10.0pt">-1</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">-2</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">–3</span></span> are not in
the range of the underlying integral type <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>.</p>

<p class="MsoNormal">Multiple enum members may share the same associated value.
The example</p>

<p class="Code">enum Color <br>
{<br>
&nbsp;&nbsp; Red,<br>
&nbsp;&nbsp; Green,<br>
&nbsp;&nbsp; Blue,</p>

<p class="Code">&nbsp;&nbsp; Max = Blue<br>
}</p>

<p class="MsoNormal">shows an enum in which two enum members—<span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Max</span></span>—have the
same associated value.</p>

<p class="MsoNormal">The associated value of an enum member is assigned either
implicitly or explicitly. If the declaration of the enum member has a <span class="Production">constant-expression</span> initializer, the value of that
constant expression, implicitly converted to the underlying type of the enum,
is the associated value of the enum member. If the declaration of the enum
member has no initializer, its associated value is set implicitly, as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the enum member is the first enum member declared in the enum
type, its associated value is zero.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, the associated value of the enum member is obtained by
increasing the associated value of the textually preceding enum member by one.
This increased value must be within the range of values that can be represented
by the underlying type, otherwise a compile-time error occurs.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">enum Color<br>
{<br>
&nbsp;&nbsp; Red,<br>
&nbsp;&nbsp; Green = 10,<br>
&nbsp;&nbsp; Blue<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(StringFromColor(Color.Red));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(StringFromColor(Color.Green));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(StringFromColor(Color.Blue));<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static string StringFromColor(Color c) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (c) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Red: <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return String.Format("Red = {0}", (int) c);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Green:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return String.Format("Green = {0}", (int) c);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case Color.Blue:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return String.Format("Blue = {0}", (int) c);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "Invalid color";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">prints out the enum member names and their associated
values. The output is:</p>

<p class="Code">Red = 0<br>
Green = 10<br>
Blue = 11</p>

<p class="MsoNormal">for the following reasons:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the enum member <span class="Codefragment"><span style="font-size:
10.0pt">Red</span></span> is automatically assigned the value zero (since it
has no initializer and is the first enum member);</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>the enum member <span class="Codefragment"><span style="font-size:
10.0pt">Green</span></span> is explicitly given the value <span class="Codefragment"><span style="font-size:10.0pt">10</span></span>;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>and the enum member <span class="Codefragment"><span style="font-size:10.0pt">Blue</span></span> is automatically assigned the value
one greater than the member that textually precedes it.</p>

<p class="MsoNormal">The associated value of an enum member may not, directly or
indirectly, use the value of its own associated enum member. Other than this
circularity restriction, enum member initializers may freely refer to other
enum member initializers, regardless of their textual position. Within an enum
member initializer, values of other enum members are always treated as having
the type of their underlying type, so that casts are not necessary when
referring to other enum members. </p>

<p class="MsoNormal">The example</p>

<p class="Code">enum Circular<br>
{<br>
&nbsp;&nbsp; A = B,<br>
&nbsp;&nbsp; B<br>
}</p>

<p class="MsoNormal">results in a compile-time error because the declarations of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> are circular.
<span class="Codefragment"><span style="font-size:10.0pt">A</span></span> depends
on <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
explicitly, and <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>
depends on <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
implicitly.</p>

<p class="MsoNormal">Enum members are named and scoped in a manner exactly
analogous to fields within classes. The scope of an enum member is the body of
its containing enum type. Within that scope, enum members can be referred to by
their simple name. From all other code, the name of an enum member must be
qualified with the name of its enum type. Enum members do not have any declared
accessibility—an enum member is accessible if its containing enum type is
accessible.</p>

<h2><a name="_Toc251613411">14.4 The System.Enum type</a></h2>

<p class="MsoNormal">The type <span class="Codefragment"><span style="font-size:
10.0pt">System.Enum</span></span> is the abstract base class of all enum types
(this is distinct and different from the underlying type of the enum type), and
the members inherited from <span class="Codefragment"><span style="font-size:
10.0pt">System.Enum</span></span> are available in any enum type. A boxing
conversion (§4.3.1) exists from any enum type to <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>, and an unboxing conversion
(§4.3.2) exists from <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>
to any enum type.</p>

<p class="MsoNormal">Note that <span class="Codefragment"><span style="font-size:
10.0pt">System.Enum</span></span> is not itself an <span class="Production">enum-type</span>.
Rather, it is a <span class="Production">class-type</span> from which all <span class="Production">enum-type</span>s are derived. The type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span>
inherits from the type <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
(§4.1.1), which, in turn, inherits from type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. At run-time, a value of type <span class="Codefragment"><span style="font-size:10.0pt">System.Enum</span></span> can
be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
or a reference to a boxed value of any enum type.</p>

<h2><a name="_Toc251613412">14.5 Enum values and operations</a></h2>

<p class="MsoNormal">Each enum type defines a distinct type; an explicit
enumeration conversion (§6.2.2) is required to convert between an enum type and
an integral type, or between two enum types. The set of values that an enum
type can take on is not limited by its enum members. In particular, any value
of the underlying type of an enum can be cast to the enum type, and is a
distinct valid value of that enum type.</p>

<p class="MsoNormal">Enum members have the type of their containing enum type
(except within other enum member initializers: see §14.3). The value of an enum
member declared in enum type <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> with associated value <span class="Codefragment"><span style="font-size:10.0pt">v</span></span> is <span class="Codefragment"><span style="font-size:10.0pt">(E)v</span></span>. </p>

<p class="MsoNormal">The following operators can be used on values of enum types:
<span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;=</span></span>&nbsp;(§7.10.5), binary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>&nbsp;(§7.8.4), binary <span class="Codefragment"><span style="font-size:10.0pt">‑</span></span>&nbsp;(§7.8.5), <span class="Codefragment"><span style="font-size:10.0pt">^</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">|</span></span>&nbsp;(§7.11.2), <span class="Codefragment"><span style="font-size:10.0pt">~</span></span>&nbsp;(§7.7.4), <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>&nbsp;(§7.6.9 and §7.7.5).</p>

<p class="MsoNormal">Every enum&nbsp;type automatically derives from the class <span class="Codefragment"><span style="font-size:10.0pt">System.Enum </span></span>(which,
in turn, derives from <span class="Codefragment"><span style="font-size:10.0pt">System.ValueType</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>). Thus, inherited methods and properties of this class can be used on values of an enum type.</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section14">

<h1><a name="_Ref461619945"></a><a name="_Ref452620453"></a><a name="_Toc445783088"></a><a name="_Toc251613413"></a><a name="_Ref463364598">15.
Delegates</a></h1>

<p class="MsoNormal">Delegates enable scenarios that other languages—such as C++,
Pascal, and Modula—have addressed with function pointers. Unlike C++ function
pointers, however, delegates are fully object oriented, and unlike C++ pointers
to member functions, delegates encapsulate both an object instance and a
method.</p>

<p class="MsoNormal">A delegate declaration defines a class that is derived from
the class <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>.
A delegate instance encapsulates an invocation list, which is a list of one or
more methods, each of which is referred to as a callable entity. For instance
methods, a callable entity consists of an instance and a method on that
instance. For static methods, a callable entity consists of just a method. Invoking
a delegate instance with an appropriate set of arguments causes each of the
delegate’s callable entities to be invoked with the given set of arguments.</p>

<p class="MsoNormal">An interesting and useful property of a delegate instance is
that it does not know or care about the classes of the methods it encapsulates;
all that matters is that those methods be compatible (§15.1) with the delegate’s type. This makes delegates perfectly suited for “anonymous” invocation.</p>

<h2><a name="_Toc251613414"></a><a name="_Ref171237638"></a><a name="_Ref155511458"></a><a name="_Ref12502422"></a><a name="_Ref513725258"></a><a name="_Ref508600694"></a><a name="_Ref508600674"></a><a name="_Ref508432331"></a><a name="_Ref508192744"></a><a name="_Ref508191585"></a><a name="_Ref495219206"></a><a name="_Ref493151493"></a><a name="_Ref451394461"></a><a name="_Toc445783089">15.1
Delegate declarations</a></h2>

<p class="MsoNormal">A <span class="Production">delegate-declaration</span> is a <span class="Production">type-declaration</span> (§9.6) that declares a new delegate
type.</p>

<p class="Grammar">delegate-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; delegate-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">delegate</span></span>&nbsp;&nbsp;
return-type&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identifier&nbsp; variant-type-parameter-list<sub>opt</sub>&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">delegate-modifiers:<br>
delegate-modifier<br>
delegate-modifiers&nbsp;&nbsp; delegate-modifier</p>

<p class="Grammar">delegate-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="MsoNormal">It is a compile-time error for the same modifier to appear
multiple times in a delegate declaration.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier is only permitted on delegates declared within another type, in which
case it specifies that such a delegate hides an inherited member by the same
name, as described in §10.3.4.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>
modifiers control the accessibility of the delegate type. Depending on the
context in which the delegate declaration occurs, some of these modifiers may
not be permitted (§3.5.1).</p>

<p class="MsoNormal">The delegate’s type name is <span class="Production">identifier</span>.</p>

<p class="MsoNormal">The optional <span class="Production">formal-parameter-list</span>
specifies the parameters of the delegate, and <span class="Production">return-type</span>
indicates the return type of the delegate. </p>

<p class="MsoNormal">The optional <span class="Production">variant-type-parameter-list</span>
(§13.1.3) specifies the type parameters to the delegate itself. </p>

<p class="MsoNormal">The return type of a delegate type must be either <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, or
output-safe (§13.1.3.1).</p>

<p class="MsoNormal">All the formal parameter types of a delegate type must be
input-safe. Additionally, any <span class="Codefragment"><span style="font-size:
10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">ref</span></span> parameter types must also be output-safe. Note that
even <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameters are required to be input-safe, due to a limitiation of the
underlying execution platform.</p>

<p class="MsoNormal">Delegate types in C# are name equivalent, not structurally
equivalent. Specifically, two different delegate types that have the same
parameter lists and return type are considered different delegate types. However,
instances of two distinct but structurally equivalent delegate types may
compare as equal (§7.9.8).</p>

<p class="MsoNormal">For example:</p>

<p class="Code">delegate int D1(int i, double d);</p>

<p class="Code">class A<br>
{<br>
&nbsp;&nbsp; public static int M1(int a, double b) {...}<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; delegate int D2(int c, double d);</p>

<p class="Code">&nbsp;&nbsp; public static int M1(int f, double g) {...}</p>

<p class="Code">&nbsp;&nbsp; public static void M2(int k, double l) {...}</p>

<p class="Code">&nbsp;&nbsp; public static int M3(int g) {...}</p>

<p class="Code">&nbsp;&nbsp; public static void M4(int g) {...}<br>
}</p>

<p class="MsoNormal">The delegate types <span class="Codefragment"><span style="font-size:10.0pt">D1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">D2</span></span> are both compatible with the methods <span class="Codefragment"><span style="font-size:10.0pt">A.M1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">B.M1</span></span>, since
they have the same return type and parameter list; however, these delegate
types are two different types, so they are not interchangeable. The delegate
types <span class="Codefragment"><span style="font-size:10.0pt">D1</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">D2</span></span>
are incompatible with the methods <span class="Codefragment"><span style="font-size:10.0pt">B.M2</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">B.M3</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">B.M4</span></span>, since they have different return
types or parameter lists.</p>

<p class="MsoNormal">Like other generic type declarations, type arguments must be
given to create a constructed delegate type. The parameter types and return
type of a constructed delegate type are created by substituting, for each type parameter
in the delegate declaration, the corresponding type argument of the constructed
delegate type. The resulting return type and parameter types are used in
determining what methods are compatible with a constructed delegate type. For
example:</p>

<p class="Code">delegate bool Predicate&lt;T&gt;(T value);</p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; static bool F(int i) {...}</p>

<p class="Code">&nbsp;&nbsp; static bool G(string s) {...}<br>
}</p>

<p class="MsoNormal">The delegate type <span class="Codefragment"><span style="font-size:10.0pt">Predicate&lt;int&gt;</span></span> is compatible with
the method <span class="Codefragment"><span style="font-size:10.0pt">X.F</span></span>
and the delegate type <span class="Codefragment"><span style="font-size:10.0pt">Predicate&lt;string&gt;</span></span>
is compatible with the method <span class="Codefragment"><span style="font-size:
10.0pt">X.G</span></span>.</p>

<p class="MsoNormal">The only way to declare a delegate type is via a <span class="Production">delegate-declaration</span>. A delegate type is a class type
that is derived from <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>.
Delegate types are implicitly <span class="Codefragment"><span style="font-size:
10.0pt">sealed</span></span>, so it is not permissible to derive any type from
a delegate type. It is also not permissible to derive a non-delegate class type
from <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>.
Note that <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
is not itself a delegate type; it is a class type from which all delegate types
are derived.</p>

<p class="MsoNormal">C# provides special syntax for delegate instantiation and
invocation. Except for instantiation, any operation that can be applied to a
class or class instance can also be applied to a delegate class or instance,
respectively. In particular, it is possible to access members of the <span class="Codefragment"><span style="font-size:10.0pt">System.Delegate</span></span>
type via the usual member access syntax.</p>

<p class="MsoNormal"><a name="_Toc445783091">The set of methods encapsulated by a
delegate instance is called an invocation list. When a delegate instance is
created (§</a>15.2) from a single method, it encapsulates that method, and its
invocation list contains only one entry. However, when two non-null delegate
instances are combined, their invocation lists are concatenated—in the order
left operand then right operand—to form a new invocation list, which contains
two or more entries.</p>

<p class="MsoNormal">Delegates are combined using the binary <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> (§7.8.4) and <span class="Codefragment"><span style="font-size:10.0pt">+=</span></span>
operators (§7.17.2). A delegate can be removed from a combination of delegates,
using the binary <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>
(§7.8.5) and <span class="Codefragment"><span style="font-size:10.0pt">-=</span></span>
operators (§7.17.2). Delegates can be compared for equality (§7.10.8).</p>

<p class="MsoNormal">The following example shows the instantiation of a number of
delegates, and their corresponding invocation lists:</p>

<p class="Code"><span lang="NO-BOK">delegate void D(int x);</span></p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public static void M1(int i) {...}</p>

<p class="Code">&nbsp;&nbsp; public static void M2(int i) {...}</p>

<p class="Code">}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd1 = new D(C.M1);&nbsp;&nbsp;&nbsp; // M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd2 = new D(C.M2);&nbsp;&nbsp;&nbsp; // M2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd3 = cd1 + cd2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd4 = cd3 + cd1; &nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd5 = cd4 + cd3; &nbsp;&nbsp;&nbsp;&nbsp; // M1 + M2 + M1 + M1 + M2<br>
&nbsp;&nbsp; }</p>

<p class="Code">}</p>

<p class="MsoNormal">When <span class="Codefragment"><span style="font-size:10.0pt">cd1</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">cd2</span></span>
are instantiated, they each encapsulate one method. When <span class="Codefragment"><span style="font-size:10.0pt">cd3</span></span> is instantiated,
it has an invocation list of two methods, <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">M2</span></span>, in that order. <span class="Codefragment"><span style="font-size:10.0pt">cd4</span></span>’s
invocation list contains <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">M2</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span>, in that
order. Finally, <span class="Codefragment"><span style="font-size:10.0pt">cd5</span></span>’s
invocation list contains <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">M2</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">M1</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">M2</span></span>, in that
order. For more examples of combining (as well as removing) delegates, see §15.4.</p>

<h2><a name="_Ref508433325"></a><a name="_Toc486309875"></a><a name="_Toc251613415"></a><a name="_Ref174224038">15.2 Delegate compatibility</a></h2>

<p class="MsoNormal">A method or delegate <span class="Codefragment"><span style="font-size:10.0pt">M</span></span> is <span class="Term">compatible</span>
with a delegate type <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
if all of the following are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">D</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
have the same number of parameters, and each parameter in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> has the same <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifiers
as the corresponding parameter in <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each value parameter (a parameter with no <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> modifier),
an identity conversion (§6.1.1) or implicit reference conversion (§6.1.6) exists from the parameter type in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> to the corresponding parameter type in
<span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span>
or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span>
parameter, the parameter type in <span class="Codefragment"><span style="font-size:10.0pt">D</span></span> is the same as the parameter type in <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An identity or implicit reference conversion exists from the
return type of <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
to the return type of <span class="Codefragment"><span style="font-size:10.0pt">D</span></span>.</p>

<h2><a name="_Toc251613416">15.3 Delegate instantiation</a></h2>

<p class="MsoNormal">An instance of a delegate is created by a <span class="Production">delegate-creation-expression</span> (§7.6.10.5) or a conversion to a delegate type. The newly created delegate instance then refers to either:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The static method referenced in the <span class="Production">delegate-creation-expression</span>,
or</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The target object (which cannot be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>) and instance method referenced in
the <span class="Production">delegate-creation-expression</span>, or</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Another delegate.</p>

<p class="MsoNormal">For example:</p>

<p class="Code"><span lang="NO-BOK">delegate void D(int x);</span></p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public static void M1(int i) {...}<br>
&nbsp;&nbsp; public void M2(int i) {...}<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd1 = new D(C.M1);&nbsp;&nbsp;&nbsp; // static method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C t = new C();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd2 = new D(t.M2);&nbsp;&nbsp;&nbsp; // instance method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd3 = new D(cd2);&nbsp;&nbsp;&nbsp;&nbsp; // another delegate<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Once instantiated, delegate instances always refer to the
same target object and method. Remember, when two delegates are combined, or
one is removed from another, a new delegate results with its own invocation
list; the invocation lists of the delegates combined or removed remain
unchanged.</p>

<h2><a name="_Ref485628540"></a><a name="_Toc251613417"></a><a name="_Ref5435980"></a><a name="_Ref513725642"></a><a name="_Toc486309877">15.4
Delegate invocation</a></h2>

<p class="MsoNormal">C# provides special syntax for invoking a delegate. When a
non-null delegate instance whose invocation list contains one entry is invoked,
it invokes the one method with the same arguments it was given, and returns the
same value as the referred to method. (See §7.6.5.3 for detailed information on
delegate invocation.) If an exception occurs during the invocation of such a
delegate, and that exception is not caught within the method that was invoked,
the search for an exception catch clause continues in the method that called
the delegate, as if that method had directly called the method to which that
delegate referred.</p>

<p class="MsoNormal">Invocation of a delegate instance whose invocation list
contains multiple entries proceeds by invoking each of the methods in the
invocation list, synchronously, in order. Each method so called is passed the
same set of arguments as was given to the delegate instance. If such a delegate
invocation includes reference parameters (§10.6.1.2), each method invocation
will occur with a reference to the same variable; changes to that variable by
one method in the invocation list will be visible to methods further down the
invocation list. If the delegate invocation includes output parameters or a
return value, their final value will come from the invocation of the last
delegate in the list.</p>

<p class="MsoNormal">If an exception occurs during processing of the invocation
of such a delegate, and that exception is not caught within the method that was
invoked, the search for an exception catch clause continues in the method that
called the delegate, and any methods further down the invocation list are not
invoked.</p>

<p class="MsoNormal">Attempting to invoke a delegate instance whose value is null
results in an exception of type <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>.</p>

<p class="MsoNormal">The following example shows how to instantiate, combine,
remove, and invoke delegates:</p>

<p class="Code">using System;</p>

<p class="Code">delegate void D(int x);</p>

<p class="Code">class C<br>
{<br>
&nbsp;&nbsp; public static void M1(int i) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.M1: " + i);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public static void M2(int i) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.M2: " + i);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public void M3(int i) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("C.M3: " + i);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd1 = new D(C.M1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd1(-1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd2 = new D(C.M2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd2(-2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M2</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd3 = cd1 + cd2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1 then M2</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 += cd1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(20);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1, M2, then M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C c = new C();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D cd4 = new D(c.M3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 += cd4;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(30);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1, M2, M1, then M3</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // remove last M1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(40);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1, M2, then M3</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd4;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(50);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1 then M2</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(60);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // impossible removal is benign<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3(60);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // call M1</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invocation list is empty so cd3 is
null</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; cd3(70);&nbsp;&nbsp;&nbsp; // System.NullReferenceException thrown</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cd3 -= cd1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // impossible removal is benign<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">As shown in the statement <span class="Codefragment"><span style="font-size:10.0pt">cd3 += cd1;</span></span>, a delegate can be present
in an invocation list multiple times. In this case, it is simply invoked once
per occurrence. In an invocation list such as this, when that delegate is
removed, the last occurrence in the invocation list is the one actually
removed.</p>

<p class="MsoNormal">Immediately prior to the execution of the final statement, <span class="Codefragment"><span style="font-size:10.0pt">cd3 -= cd1;</span></span>,
the delegate <span class="Codefragment"><span style="font-size:10.0pt">cd3</span></span>
refers to an empty invocation list. Attempting to remove a delegate from an
empty list (or to remove a non-existent delegate from a non-empty list) is not
an error. </p>

<p class="MsoNormal">The output produced is:</p>

<p class="Code">C.M1: -1<br>
C.M2: -2<br>
C.M1: 10<br>
C.M2: 10<br>
C.M1: 20<br>
C.M2: 20<br>
C.M1: 20<br>
C.M1: 30<br>
C.M2: 30<br>
C.M1: 30<br>
C.M3: 30<br>
C.M1: 40<br>
C.M2: 40<br>
C.M3: 40<br>
C.M1: 50<br>
C.M2: 50<br>
C.M1: 60<br>
C.M1: 60</p>

</div>

<span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section15">

<h1><a name="_Toc251613418"></a><a name="_Ref8285150">16. Exceptions</a></h1>

<p class="MsoNormal">Exceptions in C# provide a structured, uniform, and
type-safe way of handling both system level and application level error
conditions. The exception mechanism in C# is quite similar to that of C++, with
a few important differences:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In C#, all exceptions must be represented by an instance of a
class type derived from <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>.
In C++, any value of any type can be used to represent an exception.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In C#, a finally block (§8.10) can be used to write termination
code that executes in both normal execution and exceptional conditions. Such
code is difficult to write in C++ without duplicating code.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>In C#, system-level exceptions such as overflow, divide-by-zero,
and null dereferences have well defined exception classes and are on a par with
application-level error conditions. </p>

<h2><a name="_Toc251613419"></a><a name="_Toc486309880">16.1 Causes of
exceptions</a></h2>

<p class="MsoNormal">Exception can be thrown in two different ways. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>
statement (§8.9.5) throws an exception immediately and unconditionally. Control
never reaches the statement immediately following the <span class="Codefragment"><span style="font-size:10.0pt">throw</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Certain exceptional conditions that arise during the processing
of C# statements and expression cause an exception in certain circumstances
when the operation cannot be completed normally. For example, an integer
division operation (§7.8.2) throws a <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span> if the
denominator is zero. See §16.4 for a list of the various exceptions that can
occur in this way.</p>

<h2><a name="_Toc251613420"></a><a name="_Toc486309881">16.2 The
System.Exception class</a></h2>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">System.Exception</span></span>
class is the base type of all exceptions. This class has a few notable
properties that all exceptions share:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">Message</span></span>
is a read-only property of type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span> that contains a human-readable
description of the reason for the exception.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">InnerException</span></span>
is a read-only property of type <span class="Codefragment"><span style="font-size:10.0pt">Exception</span></span>. If its value is non-null, it
refers to the exception that caused the current exception—that is, the current
exception was raised in a catch block handling the <span class="Codefragment"><span style="font-size:10.0pt">InnerException</span></span>. Otherwise, its value is
null, indicating that this exception was not caused by another exception. The
number of exception objects chained together in this manner can be arbitrary.</p>

<p class="MsoNormal">The value of these properties can be specified in calls to
the instance constructor for <span class="Codefragment"><span style="font-size:
10.0pt">System.Exception</span></span>.</p>

<h2><a name="_Toc251613421"></a><a name="_Ref520102499"></a><a name="_Toc486309882">16.3 How exceptions are handled</a></h2>

<p class="MsoNormal">Exceptions are handled by a <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement (§8.10).</p>

<p class="MsoNormal">When an exception occurs, the system searches for the
nearest <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause that can handle the exception, as determined by the run-time type of the
exception. First, the current method is searched for a lexically enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span> statement,
and the associated catch clauses of the try statement are considered in order.
If that fails, the method that called the current method is searched for a
lexically enclosing <span class="Codefragment"><span style="font-size:10.0pt">try</span></span>
statement that encloses the point of the call to the current method. This
search continues until a <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause is found that can handle the current exception, by naming an exception
class that is of the same class, or a base class, of the run-time type of the
exception being thrown. A <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span>
clause that doesn’t name an exception class can handle any exception.</p>

<p class="MsoNormal">Once a matching catch clause is found, the system prepares
to transfer control to the first statement of the catch clause. Before
execution of the catch clause begins, the system first executes, in order, any <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> clauses
that were associated with try statements more nested that than the one that
caught the exception. </p>

<p class="MsoNormal">If no matching catch clause is found, one of two things
occurs:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the search for a matching catch clause reaches a static
constructor (§10.12) or static field initializer, then a <span class="Codefragment"><span style="font-size:10.0pt">System.TypeInitializationException</span></span>
is thrown at the point that triggered the invocation of the static constructor.
The inner exception of the <span class="Codefragment"><span style="font-size:
10.0pt">System.TypeInitializationException</span></span> contains the exception
that was originally thrown.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the search for matching catch clauses reaches the code that
initially started the thread, then execution of the thread is terminated. The
impact of such termination is implementation-defined.</p>

<p class="MsoNormal">Exceptions that occur during destructor execution are worth
special mention. If an exception occurs during destructor execution, and that
exception is not caught, then the execution of that destructor is terminated
and the destructor of the base class (if any) is called. If there is no base
class (as in the case of the <span class="Codefragment"><span style="font-size:
10.0pt">object</span></span> type) or if there is no base class destructor,
then the exception is discarded.</p>

<h2><a name="_Toc251613422"></a><a name="_Toc486309883"></a><a name="_Ref486144916">16.4 Common Exception Classes</a></h2>

<p class="MsoNormal">The following exceptions are thrown by certain C#
operations.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" width="637" style="width:477.9pt;margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.ArithmeticException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">A base class for exceptions that occur during arithmetic
  operations, such as <span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span>
  and <span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span>.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.ArrayTypeMismatchException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when a store into an array fails because the actual
  type of the stored element is incompatible with the actual type of the array.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.DivideByZeroException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when an attempt to divide an integral value by zero
  occurs.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.IndexOutOfRangeException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when an attempt to index an array via an index that is
  less than zero or outside the bounds of the array.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.InvalidCastException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when an explicit conversion from a base type or
  interface to a derived type fails at run time.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when a <span class="Codefragment"><span style="font-size:
  10.0pt">null</span></span> reference is used in a way that causes the
  referenced object to be required.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.OutOfMemoryException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when an attempt to allocate memory (via <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>) fails.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.OverflowException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when an arithmetic operation in a <span class="Codefragment"><span style="font-size:10.0pt">checked</span></span>
  context overflows.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.StackOverflowException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when the execution stack is exhausted by having too
  many pending method calls; typically indicative of very deep or unbounded
  recursion.</p>
  </td>
 </tr>
 <tr>
  <td width="320" valign="top" style="width:239.8pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">System.TypeInitializationException</span></span></p>
  </td>
  <td width="317" valign="top" style="width:238.1pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Thrown when a static constructor throws an exception, and no <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> clauses
  exists to catch it.</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section16">

<h1><a name="_Ref456607421"></a><a name="_Toc445783092"></a><a name="_Toc456601364"></a><a name="_Toc251613423"></a><a name="_Ref463497458">17.
Attributes</a></h1>

<p class="MsoNormal"><a name="_Toc445783095">Much of the C# language enables the
programmer to specify declarative information about the entities defined in the
program. For example, the accessibility of a method in a class is specified by
decorating it with the </a><span class="Production">method-modifiers</span> <span class="Codefragment"><span style="font-size:10.0pt">public</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">protected</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">internal</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">private</span></span>.</p>

<p class="MsoNormal">C# enables programmers to invent new kinds of declarative
information, called <span class="Term">attributes</span>. Programmers can then
attach attributes to various program entities, and retrieve attribute
information in a run-time environment. For instance, a framework might define a
<span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span>
attribute that can be placed on certain program elements (such as classes and
methods) to provide a mapping from those program elements to their
documentation.</p>

<p class="MsoNormal">Attributes are defined through the declaration of attribute
classes (§17.1), which may have positional and named parameters (§17.1.2). Attributes are attached to entities in a C# program using attribute
specifications (§17.2), and can be retrieved at run-time as attribute instances
(§17.3).</p>

<h2><a name="_Toc251613424"></a><a name="_Toc466975628"></a><a name="_Ref461621152">17.1 Attribute classes</a></h2>

<p class="MsoNormal">A class that derives from the abstract class <span class="Codefragment"><span style="font-size:10.0pt">System.Attribute</span></span>,
whether directly or indirectly, is an <span class="Term">attribute class</span>.
The declaration of an attribute class defines a new kind of <span class="Term">attribute</span>
that can be placed on a declaration. By convention, attribute classes are named
with a suffix of <span class="Codefragment"><span style="font-size:10.0pt">Attribute</span></span>.
Uses of an attribute may either include or omit this suffix.</p>

<h3><a name="_Toc466975629"></a><a name="_Toc251613425">17.1.1 Attribute usage</a></h3>

<p class="MsoNormal">The attribute <span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span> (§17.4.1) is used to describe how an attribute class can be used.</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span>
has a positional parameter (§17.1.2) that enables an attribute class to specify
the kinds of declarations on which it can be used. The example</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.Class |
AttributeTargets.Interface)]<br>
public class SimpleAttribute: Attribute <br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">defines an attribute class named <span class="Codefragment"><span style="font-size:10.0pt">SimpleAttribute</span></span> that can be placed on <span class="Production">class-declaration</span>s and <span class="Production">interface-declaration</span>s
only. The example </p>

<p class="Code">[Simple] class Class1 {...}</p>

<p class="Code">[Simple] interface Interface1 {...}</p>

<p class="MsoNormal">shows several uses of the <span class="Codefragment"><span style="font-size:10.0pt">Simple</span></span> attribute. Although this
attribute is defined with the name <span class="Codefragment"><span style="font-size:10.0pt">SimpleAttribute</span></span>, when this attribute is
used, the <span class="Codefragment"><span style="font-size:10.0pt">Attribute</span></span>
suffix may be omitted, resulting in the short name <span class="Codefragment"><span style="font-size:10.0pt">Simple</span></span>. Thus, the example above is
semantically equivalent to the following:</p>

<p class="Code">[SimpleAttribute] class Class1 {...}</p>

<p class="Code">[SimpleAttribute] interface Interface1 {...}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span>
has a named parameter (§17.1.2) called <span class="Codefragment"><span style="font-size:10.0pt">AllowMultiple</span></span>, which indicates whether
the attribute can be specified more than once for a given entity. If <span class="Codefragment"><span style="font-size:10.0pt">AllowMultiple</span></span>
for an attribute class is true, then that attribute class is a <span class="Term">multi-use attribute class</span>, and can be specified more than
once on an entity. If <span class="Codefragment"><span style="font-size:10.0pt">AllowMultiple</span></span>
for an attribute class is false or it is unspecified, then that attribute class
is a <span class="Term">single-use attribute class</span>, and can be specified
at most once on an entity.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]<br>
public class AuthorAttribute: Attribute<br>
{<br>
&nbsp;&nbsp; private string name;</p>

<p class="Code">&nbsp;&nbsp; public AuthorAttribute(string name) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.name = name;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Name {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return name; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">defines a multi-use attribute class named <span class="Codefragment"><span style="font-size:10.0pt">AuthorAttribute</span></span>.
The example </p>

<p class="Code">[Author("Brian Kernighan"), Author("Dennis Ritchie")]
<br>
class Class1<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="MsoNormal">shows a class declaration with two uses of the <span class="Codefragment"><span style="font-size:10.0pt">Author</span></span>
attribute.</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span>
has another named parameter called <span class="Codefragment"><span style="font-size:10.0pt">Inherited</span></span>, which indicates whether the
attribute, when specified on a base class, is also inherited by classes that
derive from that base class. If <span class="Codefragment"><span style="font-size:10.0pt">Inherited</span></span> for an attribute class is
true, then that attribute is inherited. If <span class="Codefragment"><span style="font-size:10.0pt">Inherited</span></span> for an attribute class is
false then that attribute is not inherited. If it is unspecified, its default
value is true.</p>

<p class="MsoNormal">An attribute class <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> not having an <span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span>
attribute attached to it, as in</p>

<p class="Code">using System;</p>

<p class="Code">class X: Attribute {...}</p>

<p class="MsoNormal">is equivalent to the following:</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(<br>
&nbsp;&nbsp; AttributeTargets.All,<br>
&nbsp;&nbsp; AllowMultiple = false,<br>
&nbsp;&nbsp; Inherited = true)<br>
]<br>
class X: Attribute {...}</p>

<h3><a name="_Toc251613426"></a><a name="_Toc466975630"></a><a name="_Ref461621174">17.1.2 Positional and named parameters</a></h3>

<p class="MsoNormal">Attribute classes can have <span class="Term">positional
parameters</span> and <span class="Term">named parameters</span>. Each public
instance constructor for an attribute class defines a valid sequence of
positional parameters for that attribute class. Each non-static public
read-write field and property for an attribute class defines a named parameter
for the attribute class.</p>

<p class="MsoNormal">The example</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.Class)]<br>
public class HelpAttribute: Attribute<br>
{<br>
&nbsp;&nbsp; public HelpAttribute(string url) {&nbsp;&nbsp;&nbsp;&nbsp; // Positional parameter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Topic {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Named parameter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Url {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">defines an attribute class named <span class="Codefragment"><span style="font-size:10.0pt">HelpAttribute</span></span> that has one positional
parameter, <span class="Codefragment"><span style="font-size:10.0pt">url</span></span>,
and one named parameter, <span class="Codefragment"><span style="font-size:10.0pt">Topic</span></span>.
Although it is non-static and public, the property <span class="Codefragment"><span style="font-size:10.0pt">Url</span></span> does not define a named parameter,
since it is not read-write.</p>

<p class="MsoNormal">This attribute class might be used as follows:</p>

<p class="Code">[Help("http://www.mycompany.com/.../Class1.htm")]<br>
class Class1<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Code">[Help("http://www.mycompany.com/.../Misc.htm", Topic =
"Class2")]<br>
class Class2<br>
{<br>
&nbsp;&nbsp; ...<br>
}</p>

<h3><a name="_Toc251613427"></a><a name="_Toc466975631"></a><a name="_Ref461621294">17.1.3 Attribute parameter types</a></h3>

<p class="MsoNormal">The types of positional and named parameters for an
attribute class are limited to the <span class="Term">attribute parameter types</span>,
which are:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>One of the following types: <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Code1">sbyte</span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An enum type, provided it has public accessibility and the types
in which it is nested (if any) also have public accessibility (§17.2).</p>

<p class="MsoListBullet"><a name="_Toc466975632"></a><a name="_Ref461621220"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Single-dimensional arrays of the above types.</a></p>

<p class="MsoListBullet" style="margin-left:0in;text-indent:0in">A constructor
argument or public field which does not have one of these types, cannot be used
as a positional or named parameter in an attribute specification.</p>

<h2><a name="_Toc251613428"></a><a name="_Ref6217116">17.2 Attribute
specification</a></h2>

<p class="MsoNormal"><span class="Term">Attribute specification</span> is the
application of a previously defined attribute to a declaration. An attribute is
a piece of additional declarative information that is specified for a
declaration. Attributes can be specified at global scope (to specify attributes
on the containing assembly or module) and for <span class="Production">type-declaration</span>s
(§9.6), <span class="Production">class-member-declaration</span>s (§10.1.5), <span class="Production">interface-member-declaration</span>s (§13.2), <span class="Production">struct-member-declaration</span>s (§11.2), <span class="Production">enum-member-declaration</span>s (§14.3), <span class="Production">accessor-declaration</span>s
(§10.7.2), <span class="Production">event-accessor-declarations</span> (§10.8.1), and <span class="Production">formal-parameter-lists</span> (§10.6.1).</p>

<p class="MsoNormal">Attributes are specified in <span class="Term">attribute
sections</span>. An attribute section consists of a pair of square brackets,
which surround a comma-separated list of one or more attributes. The order in
which attributes are specified in such a list, and the order in which sections
attached to the same program entity are arranged, is not significant. For
instance, the attribute specifications <span class="Codefragment"><span style="font-size:10.0pt">[A][B]</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">[B][A]</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">[A,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">B]</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">[B,</span></span> <span class="Codefragment"><span style="font-size:10.0pt">A]</span></span> are equivalent.</p>

<p class="Grammar">global-attributes:<br>
global-attribute-sections</p>

<p class="Grammar">global-attribute-sections:<br>
global-attribute-section<br>
global-attribute-sections&nbsp;&nbsp; global-attribute-section</p>

<p class="Grammar">global-attribute-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
global-attribute-target-specifier&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]<br>
[</span></span>&nbsp;&nbsp; global-attribute-target-specifier&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">global-attribute-target-specifier:<br>
global-attribute-target&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span></p>

<p class="Grammar">global-attribute-target:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">assembly<br>
module</span></span></p>

<p class="Grammar">attributes:<br>
attribute-sections</p>

<p class="Grammar">attribute-sections:<br>
attribute-section<br>
attribute-sections&nbsp;&nbsp; attribute-section</p>

<p class="Grammar">attribute-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
attribute-target-specifier<sub>opt</sub>&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]<br>
[</span></span>&nbsp;&nbsp; attribute-target-specifier<sub>opt</sub>&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">attribute-target-specifier:<br>
attribute-target&nbsp; &nbsp;<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span></p>

<p class="Grammar">attribute-target:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">field</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">method</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">param</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">property</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return<br>
type</span></span></p>

<p class="Grammar"><span lang="FR">attribute-list:<br>
attribute<br>
attribute-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:
10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp; attribute</span></p>

<p class="Grammar"><span lang="FR">attribute:<br>
attribute-name&nbsp;&nbsp; attribute-arguments<sub>opt</sub></span></p>

<p class="Grammar"><span lang="FR">attribute-name:<br>
&nbsp;type-name</span></p>

<p class="Grammar"><span lang="FR">attribute-arguments:<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">(</span></span><span lang="FR">&nbsp;&nbsp; positional-argument-list<sub>opt</sub>&nbsp;
&nbsp;</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">)<br>
(</span></span><span lang="FR">&nbsp;&nbsp; positional-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp; named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">)<br>
(</span></span><span lang="FR">&nbsp;&nbsp; named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar"><span lang="FR">positional-argument-list:<br>
positional-argument<br>
positional-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp;
positional-argument</span></p>

<p class="Grammar"><span lang="FR">positional-argument:<br>
</span>argument-name<sub>opt</sub>&nbsp;&nbsp; <span lang="FR">attribute-argument-expression</span></p>

<p class="Grammar"><span lang="FR">named-argument-list:<br>
named-argument<br>
named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp;
named-argument</span></p>

<p class="Grammar">named-argument:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; attribute-argument-expression</p>

<p class="Grammar">attribute-argument-expression:<br>
expression</p>

<p class="MsoNormal">An attribute consists of an <span class="Production">attribute-name</span>
and an optional list of positional and named arguments. The positional
arguments (if any) precede the named arguments. A positional argument consists
of an <span class="Production">attribute-argument-expression</span>; a named
argument consists of a name, followed by an equal sign, followed by an <span class="Production">attribute-argument-expression</span>, which, together, are
constrained by the same rules as simple assignment. The order of named
arguments is not significant.</p>

<p class="MsoNormal">The <span class="Production">attribute-name</span> identifies
an attribute class. If the form of <span class="Production">attribute-name</span>
is <span class="Production">type-name</span> then this name must refer to an
attribute class. Otherwise, a compile-time error occurs. The example</p>

<p class="Code">class Class1 {}</p>

<p class="Code">[Class1] class Class2 {}&nbsp;&nbsp; // Error</p>

<p class="MsoNormal">results in a compile-time error because it attempts to use <span class="Codefragment"><span style="font-size:10.0pt">Class1</span></span> as an
attribute class when <span class="Codefragment"><span style="font-size:10.0pt">Class1</span></span>
is not an attribute class.</p>

<p class="MsoNormal">Certain contexts permit the specification of an attribute on
more than one target. A program can explicitly specify the target by including
an <span class="Production">attribute-target-specifier</span>. When an attribute
is placed at the global level, a <span class="Production">global-attribute-target-specifier</span>
is required. In all other locations, a reasonable default is applied, but an <span class="Production">attribute-target-specifier</span> can be used to affirm or
override the default in certain ambiguous cases (or to just affirm the default
in non-ambiguous cases). Thus, typically, <span class="Production">attribute-target-specifier</span>s
can be omitted except at the global level. The potentially ambiguous contexts
are resolved as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified at global scope can apply either to the
target assembly or the target module. No default exists for this context, so an
<span class="Production">attribute-target-specifier</span> is always required in
this context. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">assembly</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the target assembly; the presence of
the <span class="Codefragment"><span style="font-size:10.0pt">module</span></span>
<span class="Production">attribute-target-specifier</span> indicates that the
attribute applies to the target module. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on a delegate declaration can apply either
to the delegate being declared or to its return value. In the absence of an <span class="Production">attribute-target-specifier</span>, the attribute applies to
the delegate. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">type</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the delegate; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the return value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on a method declaration can apply either
to the method being declared or to its return value. In the absence of an <span class="Production">attribute-target-specifier</span>, the attribute applies to
the method. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the method; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the return value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on an operator declaration can apply
either to the operator being declared or to its return value. In the absence of
an <span class="Production">attribute-target-specifier</span>, the attribute
applies to the operator. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the operator; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the return value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on an event declaration that omits event
accessors can apply to the event being declared, to the associated field (if
the event is not abstract), or to the associated add and remove methods. In the
absence of an <span class="Production">attribute-target-specifier</span>, the
attribute applies to the event. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">event</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the event; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">field</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the field; and the presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the methods.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on a get accessor declaration for a
property or indexer declaration can apply either to the associated method or to
its return value. In the absence of an <span class="Production">attribute-target-specifier</span>,
the attribute applies to the method. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the method; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the return value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on a set accessor for a property or
indexer declaration can apply either to the associated method or to its lone
implicit parameter. In the absence of an <span class="Production">attribute-target-specifier</span>,
the attribute applies to the method. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the method; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">param</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the parameter; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the return value.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An attribute specified on an add or remove accessor declaration
for an event declaration can apply either to the associated method or to its
lone parameter. In the absence of an <span class="Production">attribute-target-specifier</span>,
the attribute applies to the method. The presence of the <span class="Codefragment"><span style="font-size:10.0pt">method</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the method; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">param</span></span> <span class="Production">attribute-target-specifier</span>
indicates that the attribute applies to the parameter; the presence of the <span class="Codefragment"><span style="font-size:10.0pt">return</span></span> <span class="Production">attribute-target-specifier</span> indicates that the attribute
applies to the return value.</p>

<p class="MsoNormal">In other contexts, inclusion of an <span class="Production">attribute-target-specifier</span>
is permitted but unnecessary. For instance, a class declaration may either
include or omit the specifier <span class="Codefragment"><span style="font-size:
10.0pt">type</span></span>:</p>

<p class="Code">[type: Author("Brian Kernighan")]<br>
class Class1 {}</p>

<p class="Code">[Author("Dennis Ritchie")]<br>
class Class2 {}</p>

<p class="MsoNormal">It is an error to specify an invalid <span class="Production">attribute-target-specifier</span>.
For instance, the specifier <span class="Codefragment"><span style="font-size:
10.0pt">param</span></span> cannot be used on a class declaration:</p>

<p class="Code">[param: Author("Brian Kernighan")]&nbsp;&nbsp;&nbsp;&nbsp; // Error<br>
class Class1 {}</p>

<p class="MsoNormal">By convention, attribute classes are named with a suffix of <span class="Codefragment"><span style="font-size:10.0pt">Attribute</span></span>. An <span class="Production">attribute-name</span> of the form <span class="Production">type-name</span>
may either include or omit this suffix. If an attribute class is found both
with and without this suffix, an ambiguity is present, and a compile-time error
results. If the <span class="Production">attribute-name</span> is spelled such
that its right-most <span class="Production">identifier</span> is a verbatim
identifier (§2.4.2), then only an attribute without a suffix is matched, thus
enabling such an ambiguity to be resolved. The example</p>

<p class="Code"><a name="_Toc466975633"></a><a name="_Ref461621235">using System;</a></p>

<p class="Code">[AttributeUsage(AttributeTargets.All)]<br>
public class X: Attribute<br>
{}</p>

<p class="Code">[AttributeUsage(AttributeTargets.All)]<br>
public class XAttribute: Attribute<br>
{}</p>

<p class="Code">[X]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // Error: ambiguity<br>
class Class1 {}</p>

<p class="Code">[XAttribute]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Refers to XAttribute<br>
class Class2 {}</p>

<p class="Code">[@X]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Refers to X<br>
class Class3 {}</p>

<p class="Code">[@XAttribute]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Refers to XAttribute<br>
class Class4 {}</p>

<p class="MsoNormal">shows two attribute classes named <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">XAttribute</span></span>. The attribute <span class="Codefragment"><span style="font-size:10.0pt">[X]</span></span> is
ambiguous, since it could refer to either <span class="Codefragment"><span style="font-size:10.0pt">X</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">XAttribute</span></span>. Using a verbatim identifier
allows the exact intent to be specified in such rare cases. The attribute <span class="Codefragment"><span style="font-size:10.0pt">[XAttribute]</span></span> is
not ambiguous (although it would be if there was an attribute class named <span class="Codefragment"><span style="font-size:10.0pt">XAttributeAttribute</span></span>!).
If the declaration for class <span class="Codefragment"><span style="font-size:
10.0pt">X</span></span> is removed, then both attributes refer to the attribute
class named <span class="Codefragment"><span style="font-size:10.0pt">XAttribute</span></span>,
as follows:</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.All)]<br>
public class XAttribute: Attribute<br>
{}</p>

<p class="Code">[X]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Refers to XAttribute<br>
class Class1 {}</p>

<p class="Code">[XAttribute]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Refers to XAttribute<br>
class Class2 {}</p>

<p class="Code">[@X]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error: no attribute named "X"<br>
class Class3 {}</p>

<p class="MsoNormal">It is a compile-time error to use a single-use attribute
class more than once on the same entity. The example</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.Class)]<br>
public class HelpStringAttribute: Attribute<br>
{<br>
&nbsp;&nbsp; string value;</p>

<p class="Code">&nbsp;&nbsp; public HelpStringAttribute(string value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.value = value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public string Value {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">[HelpString("Description of Class1")]<br>
[HelpString("Another description of Class1")]<br>
public class Class1 {}</p>

<p class="MsoNormal">results in a compile-time error because it attempts to use <span class="Codefragment"><span style="font-size:10.0pt">HelpString</span></span>,
which is a single-use attribute class, more than once on the declaration of <span class="Codefragment"><span style="font-size:10.0pt">Class1</span></span>.</p>

<p class="MsoNormal">An expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is an <span class="Production">attribute-argument-expression</span>
if all of the following statements are true:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The type of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is an attribute parameter type (§17.1.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>At compile-time, the value of <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> can be resolved to one of the
following:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A constant
value.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A <span class="Codefragment"><span style="font-size:10.0pt">System.Type</span></span>
object.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>A
one-dimensional array of <span class="Production">attribute-argument-expression</span>s.</p>

<p class="MsoNormal">For example:</p>

<p class="Code">using System;</p>

<p class="Code">[AttributeUsage(AttributeTargets.Class)]<br>
public class TestAttribute: Attribute<br>
{<br>
&nbsp;&nbsp; public int P1 {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public Type P2 {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public object P3 {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">[Test(P1 = 1234, P3 = new int[] {1, 3, 5}, P2 = typeof(float))]<br>
class MyClass {}</p>

<p class="MsoNormal">A <span class="Production">typeof-expression</span> (§7.6.11) used as an attribute argument expression can reference a non-generic type, a
closed constructed type, or an unbound generic type, but it cannot reference an
open type. This is to ensure that the expression can be resolved at compile-time.</p>

<p class="Code">class A: Attribute<br>
{<br>
&nbsp;&nbsp; public A(Type t) {...}<br>
}</p>

<p class="Code">class G&lt;T&gt;<br>
{<br>
&nbsp;&nbsp; [A(typeof(T))] T t;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Error, open type in attribute<br>
}</p>

<p class="Code">class X<br>
{<br>
&nbsp;&nbsp; [A(typeof(List&lt;int&gt;))] int x;&nbsp;&nbsp;&nbsp; // Ok, closed constructed type<br>
&nbsp;&nbsp; [A(typeof(List&lt;&gt;))] int y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Ok, unbound generic type<br>
}<a name="_Ref6931684"></a></p>

<h2><a name="_Toc251613429"></a><a name="_Ref174236832">17.3 Attribute
instances</a></h2>

<p class="MsoNormal">An <span class="Term">attribute instance</span> is an instance
that represents an attribute at run-time. An attribute is defined with an
attribute class, positional arguments, and named arguments. An attribute
instance is an instance of the attribute class that is initialized with the
positional and named arguments.</p>

<p class="MsoNormal">Retrieval of an attribute instance involves both
compile-time and run-time processing, as described in the following sections.</p>

<h3><a name="_Toc251613430"></a><a name="_Toc466975634">17.3.1 Compilation of an
attribute</a></h3>

<p class="MsoNormal">The compilation of an <span class="Production">attribute</span>
with attribute class <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
<span class="Production">positional-argument-list</span> <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and <span class="Production">named-argument-list</span> <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, consists of the following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Follow the compile-time processing steps for compiling an <span class="Production">object-creation-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">new T(P)</span></span>. These
steps either result in a compile-time error, or determine an instance
constructor <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
on <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> that
can be invoked at run-time.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
does not have public accessibility, then a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each <span class="Production">named-argument</span> <span class="Codefragment"><span style="font-size:10.0pt">Arg</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Let <span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> be the <span class="Production">identifier</span> of the <span class="Production">named-argument</span>
  <span class="Codefragment"><span style="font-size:10.0pt">Arg</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span><span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> must
identify a non-static read-write public field or property on <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. If <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> has no such
field or property, then a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Keep the following information for run-time instantiation of the
attribute: the attribute class <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>, the instance constructor <span class="Codefragment"><span style="font-size:10.0pt">C</span></span> on <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, the <span class="Production">positional-argument-list</span>
<span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and the
<span class="Production">named-argument-list</span> <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>.</p>

<h3><a name="_Toc251613431"></a><a name="_Toc466975635">17.3.2 Run-time
retrieval of an attribute instance</a></h3>

<p class="MsoNormal">Compilation of an <span class="Production">attribute</span>
yields an attribute class <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>,
an instance constructor <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
on <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, a <span class="Production">positional-argument-list</span> <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>, and a <span class="Production">named-argument-list</span>
<span class="Codefragment"><span style="font-size:10.0pt">N</span></span>. Given
this information, an attribute instance can be retrieved at run-time using the
following steps:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Follow the run-time processing steps for executing an <span class="Production">object-creation-expression</span> of the form <span class="Codefragment"><span style="font-size:10.0pt">new</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T(P)</span></span>, using the
instance constructor <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>
as determined at compile-time. These steps either result in an exception, or
produce an instance <span class="Codefragment"><span style="font-size:10.0pt">O</span></span>
of <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For each <span class="Production">named-argument</span> <span class="Codefragment"><span style="font-size:10.0pt">Arg</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>, in order:</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Let <span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> be the <span class="Production">identifier</span> of the <span class="Production">named-argument</span>
  <span class="Codefragment"><span style="font-size:10.0pt">Arg</span></span>. If
<span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> does
not identify a non-static public read-write field or property on <span class="Codefragment"><span style="font-size:10.0pt">O</span></span>, then an
exception is thrown.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Let <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span> be the
result of evaluating the <span class="Production">attribute-argument-expression</span>
of <span class="Codefragment"><span style="font-size:10.0pt">Arg</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>If <span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> identifies
a field on <span class="Codefragment"><span style="font-size:10.0pt">O</span></span>,
then set this field to <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">Name</span></span> identifies
a property on <span class="Codefragment"><span style="font-size:10.0pt">O</span></span>.
Set this property to <span class="Codefragment"><span style="font-size:10.0pt">Value</span></span>.</p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>The result is <span class="Codefragment"><span style="font-size:10.0pt">O</span></span>, an instance
of the attribute class <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>
that has been initialized with the <span class="Production">positional-argument-list</span>
<span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and the
<span class="Production">named-argument-list</span> <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>.</p>

<h2><a name="_Toc251613432"></a><a name="_Toc466975636">17.4 Reserved
attributes</a></h2>

<p class="MsoNormal">A small number of attributes affect the language in some
way. These attributes include:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">System.AttributeUsageAttribute</span></span>
(§17.4.1), which is used to describe the ways in which an attribute class can
be used.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">System.Diagnostics.ConditionalAttribute</span></span>
(§17.4.2), which is used to define conditional methods.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">System.ObsoleteAttribute</span></span>
(§17.4.3), which is used to mark a member as obsolete.</p>

<h3><a name="_Toc251613433"></a><a name="_Toc466975637"></a><a name="_Ref461621265">17.4.1 The AttributeUsage attribute</a></h3>

<p class="MsoNormal">The attribute <span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span> is used to describe the
manner in which the attribute class can be used.</p>

<p class="MsoNormal">A class that is decorated with the <span class="Codefragment"><span style="font-size:10.0pt">AttributeUsage</span></span> attribute must derive
from <span class="Codefragment"><span style="font-size:10.0pt">System.Attribute</span></span>,
either directly or indirectly. Otherwise, a compile-time error occurs.</p>

<p class="Code">namespace System<br>
{<br>
&nbsp;&nbsp; [AttributeUsage(AttributeTargets.Class)]<br>
&nbsp;&nbsp; public class AttributeUsageAttribute: Attribute<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public AttributeUsageAttribute(AttributeTargets validOn) {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual bool AllowMultiple { get {...} set {...} }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual bool Inherited { get {...} set {...} }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public virtual AttributeTargets ValidOn { get {...} }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; public enum AttributeTargets<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assembly &nbsp;&nbsp; = 0x0001,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module &nbsp;&nbsp;&nbsp;&nbsp; = 0x0002,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0x0004,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Struct &nbsp;&nbsp;&nbsp;&nbsp; = 0x0008,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Enum &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0x0010,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Constructor = 0x0020,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method &nbsp;&nbsp;&nbsp;&nbsp; = 0x0040,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Property &nbsp;&nbsp; = 0x0080,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Field &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0x0100,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Event &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 0x0200,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Interface &nbsp; = 0x0400,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Parameter &nbsp; = 0x0800,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delegate &nbsp;&nbsp; = 0x1000,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ReturnValue = 0x2000,</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; All = Assembly | Module | Class | Struct | Enum |
Constructor | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method | Property | Field | Event | Interface | Parameter | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Delegate | ReturnValue<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc466975638"></a><a name="_Toc251613434"></a><a name="_Ref513828631">17.4.2 The Conditional attribute</a></h3>

<p class="MsoNormal">The attribute <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span>&nbsp;enables the definition of <span class="Term">conditional methods</span> and <span class="Term">conditional
attribute classes</span>. </p>

<p class="Code">namespace System.Diagnostics<br>
{<br>
&nbsp;&nbsp; [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AllowMultiple = true)]<br>
&nbsp;&nbsp; public class ConditionalAttribute: Attribute<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ConditionalAttribute(string conditionString) {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string ConditionString { get {...} }<br>
&nbsp;&nbsp; }<br>
}</p>

<h4><a name="_Toc251613435"></a><a name="_Toc99384438"></a><a name="_Toc67150785">17.4.2.1 Conditional methods</a></h4>

<p class="MsoNormal">A method decorated with the <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span> attribute is a conditional
method. The <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span>
attribute indicates a condition by testing a conditional compilation symbol.
Calls to a conditional method are either included or omitted depending on
whether this symbol is defined at the point of the call. If the symbol is
defined, the call is included; otherwise, the call (including evaluation of the
receiver and parameters of the call) is omitted.</p>

<p class="MsoNormal">A conditional method is subject to the following
restrictions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The conditional method must be a method in a <span class="Production">class-declaration</span> or <span class="Production">struct-declaration</span>.
A compile-time error occurs if the <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span> attribute is specified on a
method in an interface declaration.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The conditional method must have a return type of <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The conditional method must not be marked with the <span class="Codefragment"><span style="font-size:10.0pt">override</span></span>
modifier. A conditional method may be marked with the <span class="Codefragment"><span style="font-size:10.0pt">virtual</span></span> modifier, however. Overrides of
such a method are implicitly conditional, and must not be explicitly marked
with a <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span>
attribute.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The conditional method must not be an implementation of an
interface method. Otherwise, a compile-time error occurs.</p>

<p class="MsoNormal">In addition, a compile-time error occurs if a conditional
method is used in a <span class="Production">delegate-creation-expression</span>.
The example</p>

<p class="Code">#define DEBUG</p>

<p class="Code">using System;<br>
using System.Diagnostics;</p>

<p class="Code">class Class1 <br>
{<br>
&nbsp;&nbsp; [Conditional("DEBUG")]<br>
&nbsp;&nbsp; public static void M() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Executed Class1.M");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Class2<br>
{<br>
&nbsp;&nbsp; public static void Test() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class1.M();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">declares <span class="Codefragment"><span style="font-size:
10.0pt">Class1.M</span></span> as a conditional method. <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>'s <span class="Codefragment"><span style="font-size:10.0pt">Test</span></span> method
calls this method. Since the conditional compilation symbol <span class="Codefragment"><span style="font-size:10.0pt">DEBUG</span></span> is defined,
if <span class="Codefragment"><span style="font-size:10.0pt">Class2.Test</span></span>
is called, it will call <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>.
If the symbol <span class="Codefragment"><span style="font-size:10.0pt">DEBUG</span></span>
had not been defined, then <span class="Codefragment"><span style="font-size:
10.0pt">Class2.Test</span></span> would not call <span class="Codefragment"><span style="font-size:10.0pt">Class1.M</span></span>.</p>

<p class="MsoNormal">It is important to note that the inclusion or exclusion of a
call to a conditional method is controlled by the conditional compilation
symbols at the point of the call. In the example</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class1.cs</span></span>:</p>

<p class="Code">using System.Diagnostics;</p>

<p class="Code">class Class1 <br>
{<br>
&nbsp;&nbsp; [Conditional("DEBUG")]<br>
&nbsp;&nbsp; public static void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Executed Class1.F");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class2.cs</span></span>:</p>

<p class="Code">#define DEBUG</p>

<p class="Code">class Class2<br>
{<br>
&nbsp;&nbsp; public static void G() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class1.F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F is called<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class3.cs</span></span>:</p>

<p class="Code">#undef DEBUG</p>

<p class="Code">class Class3<br>
{<br>
&nbsp;&nbsp; public static void H() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class1.F();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // F is not called<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the classes <span class="Codefragment"><span style="font-size:
10.0pt">Class2</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Class3</span></span> each contain calls to the
conditional method <span class="Codefragment"><span style="font-size:10.0pt">Class1.F</span></span>,
which is conditional based on whether or not <span class="Codefragment"><span style="font-size:10.0pt">DEBUG</span></span> is defined. Since this symbol is
defined in the context of <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>
but not <span class="Codefragment"><span style="font-size:10.0pt">Class3</span></span>,
the call to <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
in <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>
is included, while the call to <span class="Codefragment"><span style="font-size:
10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:
10.0pt">Class3</span></span> is omitted.</p>

<p class="MsoNormal"><a name="_Ref513828648">The use of conditional methods in an
inheritance chain can be confusing. Calls made to a conditional method through </a><span class="Codefragment"><span style="font-size:10.0pt">base</span></span>, of the
form <span class="Codefragment"><span style="font-size:10.0pt">base.M</span></span>,
are subject to the normal conditional method call rules. In the example</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class1.cs</span></span>:</p>

<p class="Code">using System;<br>
using System.Diagnostics;</p>

<p class="Code">class Class1 <br>
{<br>
&nbsp;&nbsp; [Conditional("DEBUG")]<br>
&nbsp;&nbsp; public virtual void M() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Class1.M executed");<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class2.cs</span></span>:</p>

<p class="Code">using System;</p>

<p class="Code">class Class2: Class1<br>
{<br>
&nbsp;&nbsp; public override void M() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("Class2.M executed");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.M();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // base.M is not called!<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class3.cs</span></span>:</p>

<p class="Code">#define DEBUG</p>

<p class="Code">using System;</p>

<p class="Code">class Class3<br>
{<br>
&nbsp;&nbsp; public static void Test() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class2 c = new Class2();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c.M();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // M is called<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>
includes a call to the <span class="Codefragment"><span style="font-size:10.0pt">M</span></span>
defined in its base class. This call is omitted because the base method is
conditional based on the presence of the symbol <span class="Codefragment"><span style="font-size:10.0pt">DEBUG</span></span>, which is undefined. Thus, the
method writes to the console “<span class="Codefragment"><span style="font-size:
10.0pt">Class2.M executed</span></span>” only. Judicious use of <span class="Production">pp-declaration</span>s can eliminate such problems.</p>

<h4><a name="_Toc251613436"></a><a name="_Toc99384439"></a><a name="_Toc67150786"></a><a name="_Toc49244609">17.4.2.2 Conditional attribute
classes</a></h4>

<p class="MsoNormal">An attribute class (§17.1) decorated with one or more <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span>
attributes is a <span class="Term">conditional attribute class</span>. A
conditional attribute class is thus associated with the conditional compilation
symbols declared in its <span class="Codefragment"><span style="font-size:10.0pt">Conditional</span></span>
attributes. This example:</p>

<p class="Code">using System;<br>
using System.Diagnostics;<br>
[Conditional("ALPHA")]<br>
[Conditional("BETA")]<br>
public class TestAttribute : Attribute {}</p>

<p class="MsoNormal">declares <span class="Codefragment"><span style="font-size:
10.0pt">TestAttribute</span></span> as a conditional attribute class associated
with the conditional compilations symbols <span class="Codefragment"><span style="font-size:10.0pt">ALPHA</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">BETA</span></span>.</p>

<p class="MsoNormal">Attribute specifications (§17.2) of a conditional attribute
are included if one or more of its associated conditional compilation symbols
is defined at the point of specification, otherwise the attribute specification
is omitted.</p>

<p class="MsoNormal">It is important to note that the inclusion or exclusion of
an attribute specification of a conditional attribute class is controlled by
the conditional compilation symbols at the point of the specification. In the
example</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">test.cs</span></span>:</p>

<p class="Code">using System;<br>
using System.Diagnostics;</p>

<p class="Code">[Conditional(“DEBUG”)]</p>

<p class="Code">public class TestAttribute : Attribute {}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class1.cs</span></span>:</p>

<p class="Code">#define DEBUG</p>

<p class="Code">[Test]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TestAttribute is specified</p>

<p class="Code">class Class1 {}</p>

<p class="MsoNormal" style="margin-left:.25in">File <span class="Codefragment"><span style="font-size:10.0pt">class2.cs</span></span>:</p>

<p class="Code">#undef DEBUG</p>

<p class="Code">[Test] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // TestAttribute is not specified</p>

<p class="Code">class Class2 {}</p>

<p class="MsoNormal">the classes <span class="Codefragment"><span style="font-size:
10.0pt">Class1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span> are each decorated with attribute
<span class="Codefragment"><span style="font-size:10.0pt">Test</span></span>,
which is conditional based on whether or not <span class="Codefragment"><span style="font-size:10.0pt">DEBUG</span></span> is defined. Since this symbol is
defined in the context of <span class="Codefragment"><span style="font-size:10.0pt">Class1</span></span>
but not <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span>,
the specification of the <span class="Codefragment"><span style="font-size:10.0pt">Test</span></span>
attribute on <span class="Codefragment"><span style="font-size:10.0pt">Class1</span></span>
is included, while the specification of the <span class="Codefragment"><span style="font-size:10.0pt">Test</span></span> attribute on <span class="Codefragment"><span style="font-size:10.0pt">Class2</span></span> is
omitted.</p>

<p class="MsoNormal">&nbsp;</p>

<h3><a name="_Toc251613437"></a><a name="_Ref6931683">17.4.3 The Obsolete
attribute</a></h3>

<p class="MsoNormal">The attribute <span class="Codefragment"><span style="font-size:10.0pt">Obsolete</span></span> is used to mark types and
members of types that should no longer be used.</p>

<p class="Code">namespace System<br>
{<br>
&nbsp;&nbsp; [AttributeUsage(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Class | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Struct |<br>
&nbsp;&nbsp; &nbsp;&nbsp; AttributeTargets.Enum | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Interface | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Delegate |<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Method | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Constructor |<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Property | <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Field |<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AttributeTargets.Event,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Inherited = false)<br>
&nbsp;&nbsp; ]<br>
&nbsp;&nbsp; public class ObsoleteAttribute: Attribute<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ObsoleteAttribute() {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ObsoleteAttribute(string message) {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public ObsoleteAttribute(string message, bool error) {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Message { get {...} }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public bool IsError { get {...} }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">If a program uses a type or member that is decorated with
the <span class="Codefragment"><span style="font-size:10.0pt">Obsolete</span></span>
attribute, the compiler issues a warning or an error. Specifically, the
compiler issues a warning if no error parameter is provided, or if the error
parameter is provided and has the value <span class="Codefragment"><span style="font-size:10.0pt">false</span></span>. The compiler issues an error if
the error parameter is specified and has the value <span class="Codefragment"><span style="font-size:10.0pt">true</span></span>. </p>

<p class="MsoNormal">In the example</p>

<p class="Code">[Obsolete("This class is obsolete; use class B
instead")]<br>
class A<br>
{<br>
&nbsp;&nbsp; public void F() {}<br>
}</p>

<p class="Code">class B<br>
{<br>
&nbsp;&nbsp; public void F() {}<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A a = new A(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Warning<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a.F();<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the class <span class="Codefragment"><span style="font-size:
10.0pt">A</span></span> is decorated with the <span class="Codefragment"><span style="font-size:10.0pt">Obsolete</span></span> attribute. Each use of <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> results in
a warning that includes the specified message, “This class is obsolete; use
class B instead.”</p>

<h2><a name="_Toc251613438">17.5 Attributes for Interoperation</a></h2>

<p class="MsoNormal"><em>Note: This section is applicable only to the Microsoft
.NET implementation of C#.</em></p>

<h3><a name="_Toc251613439"></a><a name="_Ref530208779">17.5.1 Interoperation
with COM and Win32 components</a></h3>

<p class="MsoNormal">The .NET run-time provides a large number of attributes that
enable C# programs to interoperate with components written using COM and Win32
DLLs. For example, the <span class="Codefragment"><span style="font-size:10.0pt">DllImport</span></span>
attribute can be used on a <span class="Codefragment"><span style="font-size:
10.0pt">static</span></span> <span class="Codefragment"><span style="font-size:
10.0pt">extern</span></span> method to indicate that the implementation of the
method is to be found in a Win32 DLL. These attributes are found in the <span class="Codefragment"><span style="font-size:10.0pt">System.Runtime.InteropServices</span></span>
namespace, and detailed documentation for these attributes is found in the .NET
runtime documentation.</p>

<h3><a name="_Toc251613440">17.5.2 Interoperation with other .NET languages</a></h3>

<h4><a name="_Toc251613441">17.5.2.1 The IndexerName attribute</a></h4>

<p class="MsoNormal">Indexers are implemented in .NET using indexed properties,
and have a name in the .NET metadata. If no <span class="Codefragment"><span style="font-size:10.0pt">IndexerName</span></span> attribute is present for an
indexer, then the name <span class="Codefragment"><span style="font-size:10.0pt">Item</span></span>
is used by default. The <span class="Codefragment"><span style="font-size:10.0pt">IndexerName</span></span>
attribute enables a developer to override this default and specify a different
name.</p>

<p class="Code">namespace System.Runtime.CompilerServices.CSharp<br>
{<br>
&nbsp;&nbsp; [AttributeUsage(AttributeTargets.Property)]<br>
&nbsp;&nbsp; public class IndexerNameAttribute: Attribute<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public IndexerNameAttribute(string indexerName) {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public string Value { get {...} } <br>
&nbsp;&nbsp; }<br>
}<a name="_Toc466972227"></a><a name="_Toc466975639"></a><a name="_Toc466972237"></a><a name="_Toc466975649"></a><a name="_Toc466972241"></a><a name="_Toc466975653"></a><a name="_Toc466972244"></a><a name="_Toc466975656"></a></p>

</div>

<span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section17">

<h1><a name="_Toc251613442"></a><a name="_Ref520097939">18. Unsafe code</a><a name="_Toc451323509"></a></h1>

<p class="MsoNormal">The core C# language, as defined in the preceding chapters,
differs notably from C and C++ in its omission of pointers as a data type.
Instead, C# provides references and the ability to create objects that are
managed by a garbage collector. This design, coupled with other features, makes
C# a much safer language than C or C++. In the core C# language it is simply
not possible to have an uninitialized variable, a “dangling” pointer, or an
expression that indexes an array beyond its bounds. Whole categories of bugs
that routinely plague C and C++ programs are thus eliminated.</p>

<p class="MsoNormal">While practically every pointer type construct in C or C++
has a reference type counterpart in C#, nonetheless, there are situations where
access to pointer types becomes a necessity. For example, interfacing with the
underlying operating system, accessing a memory-mapped device, or implementing
a time-critical algorithm may not be possible or practical without access to
pointers. To address this need, C# provides the ability to write <span class="Term">unsafe code</span>.</p>

<p class="MsoNormal">In unsafe code it is possible to declare and operate on
pointers, to perform conversions between pointers and integral types, to take
the address of variables, and so forth. In a sense, writing unsafe code is much
like writing C code within a C# program.</p>

<p class="MsoNormal">Unsafe code is in fact a “safe” feature from the perspective
of both developers and users. Unsafe code must be clearly marked with the
modifier <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>,
so developers can’t possibly use unsafe features accidentally, and the
execution engine works to ensure that unsafe code cannot be executed in an
untrusted environment.</p>

<h2><a name="_Toc251613443"></a><a name="_Ref520101501">18.1 Unsafe c</a>ontexts</h2>

<p class="MsoNormal">The unsafe features of C# are available only in <em>unsafe
contexts</em>. An unsafe context is introduced by including an <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span> modifier
in the declaration of a type or member, or by employing an <span class="Production">unsafe-statement</span>:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A declaration of a class, struct, interface, or delegate may
include an <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier, in which case the entire textual extent of that type declaration
(including the body of the class, struct, or interface) is considered an unsafe
context.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A declaration of a field, method, property, event, indexer,
operator, instance constructor, destructor, or static constructor may include
an <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier, in which case the entire textual extent of that member declaration is
considered an unsafe context.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An <span class="Production">unsafe-statement</span> enables the use
of an unsafe context within a <span class="Production">block</span>. The entire
textual extent of the associated <span class="Production">block</span> is considered
an unsafe context.</p>

<p class="MsoNormal">The associated grammar extensions are shown below. For
brevity, ellipses (...) are used to represent productions that appear in
preceding chapters.</p>

<p class="Grammar">class-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">struct-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">interface-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">delegate-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">field-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">method-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">property-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar"><span lang="FR">event-modifier:<br>
...<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">unsafe</span></span></p>

<p class="Grammar"><span lang="FR">indexer-modifier:<br>
...<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">unsafe</span></span></p>

<p class="Grammar">operator-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">constructor-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">destructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; destructor-body<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; destructor-body</p>

<p class="Grammar">static-constructor-modifiers:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>
<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub></p>

<p class="Grammar">embedded-statement:<br>
...<br>
unsafe-statement</p>

<p class="Grammar">unsafe-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span>&nbsp;&nbsp;
block</p>

<p class="MsoNormal">In the example</p>

<p class="Code">public unsafe struct Node<br>
{<br>
&nbsp;&nbsp; public int Value;<br>
&nbsp;&nbsp; public Node* Left;<br>
&nbsp;&nbsp; public Node* Right;<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier specified in the struct declaration causes the entire textual extent
of the struct declaration to become an unsafe context. Thus, it is possible to
declare the <span class="Codefragment"><span style="font-size:10.0pt">Left</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">Right</span></span>
fields to be of a pointer type. The example above could also be written</p>

<p class="Code">public struct Node<br>
{<br>
&nbsp;&nbsp; public int Value;<br>
&nbsp;&nbsp; public unsafe Node* Left;<br>
&nbsp;&nbsp; public unsafe Node* Right;<br>
}</p>

<p class="MsoNormal">Here, the <span class="Codefragment"><span style="font-size:
10.0pt">unsafe</span></span> modifiers in the field declarations cause those
declarations to be considered unsafe contexts.</p>

<p class="MsoNormal">Other than establishing an unsafe context, thus permitting
the use of pointer types, the <span class="Codefragment"><span style="font-size:
10.0pt">unsafe</span></span> modifier has no effect on a type or a member. In
the example</p>

<p class="Code">public class A<br>
{<br>
&nbsp;&nbsp; public unsafe virtual void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* p;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">public class B: A<br>
{<br>
&nbsp;&nbsp; public override void F() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base.F();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier on the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>
method in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
simply causes the textual extent of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> to become an unsafe context in which
the unsafe features of the language can be used. In the override of <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>, there is no
need to re-specify the <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier—unless, of course, the <span class="Codefragment"><span style="font-size:10.0pt">F</span></span> method in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span> itself needs access to unsafe
features.</p>

<p class="MsoNormal">The situation is slightly different when a pointer type is
part of the method’s signature</p>

<p class="Code">public unsafe class A<br>
{<br>
&nbsp;&nbsp; public virtual void F(char* p) {...}<br>
}</p>

<p class="Code">public class B: A<br>
{<br>
&nbsp;&nbsp; public unsafe override void F(char* p) {...}<br>
}</p>

<p class="MsoNormal">Here, because <span class="Codefragment"><span style="font-size:10.0pt">F</span></span>’s signature includes a pointer type,
it can only be written in an unsafe context. However, the unsafe context can be
introduced by either making the entire class unsafe, as is the case in <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>, or by
including an <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier in the method declaration, as is the case in <span class="Codefragment"><span style="font-size:10.0pt">B</span></span>.</p>

<h2><a name="_Toc251613444"></a><a name="_Ref449318995">18.2 Pointer types</a></h2>

<p class="MsoNormal">In an unsafe context, a <span class="Production">type</span>
(§4) may be a <span class="Production">pointer-type</span> as well as a <span class="Production">value-type</span> or a <span class="Production">reference-type</span>.
However, a <i>pointer-type</i> may also be used in a <span class="Codefragment"><span style="font-size:10.0pt">typeof</span></span> expression (§7.6.10.6) outside of an unsafe context as such usage is not unsafe.</p>

<p class="Grammar">type:<br>
...<br>
pointer-type</p>

<p class="MsoNormal">A <span class="Production">pointer-type</span> is written as
an <span class="Production">unmanaged-type</span> or the keyword <span class="Codefragment"><span style="font-size:10.0pt">void</span></span>, followed
by a <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
token:</p>

<p class="Grammar">pointer-type:<br>
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">*</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">void</span></span>
&nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="Grammar">unmanaged-type:<br>
type</p>

<p class="MsoNormal">The type specified before the <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> in a pointer type is called the <span class="Term">referent type</span> of the pointer type. It represents the type of
the variable to which a value of the pointer type points.</p>

<p class="MsoNormal">Unlike references (values of reference types), pointers are
not tracked by the garbage collector—the garbage collector has no knowledge of
pointers and the data to which they point. For this reason a pointer is not
permitted to point to a reference or to a struct that contains references, and
the referent type of a pointer must be an <span class="Production">unmanaged-type</span>.</p>

<p class="MsoNormal">An <span class="Production">unmanaged-type</span> is any type
that isn’t a <span class="Production">reference-type</span> or constructed type, and
doesn’t contain <span class="Production">reference-type</span> or constructed
type fields at any level of nesting. In other words, an <span class="Production">unmanaged-type</span>
is one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">decimal</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any <span class="Production">enum-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any <span class="Production">pointer-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any user-defined <span class="Production">struct-type</span> that is
not a constructed type and contains fields of <span class="Production">unmanaged-type</span>s
only.</p>

<p class="MsoNormal">The intuitive rule for mixing of pointers and references is
that referents of references (objects) are permitted to contain pointers, but
referents of pointers are not permitted to contain references.</p>

<p class="MsoNormal">Some examples of pointer types are given in the table below:</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Example</b></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Description</b></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">byte*</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Pointer to <span class="Codefragment"><span style="font-size:
  10.0pt">byte</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">char*</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Pointer to <span class="Codefragment"><span style="font-size:
  10.0pt">char</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">int**</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Pointer to pointer to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">int*[]</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Single-dimensional array of pointers to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="139" valign="top" style="width:1.45in;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">void*</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Pointer to unknown type</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal">For a given implementation, all pointer types must have the
same size and representation.</p>

<p class="MsoNormal">Unlike C and C++, when multiple pointers are declared in the
same declaration, in C# the <span class="Codefragment"><span style="font-size:
10.0pt">*</span></span> is written along with the underlying type only, not as
a prefix punctuator on each pointer name. For example</p>

<p class="Code">int* pi, pj;&nbsp;&nbsp; // NOT as int *pi, *pj;</p>

<p class="MsoNormal">The value of a pointer having type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span> represents the <em>address</em> of a
variable of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>.
The pointer indirection operator <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> (§18.5.1) may be used to access this
variable. For example, given</p>

<p class="MsoNormal">&nbsp;a variable <span class="Codefragment"><span style="font-size:
10.0pt">P</span></span> of type <span class="Codefragment"><span style="font-size:10.0pt">int*</span></span>, the expression <span class="Codefragment"><span style="font-size:10.0pt">*P</span></span> denotes the <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> variable
found at the address contained in <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>. </p>

<p class="MsoNormal">Like an object reference, a pointer may be <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>. Applying
the indirection operator to a <span class="Codefragment"><span style="font-size:
10.0pt">null</span></span> pointer results in implementation-defined behavior.
A pointer with value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
is represented by all-bits-zero.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>
type represents a pointer to an unknown type. Because the referent type is
unknown, the indirection operator cannot be applied to a pointer of type <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>, nor can
any arithmetic be performed on such a pointer. However, a pointer of type <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span> can be
cast to any other pointer type (and vice versa).</p>

<p class="MsoNormal">Pointer types are a separate category of types. Unlike
reference types and value types, pointer types do not inherit from <span class="Codefragment"><span style="font-size:10.0pt">object</span></span> and no
conversions exist between pointer types and <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>. In particular, boxing and
unboxing (§4.3) are not supported for pointers. However, conversions are
permitted between different pointer types and between pointer types and the
integral types. This is described in §18.4.</p>

<p class="MsoNormal">A <span class="Production">pointer-type</span> cannot be used
as a type argument (§4.4), and type inference (§7.5.2) fails on generic method
calls that would have inferred a type argument to be a pointer type.</p>

<p class="MsoNormal">A <span class="Production">pointer-type</span> may be used as
the type of a volatile field (§10.5.3).</p>

<p class="MsoNormal">Although pointers can be passed as <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> parameters, doing so can cause
undefined behavior, since the pointer may well be set to point to a local
variable which no longer exists when the called method returns, or the fixed
object to which it used to point, is no longer fixed. For example:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static int value = 20;</p>

<p class="Code">&nbsp;&nbsp; unsafe static void F(out int* pi1, ref int* pi2) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pi1 = &amp;i;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* pj = &amp;value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pi2 = pj;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* px1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* px2 = &amp;i;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; F(out px1, ref px2);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("*px1 = {0}, *px2 = {1}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *px1, *px2);&nbsp;&nbsp; // undefined behavior<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">A method can return a value of some type, and that type can
be a pointer. For example, when given a pointer to a contiguous sequence of <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>s, that
sequence’s element count, and some other <span class="Codefragment"><span style="font-size:10.0pt">int</span></span> value, the following method returns
the address of that value in that sequence, if a match occurs; otherwise it
returns <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>:</p>

<p class="Code">unsafe static int* Find(int* pi, int size, int value) {<br>
&nbsp;&nbsp; for (int i = 0; i &lt; size; ++i) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (*pi == value) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++pi;<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; return null;<br>
}</p>

<p class="MsoNormal">In an unsafe context, several constructs are available for
operating on pointers:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
operator may be used to perform pointer indirection (§18.5.1).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">-&gt;</span></span>
operator may be used to access a member of a struct through a pointer (§18.5.2).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">[]</span></span>
operator may be used to index a pointer (§18.5.3).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operator may be used to obtain the address of a variable (§18.5.4).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">++</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">--</span></span>
operators may be used to increment and decrement pointers (§18.5.5).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">+</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">-</span></span>
operators may be used to perform pointer arithmetic (§18.5.6).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span> operators
may be used to compare pointers (§18.5.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">stackalloc</span></span>
operator may be used to allocate memory from the call stack (§18.7).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement may be used to temporarily fix a variable so its address can be
obtained (§18.6).</p>

<h2><a name="_Toc251613445"></a><a name="_Ref520439203"></a><a name="_Ref495280856">18.3 Fixed and moveable variables</a></h2>

<p class="MsoNormal">The address-of operator (§18.5.4) and the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement
(§18.6) divide variables into two categories: <span class="Term">Fixed variables</span>
and <span class="Term">moveable variables</span>.</p>

<p class="MsoNormal">Fixed variables reside in storage locations that are
unaffected by operation of the garbage collector. (Examples of fixed variables
include local variables, value parameters, and variables created by
dereferencing pointers.) On the other hand, moveable variables reside in
storage locations that are subject to relocation or disposal by the garbage
collector. (Examples of moveable variables include fields in objects and
elements of arrays.)</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operator (§18.5.4) permits the address of a fixed variable to be obtained
without restrictions. However, because a moveable variable is subject to
relocation or disposal by the garbage collector, the address of a moveable
variable can only be obtained using a <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement (§18.6), and that address remains valid only for the duration of that <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement.</p>

<p class="MsoNormal">In precise terms, a fixed variable is one of the following:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable resulting from a <span class="Production">simple-name</span>
(§7.6.2) that refers to a local variable or a value parameter, unless the
variable is captured by an anonymous function.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable resulting from a <span class="Production">member-access</span>
(§7.6.4) of the form <span class="Codefragment"><span style="font-size:10.0pt">V.I</span></span>,
where <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>
is a fixed variable of a <span class="Production">struct-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A variable resulting from a <span class="Production">pointer-indirection-expression</span>
(§18.5.1) of the form <span class="Codefragment"><span style="font-size:10.0pt">*P</span></span>,
a<span class="Production"> pointer-member-access</span> (§18.5.2) of the form <span class="Codefragment"><span style="font-size:10.0pt">P-&gt;I</span></span>, or
a <span class="Production">pointer-element-access</span> (§18.5.3) of the form <span class="Codefragment"><span style="font-size:10.0pt">P[E]</span></span>.</p>

<p class="MsoNormal">All other variables are classified as moveable variables.</p>

<p class="MsoNormal">Note that a static field is classified as a moveable
variable. Also note that a <span class="Codefragment"><span style="font-size:
10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">out</span></span> parameter is classified as a moveable variable, even
if the argument given for the parameter is a fixed variable. Finally, note that
a variable produced by dereferencing a pointer is always classified as a fixed
variable.</p>

<h2><a name="_Toc251613446"></a><a name="_Ref495385654">18.4 Pointer
conversions</a></h2>

<p class="MsoNormal">In an unsafe context, the set of available implicit
conversions (§6.1) is extended to include the following implicit pointer
conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">pointer-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From the <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>
literal to any <span class="Production">pointer-type</span>.</p>

<p class="MsoNormal">Additionally, in an unsafe context, the set of available
explicit conversions (§6.2) is extended to include the following explicit
pointer conversions:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">pointer-type</span> to any other <span class="Production">pointer-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> to any <span class="Production">pointer-type</span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">pointer-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoNormal">Finally, in an unsafe context, the set of standard implicit
conversions (§6.3.1) includes the following pointer conversion:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>From any <span class="Production">pointer-type</span> to the type <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>.</p>

<p class="MsoNormal"><a name="_Toc448303248"></a><a name="_Ref463365573">Conversions
between two pointer types never change the actual pointer value. In other
words, a conversion from one pointer type to another has no effect on the
underlying address given by the pointer.</a></p>

<p class="MsoNormal">When one pointer type is converted to another, if the
resulting pointer is not correctly aligned for the pointed-to type, the
behavior is undefined if the result is dereferenced. In general, the concept
“correctly aligned” is transitive: if a pointer to type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span> is correctly
aligned for a pointer to type <span class="Codefragment"><span style="font-size:
10.0pt">B</span></span>, which, in turn, is correctly aligned for a pointer to
type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>,
then a pointer to type <span class="Codefragment"><span style="font-size:10.0pt">A</span></span>
is correctly aligned for a pointer to type <span class="Codefragment"><span style="font-size:10.0pt">C</span></span>.</p>

<p class="MsoNormal">Consider the following case in which a variable having one
type is accessed via a pointer to a different type:</p>

<p class="Code">char c = 'A';<br>
char* pc = &amp;c;<br>
void* pv = pc;<br>
int* pi = (int*)pv;<br>
int i = *pi;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // undefined<br>
*pi = 123456;&nbsp;&nbsp;&nbsp;&nbsp; // undefined</p>

<p class="MsoNormal">When a pointer type is converted to a pointer to byte, the
result points to the lowest addressed byte of the variable. Successive
increments of the result, up to the size of the variable, yield pointers to the
remaining bytes of that variable. For example, the following method displays
each of the eight bytes in a double as a hexadecimal value:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; unsafe static void Main() {<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;double d = 123.456e23;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; byte* pb = (byte*)&amp;d;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; sizeof(double); ++i)<br>
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write("{0:X2} ", *pb++);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">Of course, the output produced depends on endianness.</p>

<p class="MsoNormal">Mappings between pointers and integers are
implementation-defined. However, on 32- and 64-bit CPU architectures with a
linear address space, conversions of pointers to or from integral types
typically behave exactly like conversions of <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span> values, respectively, to or from
those integral types.</p>

<h3><a name="_Toc251613447">18.4.1 Pointer arrays</a></h3>

<p class="MsoNormal">In an unsafe context, arrays of pointers can be constructed.
Only some of the conversions that apply to other array types are allowed on
pointer arrays:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The implicit reference conversion (§6.1.6) from any <span class="Production">array-type</span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span> and the interfaces it
implements also applies to pointer arrays. However, any attempt to access the
array elements through <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
or the interfaces it implements will result in an exception at run-time, as
pointer types are not convertible to <span class="Codefragment"><span style="font-size:10.0pt">object</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The implicit and explicit reference conversions (§6.1.6, §6.2.4) from a single-dimensional array type <span class="Codefragment"><span style="font-size:10.0pt">S[]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;T&gt;</span></span>
and its base interfaces never apply to pointer arrays, since pointer types
cannot be used as type arguments, and there are no conversions from pointer
types to non-pointer types.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The explicit reference conversion (§6.2.4) from <span class="Codefragment"><span style="font-size:10.0pt">System.Array</span></span>
and the interfaces it implements to any <span class="Production">array-type</span>
applies to pointer arrays.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The explicit reference conversions (§6.2.4) from <span class="Codefragment"><span style="font-size:10.0pt">System.Collections.Generic.IList&lt;S&gt;</span></span>
and its base interfaces to a single-dimensional array type <span class="Codefragment"><span style="font-size:10.0pt">T[]</span></span> never
applies to pointer arrays, since pointer types cannot be used as type
arguments, and there are no conversions from pointer types to non-pointer
types.</p>

<p class="MsoNormal">These restrictions mean that the expansion for the <span class="Codefragment"><span style="font-size:10.0pt">foreach</span></span>
statement over arrays described in §8.8.4 cannot be applied to pointer arrays.
Instead, a foreach statement of the form</p>

<p class="MsoNormal" style="margin-left:.25in;text-indent:.25in"><span class="CodeChar"><span style="font-size:10.0pt">foreach (V v in x)</span></span> <span class="Production">embedded-statement</span></p>

<p class="MsoNormal">where the type of <span class="Codefragment"><span style="font-size:10.0pt">x</span></span><span class="Production"> </span>is an array
type of the form <span class="Codefragment"><span style="font-size:10.0pt">T[,,…,]</span></span>,
<span class="Production">n</span> is the number of dimensions minus 1 and <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">V</span></span> is a pointer
type, is expanded using nested for-loops as follows:</p>

<p class="MsoNormal" style="margin-left:.5in"><span class="CodeChar"><span style="font-size:10.0pt">{<br>
&nbsp;&nbsp; T[,,…,] a = x;<br>
&nbsp;&nbsp; V v;<br>
&nbsp;&nbsp; for (int i0 = a.GetLowerBound(0); i0 &lt;= a.GetUpperBound(0); i0++)<br>
&nbsp;&nbsp; for (int i1 = a.GetLowerBound(1); i1 &lt;= a.GetUpperBound(1); i1++)<br>
&nbsp;&nbsp; …<br>
&nbsp;&nbsp; for (int i</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt"> = a.GetLowerBound(</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt">);
i</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt"> &lt;= a.GetUpperBound(</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt">);
i</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt">++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v</span></span><span class="Production"> </span><span class="CodeChar"><span style="font-size:10.0pt">&nbsp;= (V)a.GetValue(i0,i1,…,i</span></span><span class="Production">n</span><span class="CodeChar"><span style="font-size:10.0pt">);<br>
</span></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Production">embedded-statement</span><span class="CodeChar"><span style="font-size:10.0pt"><br>
&nbsp;&nbsp; }<br>
}</span></span></p>

<p class="MsoNormal">The variables <span class="Codefragment"><span style="font-size:10.0pt">a, i0</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">i1</span></span>, …<span class="Codefragment"><span style="font-size:10.0pt"> i</span></span><span class="Production">n</span> are
not visible to or accessible to <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> or the <span class="Production">embedded-statement</span>
or any other source code of the program. The variable <span class="Codefragment"><span style="font-size:10.0pt">v</span></span> is read-only in the embedded
statement. If there is not an explicit conversion (§18.4) from <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> (the element type)
to <span class="Codefragment"><span style="font-size:10.0pt">V</span></span>, an
error is produced and no further steps are taken. If <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> has the value <span class="Codefragment"><span style="font-size:10.0pt">null</span></span>, a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>
is thrown at run-time.</p>

<h2><a name="_Toc251613448"></a><a name="_Toc186872834"></a><a name="_Toc187557364"></a>18.5 Pointers in expressions</h2>

<p class="MsoNormal">In an unsafe context, an expression may yield a result of a
pointer type, but outside an unsafe context it is a compile-time error for an
expression to be of a pointer type. In precise terms, outside an unsafe context
a compile-time error occurs if any <span class="Production">simple-name</span> (§7.6.2), <span class="Production">member-access</span> (§7.6.4), <span class="Production">invocation-expression</span> (§7.6.5), or <span class="Production">element-access</span> (§7.6.6) is of a pointer type.</p>

<p class="MsoNormal">In an unsafe context, the <span class="Production">primary-no-array-creation-expression</span>
(§7.6) and <span class="Production">unary-expression</span> (§7.7) productions permit the following additional constructs:</p>

<p class="Grammar">primary-no-array-creation-expression:<br>
...<br>
pointer-member-access<br>
pointer-element-access<br>
sizeof-expression</p>

<p class="Grammar">unary-expression:<br>
...<br>
pointer-indirection-expression<br>
addressof-expression</p>

<p class="MsoNormal">These constructs are described in the following sections.
The precedence and associativity of the unsafe operators is implied by the
grammar.</p>

<h3><a name="_Ref492805760"></a><a name="_Ref493143523"></a><a name="_Toc251613449"></a><a name="_Ref492807630">18.5.1 Pointer indirection</a></h3>

<p class="MsoNormal">A <span class="Production">pointer-indirection-expression</span>
consists of an asterisk (<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>)
followed by a <span class="Production">unary-expression</span>.</p>

<p class="Grammar">pointer-indirection-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="MsoNormal">The unary <span class="Codefragment"><span style="font-size:
10.0pt">*</span></span> operator denotes <em>pointer indirection</em> and is
used to obtain the variable to which a pointer points. The result of evaluating
<span class="Codefragment"><span style="font-size:10.0pt">*P</span></span>, where
<span class="Codefragment"><span style="font-size:10.0pt">P</span></span> is an
expression of a pointer type <span class="Codefragment"><span style="font-size:
10.0pt">T*</span></span>, is a variable of type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>. It is a compile-time error to apply
the unary <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
operator to an expression of type <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span> or to an expression that isn’t of
a pointer type.</p>

<p class="MsoNormal">The effect of applying the unary <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> operator to a <span class="Codefragment"><span style="font-size:10.0pt">null</span></span> pointer is
implementation-defined. In particular, there is no guarantee that this
operation throws a <span class="Codefragment"><span style="font-size:10.0pt">System.NullReferenceException</span></span>.</p>

<p class="MsoNormal">If an invalid value has been assigned to the pointer, the
behavior of the unary <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
operator is undefined. Among the invalid values for dereferencing a pointer by
the unary <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
operator are an address inappropriately aligned for the type pointed to (see
example in §18.4), and the address of a variable after the end of its lifetime.
</p>

<p class="MsoNormal">For purposes of definite assignment analysis, a variable
produced by evaluating an expression of the form <span class="Codefragment"><span style="font-size:10.0pt">*P</span></span> is considered initially assigned (§5.3.1).</p>

<h3><a name="_Toc251613450"></a><a name="_Ref495401681"></a><a name="_Ref495401680">18.5.2 Pointer member access</a></h3>

<p class="MsoNormal">A <span class="Production">pointer-member-access</span>
consists of a <span class="Production">primary-expression</span>, followed by a “<span class="Codefragment"><span style="font-size:10.0pt">-&gt;</span></span>” token,
followed by an <span class="Production">identifier</span>.</p>

<p class="Grammar">pointer-member-access:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">-&gt;</span></span>&nbsp;&nbsp; identifier</p>

<p class="MsoNormal">In a pointer member access of the form <span class="Codefragment"><span style="font-size:10.0pt">P-&gt;I</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> must be an
expression of a pointer type other than <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> must denote an accessible member of
the type to which <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
points.</p>

<p class="MsoNormal">A pointer member access of the form <span class="Codefragment"><span style="font-size:10.0pt">P-&gt;I</span></span> is
evaluated exactly as <span class="Codefragment"><span style="font-size:10.0pt">(*P).I</span></span>.
For a description of the pointer indirection operator (<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>), see §18.5.1. For a description of the member access operator (<span class="Codefragment"><span style="font-size:10.0pt">.</span></span>), see §7.6.4.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">struct Point<br>
{<br>
&nbsp;&nbsp; public int x;<br>
&nbsp;&nbsp; public int y;</p>

<p class="Code">&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "(" + x + "," + y + ")";<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point point;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point* p = &amp;point;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;x = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;y = 20;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(p-&gt;ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">the <span class="Codefragment"><span style="font-size:10.0pt">-&gt;</span></span>
operator is used to access fields and invoke a method of a struct through a
pointer. Because the operation <span class="Codefragment"><span style="font-size:
10.0pt">P-&gt;I</span></span> is precisely equivalent to <span class="Codefragment"><span style="font-size:10.0pt">(*P).I</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">Main</span></span> method
could equally well have been written:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point point;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point* p = &amp;point;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*p).x = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (*p).y = 20;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine((*p).ToString());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613451"></a><a name="_Ref493143524">18.5.3 Pointer element
access</a></h3>

<p class="MsoNormal">A <span class="Production">pointer-element-access</span>
consists of a <span class="Production">primary-no-array-creation-expression</span>
followed by an expression enclosed in “<span class="Codefragment"><span style="font-size:10.0pt">[</span></span>” and “<span class="Codefragment"><span style="font-size:10.0pt">]</span></span>”.</p>

<p class="Grammar">pointer-element-access:<br>
primary-no-array-creation-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="MsoNormal">In a pointer element access of the form <span class="Codefragment"><span style="font-size:10.0pt">P[E]</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> must be an
expression of a pointer type other than <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> must be an expression that can be
implicitly converted to <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>.</p>

<p class="MsoNormal">A pointer element access of the form <span class="Codefragment"><span style="font-size:10.0pt">P[E]</span></span> is
evaluated exactly as <span class="Codefragment"><span style="font-size:10.0pt">*(P</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">E)</span></span>. For a
description of the pointer indirection operator (<span class="Codefragment"><span style="font-size:10.0pt">*</span></span>), see §18.5.1. For a description of
the pointer addition operator (<span class="Codefragment"><span style="font-size:
10.0pt">+</span></span>), see §18.5.6.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* p = stackalloc char[256];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 256; i++) p[i] = (char)i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a pointer element access is used to initialize the character
buffer in a <span class="Codefragment"><span style="font-size:10.0pt">for</span></span>
loop. Because the operation <span class="Codefragment"><span style="font-size:
10.0pt">P[E]</span></span> is precisely equivalent to <span class="Codefragment"><span style="font-size:10.0pt">*(P</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">E)</span></span>, the example could equally well have
been written:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* p = stackalloc char[256];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 256; i++) *(p + i) = (char)i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The pointer element access operator does not check for
out-of-bounds errors and the behavior when accessing an out-of-bounds element
is undefined. This is the same as C and C++.</p>

<h3><a name="_Ref493879791"></a><a name="_Toc251613452"></a><a name="_Ref493144510">18.5.4 The address-of operator</a></h3>

<p class="MsoNormal">An <span class="Production">addressof-expression</span>
consists of an ampersand (<span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>)
followed by a <span class="Production">unary-expression</span>.</p>

<p class="Grammar">addressof-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="MsoNormal">Given an expression <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> which is of a type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> and is
classified as a fixed variable (§18.3), the construct <span class="Codefragment"><span style="font-size:10.0pt">&amp;E</span></span> computes the address of the
variable given by <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>.
The type of the result is <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>
and is classified as a value. A compile-time error occurs if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is not
classified as a variable, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is classified as a read-only local variable, or if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> denotes a
moveable variable. In the last case, a fixed statement (§18.6) can be used to temporarily “fix” the variable before obtaining its address. As stated in §7.6.4, outside an instance constructor or static constructor for a struct or class
that defines a <span class="Codefragment"><span style="font-size:10.0pt">readonly</span></span>
field, that field is considered a value, not a variable. As such, its address
cannot be taken. Similarly, the address of a constant cannot be taken.</p>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operator does not require its argument to be definitely assigned, but following
an <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operation, the variable to which the operator is applied is considered
definitely assigned in the execution path in which the operation occurs. It is
the responsibility of the programmer to ensure that correct initialization of
the variable actually does take place in this situation.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* p = &amp;i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *p = 123;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(i);<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal"><span class="Codefragment"><span style="font-size:10.0pt">i</span></span>
is considered definitely assigned following the <span class="Codefragment"><span style="font-size:10.0pt">&amp;i</span></span> operation used to initialize <span class="Codefragment"><span style="font-size:10.0pt">p</span></span>. The
assignment to <span class="Codefragment"><span style="font-size:10.0pt">*p</span></span>
in effect initializes <span class="Codefragment"><span style="font-size:10.0pt">i</span></span>,
but the inclusion of this initialization is the responsibility of the
programmer, and no compile-time error would occur if the assignment was
removed.</p>

<p class="MsoNormal">The rules of definite assignment for the <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span> operator
exist such that redundant initialization of local variables can be avoided. For
example, many external APIs take a pointer to a structure which is filled in by
the API. Calls to such APIs typically pass the address of a local struct
variable, and without the rule, redundant initialization of the struct variable
would be required.</p>

<h3><a name="_Toc251613453"></a><a name="_Ref495400700"></a><a name="_Ref495385994">18.5.5 Pointer increment and decrement</a></h3>

<p class="MsoNormal">In an unsafe context, the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span> operators (§7.6.9 and §7.7.5) can be applied to pointer variables of all types except <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>. Thus,
for every pointer type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>,
the following operators are implicitly defined:</p>

<p class="Code"><span lang="DE">T* operator ++(T* x);</span></p>

<p class="Code"><span lang="DE">T* operator --(T* x);</span></p>

<p class="MsoNormal">The operators produce the same results as <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">x</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span>, respectively
(§18.5.6). In other words, for a pointer variable of type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>, the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> operator
adds <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span>
to the address contained in the variable, and the <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span> operator subtracts <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span> from
the address contained in the variable.</p>

<p class="MsoNormal">If a pointer increment or decrement operation overflows the
domain of the pointer type, the result is implementation-defined, but no
exceptions are produced.</p>

<h3><a name="_Toc251613454"></a><a name="_Ref495400710"></a><a name="_Ref495386002">18.5.6 Pointer arithmetic</a></h3>

<p class="MsoNormal">In an unsafe context, the <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> operators (§7.8.4 and §7.8.5) can be applied to values of all pointer types except <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>. Thus, for every pointer type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>, the
following operators are implicitly defined:</p>

<p class="Code"><span lang="FR">T* operator +(T* x, int y);<br>
T* operator +(T* x, uint y);<br>
T* operator +(T* x, long y);<br>
T* operator +(T* x, ulong y);</span></p>

<p class="Code"><span lang="FR">T* operator +(int x, T* y);<br>
T* operator +(uint x, T* y);<br>
T* operator +(long x, T* y);<br>
T* operator +(ulong x, T* y);</span></p>

<p class="Code"><span lang="FR">T* operator –(T* x, int y);<br>
T* operator –(T* x, uint y);<br>
T* operator –(T* x, long y);<br>
T* operator –(T* x, ulong y);</span></p>

<p class="Code"><span lang="FR">long operator –(T* x, T* y);</span></p>

<p class="MsoNormal">Given an expression <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> of a pointer type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span> and an
expression <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, the
expressions <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> compute the
pointer value of type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>
that results from adding <span class="Codefragment"><span style="font-size:10.0pt">N</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span> to
the address given by <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.
Likewise, the expression <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">N</span></span> computes the
pointer value of type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>
that results from subtracting <span class="Codefragment"><span style="font-size:
10.0pt">N</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span>
from the address given by <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>.</p>

<p class="MsoNormal">Given two expressions, <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Q</span></span>, of a pointer type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>, the
expression <span class="Codefragment"><span style="font-size:10.0pt">P</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">–</span></span> <span class="Codefragment"><span style="font-size:10.0pt">Q</span></span> computes the
difference between the addresses given by <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">Q</span></span> and then divides that difference by <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span>. The
type of the result is always <span class="Codefragment"><span style="font-size:
10.0pt">long</span></span>. In effect, <span class="Codefragment"><span style="font-size:10.0pt">P</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">Q</span></span> is computed as <span class="Codefragment"><span style="font-size:10.0pt">((long)(P)</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">(long)(Q))</span></span> <span class="Codefragment"><span style="font-size:10.0pt">/</span></span> <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span>.</p>

<p class="MsoNormal">For example:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* values = stackalloc int[20];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* p = &amp;values[1];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int* q = &amp;values[15];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("p - q = {0}", p - q);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("q - p = {0}", q - p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">which produces the output:</p>

<p class="Code">p - q = -14<br>
q - p = 14</p>

<p class="MsoNormal">If a pointer arithmetic operation overflows the domain of
the pointer type, the result is truncated in an implementation-defined fashion,
but no exceptions are produced.</p>

<h3><a name="_Toc251613455"></a><a name="_Ref495400718"></a><a name="_Ref495386185">18.5.7 Pointer comparison</a></h3>

<p class="MsoNormal">In an unsafe context, the <span class="Codefragment"><span style="font-size:10.0pt">==</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">!=</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&gt;</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">&lt;=</span></span>, and <span class="Codefragment"><span style="font-size:10.0pt">=&gt;</span></span> operators (§7.10) can be applied to values of all pointer types. The pointer comparison operators are:</p>

<p class="Code">bool operator ==(void* x, void* y);</p>

<p class="Code">bool operator !=(void* x, void* y);</p>

<p class="Code">bool operator &lt;(void* x, void* y);</p>

<p class="Code">bool operator &gt;(void* x, void* y);</p>

<p class="Code">bool operator &lt;=(void* x, void* y);</p>

<p class="Code">bool operator &gt;=(void* x, void* y);</p>

<p class="MsoNormal">Because an implicit conversion exists from any pointer type
to the <span class="Codefragment"><span style="font-size:10.0pt">void*</span></span>
type, operands of any pointer type can be compared using these operators. The
comparison operators compare the addresses given by the two operands as if they
were unsigned integers.</p>

<h3><a name="_Toc251613456">18.5.8 The sizeof operator</a></h3>

<p class="MsoNormal">The <span class="Codefragment"><span style="font-size:10.0pt">sizeof</span></span>
operator returns the number of bytes occupied by a variable of a given type.
The type specified as an operand to <span class="Codefragment"><span style="font-size:10.0pt">sizeof</span></span> must be an <span class="Production">unmanaged-type</span> (§18.2).</p>

<p class="Grammar">sizeof-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sizeof</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="MsoNormal">The result of the <span class="Codefragment"><span style="font-size:10.0pt">sizeof</span></span> operator is a value of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>. For
certain predefined types, the <span class="Codefragment"><span style="font-size:
10.0pt">sizeof</span></span> operator yields a constant value as shown in the
table below.</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Expression</b></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Result</b></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(sbyte)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">1</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(byte)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">1</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(short)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">2</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(ushort)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">2</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(int)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">4</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(uint)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">4</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(long)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">8</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(ulong)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">8</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(char)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">2</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(float)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">4</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(double)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">8</span></span></p>
  </td>
 </tr>
 <tr>
  <td width="169" valign="top" style="width:126.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">sizeof(bool)</span></span></p>
  </td>
  <td width="84" valign="top" style="width:63.0pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">1</span></span></p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoNormal">For all other types, the result of the <span class="Codefragment"><span style="font-size:10.0pt">sizeof</span></span> operator
is implementation-defined and is classified as a value, not a constant.</p>

<p class="MsoNormal">The order in which members are packed into a struct is
unspecified.</p>

<p class="MsoNormal">For alignment purposes, there may be unnamed padding at the
beginning of a struct, within a struct, and at the end of the struct. The
contents of the bits used as padding are indeterminate.</p>

<p class="MsoNormal">When applied to an operand that has struct type, the result
is the total number of bytes in a variable of that type, including any padding.</p>

<h2><a name="_Toc251613457"></a><a name="_Ref493144520">18.6 The fixed
statement</a></h2>

<p class="MsoNormal">In an unsafe context, the <span class="Production">embedded-statement</span>
(§8) production permits an additional construct, the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement, which is used to “fix”
a moveable variable such that its address remains constant for the duration of
the statement.</p>

<p class="Grammar">embedded-statement:<br>
...<br>
fixed-statement</p>

<p class="Grammar">fixed-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">fixed</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
pointer-type&nbsp;&nbsp; fixed-pointer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">fixed-pointer-declarators:<br>
fixed-pointer-declarator<br>
fixed-pointer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; fixed-pointer-declarator</p>

<p class="Grammar">fixed-pointer-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; fixed-pointer-initializer</p>

<p class="Grammar">fixed-pointer-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;</span></span>&nbsp;&nbsp;
variable-reference<br>
expression</p>

<p class="MsoNormal">Each <span class="Production">fixed-pointer-declarator</span>
declares a local variable of the given <span class="Production">pointer-type</span>
and initializes that local variable with the address computed by the
corresponding <span class="Production">fixed-pointer-initializer</span>. A local
variable declared in a <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement is accessible in any <span class="Production">fixed-pointer-initializer</span>s
occurring to the right of that variable’s declaration, and in the <span class="Production">embedded-statement</span> of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement. A local variable
declared by a <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement is considered read-only. A compile-time error occurs if the embedded
statement attempts to modify this local variable (via assignment or the <span class="Codefragment"><span style="font-size:10.0pt">++</span></span> and <span class="Codefragment"><span style="font-size:10.0pt">‑‑</span></span>
operators) or pass it as a <span class="Codefragment"><span style="font-size:
10.0pt">ref</span></span> or <span class="Codefragment"><span style="font-size:
10.0pt">out</span></span> parameter.</p>

<p class="MsoNormal">A <span class="Production">fixed-pointer-initializer</span>
can be one of the following: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The token “<span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>”
followed by a <span class="Production">variable-reference</span> (§5.3.3) to a moveable variable (§18.3) of an unmanaged type <span class="Codefragment"><span style="font-size:10.0pt">T</span></span>, provided the type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span> is
implicitly convertible to the pointer type given in the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement. In this case, the initializer computes the address of the given
variable, and the variable is guaranteed to remain at a fixed address for the
duration of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An expression of an <span class="Production">array-type</span> with
elements of an unmanaged type <span class="Codefragment"><span style="font-size:
10.0pt">T</span></span>, provided the type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span> is implicitly convertible to the
pointer type given in the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement. In this case, the initializer computes the address of the first
element in the array, and the entire array is guaranteed to remain at a fixed
address for the duration of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement. The behavior of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement
is implementation-defined if the array expression is null or if the array has
zero elements.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>An expression of type <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>, provided the type <span class="Codefragment"><span style="font-size:10.0pt">char*</span></span> is
implicitly convertible to the pointer type given in the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement. In this case, the initializer computes the address of the first
character in the string, and the entire string is guaranteed to remain at a
fixed address for the duration of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement. The behavior of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement
is implementation-defined if the string expression is null.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A <span class="Production">simple-name</span> or <span class="Production">member-access</span> that references a fixed size buffer
member of a moveable variable, provided the type of the fixed size buffer
member is implicitly convertible to the pointer type given in the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement. In this case, the initializer computes a pointer to the first
element of the fixed size buffer (§18.7.2), and the fixed size buffer is
guaranteed to remain at a fixed address for the duration of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement.</p>

<p class="MsoNormal">For each address computed by a <span class="Production">fixed-pointer-initializer</span>
the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement ensures that the variable referenced by the address is not subject to
relocation or disposal by the garbage collector for the duration of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement. For example, if the address computed by a <span class="Production">fixed-pointer-initializer</span>
references a field of an object or an element of an array instance, the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement
guarantees that the containing object instance is not relocated or disposed of
during the lifetime of the statement.</p>

<p class="MsoNormal">It is the programmer’s responsibility to ensure that
pointers created by <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statements do not survive beyond execution of those statements. For example,
when pointers created by <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statements are passed to external APIs, it is the programmer’s responsibility
to ensure that the APIs retain no memory of these pointers.</p>

<p class="MsoNormal">Fixed objects may cause fragmentation of the heap (because
they can’t be moved). For that reason, objects should be fixed only when
absolutely necessary and then only for the shortest amount of time possible.</p>

<p class="MsoNormal">The example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static int x;<br>
&nbsp;&nbsp; int y;</p>

<p class="Code">&nbsp;&nbsp; unsafe static void F(int* p) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *p = 1;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test t = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] a = new int[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = &amp;x) F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = &amp;t.y) F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = &amp;a[0]) F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = a) F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">demonstrates several uses of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement. The first statement
fixes and obtains the address of a static field, the second statement fixes and
obtains the address of an instance field, and the third statement fixes and
obtains the address of an array element. In each case it would have been an
error to use the regular <span class="Codefragment"><span style="font-size:10.0pt">&amp;</span></span>
operator since the variables are all classified as moveable variables.</p>

<p class="MsoNormal">The fourth <span class="Codefragment"><span style="font-size:
10.0pt">fixed</span></span> statement in the example above produces a similar
result to the third.</p>

<p class="MsoNormal">This example of the <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span> statement uses <span class="Codefragment"><span style="font-size:10.0pt">string</span></span>:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static string name = "xx";</p>

<p class="Code">&nbsp;&nbsp; unsafe static void F(char* p) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; p[i] != '\0'; ++i)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(p[i]);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp; &nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (char* p = name) F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (char* p = "xx") F(p);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">In an unsafe context array elements of single-dimensional
arrays are stored in increasing index order, starting with index <span class="Codefragment"><span style="font-size:10.0pt">0</span></span> and ending
with index <span class="Codefragment"><span style="font-size:10.0pt">Length</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">–</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">1</span></span>. For
multi-dimensional arrays, array elements are stored such that the indices of
the rightmost dimension are increased first, then the next left dimension, and
so on to the left. Within a <span class="Codefragment"><span style="font-size:
10.0pt">fixed</span></span> statement that obtains a pointer <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to an array
instance <span class="Codefragment"><span style="font-size:10.0pt">a</span></span>,
the pointer values ranging from <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">p</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">+</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">a.Length</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">1</span></span> represent addresses of the elements in
the array. Likewise, the variables ranging from <span class="Codefragment"><span style="font-size:10.0pt">p[0]</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">p[a.Length</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">-</span></span>&nbsp;<span class="Codefragment"><span style="font-size:10.0pt">1]</span></span> represent
the actual array elements. Given the way in which arrays are stored, we can
treat an array of any dimension as though it were linear.</p>

<p class="MsoNormal">For example:</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[,,] a = new int[2,3,4];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = a) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; a.Length; ++i)&nbsp; // treat as linear<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p[i] = i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 2; ++i)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0; j &lt; 3; ++j) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int k = 0; k &lt; 4; ++k)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.Write("[{0},{1},{2}] = {3,2} ", i, j, k,
a[i,j,k]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">which produces the output:</p>

<p class="Code">[0,0,0] =&nbsp; 0 [0,0,1] =&nbsp; 1 [0,0,2] =&nbsp; 2 [0,0,3] =&nbsp; 3<br>
[0,1,0] =&nbsp; 4 [0,1,1] =&nbsp; 5 [0,1,2] =&nbsp; 6 [0,1,3] =&nbsp; 7<br>
[0,2,0] =&nbsp; 8 [0,2,1] =&nbsp; 9 [0,2,2] = 10 [0,2,3] = 11<br>
[1,0,0] = 12 [1,0,1] = 13 [1,0,2] = 14 [1,0,3] = 15<br>
[1,1,0] = 16 [1,1,1] = 17 [1,1,2] = 18 [1,1,3] = 19<br>
[1,2,0] = 20 [1,2,1] = 21 [1,2,2] = 22 [1,2,3] = 23</p>

<p class="MsoNormal">In the example</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; unsafe static void Fill(int* p, int count, int value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; count != 0; count--) *p++ = value;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int[] a = new int[100];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (int* p = a) Fill(p, 100, -1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a <span class="Codefragment"><span style="font-size:10.0pt">fixed</span></span>
statement is used to fix an array so its address can be passed to a method that
takes a pointer.</p>

<p class="MsoNormal">In the example:</p>

<p class="Code">unsafe struct Font<br>
{<br>
&nbsp;&nbsp; public int size;<br>
&nbsp;&nbsp; public fixed char name[32];<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; unsafe static void PutString(string s, char* buffer, int bufSize) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int len = s.Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (len &gt; bufSize) len = bufSize;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; len; i++) buffer[i] = s[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = len; i &lt; bufSize; i++) buffer[i] = (char)0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; Font f;</p>

<p class="Code">&nbsp;&nbsp; unsafe static void Main()<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Test test = new Test();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test.f.size = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (char* p = test.f.name) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PutString("Times New Roman", p, 32);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a fixed statement is used to fix a fixed size buffer of a
struct so its address can be used as a pointer.</p>

<p class="MsoNormal">A <span class="Codefragment"><span style="font-size:10.0pt">char*</span></span>
value produced by fixing a string instance always points to a null-terminated
string. Within a fixed statement that obtains a pointer <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to a string
instance <span class="Codefragment"><span style="font-size:10.0pt">s</span></span>,
the pointer values ranging from <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> to <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">s.Length</span></span> <span class="Codefragment"><span style="font-size:10.0pt">-</span></span> <span class="Codefragment"><span style="font-size:10.0pt">1</span></span> represent addresses of the characters
in the string, and the pointer value <span class="Codefragment"><span style="font-size:10.0pt">p</span></span> <span class="Codefragment"><span style="font-size:10.0pt">+</span></span> <span class="Codefragment"><span style="font-size:10.0pt">s.Length</span></span> always points to a null
character (the character with value <span class="Codefragment"><span style="font-size:10.0pt">'\0'</span></span>).</p>

<p class="MsoNormal">Modifying objects of managed type through fixed pointers can
results in undefined behavior. For example, because strings are immutable, it
is the programmer’s responsibility to ensure that the characters referenced by
a pointer to a fixed string are not modified.</p>

<p class="MsoNormal">The automatic null-termination of strings is particularly
convenient when calling external APIs that expect “C-style” strings. Note, however,
that a string instance is permitted to contain null characters. If such null
characters are present, the string will appear truncated when treated as a
null-terminated <span class="Codefragment"><span style="font-size:10.0pt">char*</span></span>.</p>

<h2><a name="_Ref495742547"></a><a name="_Toc251613458">18.7 Fixed size buffers</a></h2>

<p class="MsoNormal">Fixed size buffers are used to declare “C style” in-line
arrays as members of structs, and are primarily useful for interfacing with
unmanaged APIs.</p>

<h3><a name="_Toc251613459"></a><a name="_Toc111395421">18.7.1 Fixed size
buffer declarations</a></h3>

<p class="MsoNormal">A <span class="Term">fixed size buffer</span> is a member that
represents storage for a fixed length buffer of variables of a given type. A
fixed size buffer declaration introduces one or more fixed size buffers of a
given element type. Fixed size buffers are only permitted in struct
declarations and can only occur in unsafe contexts (§18.1).</p>

<p class="Grammar">struct-member-declaration:<br>
…<br>
fixed-size-buffer-declaration</p>

<p class="Grammar">fixed-size-buffer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; fixed-size-buffer-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">fixed</span></span>&nbsp;&nbsp;
buffer-element-type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed-size-buffer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">fixed-size-buffer-modifiers:<br>
fixed-size-buffer-modifier<br>
fixed-size-buffer-modifier&nbsp;&nbsp; fixed-size-buffer-modifiers</p>

<p class="Grammar">fixed-size-buffer-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
unsafe</span></span></p>

<p class="Grammar">buffer-element-type:<br>
type</p>

<p class="Grammar">fixed-size-buffer-declarators:<br>
fixed-size-buffer-declarator<br>
fixed-size-buffer-declarator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp; fixed-size-buffer-declarators</p>

<p class="Grammar">fixed-size-buffer-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; constant-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="MsoNormal">A fixed size buffer declaration may include a set of
attributes (§17), a <span class="Codefragment"><span style="font-size:10.0pt">new</span></span>
modifier (§10.2.2), a valid combination of the four access modifiers (§10.2.3)
and an <span class="Codefragment"><span style="font-size:10.0pt">unsafe</span></span>
modifier (§18.1). The attributes and modifiers apply to all of the members
declared by the fixed size buffer declaration. It is an error for the same
modifier to appear multiple times in a fixed size buffer declaration.</p>

<p class="MsoNormal">A fixed size buffer declaration is not permitted to include
the <span class="Codefragment"><span style="font-size:10.0pt">static</span></span>
modifier.</p>

<p class="MsoNormal">The buffer element type of a fixed size buffer declaration
specifies the element type of the buffer(s) introduced by the declaration. The buffer
element type must be one of the predefined types <span class="Codefragment"><span style="font-size:10.0pt">sbyte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">byte</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">short</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ushort</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">uint</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">long</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">ulong</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">char</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">float</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">double</span></span>, or <span class="Codefragment"><span style="font-size:10.0pt">bool</span></span>.</p>

<p class="MsoNormal">The buffer element type is followed by a list of fixed size
buffer declarators, each of which introduces a new member. A fixed size buffer declarator
consists of an identifier that names the member, followed by a constant
expression enclosed in <span class="Codefragment"><span style="font-size:10.0pt">[</span></span>
and <span class="Codefragment"><span style="font-size:10.0pt">]</span></span>
tokens. The constant expression denotes the number of elements in the member
introduced by that fixed size buffer declarator. The type of the constant
expression must be implicitly convertible to type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>, and the value must be a non-zero
positive integer.</p>

<p class="MsoNormal">The elements of a fixed size buffer are guaranteed to be
laid out sequentially in memory.</p>

<p class="MsoNormal">A fixed size buffer declaration that declares multiple fixed
size buffers is equivalent to multiple declarations of a single fixed size
buffer declation with the same attributes, and element types. For example</p>

<p class="Code">unsafe struct A<br>
{<br>
&nbsp;&nbsp; public fixed int x[5], y[10], z[100];<br>
}</p>

<p class="MsoNormal">is equivalent to</p>

<p class="Code">unsafe struct A<br>
{<br>
&nbsp;&nbsp; public fixed int x[5];<br>
&nbsp;&nbsp; public fixed int y[10];<br>
&nbsp;&nbsp; public fixed int z[100];<br>
}</p>

<h3><a name="_Toc251613460"></a><a name="_Toc111395422"></a><a name="_Ref98059481"></a><a name="_Ref98059278"></a><a name="_Toc71984394">18.7.2
Fixed size buffers in expressions</a></h3>

<p class="MsoNormal">Member lookup (§7.3) of a fixed size buffer member proceeds
exactly like member lookup of a field.</p>

<p class="MsoNormal">A fixed size buffer can be referenced in an expression using
a <span class="Production">simple-name</span> (§7.5.2) or a <span class="Production">member-access</span> (§7.5.4).</p>

<p class="MsoNormal">When a fixed size buffer member is referenced as a simple
name, the effect is the same as a member access of the form <span class="Codefragment"><span style="font-size:10.0pt">this.I</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> is the fixed
size buffer member.</p>

<p class="MsoNormal">In a member access of the form <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span>, if <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is of a struct type and a member
lookup of <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>
in that struct type identifies a fixed size member, then <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> is
evaluated an classified as follows:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If the expression <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> does not occur in an unsafe context,
a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
is classified as a value, a compile-time error occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, if <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> is a moveable variable (§18.3) and the expression <span class="Codefragment"><span style="font-size:10.0pt">E.I</span></span> is not a <span class="Production">fixed-pointer-initializer</span> (§18.6), a compile-time error
occurs.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Otherwise, <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>
references a fixed variable and the result of the expression is a pointer to
the first element of the fixed size buffer member <span class="Codefragment"><span style="font-size:10.0pt">I</span></span> in <span class="Codefragment"><span style="font-size:10.0pt">E</span></span>. The result is of type <span class="Codefragment"><span style="font-size:10.0pt">S*</span></span>, where <span class="Codefragment"><span style="font-size:10.0pt">S</span></span> is the
element type of <span class="Codefragment"><span style="font-size:10.0pt">I</span></span>,
and is classified as a value.</p>

<p class="MsoNormal">The subsequent elements of the fixed size buffer can be
accessed using pointer operations from the first element. Unlike access to
arrays, access to the elements of a fixed size buffer is an unsafe operation
and is not range checked.</p>

<p class="MsoListBullet">The following example declares and uses a struct with a
fixed size buffer member.</p>

<p class="Code">unsafe struct Font<br>
{<br>
&nbsp;&nbsp; public int size;<br>
&nbsp;&nbsp; public fixed char name[32];<br>
}</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; unsafe static void PutString(string s, char* buffer, int bufSize) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int len = s.Length;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (len &gt; bufSize) len = bufSize;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; len; i++) buffer[i] = s[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = len; i &lt; bufSize; i++) buffer[i] = (char)0;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; unsafe static void Main()<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font f;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; f.size = 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PutString("Times New Roman", f.name, 32);<br>
&nbsp;&nbsp; }<br>
}</p>

<h3><a name="_Toc251613461"></a><a name="_Toc111395424"></a><a name="_Toc71984396">18.7.3 Definite assignment</a> checking</h3>

<p class="MsoNormal">Fixed size buffers are not subject to definite assignment
checking (§5.3), and fixed size buffer members are ignored for purposes of
definite assignment checking of struct type variables.</p>

<p class="MsoNormal">When the outermost containing struct variable of a fixed
size buffer member is a static variable, an instance variable of a class
instance, or an array element, the elements of the fixed size buffer are
automatically initialized to their default values (§5.2). In all other cases,
the initial content of a fixed size buffer is undefined.</p>

<h2><a name="_Toc251613462">18.8 Stack allocation</a></h2>

<p class="MsoNormal">In an unsafe context, a local variable declaration (§8.5.1) may include a stack allocation initializer which allocates memory from the call stack.</p>

<p class="Grammar">local-variable-initializer:<br>
…<br>
stackalloc-initializer</p>

<p class="Grammar">stackalloc-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">stackalloc</span></span>&nbsp;&nbsp;
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="MsoNormal">The <span class="Production">unmanaged-type</span> indicates
the type of the items that will be stored in the newly allocated location, and
the <span class="Production">expression</span> indicates the number of these
items. Taken together, these specify the required allocation size. Since the
size of a stack allocation cannot be negative, it is a compile-time error to
specify the number of items as a <span class="Production">constant-expression</span>
that evaluates to a negative value.</p>

<p class="MsoNormal">A stack allocation initializer of the form <span class="Codefragment"><span style="font-size:10.0pt">stackalloc</span></span> <span class="Codefragment"><span style="font-size:10.0pt">T[E]</span></span> requires <span class="Codefragment"><span style="font-size:10.0pt">T</span></span> to be an
unmanaged type (§18.2) and <span class="Codefragment"><span style="font-size:
10.0pt">E</span></span> to be an expression of type <span class="Codefragment"><span style="font-size:10.0pt">int</span></span>. The construct allocates <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> <span class="Codefragment"><span style="font-size:10.0pt">*</span></span> <span class="Codefragment"><span style="font-size:10.0pt">sizeof(T)</span></span> bytes
from the call stack and returns a pointer, of type <span class="Codefragment"><span style="font-size:10.0pt">T*</span></span>, to the newly allocated block. If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is a negative
value, then the behavior is undefined. If <span class="Codefragment"><span style="font-size:10.0pt">E</span></span> is zero, then no allocation is made,
and the pointer returned is implementation-defined. If there is not enough
memory available to allocate a block of the given size, a <span class="Codefragment"><span style="font-size:10.0pt">System.StackOverflowException</span></span>
is thrown. </p>

<p class="MsoNormal">The content of the newly allocated memory is undefined.</p>

<p class="MsoNormal">Stack allocation initializers are not permitted in <span class="Codefragment"><span style="font-size:10.0pt">catch</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">finally</span></span> blocks
(§8.10).</p>

<p class="MsoNormal">There is no way to explicitly free memory allocated using <span class="Codefragment"><span style="font-size:10.0pt">stackalloc</span></span>. All
stack allocated memory blocks created during the execution of a function member
are automatically discarded when that function member returns. This corresponds
to the <span class="Codefragment"><span style="font-size:10.0pt">alloca</span></span>
function, an extension commonly found in C and C++ implementations.</p>

<p class="MsoNormal">In the example</p>

<p class="Code">using System;</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static string IntToString(int value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int n = value &gt;= 0? value: -value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* buffer = stackalloc char[16];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char* p = buffer + 16;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *--p = (char)(n % 10 + '0');<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; n /= 10;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } while (n != 0);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value &lt; 0) *--p = '-';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new string(p, 0, (int)(buffer + 16 - p));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(IntToString(12345));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine(IntToString(-999));<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">a <span class="Codefragment"><span style="font-size:10.0pt">stackalloc</span></span>
initializer is used in the <span class="Codefragment"><span style="font-size:
10.0pt">IntToString</span></span> method to allocate a buffer of 16 characters
on the stack. The buffer is automatically discarded when the method returns.</p>

<h2><a name="_Toc251613463">18.9 Dynamic memory allocation</a></h2>

<p class="MsoNormal">Except for the <span class="Codefragment"><span style="font-size:10.0pt">stackalloc</span></span> operator, C# provides no
predefined constructs for managing non-garbage collected memory. Such services
are typically provided by supporting class libraries or imported directly from
the underlying operating system. For example, the <span class="Codefragment"><span style="font-size:10.0pt">Memory</span></span> class below illustrates how the
heap functions of an underlying operating system might be accessed from C#:</p>

<p class="Code">using System;<br>
using System.Runtime.InteropServices;</p>

<p class="Code">public unsafe class Memory<br>
{<br>
&nbsp;&nbsp; // Handle for the process heap. This handle is used in all calls to the<br>
&nbsp;&nbsp; // HeapXXX APIs in the methods below.</p>

<p class="Code">&nbsp;&nbsp; static int ph = GetProcessHeap();</p>

<p class="Code">&nbsp;&nbsp; // Private instance constructor to prevent instantiation.</p>

<p class="Code">&nbsp;&nbsp; private Memory() {}</p>

<p class="Code">&nbsp;&nbsp; // Allocates a memory block of the given size. The allocated
memory is<br>
&nbsp;&nbsp; // automatically initialized to zero.</p>

<p class="Code">&nbsp;&nbsp; public static void* Alloc(int size) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void* result = HeapAlloc(ph, HEAP_ZERO_MEMORY, size);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == null) throw new OutOfMemoryException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Copies count bytes from src to dst. The source and destination<br>
&nbsp;&nbsp; // blocks are permitted to overlap.</p>

<p class="Code">&nbsp;&nbsp; public static void Copy(void* src, void* dst, int count) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte* ps = (byte*)src;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte* pd = (byte*)dst;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ps &gt; pd) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (; count != 0; count--) *pd++ = *ps++;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (ps &lt; pd) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (ps += count, pd += count; count != 0; count--) *--pd = *--ps;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Frees a memory block.</p>

<p class="Code">&nbsp;&nbsp; public static void Free(void* block) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!HeapFree(ph, 0, block)) throw new InvalidOperationException();<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Re-allocates a memory block. If the reallocation request is
for a<br>
&nbsp;&nbsp; // larger size, the additional region of memory is automatically<br>
&nbsp;&nbsp; // initialized to zero.</p>

<p class="Code">&nbsp;&nbsp; public static void* ReAlloc(void* block, int size) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void* result = HeapReAlloc(ph, HEAP_ZERO_MEMORY, block, size);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == null) throw new OutOfMemoryException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Returns the size of a memory block.</p>

<p class="Code">&nbsp;&nbsp; public static int SizeOf(void* block) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int result = HeapSize(ph, 0, block);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (result == -1) throw new InvalidOperationException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; // Heap API flags</p>

<p class="Code">&nbsp;&nbsp; const int HEAP_ZERO_MEMORY = 0x00000008;</p>

<p class="Code">&nbsp;&nbsp; // Heap API functions</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32")]<br>
&nbsp;&nbsp; static extern int GetProcessHeap();</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32")]<br>
&nbsp;&nbsp; static extern void* HeapAlloc(int hHeap, int flags, int size);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32")]<br>
&nbsp;&nbsp; static extern bool HeapFree(int hHeap, int flags, void* block);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32")]<br>
&nbsp;&nbsp; static extern void* HeapReAlloc(int hHeap, int flags,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void* block, int size);</p>

<p class="Code">&nbsp;&nbsp; [DllImport("kernel32")]<br>
&nbsp;&nbsp; static extern int HeapSize(int hHeap, int flags, void* block);<br>
}</p>

<p class="MsoNormal">An example that uses the <span class="Codefragment"><span style="font-size:10.0pt">Memory</span></span> class is given below:</p>

<p class="Code">class Test<br>
{<br>
&nbsp;&nbsp; static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsafe {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte* buffer = (byte*)Memory.Alloc(256);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 256; i++) buffer[i] = (byte)i;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] array = new byte[256];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed (byte* p = array) Memory.Copy(buffer, p, 256); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Memory.Free(buffer);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt; 256; i++) Console.WriteLine(array[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="MsoNormal">The example allocates 256 bytes of memory through <span class="Codefragment"><span style="font-size:10.0pt">Memory.Alloc</span></span>
and initializes the memory block with values increasing from 0 to 255. It then
allocates a 256 element byte array and uses <span class="Codefragment"><span style="font-size:10.0pt">Memory.Copy</span></span> to copy the contents of the
memory block into the byte array. Finally, the memory block is freed using <span class="Codefragment"><span style="font-size:10.0pt">Memory.Free</span></span> and
the contents of the byte array are output on the console.</p>

</div>

<span class="Codefragment"><span style="font-size:10.0pt"><br clear="all" style="page-break-before:right">
</span></span>

<div class="Section18">

<p class="Appendix1"><a name="_Toc251613464"></a><a name="_Toc522359376"></a><a name="_Toc510510556">A. Documentation comments</a></p>

<p class="MsoNormal">C# provides a mechanism for programmers to document their
code using a special comment syntax that contains XML text. In source code
files, comments having a certain form can be used to direct a tool to produce
XML from those comments&nbsp;and the source code elements, which they precede.
Comments using such syntax are called <span class="Term">documentation comments</span>.
They must immediately precede a user-defined type (such as a class, delegate,
or interface) or a member (such as a field, event, property, or method). The
XML generation tool is called the <span class="Term">documentation generator</span>.&nbsp;(This generator could be, but need not be, the C# compiler itself.) The output
produced by the documentation generator is called the <span class="Term">documentation
file</span>.&nbsp;A documentation file is used as input to a <span class="Term">documentation
viewer</span>;&nbsp;a tool intended to produce some sort of visual display of type
information and its associated documentation.</p>

<p class="MsoNormal">This specification suggests a set of tags to be used in
documentation comments, but use of these tags is not required, and other tags
may be used if desired, as long the rules of well-formed XML are followed.</p>

<p class="Appendix2"><a name="_Toc251613465"></a><a name="_Toc522359377"></a><a name="_Toc510510557">A.1 Introduction</a></p>

<p class="MsoNormal">Comments having a special form can be used to direct a tool
to produce XML from those comments&nbsp;and the source code elements, which they
precede. Such comments are single-line comments that start with three slashes (<span class="Codefragment"><span style="font-size:10.0pt">///</span></span>), or
delimited comments that start with a slash and two stars (<span class="Codefragment"><span style="font-size:10.0pt">/**</span></span>). They must
immediately precede a user-defined type (such as a class, delegate, or
interface) or a member (such as a field, event, property, or method) that they
annotate. Attribute sections (§17.2) are considered part of declarations, so
documentation comments must precede attributes applied to a type or member.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Grammar">single-line-doc-comment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">///</span></span>&nbsp;&nbsp;
input-characters<sub>opt</sub></p>

<p class="Grammar">delimited-doc-comment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">/**</span></span>&nbsp;&nbsp;
delimited-comment-text<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*/</span></span></p>

<p class="MsoNormal">In a <span class="Production">single-line-doc-comment</span>,
if there is a <span class="Production">whitespace</span> character following the <span class="Codefragment"><span style="font-size:10.0pt">///</span></span> characters
on each of the <span class="Production">single-line-doc-comment</span>s adjacent
to the current <span class="Production">single-line-doc-comment</span>, then that
<span class="Production">whitespace</span> character is not included in the XML
output.</p>

<p class="MsoNormal">In a <em>delimited-doc-comment</em>, if the first non-<em>whitespace</em>
character on the second line is an <em>asterisk</em> and the same pattern of
optional <em>whitespace</em> characters and an <em>asterisk</em> character is
repeated at the beginning of each of the line within the <em>delimited-doc-comment</em>,
then the characters of the repeated pattern are not included in the XML output.
The pattern may include <em>whitespace</em> characters after, as well as
before, the <em>asterisk </em>character.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point
in a two-dimensional<br>
/// plane.&lt;/summary&gt;<br>
///<br>
public class Point <br>
{<br>
&nbsp;&nbsp; /// &lt;summary&gt;method &lt;c&gt;draw&lt;/c&gt; renders the
point.&lt;/summary&gt;<br>
&nbsp;&nbsp; void draw() {…}<br>
}</p>

<p class="MsoNormal">The text within documentation comments must be well formed
according to the rules of XML (http://www.w3.org/TR/REC-xml). If the XML is ill
formed, a warning is generated and the documentation file will contain a
comment saying that an error was encountered. </p>

<p class="MsoNormal">Although developers are free to create their own set of
tags, a recommended set is defined in §A.2. Some of the recommended tags have
special meanings: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">&lt;param&gt;</span></span>
tag is used to describe parameters. If such a tag is used, the documentation
generator must verify that the specified parameter exists and that all
parameters are described in documentation comments. If such verification fails,
the documentation generator issues a warning.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">cref</span></span>&nbsp;attribute can be attached to any tag to provide a reference to a code element.
The documentation generator must verify that this code element exists. If the
verification fails, the documentation generator issues a warning. When looking
for a name described in a <span class="Codefragment"><span style="font-size:10.0pt">cref</span></span>
attribute, the documentation generator must respect namespace visibility
according to <span class="Codefragment"><span style="font-size:10.0pt">using</span></span>
statements appearing within the source code. For code elements that are
generic, the normal generic syntax (ie “<span class="Codefragment"><span style="font-size:10.0pt">List&lt;T&gt;</span></span>”) cannot be used because
it produces invalid XML. Braces can be used instead of brackets (ie “<span class="Codefragment"><span style="font-size:10.0pt">List{T}</span></span>”), or
the XML escape syntax can be used (ie “<span class="Codefragment"><span style="font-size:10.0pt">List&amp;lt;T&amp;gt;</span></span>”).</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">&lt;summary&gt;</span></span>
tag is intended to be used by a documentation viewer to display additional
information about a type or member.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The <span class="Codefragment"><span style="font-size:10.0pt">&lt;include&gt;</span></span>
tag includes information from an external XML file.</p>

<p class="MsoNormal">Note carefully that the documentation file does not provide
full information about the type and members (for example, it does not contain
any type information). To get such information about a type or member, the
documentation file must be used in conjunction with reflection on the actual
type or member.</p>

<p class="Appendix2"><a name="_Toc251613466"></a><a name="_Toc522359378"></a><a name="_Toc510510558"></a><a name="_Ref509214687">A.2 Recommended tags</a></p>

<p class="MsoNormal">The documentation generator must accept and process any tag
that is valid according to the rules of XML. The following tags provide
commonly used functionality in user documentation. (Of course, other tags are
possible.)</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.25in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td valign="top" style="border:solid windowtext 1.0pt;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Tag</b></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Section</b></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Purpose</b></p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;c&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">A.2.1</span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Set text in a code-like font</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;code&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">A.2.2</span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Set one or more lines of source code or program output</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;example&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.3</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Indicate an example</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;exception&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.4</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Identifies the exceptions a method can throw</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;include&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">A.2.5</span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Includes XML from an external file</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;list&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span style="font-size:10.0pt;font-family:&quot;Lucida Console&quot;">A.2.6</span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Create a list or table</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;para&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.7</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Permit structure to be added to text</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;param&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.8</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe a parameter for a method or constructor</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;paramref&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.9</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Identify that a word is a parameter name</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;permission&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.10</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Document the security accessibility of a member</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;remark&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.11</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe additional information about a type</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;returns&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.12</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe the return value of a method</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;see&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.13</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Specify a link</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;seealso&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.14</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Generate a <em>See Also</em> entry</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;summary&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.15</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe a type or a member of a type</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;value&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">A.2.16</span></span><span class="Codefragment"><span style="font-size:10.0pt"> </span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe a property</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;typeparam&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Describe a generic type parameter</p>
  </td>
 </tr>
 <tr>
  <td valign="top" style="border:solid windowtext 1.0pt;border-top:none;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&lt;typeparamref&gt;</span></span></p>
  </td>
  <td width="78" valign="top" style="width:58.7pt;border-top:none;border-left:none;
  border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><span class="Codefragment"><span style="font-size:10.0pt">&nbsp;</span></span></p>
  </td>
  <td width="354" valign="top" style="width:265.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Identify that a word is a type parameter name</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="Appendix3"><a name="_Toc251613467"></a><a name="_Toc522359379"></a><a name="_Ref518038653"></a><a name="_Ref517612614">A.2.1 &lt;c&gt;</a></p>

<p class="MsoNormal">This tag provides a mechanism to indicate that a fragment of
text within a description should be set in a special font such as that used for
a block of code. For lines of actual code, use <span class="Codefragment"><span style="font-size:10.0pt">&lt;code&gt;</span></span> (§A.2.2).</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;c&gt;<i>text</i>&lt;/c&gt;</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point
in a two-dimensional<br>
/// plane.&lt;/summary&gt;</p>

<p class="Code">public class Point <br>
{<br>
&nbsp;&nbsp; // ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613468"></a><a name="_Toc522359380"></a><a name="_Toc510510560"></a><a name="_Ref509222272"></a><a name="_Ref509215642"></a><a name="_Ref509215358">A.2.2 &lt;code&gt;</a></p>

<p class="MsoNormal">This tag is used to set one or more lines of source code or
program output in some special font. For small code fragments in narrative, use
<span class="Codefragment"><span style="font-size:10.0pt">&lt;c&gt;</span></span>
(§A.2.1).</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code"><span lang="FR">&lt;code&gt;<i>source code or program output</i>&lt;/code&gt;</span></p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This method changes the point's location by<br>
///&nbsp;&nbsp; the given x- and y-offsets.<br>
/// &lt;example&gt;For example:<br>
/// &lt;code&gt;<br>
///&nbsp;&nbsp; Point p = new Point(3,5);<br>
///&nbsp;&nbsp; p.Translate(-1,3);<br>
/// &lt;/code&gt;<br>
/// results in &lt;c&gt;p&lt;/c&gt;'s having the value (2,8).<br>
/// &lt;/example&gt;<br>
/// &lt;/summary&gt;</p>

<p class="Code">public void Translate(int xor, int yor) {<br>
&nbsp;&nbsp; X += xor;<br>
&nbsp;&nbsp; Y += yor;<br>
}&nbsp; </p>

<p class="Appendix3"><a name="_Toc251613469"></a><a name="_Toc522359381"></a><a name="_Toc510510561"></a><a name="_Ref502725174">A.2.3 &lt;example&gt;</a></p>

<p class="MsoNormal">This tag allows example code within a comment, to specify
how a method or other library member may be used. Ordinarily, this would also
involve use of the tag <span class="Codefragment"><span style="font-size:10.0pt">&lt;code&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.2</span></span>)
as well.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;example&gt;<i>description</i>&lt;/example&gt;</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="MsoNormal">See <span class="Codefragment"><span style="font-size:10.0pt">&lt;code&gt;</span></span>
<span class="Codefragment"><span style="font-size:10.0pt">(</span></span>§A.2.2<span class="Codefragment"><span style="font-size:10.0pt">)</span></span> for an
example.</p>

<p class="Appendix3"><a name="_Toc251613470"></a><a name="_Toc522359382"></a><a name="_Toc510510562"></a><a name="_Ref509222283">A.2.4 &lt;exception&gt;</a></p>

<p class="MsoNormal">This tag provides a way to document the exceptions a method
can throw.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;exception cref="<i>member</i>"&gt;<i>description</i>&lt;/exception&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><span style="font-size:10.0pt">cref="<i>member</i>"</span></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of a member. The
documentation generator checks that the given member exists and translates <span class="Production">member</span> to the canonical element name in the
documentation file.</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description of the circumstances
in which the exception is thrown.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">public class DataBaseOperations<br>
{<br>
&nbsp;&nbsp; /// &lt;exception
cref="MasterFileFormatCorruptException"&gt;&lt;/exception&gt;<br>
&nbsp;&nbsp; /// &lt;exception
cref="MasterFileLockedOpenException"&gt;&lt;/exception&gt;<br>
&nbsp;&nbsp; public static void ReadRecord(int flag) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (flag == 1)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new MasterFileFormatCorruptException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if (flag == 2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new MasterFileLockedOpenException();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // …<br>
&nbsp;&nbsp; } <br>
}</p>

<p class="Appendix3"><a name="_Toc522359383"></a><a name="_Toc510510563"></a><a name="_Ref509222287"></a><a name="_Toc251613471"></a><a name="_Ref14078574">A.2.5
&lt;include&gt;</a></p>

<p class="MsoNormal">This tag allows including information from an XML document
that is external to the source code file. The external file must be a
well-formed XML document, and an XPath expression is applied to that document
to specify what XML from that document to include. The <span class="CodeChar"><span style="font-size:10.0pt">&lt;include&gt;</span></span> tag is then replaced
with the selected XML from the external document.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;include file="<em><span style="font-family:&quot;Lucida Console&quot;">filename</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal"> path=</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;">xpath</span></em>" <em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">/&gt;</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">where</span></em></p>

<p class="Code" style="margin-left:.25in">file="<em><span style="font-family:
&quot;Lucida Console&quot;">filename</span></em>"</p>

<p class="MsoNormal" style="margin-left:.5in"><em><span style="font-style:normal">The
file name of an external XML file. The file name is interpreted relative to the
file that contains the include tag.</span></em></p>

<p class="Code" style="margin-left:.25in"><em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal">path=</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;">xpath</span></em>"</p>

<p class="MsoNormal" style="margin-left:.5in"><em><span style="font-style:normal">An
XPath expression that selects some of the XML in the external XML file. </span></em></p>

<p class="MsoNormal"><em><b><span style="font-style:normal">Example:</span></b></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">If the source code contained
a declaration like:</span></em></p>

<p class="Code"><em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">///
&lt;include file=</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal">docs.xml</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal"> path=</span></em>'extradoc/class[@name="IntList"]/*'
/&gt;<em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal"><br>
public class IntList { … } </span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">and the external file “</span></em><span class="CodeChar"><span style="font-size:10.0pt">docs.xml</span></span><em><span style="font-style:normal">” had the following contents:</span></em></p>

<p class="Code"><em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">&lt;?xml
version=</span></em>"1.0"?&gt;<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal"><br>
&lt;extradoc&gt;<br>
&nbsp;&nbsp; &lt;class name=</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal">IntList</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal">&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Contains a list of integers.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/summary&gt;<br>
&nbsp;&nbsp; &lt;/class&gt;<br>
&nbsp;&nbsp; &lt;class name=</span></em>"<em><span style="font-family:&quot;Lucida Console&quot;;
font-style:normal">StringList</span></em>"<em><span style="font-family:
&quot;Lucida Console&quot;;font-style:normal">&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Contains a list of integers.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/summary&gt;<br>
&nbsp;&nbsp; &lt;/class&gt;<br>
&lt;/extradoc&gt;</span></em></p>

<p class="MsoNormal"><em><span style="font-style:normal">then the same
documentation is output as if the source code contained:</span></em></p>

<p class="Code"><em><span style="font-family:&quot;Lucida Console&quot;;font-style:normal">///
&lt;summary&gt;<br>
///&nbsp;&nbsp;&nbsp; Contains a list of integers.<br>
/// &lt;/summary&gt;<br>
public class IntList { … } </span></em></p>

<p class="Appendix3"><a name="_Toc251613472"></a><a name="_Ref14078600">A.2.6 &lt;list&gt;</a></p>

<p class="MsoNormal">This tag is used to create a list or table of items. It may
contain a <span class="Codefragment"><span style="font-size:10.0pt">&lt;listheader&gt;</span></span>
block to define the heading row of either a table or definition list. (When
defining a table, only an entry for <span class="Codefragment"><i><span style="font-size:10.0pt">term</span></i></span> in the heading need be
supplied.)</p>

<p class="MsoNormal">Each item in the list is specified with an <span class="Codefragment"><span style="font-size:10.0pt">&lt;item&gt;</span></span>
block. When creating a definition list, both <span class="Codefragment"><i><span style="font-size:10.0pt">term</span></i></span> and <span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span> must be specified.
However, for a table, bulleted list, or numbered list, only <span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span>
need be specified.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;list type="bullet" | "number" |
"table"&gt;<br>
&nbsp;&nbsp; &lt;listheader&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;term&gt;<i>term</i>&lt;/term&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;<i>description</i>&lt;/description&gt;<br>
&nbsp;&nbsp; &lt;/listheader&gt;<br>
&nbsp;&nbsp; &lt;item&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;term&gt;<i>term</i>&lt;/term&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;<i>description</i>&lt;/description&gt;<br>
&nbsp;&nbsp; &lt;/item&gt;<br>
&nbsp;&nbsp; …<br>
&nbsp;&nbsp; &lt;item&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;term&gt;<i>term</i>&lt;/term&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;<i>description</i>&lt;/description&gt;<br>
&nbsp;&nbsp; &lt;/item&gt;<br>
&lt;/list&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">term</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The term to define, whose
definition is in <span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span>.
</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">Either an item in a bullet or
numbered list, or the definition of a <span class="Codefragment"><i><span style="font-size:10.0pt">term</span></i></span>. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">public class MyClass<br>
{<br>
&nbsp;&nbsp; /// &lt;summary&gt;Here is an example of a bulleted list:<br>
&nbsp;&nbsp; /// &lt;list type="bullet"&gt;<br>
&nbsp;&nbsp; /// &lt;item&gt;<br>
&nbsp;&nbsp; /// &lt;description&gt;Item 1.&lt;/description&gt;<br>
&nbsp;&nbsp; /// &lt;/item&gt;<br>
&nbsp;&nbsp; /// &lt;item&gt;<br>
&nbsp;&nbsp; /// &lt;description&gt;Item 2.&lt;/description&gt;<br>
&nbsp;&nbsp; /// &lt;/item&gt;<br>
&nbsp;&nbsp; /// &lt;/list&gt;<br>
&nbsp;&nbsp; /// &lt;/summary&gt;<br>
&nbsp;&nbsp; public static void Main () {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ...<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Appendix3"><a name="_Toc251613473"></a><a name="_Toc522359384"></a><a name="_Toc510510564"></a><a name="_Ref509222296">A.2.7 &lt;para&gt;</a></p>

<p class="MsoNormal">This tag is for use inside other tags, such as <span class="Codefragment"><span style="font-size:10.0pt">&lt;summary&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.11</span></span>)
or <span class="Codefragment"><span style="font-size:10.0pt">&lt;returns&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.12</span></span>),
and permits structure to be added to text.</p>

<p class="MsoNormal"><b><span lang="FR">Syntax:</span></b></p>

<p class="Code"><span lang="FR">&lt;para&gt;<i>content</i>&lt;/para&gt;</span></p>

<p class="MsoNormal"><span lang="FR">where</span></p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span lang="FR" style="font-size:10.0pt">content </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The text of the paragraph. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This is the entry point of the Point class
testing program.<br>
/// &lt;para&gt;This program tests each method and operator, and<br>
/// is intended to be run after any non-trvial maintenance has<br>
/// been performed on the Point class.&lt;/para&gt;&lt;/summary&gt;<br>
public static void Main() {<br>
&nbsp;&nbsp; // ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613474"></a><a name="_Toc522359385"></a><a name="_Toc510510565"></a><a name="_Ref509222304">A.2.8 &lt;param&gt;</a></p>

<p class="MsoNormal">This tag is used to describe a parameter for a method,
constructor, or indexer.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;param name="<i>name</i>"&gt;<i>description</i>&lt;/param&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">name </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of the parameter.</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description of the parameter. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This method changes the point's location to<br>
///&nbsp;&nbsp; the given coordinates.&lt;/summary&gt;<br>
/// &lt;param name="xor"&gt;the new x-coordinate.&lt;/param&gt;<br>
/// &lt;param name="yor"&gt;the new y-coordinate.&lt;/param&gt;<br>
public void Move(int xor, int yor) {<br>
&nbsp;&nbsp; X = xor;<br>
&nbsp;&nbsp; Y = yor;<br>
}</p>

<p class="Appendix3"><a name="_Toc251613475"></a><a name="_Toc522359386"></a><a name="_Toc510510566"></a><a name="_Ref509222310">A.2.9 &lt;paramref&gt;</a></p>

<p class="MsoNormal">This tag is used to indicate that a word is a parameter. The
documentation file can be processed to format this parameter in some distinct
way.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;paramref name="<i>name</i>"/&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">name</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of the parameter.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This constructor initializes the new Point to<br>
///&nbsp;&nbsp; (&lt;paramref name="xor"/&gt;,&lt;paramref
name="yor"/&gt;).&lt;/summary&gt;<br>
/// &lt;param name="xor"&gt;the new Point's
x-coordinate.&lt;/param&gt;<br>
/// &lt;param name="yor"&gt;the new Point's
y-coordinate.&lt;/param&gt;</p>

<p class="Code">public Point(int xor, int yor) {<br>
&nbsp;&nbsp; X = xor;<br>
&nbsp;&nbsp; Y = yor;<br>
}</p>

<p class="Appendix3"><a name="_Toc251613476"></a><a name="_Toc522359387"></a><a name="_Toc510510567"></a><a name="_Ref509222318">A.2.10 &lt;permission&gt;</a></p>

<p class="MsoNormal">This tag allows the security accessibility of a member to be
documented. </p>

<p class="MsoNormal"><b><span lang="FR">Syntax:</span></b></p>

<p class="Code"><span lang="FR">&lt;permission cref="<i>member</i>"&gt;<i>description</i>&lt;/permission&gt;</span></p>

<p class="MsoNormal">where </p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><span style="font-size:10.0pt">cref="<i>member</i>"</span></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of a member. The
documentation generator checks that the given code element exists and
translates <span class="Production">member</span> to the canonical element name
in the documentation file.</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description of the access to the
member.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;permission
cref="System.Security.PermissionSet"&gt;Everyone can<br>
/// access this method.&lt;/permission&gt;</p>

<p class="Code">public static void Test() {<br>
&nbsp;&nbsp; // ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613477"></a><a name="_Toc522359388"></a><a name="_Toc510510568"></a><a name="_Ref509222326"></a><a name="_Ref509216639"></a><a name="_Ref509216042">A.2.11 &lt;remark&gt;</a></p>

<p class="MsoNormal">This tag is used to specify extra information about a type.
(Use <span class="Codefragment"><span style="font-size:10.0pt">&lt;summary&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.15</span></span>)
to describe the type itself and the members of a type.)</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;remark&gt;<i>description</i>&lt;/remark&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The text of the remark. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point
in a <br>
/// two-dimensional plane.&lt;/summary&gt;<br>
/// &lt;remark&gt;Uses polar coordinates&lt;/remark&gt;<br>
public class Point <br>
{<br>
&nbsp;&nbsp; // ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613478"></a><a name="_Toc522359389"></a><a name="_Toc510510569"></a><a name="_Ref509222345"></a><a name="_Ref509216030">A.2.12
&lt;returns&gt;</a></p>

<p class="MsoNormal">This tag is used to describe the return value of a method.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;returns&gt;<i>description</i>&lt;/returns&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description of the return value. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;Report a point's location as a
string.&lt;/summary&gt;<br>
/// &lt;returns&gt;A string representing a point's location, in the form (x,y),<br>
///&nbsp;&nbsp; without any leading, trailing, or embedded whitespace.&lt;/returns&gt;<br>
public override string ToString() {<br>
&nbsp;&nbsp; return "(" + X + "," + Y + ")";<br>
}</p>

<p class="Appendix3"><a name="_Toc251613479"></a><a name="_Toc522359390"></a><a name="_Toc510510570"></a><a name="_Ref509222352"></a><a name="_Ref509216501">A.2.13
&lt;see&gt;</a></p>

<p class="MsoNormal">This tag allows a link to be specified within text. Use <span class="Codefragment"><span style="font-size:10.0pt">&lt;seealso&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.14</span></span>)
to indicate text that is to appear in a <em>See Also</em> section.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;see cref="<i>member</i>"/&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><span style="font-size:10.0pt">cref="<i>member</i>"</span></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of a member. The
documentation generator checks that the given code element exists and changes <span class="Production">member</span> to the element name in the generated
documentation file.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This method changes the point's location to<br>
///&nbsp;&nbsp; the given coordinates.&lt;/summary&gt;<br>
/// &lt;see cref="Translate"/&gt;<br>
public void Move(int xor, int yor) {<br>
&nbsp;&nbsp; X = xor;<br>
&nbsp;&nbsp; Y = yor;<br>
}</p>

<p class="Code">/// &lt;summary&gt;This method changes the point's location by<br>
///&nbsp;&nbsp; the given x- and y-offsets.<br>
/// &lt;/summary&gt;<br>
/// &lt;see cref="Move"/&gt;<br>
public void Translate(int xor, int yor) {<br>
&nbsp;&nbsp; X += xor;<br>
&nbsp;&nbsp; Y += yor;<br>
}</p>

<p class="Appendix3"><a name="_Toc251613480"></a><a name="_Toc522359391"></a><a name="_Toc510510571"></a><a name="_Ref509222359"></a><a name="_Ref509216414">A.2.14
&lt;seealso&gt;</a></p>

<p class="MsoNormal">This tag allows an entry to be generated for the <em>See
Also</em> section. Use <span class="Codefragment"><span style="font-size:10.0pt">&lt;see&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.13</span></span>)
to specify a link from within text.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;seealso cref="<i>member</i>"/&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><span style="font-size:10.0pt">cref="<i>member</i>" </span></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of a member. The
documentation generator checks that the given code element exists and changes <span class="Production">member</span> to the element name in the generated
documentation file.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This method determines whether two Points have
the same<br>
///&nbsp;&nbsp; location.&lt;/summary&gt;<br>
/// &lt;seealso cref="operator=="/&gt;<br>
/// &lt;seealso cref="operator!="/&gt;<br>
public override bool Equals(object o) {<br>
&nbsp;&nbsp; // ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613481"></a><a name="_Toc522359392"></a><a name="_Toc510510572"></a><a name="_Ref502731119"></a><a name="_Ref502728779">A.2.15
&lt;summary&gt;</a></p>

<p class="MsoNormal">This tag can be used to describe a type or a member of a
type. Use <span class="Codefragment"><span style="font-size:10.0pt">&lt;remark&gt;</span></span>
(§<span class="Codefragment"><span style="font-family:&quot;Times New Roman&quot;,&quot;serif&quot;">A.2.11</span></span>)
to describe the type itself.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;summary&gt;<i>description</i>&lt;/summary&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A summary of the type or member. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This constructor initializes the new Point to
(0,0).&lt;/summary&gt;<br>
public Point() : this(0,0) {<br>
}</p>

<p class="Appendix3"><a name="_Toc251613482"></a><a name="_Toc522359393"></a><a name="_Toc510510573"></a><a name="_Ref509222174">A.2.16 &lt;value&gt;</a></p>

<p class="MsoNormal">This tag allows a property to be described.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;value&gt;<i>property</i> <i>description</i>&lt;/value&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">property description </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description for the property.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;value&gt;Property &lt;c&gt;X&lt;/c&gt; represents the
point's x-coordinate.&lt;/value&gt;<br>
public int X<br>
{<br>
&nbsp;&nbsp; get { return x; }<br>
&nbsp;&nbsp; set { x = value; }<br>
}</p>

<p class="Appendix3"><a name="_Toc522359394"></a><a name="_Toc510510574"></a><a name="_Toc251613483">A.2.17 &lt;typeparam&gt;</a></p>

<p class="MsoNormal">This tag is used to describe a generic type parameter for a
class, struct, interface, delegate, or method.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;typeparam name="<i>name</i>"&gt;<i>description</i>&lt;/typeparam&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">name </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of the type parameter.</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">description </span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">A description of the type
parameter. </p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;A generic list class.&lt;/summary&gt;<br>
/// &lt;typeparam name="T"&gt;The type stored by the
list.&lt;/typeparam&gt;<br>
public class MyList&lt;T&gt; {<br>
&nbsp;&nbsp;&nbsp; ...<br>
}</p>

<p class="Appendix3"><a name="_Toc251613484">A.2.18 &lt;typeparamref&gt;</a></p>

<p class="MsoNormal">This tag is used to indicate that a word is a type
parameter. The documentation file can be processed to format this type
parameter in some distinct way.</p>

<p class="MsoNormal"><b>Syntax:</b></p>

<p class="Code">&lt;typeparamref name="<i>name</i>"/&gt;</p>

<p class="MsoNormal">where</p>

<p class="MsoNormal" style="margin-left:.25in"><span class="Codefragment"><i><span style="font-size:10.0pt">name</span></i></span></p>

<p class="MsoNormal" style="margin-left:.5in">The name of the type parameter.</p>

<p class="MsoNormal"><b>Example:</b></p>

<p class="Code">/// &lt;summary&gt;This method fetches data and returns a list of
&lt;typeparamref name=”T”&gt; ”/&gt;”&gt; .&lt;/summary&gt;<br>
/// &lt;param name="string"&gt;query to execute&lt;/param&gt;<br>
<br>
public List&lt;T&gt; FetchData&lt;T&gt;(string query) {<br>
&nbsp;&nbsp; ...<br>
}</p>

<p class="Appendix2"><a name="_Toc251613485">A.3 Processing the documentation
file</a></p>

<p class="MsoNormal">The documentation generator generates an ID string&nbsp;for each element in the source code that is tagged with a documentation comment.
This ID string uniquely identifies a source element. A documentation viewer can
use an ID string to identify the corresponding metadata/reflection item to
which the documentation applies.</p>

<p class="MsoNormal">The documentation file is not a hierarchical representation
of the source code; rather, it is a flat list with a generated ID string for
each element.</p>

<p class="Appendix3"><a name="_Toc251613486"></a><a name="_Toc522359395"></a><a name="_Toc510510575">A.3.1 ID string format</a></p>

<p class="MsoNormal">The documentation generator observes the following rules
when it generates the ID strings: </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>No white space is placed in the string. </p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The first part of the string identifies the kind of member being
documented, via a single character followed by a colon. The following kinds of
members are defined:</p>

<p class="TableStart">&nbsp;</p>

<table class="MsoNormalTable" border="1" cellspacing="0" cellpadding="0" style="margin-left:.5in;border-collapse:collapse;border:none">
 <tbody><tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Character</b></p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table"><b>Description</b></p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">E</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Event</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">F</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Field</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">M</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Method (including constructors, destructors, and operators)</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">N</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Namespace</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">P</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Property (including indexers)</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">T</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Type (such as class, delegate, enum, interface, and struct)</p>
  </td>
 </tr>
 <tr>
  <td width="85" valign="top" style="width:63.9pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0in 5.4pt 0in 5.4pt">
  <p class="Table" align="center" style="text-align:center">!</p>
  </td>
  <td width="402" valign="top" style="width:301.5pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0in 5.4pt 0in 5.4pt">
  <p class="Table">Error string; the rest of the string provides information
  about the error. For example, the documentation generator generates error
  information for links that cannot be resolved.</p>
  </td>
 </tr>
</tbody></table>

<p class="TableEnd">&nbsp;</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The second part of the string is the fully qualified name of the
element, starting at the root of the namespace. The name of the element, its
enclosing type(s), and namespace are separated by periods. If the name of the
item itself has periods, they are replaced by <span class="Codefragment"><span style="font-size:10.0pt">#</span></span> (<span class="Codefragment"><span style="font-size:10.0pt">U+0023</span></span>) characters. (It is assumed that
no element has this character in its name.)</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>For methods and properties with arguments, the argument list
follows, enclosed in parentheses. For those without arguments, the parentheses
are omitted. The arguments are separated by commas. The encoding of each
argument is the same as a CLI signature, as follows: </p>

<p class="MsoListBullet2"><span style="font-family:&quot;Courier New&quot;">o<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span>Arguments are
represented by their documentation name, which is based on their fully
qualified name, modified as follows:</p>

<p class="MsoListBullet3">Arguments that represent generic types have an appended
“’” character followed by the number of type parameters</p>

<p class="MsoListBullet3">Arguments having the <span class="Codefragment"><span style="font-size:10.0pt">out</span></span> or <span class="Codefragment"><span style="font-size:10.0pt">ref</span></span> modifier have an <span class="Codefragment"><span style="font-size:10.0pt">@</span></span> following
their type name. Arguments passed by value or via <span class="Codefragment"><span style="font-size:10.0pt">params</span></span> have no special notation. </p>

<p class="MsoListBullet3">Arguments that are arrays are represented as <span class="Codefragment"><span style="font-size:10.0pt">[</span></span> <span class="Production">lowerbound</span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Production">size</span> <span class="Codefragment"><span style="font-size:10.0pt">,</span></span> … <span class="Codefragment"><span style="font-size:10.0pt">,</span></span> <span class="Production">lowerbound</span> <span class="Codefragment"><span style="font-size:10.0pt">:</span></span> <span class="Production">size</span> <span class="Codefragment"><span style="font-size:10.0pt">]</span></span> where the
number of commas is the rank&nbsp;less one, and the lower bounds and size of
each dimension, if known, are represented in decimal. If a lower bound or size
is not specified, it is omitted. If the lower bound and size for a particular dimension
are omitted, the “<span class="Codefragment"><span style="font-size:10.0pt">:</span></span>”
is omitted as well. Jagged arrays are represented by one “<span class="Codefragment"><span style="font-size:10.0pt">[]</span></span>” per level. </p>

<p class="MsoListBullet3">Arguments that have pointer types other than void are
represented using a <span class="Codefragment"><span style="font-size:10.0pt">*</span></span>
following the type name. A void pointer is represented using a type name of <span class="Codefragment"><span style="font-size:10.0pt">System.Void</span></span>.</p>

<p class="MsoListBullet3">Arguments that refer to generic type parameters defined
on types are encoded using the “`” character followed by the zero-based index
of the type parameter.</p>

<p class="MsoListBullet3">Arguments that use generic type parameters defined in
methods use a double-backtick “``” instead of the “`” used for types.</p>

<p class="MsoListBullet3">Arguments that refer to constructed generic types are
encoded using the generic type, followed by “{“, followed by a comma-separated
list of type arguments, followed by “}”.</p>

<p class="Appendix3"><a name="_Toc251613487"></a><a name="_Toc522359396"></a><a name="_Toc510510576">A.3.2 ID string examples</a></p>

<p class="MsoNormal">The following examples each show a fragment of C# code,
along with the ID string produced from each source element capable of having a
documentation comment:</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Types are represented using their fully qualified name, augmented
with generic information: </p>

<p class="Code">enum Color { Red, Blue, Green }</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; interface IProcess {...}</p>

<p class="Code">&nbsp;&nbsp; struct ValueType {...}</p>

<p class="Code">&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class NestedClass {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public interface IMenuItem {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public delegate void Del(int i);</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public enum Direction { North, South, East, West }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class MyList&lt;T&gt;<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class Helper&lt;U,V&gt; {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"T:Color"<br>
"T:Acme.IProcess"<br>
"T:Acme.ValueType"<br>
"T:Acme.Widget"<br>
"T:Acme.Widget.NestedClass"<br>
"T:Acme.Widget.IMenuItem"<br>
"T:Acme.Widget.Del"<br>
"T:Acme.Widget.Direction"<br>
”T:Acme.MyList`1”<br>
”T:Acme.MyList`1.Helper`2”</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Fields are represented by their fully qualified name:</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; struct ValueType<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int total;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class NestedClass<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private int value;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private string message;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private static Color defaultColor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private const double PI = 3.14159;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; protected readonly double monthlyAverage;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private long[] array1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private Widget[,] array2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private unsafe int *pCount;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private unsafe float **ppValues;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"F:Acme.ValueType.total"<br>
"F:Acme.Widget.NestedClass.value"<br>
"F:Acme.Widget.message"<br>
"F:Acme.Widget.defaultColor"<br>
"F:Acme.Widget.PI"<br>
"F:Acme.Widget.monthlyAverage"<br>
"F:Acme.Widget.array1"<br>
"F:Acme.Widget.array2"<br>
"F:Acme.Widget.pCount"<br>
"F:Acme.Widget.ppValues"</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Constructors. </p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static Widget() {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Widget() {...}</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public Widget(string s) {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.Widget.#cctor"<br>
"M:Acme.Widget.#ctor"<br>
"M:Acme.Widget.#ctor(System.String)"</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Destructors.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ~Widget() {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.Widget.Finalize"</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Methods.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; struct ValueType<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M(int i) {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class NestedClass<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M(int i) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static void M0() {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M1(char c, out float f, ref ValueType v) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M2(short[] x1, int[,] x2, long[][] x3) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M3(long[][] x3, Widget[][,,] x4) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public unsafe void M4(char *pc, Color **pf) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public unsafe void M5(void *pv, double *[][,] pd) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void M6(int i, params object[] args) {...}<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class MyList&lt;T&gt;<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Test(T t) { }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; class UseList<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Process(MyList&lt;int&gt; list) { }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public MyList&lt;T&gt; GetValues&lt;T&gt;(T inputValue) { return null; }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.ValueType.M(System.Int32)"<br>
"M:Acme.Widget.NestedClass.M(System.Int32)"<br>
"M:Acme.Widget.M0"<br>
"M:Acme.Widget.M1(System.Char,System.Single@,Acme.ValueType@)"<br>
"M:Acme.Widget.M2(System.Int16[],System.Int32[0:,0:],System.Int64[][])"<br>
"M:Acme.Widget.M3(System.Int64[][],Acme.Widget[0:,0:,0:][])"<br>
"M:Acme.Widget.M4(System.Char*,Color**)"<br>
"M:Acme.Widget.M5(System.Void*,System.Double*[0:,0:][])"<br>
"M:Acme.Widget.M6(System.Int32,System.Object[])"<br>
”M:Acme.MyList`1.Test(`0)”<br>
”M:Acme.UseList.Process(Acme.MyList{System.Int32})”<br>
”M:Acme.UseList.GetValues``(``0)”</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Properties and indexers.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int Width { get {...} set {...} }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int this[int i] { get {...} set {...} }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public int this[string s, int i] { get {...} set {...} }<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"P:Acme.Widget.Width"<br>
"P:Acme.Widget.Item(System.Int32)"<br>
"P:Acme.Widget.Item(System.String,System.Int32)"</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Events.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public event Del AnEvent;<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"E:Acme.Widget.AnEvent"</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Unary operators.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static Widget operator+(Widget x) {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.Widget.op_UnaryPlus(Acme.Widget)"</p>

<p class="MsoNormal" style="margin-left:.25in">The complete set of unary operator
function names used is as follows: <span class="Codefragment"><span style="font-size:10.0pt">op_UnaryPlus</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_UnaryNegation</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_LogicalNot</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_OnesComplement</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_Increment</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_Decrement</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_True</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">op_False</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Binary operators.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static Widget operator+(Widget x1, Widget x2) {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.Widget.op_Addition(Acme.Widget,Acme.Widget)"</p>

<p class="MsoNormal" style="margin-left:.25in">The complete set of binary
operator function names used is as follows: <span class="Codefragment"><span style="font-size:10.0pt">op_Addition</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_Subtraction</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_Multiply</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_Division</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_Modulus</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_BitwiseAnd</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_BitwiseOr</span></span>, <span class="Codefragment"><span style="font-size:10.0pt">op_ExclusiveOr</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_LeftShift</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_RightShift</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_Equality</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_Inequality</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_LessThan</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_LessThanOrEqual</span></span>,
<span class="Codefragment"><span style="font-size:10.0pt">op_GreaterThan</span></span>,
and <span class="Codefragment"><span style="font-size:10.0pt">op_GreaterThanOrEqual</span></span>.</p>

<p class="MsoListBullet"><span style="font-family:Symbol">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Conversion operators have a trailing “<span class="Codefragment"><span style="font-size:10.0pt">~</span></span>” followed by the return type.</p>

<p class="Code">namespace Acme<br>
{<br>
&nbsp;&nbsp; class Widget: IProcess<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static explicit operator int(Widget x) {...}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static implicit operator long(Widget x) {...}<br>
&nbsp;&nbsp; }<br>
}</p>

<p class="Code">"M:Acme.Widget.op_Explicit(Acme.Widget)~System.Int32"<br>
"M:Acme.Widget.op_Implicit(Acme.Widget)~System.Int64"</p>

<p class="Appendix2"><a name="_Toc251613488"></a><a name="_Toc522359397"></a><a name="_Toc510510577">A.4 An example</a></p>

<p class="Appendix3"><a name="_Toc251613489"></a><a name="_Toc522359398"></a><a name="_Toc510510578">A.4.1 C# source code</a></p>

<p class="MsoNormal">The following example shows the source code of a <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span> class:</p>

<p class="Code">namespace Graphics<br>
{<br>
<br>
/// &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point in a
two-dimensional plane.<br>
/// &lt;/summary&gt;<br>
public class Point <br>
{</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;Instance variable &lt;c&gt;x&lt;/c&gt;
represents the point's<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; x-coordinate.&lt;/summary&gt;<br>
&nbsp;&nbsp; private int x;</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;Instance variable &lt;c&gt;y&lt;/c&gt;
represents the point's<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; y-coordinate.&lt;/summary&gt;<br>
&nbsp;&nbsp; private int y;</p>

<p class="Code">&nbsp;&nbsp; /// &lt;value&gt;Property &lt;c&gt;X&lt;/c&gt; represents the
point's x-coordinate.&lt;/value&gt;<br>
&nbsp;&nbsp; public int X<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return x; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { x = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;value&gt;Property &lt;c&gt;Y&lt;/c&gt; represents the
point's y-coordinate.&lt;/value&gt;<br>
&nbsp;&nbsp; public int Y<br>
&nbsp;&nbsp; {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get { return y; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set { y = value; }<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This constructor initializes the new Point
to<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; (0,0).&lt;/summary&gt;<br>
&nbsp;&nbsp; public Point() : this(0,0) {}</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This constructor initializes the new Point
to<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; (&lt;paramref name="xor"/&gt;,&lt;paramref
name="yor"/&gt;).&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the new Point's
x-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the new Point's
y-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp; public Point(int xor, int yor) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = xor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y = yor;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This method changes the point's location to<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; the given coordinates.&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the new
x-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the new
y-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;see cref="Translate"/&gt;<br>
&nbsp;&nbsp; public void Move(int xor, int yor) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X = xor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y = yor;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This method changes the point's location by<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; the given x- and y-offsets.<br>
&nbsp;&nbsp; /// &lt;example&gt;For example:<br>
&nbsp;&nbsp; /// &lt;code&gt;<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; Point p = new Point(3,5);<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; p.Translate(-1,3);<br>
&nbsp;&nbsp; /// &lt;/code&gt;<br>
&nbsp;&nbsp; /// results in &lt;c&gt;p&lt;/c&gt;'s having the value (2,8).<br>
&nbsp;&nbsp; /// &lt;/example&gt;<br>
&nbsp;&nbsp; /// &lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the relative
x-offset.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the relative y-offset.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;see cref="Move"/&gt;<br>
&nbsp;&nbsp; public void Translate(int xor, int yor) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X += xor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y += yor;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This method determines whether two Points
have the same<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;o&lt;/c&gt; is the object to be compared to the
current object.<br>
&nbsp;&nbsp; /// &lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;returns&gt;True if the Points have the same location and they have<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; the exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="operator=="/&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="operator!="/&gt;<br>
&nbsp;&nbsp; public override bool Equals(object o) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (o == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (this == o) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (GetType() == o.GetType()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point p = (Point)o;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (X == p.X) &amp;&amp; (Y == p.Y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;Report a point's location as a string.&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;returns&gt;A string representing a point's location, in the form
(x,y),<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; without any leading, training, or embedded whitespace.&lt;/returns&gt;<br>
&nbsp;&nbsp; public override string ToString() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "(" + X + "," + Y + ")";<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This operator determines whether two Points
have the same<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;p1&lt;/c&gt; is the first Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;p2&lt;/c&gt; is the second Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;returns&gt;True if the Points have the same location and they have<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; the exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="Equals"/&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="operator!="/&gt;<br>
&nbsp;&nbsp; public static bool operator==(Point p1, Point p2) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((object)p1 == null || (object)p2 == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp; &nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (p1.GetType() == p2.GetType()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (p1.X == p2.X) &amp;&amp; (p1.Y == p2.Y);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This operator determines whether two Points
have the same<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;p1&lt;/c&gt; is the first Point to be compared.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;param&gt;&lt;c&gt;p2&lt;/c&gt; is the second Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp; /// &lt;returns&gt;True if the Points do not have the same location and the<br>
&nbsp;&nbsp; ///&nbsp;&nbsp; exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="Equals"/&gt;<br>
&nbsp;&nbsp; /// &lt;seealso cref="operator=="/&gt;<br>
&nbsp;&nbsp; public static bool operator!=(Point p1, Point p2) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return !(p1 == p2);<br>
&nbsp;&nbsp; }</p>

<p class="Code">&nbsp;&nbsp; /// &lt;summary&gt;This is the entry point of the Point class
testing<br>
&nbsp;&nbsp; /// program.<br>
&nbsp;&nbsp; /// &lt;para&gt;This program tests each method and operator, and<br>
&nbsp;&nbsp; /// is intended to be run after any non-trvial maintenance has<br>
&nbsp;&nbsp; /// been performed on the Point class.&lt;/para&gt;&lt;/summary&gt;<br>
&nbsp;&nbsp; public static void Main() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // class test code goes here<br>
&nbsp;&nbsp; }<br>
}<br>
}</p>

<p class="Appendix3"><a name="_Toc251613490"></a><a name="_Toc522359399"></a><a name="_Toc510510579">A.4.2 Resulting XML</a></p>

<p class="MsoNormal">Here is the output produced by one documentation generator
when given the source code for class <span class="Codefragment"><span style="font-size:10.0pt">Point</span></span>, shown above:</p>

<p class="Code">&lt;?xml version="1.0"?&gt;<br>
&lt;doc&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;assembly&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;name&gt;Point&lt;/name&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/assembly&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;members&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="T:Graphics.Point"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;Class &lt;c&gt;Point&lt;/c&gt; models a point in a
two-dimensional<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plane.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="F:Graphics.Point.x"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;Instance variable &lt;c&gt;x&lt;/c&gt; represents
the point's<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x-coordinate.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="F:Graphics.Point.y"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;Instance variable &lt;c&gt;y&lt;/c&gt; represents
the point's<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y-coordinate.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="M:Graphics.Point.#ctor"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This constructor initializes the new Point to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (0,0).&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member
name="M:Graphics.Point.#ctor(System.Int32,System.Int32)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This constructor initializes the new Point to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&lt;paramref name="xor"/&gt;,&lt;paramref
name="yor"/&gt;).&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the new Point's
x-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the new Point's
y-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member
name="M:Graphics.Point.Move(System.Int32,System.Int32)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This method changes the point's location to<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the given coordinates.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the new
x-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the new
y-coordinate.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;see
cref="M:Graphics.Point.Translate(System.Int32,System.Int32)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name="M:Graphics.Point.Translate(System.Int32,System.Int32)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This method changes the point's location by<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the given x- and y-offsets.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;example&gt;For example:<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;code&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Point p = new Point(3,5);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.Translate(-1,3);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/code&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; results in &lt;c&gt;p&lt;/c&gt;'s having the value (2,8).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/example&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;xor&lt;/c&gt; is the relative
x-offset.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;yor&lt;/c&gt; is the relative
y-offset.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;see cref="M:Graphics.Point.Move(System.Int32,System.Int32)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member
name="M:Graphics.Point.Equals(System.Object)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This method determines whether two Points have the
same<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;o&lt;/c&gt; is the object to be compared to
the current<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;returns&gt;True if the Points have the same location and they
have<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cref="M:Graphics.Point.op_Equality(Graphics.Point,Graphics.Point)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cref="M:Graphics.Point.op_Inequality(Graphics.Point,Graphics.Point)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="M:Graphics.Point.ToString"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;Report a point's location as a
string.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;returns&gt;A string representing a point's location, in the
form<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (x,y),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; without any leading, training, or embedded
whitespace.&lt;/returns&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name="M:Graphics.Point.op_Equality(Graphics.Point,Graphics.Point)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This operator determines whether two Points have the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; same<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;p1&lt;/c&gt; is the first Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;p2&lt;/c&gt; is the second Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;returns&gt;True if the Points have the same location and they
have<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso cref="M:Graphics.Point.Equals(System.Object)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso<br>
&nbsp;&nbsp;&nbsp;&nbsp;
cref="M:Graphics.Point.op_Inequality(Graphics.Point,Graphics.Point)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name="M:Graphics.Point.op_Inequality(Graphics.Point,Graphics.Point)"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This operator determines whether two Points have the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; same<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; location.&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;p1&lt;/c&gt; is the first Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;param&gt;&lt;c&gt;p2&lt;/c&gt; is the second Point to be
compared.&lt;/param&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;returns&gt;True if the Points do not have the same location and<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exact same type; otherwise, false.&lt;/returns&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso
cref="M:Graphics.Point.Equals(System.Object)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;seealso<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cref="M:Graphics.Point.op_Equality(Graphics.Point,Graphics.Point)"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="M:Graphics.Point.Main"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;summary&gt;This is the entry point of the Point class testing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; program.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;para&gt;This program tests each method and operator, and<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is intended to be run after any non-trvial maintenance has<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; been performed on the Point class.&lt;/para&gt;&lt;/summary&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="P:Graphics.Point.X"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;Property &lt;c&gt;X&lt;/c&gt; represents the point's<br>
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x-coordinate.&lt;/value&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;</p>

<p class="Code">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;member name="P:Graphics.Point.Y"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;value&gt;Property &lt;c&gt;Y&lt;/c&gt; represents the point's<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y-coordinate.&lt;/value&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/member&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/members&gt;<br>
&lt;/doc&gt;</p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section19">

<p class="MsoNormal">&nbsp;</p>

<p class="Appendix1"><a name="_Toc251613491">B. Grammar</a></p>

<p class="MsoNormal">This appendix contains summaries of the lexical and
syntactic grammars found in the main document, and of the grammar extensions
for unsafe code. Grammar productions appear here in the same order that they
appear in the main document.</p>

<p class="Appendix2"><a name="_Toc251613492">B.1 Lexical grammar</a></p>

<p class="Grammar">input:<br>
input-section<sub>opt</sub></p>

<p class="Grammar">input-section:<br>
input-section-part<br>
input-section&nbsp;&nbsp; input-section-part</p>

<p class="Grammar">input-section-part:<br>
input-elements<sub>opt</sub>&nbsp;&nbsp; new-line<br>
pp-directive</p>

<p class="Grammar">input-elements:<br>
input-element<br>
input-elements&nbsp;&nbsp; input-element</p>

<p class="Grammar">input-element:<br>
whitespace<br>
comment<br>
token</p>

<p class="Appendix3"><a name="_Toc251613493">B.1.1 Line terminators</a></p>

<p class="Grammar">new-line:<br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">) followed by line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span style="font-style:normal">Next line character</span><span style="font-style:normal">&nbsp;(</span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0085</span></span><span style="font-style:normal">)</span><br>
<span class="GrammarText"><span style="font-style:normal">Line separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2028</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Paragraph separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2029</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Appendix3"><a name="_Toc251613494">B.1.2 Comments</a></p>

<p class="Grammar">comment:<br>
single-line-comment<br>
delimited-comment</p>

<p class="Grammar">single-line-comment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">//</span></span>&nbsp;&nbsp;
input-characters<sub>opt</sub></p>

<p class="Grammar">input-characters:<br>
input-character<br>
input-characters&nbsp;&nbsp; input-character</p>

<p class="Grammar">input-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any Unicode character
except a </span></span>new-line-character</p>

<p class="Grammar">new-line-character:<br>
<span class="GrammarText"><span style="font-style:normal">Carriage return
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+000D</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Line feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000A</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span style="font-style:normal">Next line character</span><span style="font-style:normal">&nbsp;(</span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0085</span></span><span style="font-style:normal">)</span><br>
<span class="GrammarText"><span style="font-style:normal">Line separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2028</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Paragraph separator
character (</span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+2029</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Grammar">delimited-comment:<br>
<span style="font-family:&quot;Lucida Console&quot;">/*</span>&nbsp;&nbsp; delimited-comment-text<sub>opt</sub>&nbsp;&nbsp;
asterisks&nbsp;&nbsp; <span style="font-family:&quot;Lucida Console&quot;">/</span></p>

<p class="Grammar">delimited-comment-text:<br>
delimited-comment-section<br>
delimited-comment-text&nbsp;&nbsp; delimited-comment-section</p>

<p class="Grammar">delimited-comment-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">/</span></span><br>
asterisks<sub>opt</sub>&nbsp;&nbsp; not-slash-or-asterisk</p>

<p class="Grammar">asterisks:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span><br>
asterisks&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="Grammar">not-slash-or-asterisk:<br>
<span class="GrammarText"><span style="font-style:normal">Any Unicode character
except </span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">/</span></span><span class="GrammarText"><span style="font-style:normal"> or </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="Appendix3"><a name="_Toc251613495">B.1.3 White space</a></p>

<p class="Grammar">whitespace:<br>
<span class="GrammarText"><span style="font-style:normal">Any character with
Unicode class Zs</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Horizontal tab character
(</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">U+0009</span></span><span class="GrammarText"><span style="font-style:
normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Vertical tab character
(</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">U+000B</span></span><span class="GrammarText"><span style="font-style:
normal">)</span></span><br>
<span class="GrammarText"><span style="font-style:normal">Form feed character (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+000C</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Appendix3"><a name="_Toc251613496">B.1.4 Tokens</a></p>

<p class="Grammar">token:<br>
identifier<br>
keyword<br>
integer-literal<br>
real-literal<br>
character-literal<br>
string-literal<br>
operator-or-punctuator</p>

<p class="Appendix3"><a name="_Toc251613497">B.1.5 Unicode character escape
sequences</a></p>

<p class="Grammar">unicode-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\u</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\U</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp; hex-digit&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit</p>

<p class="Appendix3"><a name="_Toc251613498">B.1.6 Identifiers</a></p>

<p class="Grammar">identifier:<br>
available-identifier<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">@</span></span>&nbsp;&nbsp;
identifier-or-keyword</p>

<p class="Grammar">available-identifier:<br>
<span class="GrammarText"><span style="font-style:normal">An </span></span>identifier-or-keyword<span class="GrammarText"><span style="font-style:normal"> that is not a </span></span>keyword</p>

<p class="Grammar">identifier-or-keyword:<br>
identifier-start-character&nbsp;&nbsp; identifier-part-characters<sub>opt</sub></p>

<p class="Grammar">identifier-start-character:<br>
letter-character<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">_</span></span>
<span class="GrammarText"><span style="font-style:normal">(the underscore
character </span></span><span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">U+005F</span></span><span class="GrammarText"><span style="font-style:normal">)</span></span></p>

<p class="Grammar">identifier-part-characters:<br>
identifier-part-character<br>
identifier-part-characters&nbsp;&nbsp; identifier-part-character</p>

<p class="Grammar">identifier-part-character:<br>
letter-character<br>
decimal-digit-character<br>
connecting-character<br>
combining-character<br>
formatting-character</p>

<p class="Grammar">letter-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
classes Lu, Ll, Lt, Lm, Lo, or Nl</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
classes Lu, Ll, Lt, Lm, Lo, or Nl</span></span></p>

<p class="Grammar">combining-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
classes Mn or Mc</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
classes Mn or Mc</span></span></p>

<p class="Grammar">decimal-digit-character:<br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Nd</span></span> <br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Nd</span></span></p>

<p class="Grammar">connecting-character:&nbsp; <br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Pc</span></span><br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Pc</span></span></p>

<p class="Grammar">formatting-character:&nbsp; <br>
<span class="GrammarText"><span style="font-style:normal">A Unicode character of
the class Cf</span></span><br>
<span class="GrammarText"><span style="font-style:normal">A </span></span>unicode-escape-sequence<span class="GrammarText"><span style="font-style:normal"> representing a character of
the class Cf</span></span></p>

<p class="Appendix3"><a name="_Toc251613499">B.1.7 Keywords</a></p>

<p class="Grammar">keyword:&nbsp; <span class="GrammarText"><span style="font-style:
normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">abstract&nbsp;&nbsp;&nbsp; as&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; base&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break<br>
byte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; catch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; checked<br>
class&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue&nbsp;&nbsp;&nbsp; decimal&nbsp;&nbsp;&nbsp;&nbsp; default<br>
delegate&nbsp;&nbsp;&nbsp; do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enum<br>
event&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; explicit&nbsp;&nbsp;&nbsp; extern&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finally<br>
fixed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreach&nbsp;&nbsp;&nbsp;&nbsp; goto<br>
if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implicit&nbsp;&nbsp;&nbsp; in&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interface<br>
internal&nbsp;&nbsp;&nbsp; is&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; namespace<br>
new&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; operator&nbsp;&nbsp;&nbsp; out<br>
override&nbsp;&nbsp;&nbsp; params&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; private&nbsp;&nbsp;&nbsp;&nbsp; protected&nbsp;&nbsp; public<br>
readonly&nbsp;&nbsp;&nbsp; ref&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sbyte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sealed<br>
short&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; stackalloc&nbsp; static&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string<br>
struct&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; true<br>
try&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; typeof&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ulong&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unchecked<br>
unsafe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ushort&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; using&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; virtual&nbsp;&nbsp;&nbsp;&nbsp; void<br>
volatile&nbsp;&nbsp;&nbsp; while</span></span></p>

<p class="Appendix3"><a name="_Toc251613500">B.1.8 Literals</a></p>

<p class="Grammar">literal:<br>
boolean-literal<br>
integer-literal<br>
real-literal<br>
character-literal<br>
string-literal<br>
null-literal</p>

<p class="Grammar">boolean-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true<br>
false</span></span></p>

<p class="Grammar"><span lang="NO-BOK">integer-literal:<br>
decimal-integer-literal<br>
hexadecimal-integer-literal</span></p>

<p class="Grammar"><span lang="NO-BOK">decimal-integer-literal:<br>
decimal-digits&nbsp;&nbsp; integer-type-suffix<sub>opt</sub></span></p>

<p class="Grammar"><span lang="NO-BOK">decimal-digits:<br>
decimal-digit<br>
decimal-digits&nbsp;&nbsp; decimal-digit</span></p>

<p class="Grammar"><span lang="NO-BOK">decimal-digit:&nbsp; </span><span class="GrammarText"><span lang="NO-BOK" style="font-style:normal">one of</span></span><span lang="NO-BOK"><br>
</span><span class="Terminal"><span lang="NO-BOK" style="font-size:10.0pt;
font-style:normal">0&nbsp; 1&nbsp; 2&nbsp; 3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9</span></span></p>

<p class="Grammar"><span lang="NO-BOK">integer-type-suffix:&nbsp; </span><span class="GrammarText"><span lang="NO-BOK" style="font-style:normal">one of</span></span><span lang="NO-BOK"><br>
</span><span class="Terminal"><span lang="NO-BOK" style="font-size:10.0pt;
font-style:normal">U&nbsp; u&nbsp; L&nbsp; l&nbsp; UL&nbsp; Ul&nbsp; uL&nbsp; ul&nbsp; LU&nbsp; Lu&nbsp; lU&nbsp; lu</span></span></p>

<p class="Grammar"><span lang="NO-BOK">hexadecimal-integer-literal:<br>
</span><span class="Terminal"><span lang="NO-BOK" style="font-size:10.0pt;
font-style:normal">0x</span></span><span lang="NO-BOK">&nbsp;&nbsp; hex-digits&nbsp;&nbsp;
integer-type-suffix<sub>opt</sub><br>
</span><span class="Terminal"><span lang="NO-BOK" style="font-size:10.0pt;
font-style:normal">0X</span></span><span lang="NO-BOK">&nbsp;&nbsp; hex-digits&nbsp;&nbsp; integer-type-suffix<sub>opt</sub></span></p>

<p class="Grammar"><span lang="NO-BOK">hex-digits:<br>
hex-digit<br>
hex-digits&nbsp;&nbsp; hex-digit</span></p>

<p class="Grammar">hex-digit:&nbsp; <span class="GrammarText"><span style="font-style:
normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">0&nbsp; 1&nbsp; 2&nbsp;
3&nbsp; 4&nbsp; 5&nbsp; 6&nbsp; 7&nbsp; 8&nbsp; 9&nbsp; A&nbsp; B&nbsp; C&nbsp; D&nbsp; E&nbsp; F&nbsp; a&nbsp; b&nbsp; c&nbsp; d&nbsp; e&nbsp; f</span></span></p>

<p class="Grammar">real-literal:<br>
decimal-digits&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; decimal-digits&nbsp;&nbsp; exponent-part<sub>opt</sub>&nbsp;&nbsp;
real-type-suffix<sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">.</span></span>&nbsp;&nbsp;
decimal-digits&nbsp;&nbsp; exponent-part<sub>opt</sub>&nbsp;&nbsp; real-type-suffix<sub>opt</sub><br>
decimal-digits&nbsp;&nbsp; exponent-part&nbsp;&nbsp; real-type-suffix<sub>opt</sub><br>
decimal-digits&nbsp;&nbsp; real-type-suffix</p>

<p class="Grammar"><span lang="FR">exponent-part:<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">e</span></span><span lang="FR">&nbsp;&nbsp; sign<sub>opt</sub>&nbsp;&nbsp; decimal-digits<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">E</span></span><span lang="FR">&nbsp;&nbsp; sign<sub>opt</sub>&nbsp;&nbsp; decimal-digits</span></p>

<p class="Grammar">sign:&nbsp; <span class="GrammarText"><span style="font-style:normal">one
of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+&nbsp; -</span></span></p>

<p class="Grammar">real-type-suffix:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">F&nbsp; f&nbsp; D&nbsp;
d&nbsp; M&nbsp; m</span></span></p>

<p class="Grammar">character-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span>&nbsp;&nbsp;
character&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span></p>

<p class="Grammar">character:<br>
single-character<br>
simple-escape-sequence<br>
hexadecimal-escape-sequence<br>
unicode-escape-sequence</p>

<p class="Grammar">single-character:<br>
<span class="GrammarText"><span style="font-style:normal">&nbsp;Any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">'</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0027</span></span><span class="GrammarText"><span style="font-style:normal">), </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+005C</span></span><span class="GrammarText"><span style="font-style:normal">), and </span></span>new-line-character</p>

<p class="Grammar">simple-escape-sequence:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\'&nbsp;
\"&nbsp; \\&nbsp; \0&nbsp; \a&nbsp; \b&nbsp; \f&nbsp; \n&nbsp; \r&nbsp; \t&nbsp; \v</span></span></p>

<p class="Grammar">hexadecimal-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\x</span></span>&nbsp;&nbsp;
hex-digit&nbsp;&nbsp; hex-digit<sub>opt</sub>&nbsp;&nbsp; hex-digit<sub>opt</sub>&nbsp;&nbsp; hex-digit<sub>opt</sub></p>

<p class="Grammar">string-literal:<br>
regular-string-literal<br>
verbatim-string-literal</p>

<p class="Grammar">regular-string-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span>&nbsp;&nbsp;
regular-string-literal-characters<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">regular-string-literal-characters:<br>
regular-string-literal-character<br>
regular-string-literal-characters&nbsp;&nbsp; regular-string-literal-character</p>

<p class="Grammar">regular-string-literal-character:<br>
single-regular-string-literal-character<br>
simple-escape-sequence<br>
hexadecimal-escape-sequence<br>
unicode-escape-sequence</p>

<p class="Grammar">single-regular-string-literal-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+0022</span></span><span class="GrammarText"><span style="font-style:normal">), </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">\</span></span><span class="GrammarText"><span style="font-style:normal"> (</span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">U+005C</span></span><span class="GrammarText"><span style="font-style:normal">), and </span></span>new-line-character</p>

<p class="Grammar">verbatim-string-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">@"</span></span>&nbsp;&nbsp;
verbatim-string-literal-characters<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">verbatim-string-literal-characters:<br>
verbatim-string-literal-character<br>
verbatim-string-literal-characters&nbsp;&nbsp; verbatim-string-literal-character</p>

<p class="Grammar">verbatim-string-literal-character:<br>
single-verbatim-string-literal-character<br>
quote-escape-sequence</p>

<p class="Grammar">single-verbatim-string-literal-character:<br>
<span class="GrammarText"><span style="font-style:normal">any character except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">quote-escape-sequence:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">""</span></span></p>

<p class="Grammar">null-literal:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">null</span></span></p>

<p class="Appendix3"><a name="_Toc251613501">B.1.9 Operators and punctuators</a></p>

<p class="Grammar">operator-or-punctuator:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; [&nbsp;&nbsp;&nbsp;&nbsp; ]&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp; .&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp;&nbsp; ;<br>
+&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; %&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp; ^&nbsp;&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp;&nbsp; ~<br>
=&nbsp;&nbsp;&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&nbsp;&nbsp;&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp; ??&nbsp;&nbsp;&nbsp; ::&nbsp;&nbsp;&nbsp; ++&nbsp;&nbsp;&nbsp; --&nbsp;&nbsp;&nbsp; &amp;&amp;&nbsp;&nbsp;&nbsp; ||<br>
-&gt;&nbsp;&nbsp;&nbsp; ==&nbsp;&nbsp;&nbsp; !=&nbsp;&nbsp;&nbsp; &lt;=&nbsp;&nbsp;&nbsp; &gt;=&nbsp;&nbsp;&nbsp; +=&nbsp;&nbsp;&nbsp; -=&nbsp;&nbsp;&nbsp; *=&nbsp;&nbsp;&nbsp; /=&nbsp;&nbsp;&nbsp; %=<br>
&amp;=&nbsp;&nbsp;&nbsp; |=&nbsp;&nbsp;&nbsp; ^=&nbsp;&nbsp;&nbsp; &lt;&lt;&nbsp;&nbsp;&nbsp; &lt;&lt;=&nbsp;&nbsp; =&gt;</span></span></p>

<p class="Grammar">right-shift:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span>|<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span></p>

<p class="Grammar">right-shift-assignment:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;</span></span>|<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&gt;=</span></span></p>

<p class="Appendix3"><a name="_Toc251613502">B.1.10 Pre-processing directives</a></p>

<p class="Grammar">pp-directive:<br>
pp-declaration<br>
pp-conditional<br>
pp-line<br>
pp-diagnostic<br>
pp-region <br>
pp-pragma</p>

<p class="Grammar">conditional-symbol:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>identifier-or-keyword<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true</span></span><span class="GrammarText"><span style="font-style:normal"> or </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">false</span></span></p>

<p class="Grammar">pp-expression:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-or-expression&nbsp;&nbsp; whitespace<sub>opt</sub></p>

<p class="Grammar">pp-or-expression:<br>
pp-and-expression<br>
pp-or-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">||</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-and-expression</p>

<p class="Grammar">pp-and-expression:<br>
pp-equality-expression<br>
pp-and-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;&amp;</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-equality-expression</p>

<p class="Grammar">pp-equality-expression:<br>
pp-unary-expression<br>
pp-equality-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">==</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-unary-expression<br>
pp-equality-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!=</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
pp-unary-expression</p>

<p class="Grammar">pp-unary-expression:<br>
pp-primary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-unary-expression</p>

<p class="Grammar">pp-primary-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">true</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">false</span></span><br>
conditional-symbol<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
whitespace<sub>opt</sub>&nbsp;&nbsp; pp-expression&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">pp-declaration:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">define</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; conditional-symbol&nbsp;&nbsp; pp-new-line<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">undef</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; conditional-symbol&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">pp-new-line:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; single-line-comment<sub>opt</sub>&nbsp;&nbsp; new-line</p>

<p class="Grammar">pp-conditional:<br>
pp-if-section&nbsp;&nbsp; pp-elif-sections<sub>opt</sub>&nbsp;&nbsp; pp-else-section<sub>opt</sub>&nbsp;&nbsp;
pp-endif</p>

<p class="Grammar">pp-if-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pp-expression&nbsp;&nbsp; pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-elif-sections:<br>
pp-elif-section<br>
pp-elif-sections&nbsp;&nbsp; pp-elif-section</p>

<p class="Grammar">pp-elif-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">elif</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pp-expression&nbsp;&nbsp; pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-else-section:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">else</span></span>&nbsp;&nbsp;
pp-new-line&nbsp;&nbsp; conditional-section<sub>opt</sub></p>

<p class="Grammar">pp-endif:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">endif</span></span>&nbsp;&nbsp;
pp-new-line</p>

<p class="Grammar">conditional-section:<br>
input-section<br>
skipped-section</p>

<p class="Grammar">skipped-section:<br>
skipped-section-part<br>
skipped-section&nbsp;&nbsp; skipped-section-part</p>

<p class="Grammar">skipped-section-part:<br>
skipped-characters<sub>opt</sub>&nbsp;&nbsp; new-line<br>
pp-directive</p>

<p class="Grammar">skipped-characters:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; not-number-sign&nbsp;&nbsp; input-characters<sub>opt</sub></p>

<p class="Grammar">not-number-sign:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>input-character<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">#</span></span></p>

<p class="Grammar">pp-diagnostic:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">error</span></span>&nbsp;&nbsp;
pp-message<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="Grammar">pp-message:<br>
new-line<br>
whitespace&nbsp;&nbsp; input-characters<sub>opt</sub>&nbsp;&nbsp; new-line</p>

<p class="Grammar">pp-region:<br>
pp-start-region&nbsp;&nbsp; conditional-section<sub>opt</sub>&nbsp;&nbsp; pp-end-region</p>

<p class="Grammar">pp-start-region:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">region</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="Grammar">pp-end-region:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">endregion</span></span>&nbsp;&nbsp;
pp-message</p>

<p class="Grammar">pp-line:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">line</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; line-indicator&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">line-indicator:<br>
decimal-digits&nbsp;&nbsp; whitespace&nbsp;&nbsp; file-name <br>
decimal-digits<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default <br>
hidden</span></span></p>

<p class="Grammar">file-name:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span>&nbsp;&nbsp;
file-name-characters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">"</span></span></p>

<p class="Grammar">file-name-characters:<br>
file-name-character<br>
file-name-characters&nbsp;&nbsp; file-name-character</p>

<p class="Grammar">file-name-character:<br>
<span class="GrammarText"><span style="font-style:normal">Any </span></span>input-character<span class="GrammarText"><span style="font-style:normal"> except </span></span><span class="Terminal"><span style="font-size:10.0pt;font-style:normal">"</span></span></p>

<p class="Grammar">pp-pragma:<br>
whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">#</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">pragma</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; pragma-body&nbsp;&nbsp; pp-new-line</p>

<p class="Grammar">pragma-body:<br>
pragma-warning-body</p>

<p class="Grammar">pragma-warning-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; warning-action<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">warning</span></span>&nbsp;&nbsp;
whitespace&nbsp;&nbsp; warning-action&nbsp;&nbsp; whitespace&nbsp;&nbsp; warning-list</p>

<p class="Grammar">warning-action:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">disable</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">restore</span></span></p>

<p class="Grammar">warning-list:<br>
decimal-digits<br>
warning-list&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt">,</span></span>&nbsp;&nbsp; whitespace<sub>opt</sub>&nbsp;&nbsp;
decimal-digits</p>

<p class="Appendix2"><a name="_Toc251613503">B.2 Syntactic grammar</a></p>

<p class="Appendix3"><a name="_Toc251613504">B.2.1 Basic concepts</a></p>

<p class="Grammar">namespace-name:<br>
namespace-or-type-name</p>

<p class="Grammar">type-name:<br>
namespace-or-type-name</p>

<p class="Grammar">namespace-or-type-name:<br>
identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub><br>
namespace-or-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; type-argument-list<sub>opt<br>
</sub>qualified-alias-member</p>

<p class="Appendix3"><a name="_Toc251613505">B.2.2 Types</a></p>

<p class="Grammar">type:<br>
value-type<br>
reference-type <br>
type-parameter</p>

<p class="Grammar">value-type:<br>
struct-type<br>
enum-type</p>

<p class="Grammar">struct-type:<br>
type-name<br>
simple-type <span lang="FR"><br>
nullable-type</span></p>

<p class="Grammar">simple-type:<br>
numeric-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">bool</span></span></p>

<p class="Grammar">numeric-type:<br>
integral-type<br>
floating-point-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">decimal</span></span></p>

<p class="Grammar">integral-type:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sbyte<br>
byte<br>
short<br>
ushort<br>
int<br>
uint<br>
long<br>
ulong<br>
char</span></span></p>

<p class="Grammar">floating-point-type:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">float<br>
double</span></span></p>

<p class="Grammar"><span lang="FR">nullable-type:<br>
non-nullable-value-type&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">?</span></span></p>

<p class="Grammar"><span lang="FR">non-nullable-value-type:<br>
type</span></p>

<p class="Grammar">enum-type:<br>
type-name</p>

<p class="Grammar">reference-type:<br>
class-type<br>
interface-type<br>
array-type<br>
delegate-type</p>

<p class="Grammar">class-type:<br>
type-name<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">object<br>
dynamic</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">string</span></span></p>

<p class="Grammar">interface-type:<br>
type-name</p>

<p class="Grammar">rank-specifiers:<br>
rank-specifier<br>
rank-specifiers&nbsp;&nbsp; rank-specifier</p>

<p class="Grammar">rank-specifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
dim-separators<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">&nbsp;dim-separators:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
dim-separators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span></p>

<p class="Grammar">delegate-type:<br>
type-name</p>

<p class="Grammar">type-argument-list:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
type-arguments&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">&gt;</span></span></p>

<p class="Grammar">type-arguments:<br>
type-argument<br>
type-arguments&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; type-argument</p>

<p class="Grammar">type-argument:<br>
type</p>

<p class="Grammar">type-parameter:<br>
identifier</p>

<p class="Appendix3"><a name="_Toc251613506">B.2.3 Variables</a></p>

<p class="Grammar">variable-reference:<br>
expression</p>

<p class="Appendix3"><a name="_Toc251613507">B.2.4 Expressions</a></p>

<p class="Grammar">argument-list:<br>
argument<br>
argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; argument</p>

<p class="Grammar">argument:<br>
argument-name<sub>opt</sub>&nbsp;&nbsp; argument-value</p>

<p class="Grammar">argument-name:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-family:
Consolas;font-style:normal">:</span></span></p>

<p class="Grammar">argument-value:<br>
expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ref</span></span>&nbsp;&nbsp;
variable-reference<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">out</span></span>&nbsp;&nbsp;
variable-reference</p>

<p class="Grammar">primary-expression: <br>
primary-no-array-creation-expression<br>
array-creation-expression</p>

<p class="Grammar">primary-no-array-creation-expression:<br>
literal<br>
simple-name<br>
parenthesized-expression<br>
member-access<br>
invocation-expression<br>
element-access<br>
this-access<br>
base-access<br>
post-increment-expression<br>
post-decrement-expression<br>
object-creation-expression<br>
delegate-creation-expression<br>
anonymous-object-creation-expression<br>
typeof-expression<br>
&nbsp;checked-expression<br>
unchecked-expression <br>
default-value-expression<br>
anonymous-method-expression</p>

<p class="Grammar">simple-name:<br>
identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub></p>

<p class="Grammar">parenthesized-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="Grammar">member-access:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp; type-argument-list<sub>opt</sub><br>
predefined-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier&nbsp; type-argument-list<sub>opt</sub><br>
qualified-alias-member&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">predefined-type:&nbsp; one of<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">bool&nbsp;&nbsp;&nbsp;&nbsp; byte&nbsp;&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp;&nbsp; decimal&nbsp; double&nbsp;&nbsp; float&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long<br>
object&nbsp;&nbsp; sbyte&nbsp;&nbsp;&nbsp; short&nbsp;&nbsp;&nbsp; string&nbsp;&nbsp; uint&nbsp;&nbsp;&nbsp;&nbsp; ulong&nbsp;&nbsp;&nbsp; ushort</span></span></p>

<p class="Grammar">invocation-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">element-access:<br>
primary-no-array-creation-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp; argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">this-access:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span></p>

<p class="Grammar">base-access:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">.</span></span>&nbsp;&nbsp;
identifier<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
argument-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">]</span></span></p>

<p class="Grammar">post-increment-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">++</span></span></p>

<p class="Grammar">post-decrement-expression:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">--</span></span></p>

<p class="Grammar">object-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; object-or-collection-initializer<sub>opt</sub>
<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; object-or-collection-initializer</p>

<p class="Grammar">object-or-collection-initializer:<br>
object-initializer<br>
collection-initializer</p>

<p class="Grammar">object-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-initializer-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">member-initializer-list:<br>
member-initializer<br>
member-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; member-initializer</p>

<p class="Grammar">member-initializer:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; initializer-value</p>

<p class="Grammar">initializer-value:<br>
expression<br>
object-or-collection-initializer</p>

<p class="Grammar">collection-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">element-initializer-list:<br>
element-initializer<br>
element-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; element-initializer</p>

<p class="Grammar">element-initializer:<br>
non-assignment-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="Grammar">expression-list:<br>
expression<br>
expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">array-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
non-array-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span>&nbsp;&nbsp; rank-specifiers<sub>opt</sub>&nbsp;&nbsp;
array-initializer<sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
array-type&nbsp;&nbsp; array-initializer <br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
rank-specifier&nbsp;&nbsp; array-initializer</p>

<p class="Grammar">delegate-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
delegate-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">anonymous-object-creation-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
anonymous-object-initializer</p>

<p class="Grammar">anonymous-object-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-declarator-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
member-declarator-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">member-declarator-list:<br>
member-declarator<br>
member-declarator-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; member-declarator</p>

<p class="Grammar">member-declarator:<br>
simple-name<br>
member-access<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; expression</p>

<p class="Grammar">typeof-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">typeof</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;
&nbsp;type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)<br>
typeof</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; unbound-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)<br>
typeof ( void )</span></span></p>

<p class="Grammar">unbound-type-name:<br>
identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub><br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">::</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub><br>
unbound-type-name&nbsp;&nbsp; <span class="Term"><span style="font-style:normal">.</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; generic-dimension-specifier<sub>opt</sub></p>

<p class="Grammar">generic-dimension-specifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
commas<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span></p>

<p class="Grammar">commas:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
commas&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span></p>

<p class="Grammar">checked-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">checked</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="Grammar">unchecked-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unchecked</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="Grammar">default-value-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">unary-expression:<br>
primary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">-</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">!</span></span>&nbsp;&nbsp;
unary-expression<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
unary-expression<br>
pre-increment-expression<br>
pre-decrement-expression<br>
cast-expression</p>

<p class="Grammar">pre-increment-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">++</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">pre-decrement-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">--</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">cast-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">multiplicative-expression:<br>
unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">*</span></span>&nbsp;&nbsp; unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">/</span></span>&nbsp;&nbsp; unary-expression<br>
multiplicative-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">%</span></span>&nbsp;&nbsp; unary-expression</p>

<p class="Grammar">additive-expression:<br>
multiplicative-expression<br>
additive-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">+</span></span>&nbsp;&nbsp; multiplicative-expression<br>
additive-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">–</span></span>&nbsp;&nbsp; multiplicative-expression</p>

<p class="Grammar">shift-expression:<br>
additive-expression <br>
shift-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;&lt;</span></span>&nbsp;&nbsp; additive-expression<br>
shift-expression&nbsp;&nbsp; right-shift&nbsp;&nbsp; additive-expression</p>

<p class="Grammar">relational-expression:<br>
shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&lt;=</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;=</span></span>&nbsp;&nbsp; shift-expression<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">is</span></span>&nbsp;&nbsp; type<br>
relational-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">as</span></span>&nbsp;&nbsp; type</p>

<p class="Grammar">equality-expression:<br>
relational-expression<br>
equality-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">==</span></span>&nbsp;&nbsp; relational-expression<br>
equality-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">!=</span></span>&nbsp;&nbsp; relational-expression</p>

<p class="Grammar">and-expression:<br>
equality-expression<br>
and-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">&amp;</span></span>&nbsp;&nbsp; equality-expression</p>

<p class="Grammar">exclusive-or-expression:<br>
and-expression<br>
exclusive-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">^</span></span>&nbsp;&nbsp; and-expression</p>

<p class="Grammar">inclusive-or-expression:<br>
exclusive-or-expression<br>
inclusive-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">|</span></span>&nbsp;&nbsp; exclusive-or-expression</p>

<p class="Grammar">conditional-and-expression:<br>
inclusive-or-expression<br>
conditional-and-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&amp;&amp;</span></span>&nbsp;&nbsp; inclusive-or-expression</p>

<p class="Grammar">conditional-or-expression:<br>
conditional-and-expression<br>
conditional-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">||</span></span>&nbsp;&nbsp; conditional-and-expression</p>

<p class="Grammar">null-coalescing-expression:<br>
conditional-or-expression<br>
conditional-or-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">??</span></span>&nbsp;&nbsp; null-coalescing-expression</p>

<p class="Grammar">conditional-expression:<br>
null-coalescing-expression<br>
null-coalescing-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">?</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">lambda-expression:<br>
anonymous-function-signature&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">=&gt;</span></span>&nbsp;&nbsp; anonymous-function-body</p>

<p class="Grammar">anonymous-method-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">delegate</span></span>&nbsp;&nbsp;
explicit-anonymous-function-signature<sub>opt</sub>&nbsp;&nbsp; block</p>

<p class="Grammar">anonymous-function-signature:<br>
explicit-anonymous-function-signature <br>
implicit-anonymous-function-signature</p>

<p class="Grammar">explicit-anonymous-function-signature:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
explicit-anonymous-function-parameter-list<span class="Production"><sub>opt</sub></span><span style="font-style:normal">&nbsp;&nbsp; </span><span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">explicit-anonymous-function-parameter-list:<br>
explicit-anonymous-function-parameter<br>
explicit-anonymous-function-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
explicit-anonymous-function-parameter</p>

<p class="Grammar">explicit-anonymous-function-parameter:<br>
anonymous-function-parameter-modifier<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; identifier</p>

<p class="Grammar">anonymous-function-parameter-modifier: <br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ref<br>
out</span></span></p>

<p class="Grammar">implicit-anonymous-function-signature:<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">(</span></span><span style="font-style:normal">&nbsp;&nbsp; </span>implicit-anonymous-function-parameter-list<span class="Production"><sub>opt</sub></span><span style="font-style:normal">&nbsp;&nbsp; </span><span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">)<br>
</span></span>implicit-anonymous-function-parameter</p>

<p class="Grammar">implicit-anonymous-function-parameter-list:<br>
implicit-anonymous-function-parameter<br>
implicit-anonymous-function-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
implicit-anonymous-function-parameter</p>

<p class="Grammar">implicit-anonymous-function-parameter:<br>
identifier</p>

<p class="Grammar">anonymous-function-body:<br>
expression<br>
block</p>

<p class="Grammar">query-expression:<br>
from-clause&nbsp;&nbsp; query-body</p>

<p class="Grammar">from-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">from</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">query-body:<br>
query-body-clauses<sub>opt</sub>&nbsp;&nbsp; select-or-group-clause&nbsp;&nbsp; query-continuation<sub>opt</sub></p>

<p class="Grammar">query-body-clauses:<br>
query-body-clause<br>
query-body-clauses&nbsp;&nbsp; query-body-clause</p>

<p class="Grammar">query-body-clause:<br>
from-clause<br>
let-clause<br>
where-clause<br>
join-clause<br>
join-into-clause<br>
orderby-clause</p>

<p class="Grammar">let-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">let</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">where-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">where</span></span>&nbsp;&nbsp;
boolean-expression</p>

<p class="Grammar">join-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">join</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">on</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">equals</span></span>&nbsp;&nbsp;
expression </p>

<p class="Grammar">join-into-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">join</span></span>&nbsp;&nbsp;
type<sub>opt</sub>&nbsp; &nbsp;identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">on</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">equals</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">into</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">orderby-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">orderby</span></span>&nbsp;&nbsp;
orderings</p>

<p class="Grammar">orderings:<br>
ordering<br>
orderings&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
ordering</p>

<p class="Grammar">ordering:<br>
expression&nbsp;&nbsp;&nbsp; ordering-direction<sub>opt</sub></p>

<p class="Grammar">ordering-direction:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ascending</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">descending</span></span></p>

<p class="Grammar">select-or-group-clause:<br>
select-clause<br>
group-clause</p>

<p class="Grammar">select-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">select</span></span>&nbsp;&nbsp;
expression</p>

<p class="Grammar">group-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">group</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">by</span></span>&nbsp;&nbsp; expression</p>

<p class="Grammar">query-continuation:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">into</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; query-body</p>

<p class="Grammar">assignment:<br>
unary-expression&nbsp;&nbsp; assignment-operator&nbsp;&nbsp; expression</p>

<p class="Grammar">assignment-operator:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">=<br>
+=<br>
-=<br>
*=<br>
/=<br>
%=<br>
&amp;=<br>
|=<br>
^=<br>
&lt;&lt;=<br>
</span></span>right-shift-assignment</p>

<p class="Grammar">expression: <br>
non-assignment-expression<br>
assignment</p>

<p class="Grammar">non-assignment-expression:<br>
conditional-expression<br>
lambda-expression<br>
query-expression</p>

<p class="Grammar"><span lang="FR">constant-expression:<br>
expression</span></p>

<p class="Grammar">boolean-expression:<br>
expression</p>

<p class="Appendix3"><a name="_Toc251613508">B.2.5 Statements</a></p>

<p class="Grammar">statement:<br>
labeled-statement<br>
declaration-statement<br>
embedded-statement</p>

<p class="Grammar">embedded-statement:<br>
block<br>
empty-statement<br>
expression-statement<br>
selection-statement<br>
iteration-statement<br>
jump-statement<br>
try-statement<br>
checked-statement<br>
unchecked-statement<br>
lock-statement<br>
using-statement <br>
yield-statement</p>

<p class="Grammar">block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
statement-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">statement-list:<br>
statement<br>
statement-list&nbsp;&nbsp; statement</p>

<p class="Grammar">empty-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">labeled-statement:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">:</span></span>&nbsp;&nbsp; statement</p>

<p class="Grammar">declaration-statement:<br>
local-variable-declaration&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span><br>
local-constant-declaration&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">local-variable-declaration:<br>
local-variable-type&nbsp;&nbsp; local-variable-declarators</p>

<p class="Grammar">local-variable-type:<br>
type<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">var</span></span></p>

<p class="Grammar">local-variable-declarators:<br>
local-variable-declarator<br>
local-variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; local-variable-declarator</p>

<p class="Grammar">local-variable-declarator:<br>
identifier<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; local-variable-initializer</p>

<p class="Grammar">local-variable-initializer:<br>
expression<br>
array-initializer</p>

<p class="Grammar">local-constant-declaration:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">const</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; constant-declarators</p>

<p class="Grammar">constant-declarators:<br>
constant-declarator<br>
constant-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constant-declarator</p>

<p class="Grammar">constant-declarator:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; constant-expression</p>

<p class="Grammar">expression-statement:<br>
statement-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">statement-expression:<br>
invocation-expression<br>
object-creation-expression<br>
assignment<br>
post-increment-expression<br>
post-decrement-expression<br>
pre-increment-expression<br>
pre-decrement-expression</p>

<p class="Grammar">selection-statement:<br>
if-statement<br>
switch-statement</p>

<p class="Grammar">if-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">if</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">else</span></span>&nbsp;&nbsp;
embedded-statement</p>

<p class="Grammar">switch-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">switch</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span>&nbsp;&nbsp; switch-block</p>

<p class="Grammar">switch-block:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
switch-sections<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">switch-sections:<br>
switch-section<br>
switch-sections&nbsp;&nbsp; switch-section</p>

<p class="Grammar">switch-section:<br>
switch-labels&nbsp;&nbsp; statement-list</p>

<p class="Grammar">switch-labels:<br>
switch-label<br>
switch-labels&nbsp;&nbsp; switch-label</p>

<p class="Grammar">switch-label:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">case</span></span>&nbsp;&nbsp;
constant-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span></p>

<p class="Grammar">iteration-statement:<br>
while-statement<br>
do-statement<br>
for-statement<br>
foreach-statement</p>

<p class="Grammar">while-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">while</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">do-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">do</span></span>&nbsp;&nbsp;
embedded-statement&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">while</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
boolean-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">for-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">for</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
for-initializer<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp; for-condition<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp;
for-iterator<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">for-initializer:<br>
local-variable-declaration<br>
statement-expression-list</p>

<p class="Grammar">for-condition:<br>
boolean-expression</p>

<p class="Grammar">for-iterator:<br>
statement-expression-list</p>

<p class="Grammar">statement-expression-list:<br>
statement-expression<br>
statement-expression-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; statement-expression</p>

<p class="Grammar">foreach-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">foreach</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
local-variable-type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">in</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">jump-statement:<br>
break-statement<br>
continue-statement<br>
goto-statement<br>
return-statement<br>
throw-statement</p>

<p class="Grammar">break-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">break</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">continue-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">continue</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">goto-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">goto</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;<br>
goto</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">case</span></span>&nbsp;&nbsp; constant-expression&nbsp;&nbsp; ;<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">goto</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">default</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">return-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return</span></span>&nbsp;&nbsp;
expression<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">throw-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">throw</span></span>&nbsp;&nbsp;
expression<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">try-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; catch-clauses<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; finally-clause<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">try</span></span>&nbsp;&nbsp;
block&nbsp;&nbsp; catch-clauses&nbsp;&nbsp; finally-clause</p>

<p class="Grammar">catch-clauses:<br>
specific-catch-clauses&nbsp;&nbsp; general-catch-clause<sub>opt</sub><br>
specific-catch-clauses<sub>opt</sub>&nbsp;&nbsp; general-catch-clause</p>

<p class="Grammar">specific-catch-clauses:<br>
specific-catch-clause<br>
specific-catch-clauses&nbsp;&nbsp; specific-catch-clause</p>

<p class="Grammar">specific-catch-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">catch</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
class-type&nbsp;&nbsp; identifier<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; block</p>

<p class="Grammar">general-catch-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">catch</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">finally-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">finally</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">checked-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">checked</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">unchecked-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unchecked</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">lock-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">lock</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">using-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;&nbsp;
resource-acquisition&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">resource-acquisition:<br>
local-variable-declaration<br>
expression</p>

<p class="Grammar">yield-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">yield</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return</span></span>&nbsp;&nbsp;
expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">yield</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">break</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Appendix3"><a name="_Toc251613509">B.2.6 Namespaces</a></p>

<p class="Grammar">compilation-unit:<br>
extern-alias-directives<sub>opt</sub>&nbsp;&nbsp; using-directives<sub>opt</sub>&nbsp;
global-attributes<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; namespace-member-declarations<sub>opt</sub></p>

<p class="Grammar">namespace-declaration:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">namespace</span></span>&nbsp;&nbsp;
qualified-identifier&nbsp;&nbsp; namespace-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="Grammar"><span lang="FR">qualified-identifier:<br>
identifier<br>
qualified-identifier&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">.</span></span><span lang="FR">&nbsp;&nbsp; </span>identifier</p>

<p class="Grammar">namespace-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
extern-alias-directives<sub>opt</sub>&nbsp;&nbsp; using-directives<sub>opt</sub>&nbsp;&nbsp;
namespace-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">extern-alias-directives:<br>
extern-alias-directive<br>
extern-alias-directives&nbsp;&nbsp; extern-alias-directive</p>

<p class="Grammar">extern-alias-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">alias</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="Grammar">using-directives:<br>
using-directive<br>
using-directives&nbsp;&nbsp; using-directive</p>

<p class="Grammar">using-directive:<br>
using-alias-directive<br>
using-namespace-directive</p>

<p class="Grammar">using-alias-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; namespace-or-type-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">using-namespace-directive:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">using</span></span>&nbsp;&nbsp;
namespace-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="Grammar">namespace-member-declarations:<br>
namespace-member-declaration<br>
namespace-member-declarations&nbsp;&nbsp; namespace-member-declaration</p>

<p class="Grammar">namespace-member-declaration:<br>
namespace-declaration<br>
type-declaration</p>

<p class="Grammar">type-declaration:<br>
class-declaration<br>
struct-declaration<br>
interface-declaration<br>
enum-declaration<br>
delegate-declaration</p>

<p class="Grammar">qualified-alias-member:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">::</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; type-argument-list<sub>opt</sub></p>

<p class="Appendix3"><a name="_Toc251613510">B.2.7 Classes</a></p>

<p class="Grammar">class-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; class-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">class</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class-base<sub>opt</sub>&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp;
class-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><sub>opt</sub></p>

<p class="Grammar">class-modifiers:<br>
class-modifier<br>
class-modifiers&nbsp;&nbsp; class-modifier</p>

<p class="Grammar">class-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">abstract</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sealed<br>
static</span></span></p>

<p class="Grammar"><span lang="DA">type-parameter-list:<br>
</span><span class="Terminal"><span lang="DA" style="font-size:10.0pt;font-style:
normal">&lt;</span></span><span lang="DA">&nbsp;&nbsp; type-parameters&nbsp;&nbsp; </span><span class="Terminal"><span lang="DA" style="font-size:10.0pt;font-style:normal">&gt;</span></span></p>

<p class="Grammar">type-parameters:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; type-parameter<br>
type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp; type-parameter</p>

<p class="Grammar">type-parameter:<br>
identifier</p>

<p class="Grammar">class-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
class-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
class-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span>&nbsp;&nbsp; interface-type-list</p>

<p class="Grammar">interface-type-list:<br>
interface-type<br>
interface-type-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; interface-type</p>

<p class="Grammar">type-parameter-constraints-clauses:<br>
type-parameter-constraints-clause<br>
type-parameter-constraints-clauses&nbsp;&nbsp; type-parameter-constraints-clause</p>

<p class="Grammar">type-parameter-constraints-clause:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">where</span></span>&nbsp;&nbsp;
type-parameter&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">:</span></span>&nbsp;&nbsp; type-parameter-constraints</p>

<p class="Grammar">type-parameter-constraints:<br>
primary-constraint<br>
secondary-constraints<br>
constructor-constraint<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; secondary-constraints<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constructor-constraint<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constructor-constraint<br>
primary-constraint&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
constructor-constraint</p>

<p class="Grammar">primary-constraint:<br>
class-type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">class</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">struct</span></span></p>

<p class="Grammar">secondary-constraints:<br>
interface-type<br>
type-parameter<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; interface-type<br>
secondary-constraints&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; type-parameter</p>

<p class="Grammar">constructor-constraint:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">class-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
class-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">class-member-declarations:<br>
class-member-declaration<br>
class-member-declarations&nbsp;&nbsp; class-member-declaration</p>

<p class="Grammar">class-member-declaration:<br>
constant-declaration<br>
field-declaration<br>
method-declaration<br>
property-declaration<br>
event-declaration<br>
indexer-declaration<br>
operator-declaration<br>
constructor-declaration<br>
destructor-declaration<br>
static-constructor-declaration<br>
type-declaration</p>

<p class="Grammar"><span lang="FR">constant-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; constant-modifiers<sub>opt</sub>&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">const</span></span><span lang="FR">&nbsp;&nbsp; type&nbsp;&nbsp; constant-declarators&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar"><span lang="FR">constant-modifiers:<br>
constant-modifier<br>
constant-modifiers&nbsp;&nbsp; constant-modifier</span></p>

<p class="Grammar">constant-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Grammar">constant-declarators:<br>
constant-declarator<br>
constant-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; constant-declarator</p>

<p class="Grammar">constant-declarator:<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; constant-expression</p>

<p class="Grammar">field-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; field-modifiers<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp;
variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;</span></span></p>

<p class="Grammar">field-modifiers:<br>
field-modifier<br>
field-modifiers&nbsp;&nbsp; field-modifier</p>

<p class="Grammar">field-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
static<br>
readonly<br>
volatile</span></span></p>

<p class="Grammar">variable-declarators:<br>
variable-declarator<br>
variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; variable-declarator</p>

<p class="Grammar">variable-declarator:<br>
identifier<br>
identifier&nbsp;&nbsp; =&nbsp;&nbsp; variable-initializer</p>

<p class="Grammar">variable-initializer:<br>
expression<br>
array-initializer</p>

<p class="Grammar">method-declaration:<br>
method-header&nbsp;&nbsp; method-body</p>

<p class="Grammar">method-header:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; method-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
return-type&nbsp;&nbsp; member-name&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub></p>

<p class="Grammar">method-modifiers:<br>
method-modifier<br>
method-modifiers&nbsp;&nbsp; method-modifier</p>

<p class="Grammar">method-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">return-type:<br>
type<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">void</span></span></p>

<p class="Grammar">member-name:<br>
identifier<br>
interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">method-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">formal-parameter-list:<br>
fixed-parameters<br>
fixed-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; parameter-array<br>
parameter-array</p>

<p class="Grammar">fixed-parameters:<br>
fixed-parameter<br>
fixed-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; fixed-parameter</p>

<p class="Grammar">fixed-parameter:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; parameter-modifier<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp;
default-argument<sub>opt</sub> </p>

<p class="Grammar">default-argument:<br>
<span class="Codefragment"><span style="font-size:10.0pt">=</span></span>&nbsp;
expression</p>

<p class="Grammar">parameter-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">ref<br>
out<br>
this</span></span></p>

<p class="Grammar">parameter-array:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">params</span></span>&nbsp;&nbsp; array-type&nbsp;&nbsp; identifier</p>

<p class="Grammar">property-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; property-modifiers<sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp;
member-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">{</span></span>&nbsp;&nbsp; accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">property-modifiers:<br>
property-modifier<br>
property-modifiers&nbsp;&nbsp; property-modifier</p>

<p class="Grammar">property-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">member-name:<br>
identifier<br>
interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">.</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">accessor-declarations:<br>
get-accessor-declaration&nbsp;&nbsp; set-accessor-declaration<sub>opt</sub><br>
set-accessor-declaration&nbsp;&nbsp; get-accessor-declaration<sub>opt</sub></p>

<p class="Grammar">get-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; accessor-modifier<sub>opt </sub>&nbsp;&nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp;
accessor-body</p>

<p class="Grammar">set-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; accessor-modifier<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">set</span></span>&nbsp;&nbsp;
accessor-body</p>

<p class="Grammar">accessor-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal<br>
private<br>
protected</span></span> &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">internal<br>
internal</span></span> &nbsp;&nbsp;<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">protected</span></span></p>

<p class="Grammar">accessor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">event-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; event-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; variable-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; event-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; member-name&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">{</span></span>&nbsp;&nbsp; event-accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar"><span lang="FR">event-modifiers:<br>
event-modifier<br>
event-modifiers&nbsp;&nbsp; event-modifier</span></p>

<p class="Grammar">event-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private<br>
static<br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">event-accessor-declarations:<br>
add-accessor-declaration&nbsp;&nbsp; remove-accessor-declaration<br>
remove-accessor-declaration&nbsp;&nbsp; add-accessor-declaration</p>

<p class="Grammar">add-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">add</span></span>&nbsp;&nbsp; block</p>

<p class="Grammar">remove-accessor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">remove</span></span>&nbsp;&nbsp; block</p>

<p class="Grammar">indexer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; indexer-modifiers<sub>opt</sub>&nbsp;&nbsp;
indexer-declarator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">{</span></span>&nbsp;&nbsp; accessor-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">indexer-modifiers:<br>
indexer-modifier<br>
indexer-modifiers&nbsp;&nbsp; indexer-modifier</p>

<p class="Grammar">indexer-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new<br>
public<br>
protected<br>
internal<br>
private <br>
virtual<br>
sealed<br>
override<br>
abstract<br>
extern</span></span></p>

<p class="Grammar">indexer-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span><br>
type&nbsp;&nbsp; interface-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">.</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span></p>

<p class="Grammar">operator-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; operator-modifiers&nbsp;&nbsp; operator-declarator&nbsp;&nbsp; operator-body</p>

<p class="Grammar">operator-modifiers:<br>
operator-modifier<br>
operator-modifiers&nbsp;&nbsp; operator-modifier</p>

<p class="Grammar">operator-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
static<br>
extern</span></span></p>

<p class="Grammar">operator-declarator:<br>
unary-operator-declarator<br>
binary-operator-declarator<br>
conversion-operator-declarator</p>

<p class="Grammar">unary-operator-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
overloadable-unary-operator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">overloadable-unary-operator:&nbsp; <span class="GrammarText"><span style="font-style:normal">one of</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+&nbsp;&nbsp; -&nbsp;&nbsp;
!&nbsp;&nbsp; ~&nbsp;&nbsp; ++&nbsp;&nbsp; --&nbsp;&nbsp; true&nbsp;&nbsp; false</span></span></p>

<p class="Grammar">binary-operator-declarator:<br>
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
overloadable-binary-operator&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span></p>

<p class="Grammar">overloadable-binary-operator:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">+<br>
-<br>
*<br>
/<br>
%<br>
&amp;<br>
|<br>
^<br>
&lt;&lt;<br>
</span></span>right-shift<span class="Terminal"><span style="font-size:10.0pt;
font-style:normal"><br>
==<br>
!=<br>
&gt;<br>
&lt;<br>
&gt;=<br>
&lt;=</span></span></p>

<p class="Grammar">conversion-operator-declarator:<span class="Terminal"><span style="font-size:10.0pt;font-style:normal"><br>
implicit</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">operator</span></span>&nbsp;&nbsp; type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; type&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">explicit</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">operator</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span></p>

<p class="Grammar">operator-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">constructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; constructor-modifiers<sub>opt</sub>&nbsp;&nbsp;
constructor-declarator&nbsp;&nbsp; constructor-body</p>

<p class="Grammar">constructor-modifiers:<br>
constructor-modifier<br>
constructor-modifiers&nbsp;&nbsp; constructor-modifier</p>

<p class="Grammar">constructor-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
extern</span></span></p>

<p class="Grammar">constructor-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
constructor-initializer<sub>opt</sub></p>

<p class="Grammar">constructor-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">base</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
argument-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)<br>
:</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">this</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp; argument-list<sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar">constructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">static-constructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; static-constructor-modifiers&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
static-constructor-body</p>

<p class="Grammar">static-constructor-modifiers:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub><span class="Terminal"><span style="font-size:10.0pt;font-style:normal"> static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static
extern</span></span><sub>opt</sub></p>

<p class="Grammar">static-constructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">destructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp;
destructor-body</p>

<p class="Grammar">destructor-body:<br>
block<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Appendix3"><a name="_Toc251613511">B.2.8 Structs</a></p>

<p class="Grammar">struct-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; struct-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">struct</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; type-parameter-list<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct-interfaces<sub>opt</sub>&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp;
struct-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span><sub>opt</sub></p>

<p class="Grammar">struct-modifiers:<br>
struct-modifier<br>
struct-modifiers&nbsp;&nbsp; struct-modifier</p>

<p class="Grammar">struct-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Grammar">struct-interfaces:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list</p>

<p class="Grammar">struct-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
struct-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">struct-member-declarations:<br>
struct-member-declaration<br>
struct-member-declarations&nbsp;&nbsp; struct-member-declaration</p>

<p class="Grammar">struct-member-declaration:<br>
constant-declaration<br>
field-declaration<br>
method-declaration<br>
property-declaration<br>
event-declaration<br>
indexer-declaration<br>
operator-declaration<br>
constructor-declaration<br>
static-constructor-declaration<br>
type-declaration</p>

<p class="Appendix3"><a name="_Toc251613512">B.2.9 Arrays</a></p>

<p class="Grammar">array-type:<br>
non-array-type&nbsp;&nbsp; rank-specifiers</p>

<p class="Grammar">non-array-type:<br>
type</p>

<p class="Grammar">rank-specifiers:<br>
rank-specifier<br>
rank-specifiers&nbsp;&nbsp; rank-specifier</p>

<p class="Grammar">rank-specifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
dim-separators<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:
10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">dim-separators:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span><br>
dim-separators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">,</span></span></p>

<p class="Grammar">array-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
variable-initializer-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
variable-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">variable-initializer-list:<br>
variable-initializer<br>
variable-initializer-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; variable-initializer</p>

<p class="Grammar">variable-initializer:<br>
expression<br>
array-initializer</p>

<p class="Appendix3"><a name="_Toc251613513">B.2.10 Interfaces</a></p>

<p class="Grammar">interface-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; interface-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">partial</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">interface</span></span>&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identifier&nbsp;&nbsp; variant-type-parameter-list<sub>opt</sub> &nbsp;&nbsp;interface-base<sub>opt</sub><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; interface-body&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="Grammar"><span lang="FR">interface-modifiers:<br>
interface-modifier<br>
interface-modifiers&nbsp;&nbsp; interface-modifier</span></p>

<p class="Grammar">interface-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Grammar">variant-type-parameter-list:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&lt;</span></span>&nbsp;&nbsp;
variant-type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">&gt;</span></span></p>

<p class="Grammar">variant-type-parameters:<br>
attributes<sub>opt</sub>&nbsp; variance-annotation<sub>opt </sub>&nbsp;type-parameter<br>
variant-type-parameters&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp;
variance-annotation<sub>opt</sub>&nbsp; type-parameter</p>

<p class="Grammar">variance-annotation:<br>
<span class="Codefragment"><span style="font-size:10.0pt;font-style:normal">in<br>
out</span></span></p>

<p class="Grammar">interface-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
interface-type-list</p>

<p class="Grammar">interface-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar">interface-member-declarations:<br>
interface-member-declaration<br>
interface-member-declarations&nbsp;&nbsp; interface-member-declaration</p>

<p class="Grammar">interface-member-declaration:<br>
interface-method-declaration<br>
interface-property-declaration<br>
interface-event-declaration<br>
interface-indexer-declaration</p>

<p class="Grammar">interface-method-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; return-type&nbsp;&nbsp; identifier&nbsp;&nbsp;
type-parameter-list<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">interface-property-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-accessors&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="Grammar">interface-accessors:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">get</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;<br>
</span></span>attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp;
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">set</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span>&nbsp;&nbsp; attributes<sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">get</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">interface-event-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span>&nbsp;&nbsp; type&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">;</span></span></p>

<p class="Grammar">interface-indexer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">new</span></span><sub>opt</sub>&nbsp;&nbsp; type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">this</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
formal-parameter-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">]</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
interface-accessors&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">}</span></span></p>

<p class="Appendix3"><a name="_Toc251613514">B.2.11 Enums</a></p>

<p class="Grammar">enum-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; enum-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">enum</span></span>&nbsp;&nbsp; identifier&nbsp;&nbsp;
enum-base<sub>opt</sub>&nbsp;&nbsp; enum-body&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span><sub>opt</sub></p>

<p class="Grammar">enum-base:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">:</span></span>&nbsp;&nbsp;
integral-type</p>

<p class="Grammar">enum-body:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
enum-member-declarations<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">{</span></span>&nbsp;&nbsp;
enum-member-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">}</span></span></p>

<p class="Grammar"><span lang="FR">enum-modifiers:<br>
enum-modifier<br>
enum-modifiers&nbsp;&nbsp; enum-modifier</span></p>

<p class="Grammar">enum-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Grammar">enum-member-declarations:<br>
enum-member-declaration<br>
enum-member-declarations&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; enum-member-declaration</p>

<p class="Grammar"><span lang="FR">enum-member-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; identifier<br>
attributes<sub>opt</sub>&nbsp;&nbsp; identifier&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">=</span></span><span lang="FR">&nbsp;&nbsp; constant-expression</span></p>

<p class="Appendix3"><a name="_Toc251613515">B.2.12 Delegates</a></p>

<p class="Grammar">delegate-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; delegate-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">delegate</span></span>&nbsp;&nbsp;
return-type&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; identifier&nbsp; variant-type-parameter-list<sub>opt</sub>&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
formal-parameter-list<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp;
type-parameter-constraints-clauses<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">delegate-modifiers:<br>
delegate-modifier<br>
delegate-modifiers&nbsp;&nbsp; delegate-modifier</p>

<p class="Grammar">delegate-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public<br>
protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private</span></span></p>

<p class="Appendix3"><a name="_Toc251613516">B.2.13 Attributes</a></p>

<p class="Grammar">global-attributes:<br>
global-attribute-sections</p>

<p class="Grammar">global-attribute-sections:<br>
global-attribute-section<br>
global-attribute-sections&nbsp;&nbsp; global-attribute-section</p>

<p class="Grammar">global-attribute-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
global-attribute-target-specifier&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]<br>
[</span></span>&nbsp;&nbsp; global-attribute-target-specifier&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">global-attribute-target-specifier:<br>
global-attribute-target&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span></p>

<p class="Grammar">global-attribute-target:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">assembly<br>
module</span></span></p>

<p class="Grammar">attributes:<br>
attribute-sections</p>

<p class="Grammar">attribute-sections:<br>
attribute-section<br>
attribute-sections&nbsp;&nbsp; attribute-section</p>

<p class="Grammar">attribute-section:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp;
attribute-target-specifier<sub>opt</sub>&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]<br>
[</span></span>&nbsp;&nbsp; attribute-target-specifier<sub>opt</sub>&nbsp;&nbsp; attribute-list&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">,</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">attribute-target-specifier:<br>
attribute-target&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">:</span></span></p>

<p class="Grammar">attribute-target:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">field</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">event</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">method</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">param</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">property</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">return<br>
type</span></span></p>

<p class="Grammar"><span lang="FR">attribute-list:<br>
attribute<br>
attribute-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:
10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp; attribute</span></p>

<p class="Grammar"><span lang="FR">attribute:<br>
attribute-name&nbsp;&nbsp; attribute-arguments<sub>opt</sub></span></p>

<p class="Grammar"><span lang="FR">attribute-name:<br>
&nbsp;type-name</span></p>

<p class="Grammar"><span lang="FR">attribute-arguments:<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">(</span></span><span lang="FR">&nbsp;&nbsp; positional-argument-list<sub>opt</sub>&nbsp;&nbsp;
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">)<br>
(</span></span><span lang="FR">&nbsp;&nbsp; positional-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp; named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">)<br>
(</span></span><span lang="FR">&nbsp;&nbsp; named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">)</span></span></p>

<p class="Grammar"><span lang="FR">positional-argument-list:<br>
positional-argument<br>
positional-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp;
positional-argument</span></p>

<p class="Grammar"><span lang="FR">positional-argument:<br>
</span>argument-name<sub>opt</sub>&nbsp;&nbsp; <span lang="FR">attribute-argument-expression</span></p>

<p class="Grammar"><span lang="FR">named-argument-list:<br>
named-argument<br>
named-argument-list&nbsp;&nbsp; </span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:normal">,</span></span><span lang="FR">&nbsp;&nbsp;
named-argument</span></p>

<p class="Grammar">named-argument:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; attribute-argument-expression</p>

<p class="Grammar">attribute-argument-expression:<br>
expression</p>

<p class="Appendix2"><a name="_Toc251613517">B.3 Grammar extensions for unsafe
code</a></p>

<p class="Grammar">class-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">struct-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">interface-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">delegate-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">field-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">method-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">property-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar"><span lang="FR">event-modifier:<br>
...<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">unsafe</span></span></p>

<p class="Grammar"><span lang="FR">indexer-modifier:<br>
...<br>
</span><span class="Terminal"><span lang="FR" style="font-size:10.0pt;font-style:
normal">unsafe</span></span></p>

<p class="Grammar">operator-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">constructor-modifier:<br>
...<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span></p>

<p class="Grammar">destructor-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; destructor-body<br>
attributes<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">~</span></span>&nbsp;&nbsp;
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">(</span></span>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">)</span></span>&nbsp;&nbsp;&nbsp; destructor-body</p>

<p class="Grammar">static-constructor-modifiers:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>
<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">static</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span><sub>opt</sub>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">extern</span></span><sub>opt</sub></p>

<p class="Grammar">embedded-statement:<br>
...<br>
unsafe-statement <br>
fixed-statement</p>

<p class="Grammar">unsafe-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">unsafe</span></span>&nbsp;&nbsp;
block</p>

<p class="Grammar">type:<br>
...<br>
pointer-type</p>

<p class="Grammar">pointer-type:<br>
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">*</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">void</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span></p>

<p class="Grammar">unmanaged-type:<br>
type</p>

<p class="Grammar">primary-no-array-creation-expression:<br>
...<br>
pointer-member-access<br>
pointer-element-access<br>
sizeof-expression</p>

<p class="Grammar">unary-expression:<br>
...<br>
pointer-indirection-expression<br>
addressof-expression</p>

<p class="Grammar">pointer-indirection-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">*</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">pointer-member-access:<br>
primary-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">-&gt;</span></span>&nbsp;&nbsp; identifier</p>

<p class="Grammar">pointer-element-access:<br>
primary-no-array-creation-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">[</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">addressof-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;</span></span>&nbsp;&nbsp;
unary-expression</p>

<p class="Grammar">sizeof-expression:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">sizeof</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">)</span></span></p>

<p class="Grammar">fixed-statement:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">fixed</span></span>&nbsp;&nbsp;
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">(</span></span>&nbsp;&nbsp;
pointer-type&nbsp;&nbsp; fixed-pointer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">)</span></span>&nbsp;&nbsp; embedded-statement</p>

<p class="Grammar">fixed-pointer-declarators:<br>
fixed-pointer-declarator<br>
fixed-pointer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;
font-style:normal">,</span></span>&nbsp;&nbsp; fixed-pointer-declarator</p>

<p class="Grammar">fixed-pointer-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">=</span></span>&nbsp;&nbsp; fixed-pointer-initializer</p>

<p class="Grammar">fixed-pointer-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">&amp;</span></span>&nbsp;&nbsp;
variable-reference<br>
expression</p>

<p class="Grammar">struct-member-declaration:<br>
…<br>
fixed-size-buffer-declaration</p>

<p class="Grammar">fixed-size-buffer-declaration:<br>
attributes<sub>opt</sub>&nbsp;&nbsp; fixed-size-buffer-modifiers<sub>opt</sub>&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">fixed</span></span>&nbsp;&nbsp;
buffer-element-type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fixed-size-buffer-declarators&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">;</span></span></p>

<p class="Grammar">fixed-size-buffer-modifiers:<br>
fixed-size-buffer-modifier<br>
fixed-size-buffer-modifier&nbsp;&nbsp; fixed-size-buffer-modifiers</p>

<p class="Grammar">fixed-size-buffer-modifier:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">new</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">public</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">protected<br>
internal</span></span><br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">private<br>
unsafe</span></span></p>

<p class="Grammar">buffer-element-type:<br>
type</p>

<p class="Grammar">fixed-size-buffer-declarators:<br>
fixed-size-buffer-declarator<br>
fixed-size-buffer-declarator&nbsp;&nbsp; fixed-size-buffer-declarators</p>

<p class="Grammar">fixed-size-buffer-declarator:<br>
identifier&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; constant-expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

<p class="Grammar">local-variable-initializer:<br>
…<br>
stackalloc-initializer</p>

<p class="Grammar">stackalloc-initializer:<br>
<span class="Terminal"><span style="font-size:10.0pt;font-style:normal">stackalloc</span></span>&nbsp;&nbsp;
unmanaged-type&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:
normal">[</span></span>&nbsp;&nbsp; expression&nbsp;&nbsp; <span class="Terminal"><span style="font-size:10.0pt;font-style:normal">]</span></span></p>

</div>

<span style="font-size:11.0pt;font-family:&quot;Times New Roman&quot;,&quot;serif&quot;"><br clear="all" style="page-break-before:right">
</span>

<div class="Section20">

<p class="Appendix1"><a name="_Toc251613518">C. References</a></p>

<p class="MsoNormal">Unicode Consortium. <em>The Unicode Standard, Version 3.0</em>.
Addison-Wesley, Reading, Massachusetts, 2000, ISBN 0-201-616335-5.</p>

<p class="MsoNormal">IEEE. <em>IEEE Standard for Binary Floating-Point Arithmetic</em>.
ANSI/IEEE Standard 754-1985. Available from <a href="http://www.ieee.org"><span style="color:windowtext;text-decoration:none">http://www.ieee.org</span></a>.</p>

<p class="MsoNormal">ISO/IEC. <em>C++</em>. ANSI/ISO/IEC 14882:1998.</p>

</div><div id="goog-gt-tt" class="skiptranslate" dir="ltr"><div style="padding: 8px;"><div><div class="logo"><img src="http://www.google.com/images/icons/product/translate-32.png" width="20" height="20"></div></div></div><div class="top" style="padding: 8px; float: left; width: 100%;"><h1 class="title gray">Исходный текст</h1></div><div class="middle" style="padding: 8px;"><div class="original-text"></div></div><div class="bottom" style="padding: 8px;"><div class="activity-links"><span class="activity-link">Предложить лучший вариант перевода</span><span class="activity-link"></span></div><div class="started-activity-container"><hr style="color: #CCC; background-color: #CCC; height: 1px; border: none;"><div class="activity-root"></div></div></div><div class="status-message" style="display: none;"></div></div>




</body></html>